ID,Owner,Name,Description,URL,Size,Stars,Watch Count,Fork Count,Issues Open,Subscriber Count,Total Files,Layer Count,Avg Imports per File,Has Domain,Has Application,Has Interfaces,Has Infrastructure,Architecture Score,Avg Cyclomatic,Avg Volume,Avg Difficulty,Avg Effort
475154802,ganeshnikumbh,cqrs-poc,,https://github.com/ganeshnikumbh/cqrs-poc,10,0,0,0,0,1,4,3,4.5,0,0,1,0,1,2.75,8.860335893412778,0.5416666666666666,4.930167946706389
728505766,DilsadChowdhury,Neural-Network-Structure,"This neural network structure represents a basic architecture with an input layer, a hidden layer, and an output layer.There are seven nodes representing emotional states: 'Neutral', 'Anger', 'Disgust', 'Fear', 'Sadness', 'Surprise', and 'Happiness'. These nodes correspond to the predicted emotional categories.",https://github.com/DilsadChowdhury/Neural-Network-Structure,2,0,0,0,0,1,1,0,1.0,0,0,0,0,0,0.0,16.0,2.5,40.0
339078138,VictorErmakov,WMCheckout,Checkout system using clean architecture principles,https://github.com/VictorErmakov/WMCheckout,33,0,0,0,0,1,24,3,3.0416666666666665,1,1,0,1,3,8.833333333333334,28.8156726534975,0.7661711423699916,156.32341812896422
956088994,aniketkadukar1,fastapi-clean-architecture,,https://github.com/aniketkadukar1/fastapi-clean-architecture,6,0,0,0,0,1,13,2,2.923076923076923,1,0,0,0,1,1.5384615384615383,1.437419697806742,0.141025641025641,1.611759116167741
963236916,firdavsDev,fast-api-ddd-example,FastAPI Domain-driven design pet todo project,https://github.com/firdavsDev/fast-api-ddd-example,12,0,0,0,0,1,31,3,1.967741935483871,1,1,1,1,4,2.4838709677419355,3.6598108876318256,0.1989247311827957,4.836332863636013
728922397,billowdev,rest-api-python-django-clean-architecture,python-django-rest-api-clean-architecture,https://github.com/billowdev/rest-api-python-django-clean-architecture,46,0,0,0,0,1,34,3,1.9411764705882355,1,0,0,0,1,6.323529411764706,3.47640045627586,0.2235294117647058,3.272623360643083
659354023,koushamad,python-flask-hexagonal-architecture,,https://github.com/koushamad/python-flask-hexagonal-architecture,1111,0,0,0,6,1,25,4,2.16,1,1,0,1,3,5.8,31.102185501657008,0.6674409937888198,61.666807351206735
754118600,dclimber,python-ddd-hexagonal-architecture-example,,https://github.com/dclimber/python-ddd-hexagonal-architecture-example,8,0,0,0,0,1,35,5,1.2285714285714286,1,1,1,1,4,1.6,0.3288507144093411,0.0428571428571428,0.1644253572046705
931354278,safimuhammad,Genesis-Workflows,"Distributed backend platform for autonomous AI agent task processing. Built with FastAPI, RabbitMQ, and Celery, featuring microservice architecture, real-time message dispatching, and workflow orchestration. Includes JWT auth and PostgreSQL integration.",https://github.com/safimuhammad/Genesis-Workflows,211,2,2,0,0,1,95,5,3.5473684210526315,1,0,0,0,1,6.568421052631579,25.04686341113249,0.5187213038144751,69.62204616427734
515646137,milovanovicjana,Shop-and-Warehouse-Manager,Distributed Flask application with microservice architecture running in virtual Docker containers,https://github.com/milovanovicjana/Shop-and-Warehouse-Manager,57,0,0,0,0,1,34,3,6.0588235294117645,0,0,0,0,0,6.352941176470588,168.73562120699572,1.967508625743802,1278.6033292409109
697339333,JorgitoR,python-hexagonal-architecture,Hexagonal architecture for Python,https://github.com/JorgitoR/python-hexagonal-architecture,20,2,2,0,0,1,15,3,2.066666666666667,1,0,1,1,3,5.133333333333334,5.018947501009619,0.1555555555555555,11.710877502355778
700563162,abhishek-1131,NumPyCNN-OCR,"Minimal CNN for OCR from scratch in NumPy, covering architecture, training, backprop, and layer-wise feature visualization.",https://github.com/abhishek-1131/NumPyCNN-OCR,13138,0,0,0,0,1,13,1,3.4615384615384617,0,0,0,0,0,5.615384615384615,440.92993090326615,4.202511004211115,2807.247619251112
423136726,FabienArcellier,fake-store,"With fake-store, the implementation of a hexagonal architecture in python whose repositories are testable becomes very simple",https://github.com/FabienArcellier/fake-store,47,1,1,0,0,1,19,2,2.6842105263157894,0,0,0,0,0,3.3684210526315788,5.411238817269742,0.2719298245614035,6.923994409520501
128616589,cdpace,EventSourcingClient,,https://github.com/cdpace/EventSourcingClient,5,0,0,0,0,1,13,3,1.1538461538461535,0,0,0,0,0,0.2307692307692307,0.3657605770894976,0.0384615384615384,0.1828802885447488
207852633,shimakaze-git,python-clean-architecture,python-clean-architecture sample code,https://github.com/shimakaze-git/python-clean-architecture,33,0,0,0,0,1,13,3,2.4615384615384617,1,1,1,0,3,3.4615384615384617,2.351955750699916,0.1794871794871795,2.9968493280896022
939462859,Bengiilhan,library-management-ddd,This project is a Library Management System built using Domain-Driven Design (DDD) principles,https://github.com/Bengiilhan/library-management-ddd,5808,0,0,0,0,1,7,1,3.4285714285714284,1,0,0,1,2,13.142857142857142,1.870676786435442,0.2142857142857142,0.935338393217721
734147558,jacksparke254,emnist_cnn,Using the different combinations of the Convolutional Neural Network (CNN) deep learning architecture and a Multi-Layer Perceptron Model (MLP) to determine the most effective hand-drawn character recognition model.,https://github.com/jacksparke254/emnist_cnn,6,0,0,0,0,1,2,0,9.5,0,0,0,0,0,18.0,384.0456620199535,2.3035714285714284,1769.3532285919284
847317162,ciioprof0,hexarch_template,"Template for building Hexagonal Architecture applications with Flask, ML models, and testing, featuring clean separation of concerns and easy integration.",https://github.com/ciioprof0/hexarch_template,49,0,0,0,0,1,28,5,0.4642857142857143,1,0,1,1,3,1.0357142857142858,1.164929451457565,0.0535714285714285,0.5824647257287825
591416816,GauterHeart,PythonArch,Python microservices architecture,https://github.com/GauterHeart/PythonArch,141,0,0,0,0,1,68,5,2.411764705882353,1,0,0,0,1,3.823529411764706,3.610752705528748,0.1911764705882352,6.538900696998478
588045532,yyywang,flask-backend-clean-architecture,flask-backend-clean-architecture,https://github.com/yyywang/flask-backend-clean-architecture,19,3,3,0,0,1,20,3,1.55,1,0,1,0,2,4.15,40.34512273429937,0.6895658263305322,228.3702725112641
235451233,airavata-courses,IU-Witcher-2020,A weather prediction distributed-system built using microservice architecture,https://github.com/airavata-courses/IU-Witcher-2020,12293,2,2,1,17,2,4,3,9.75,1,0,1,0,2,8.25,218.3968914869808,1.946927696927697,497.3862260485506
929102611,veh225lab,hexagonal_architecture,,https://github.com/veh225lab/hexagonal_architecture,3,0,0,0,0,1,10,3,1.0,1,1,0,1,3,0.2,0.9509775004326938,0.1,0.4754887502163469
944264642,xturus138,CleanArc_RadityaAryabudhiRamadhan,Build a simple backend API using Flask to implement  Clean Architecture with python,https://github.com/xturus138/CleanArc_RadityaAryabudhiRamadhan,14203,1,1,0,0,1,9,2,1.8888888888888888,1,1,1,0,3,2.4444444444444446,0.5283208335737188,0.0555555555555555,0.2641604167868594
902410851,MubahsirHassan,Automated-Data-Preprocessing-and-ML-Platform,"This is our Flask-based, Microservices Architecture platform that brings automation to data preprocessing and machine learning, simplifying your data science journey.",https://github.com/MubahsirHassan/Automated-Data-Preprocessing-and-ML-Platform,508,0,0,0,0,1,9,2,8.666666666666666,0,0,0,0,0,12.88888888888889,333.6436592838936,1.7649172703080562,839.9980341774221
538184035,mapeveri,python-ddd-cqrs,Api Rest with Flask + Hexagonal Architecture + DDD & CQRS.,https://github.com/mapeveri/python-ddd-cqrs,249,9,9,2,1,3,178,7,3.466292134831461,1,1,1,1,4,3.3820224719101124,4.788714977404606,0.1305926791820783,8.00110650497458
682209603,Anonymous747,video_store,Attempt to use Kubernates with microservices architecture,https://github.com/Anonymous747/video_store,13,0,0,0,0,1,11,4,3.0,0,0,0,1,1,2.8181818181818183,18.00720244026555,0.86756993006993,46.50434854631048
923192028,marcomelloni,iot-microservice-architecture-production-line,IoT Microservices Architecture designed to monitor and manage a production line consisting of multiple robotic arms,https://github.com/marcomelloni/iot-microservice-architecture-production-line,2434,0,0,0,0,2,29,3,2.4482758620689653,0,0,0,1,1,7.172413793103448,12.386288242332173,0.5573891625615763,18.667846644203877
855902965,idaFallah,Efficient-Image-Compression-with-AutoEncoders-A-Deep-Learning-Approach-Using-MNIST,"Developed a deep learning model leveraging AutoEncoders to achieve efficient image compression on the MNIST dataset, focusing on dimensionality reduction and reconstruction accuracy through a multi-layer encoding-decoding architecture",https://github.com/idaFallah/Efficient-Image-Compression-with-AutoEncoders-A-Deep-Learning-Approach-Using-MNIST,2,0,0,0,0,1,1,0,6.0,0,0,0,0,0,0.0,187.29612798276648,3.9705882352941178,743.675802284514
491645369,Rkthompson,python-architecture,Sample project featuring microservices in python,https://github.com/Rkthompson/python-architecture,20,0,0,0,0,1,10,0,3.1,0,0,0,0,0,11.1,64.98034632415391,1.3794683257918554,162.260611888787
933120224,tob-90,ics-email-reminder,"This Python script fetches events from one or more iCalendar (ICS) sources and sends reminder emails. It was specifically developed for Radicale, but it also works with other services such as Google Calendar.",https://github.com/tob-90/ics-email-reminder,76,0,0,0,0,1,1,0,12.0,0,0,0,0,0,89.0,1547.353060338239,10.08695652173913,15608.083043411802
918681206,chasesagar,fastapi-layered,"A public FastAPI project showcasing a layered architecture with a Schema/DTL Layer for API requests, a Business Layer for core logic, and a DAO Layer supporting DynamoDB, MongoDB, and SQL. Built with principles of Layered Architecture and Clean Design, it's a flexible, scalable boilerplate for production apps.",https://github.com/chasesagar/fastapi-layered,21,0,0,0,0,1,48,4,1.375,1,1,0,0,2,2.083333333333333,6.868484518213329,0.2965277777777778,12.788127287559698
378617429,ayoubassis,Deep-Learning-Blocks,A library with many customized PyTorch layers and architectures,https://github.com/ayoubassis/Deep-Learning-Blocks,6613,3,3,0,0,1,45,4,2.844444444444445,0,0,0,0,0,7.8,122.45404070237429,2.2798582470637734,702.5860316351743
954795940,PatrickErickson4,FullyModularNumpyArtificialNeuralNetwork,"A custom implemented numpy-restricted, fully modular dense neural network architecture with options for multiple activations, layers, nodes, and ADAM optimization. Also includes .ipynb files to reproduce and learn the API. Neural Network files can be found under NeuralNetScripts directory.",https://github.com/PatrickErickson4/FullyModularNumpyArtificialNeuralNetwork,7693,1,1,0,0,1,4,1,2.75,0,0,0,0,0,32.0,956.0412696820052,9.909357578397213,10073.831237462698
343082761,vimtor,python-ddd-example,Hexagonal Architecture + DDD + CQRS in Python,https://github.com/vimtor/python-ddd-example,10,4,4,0,0,0,29,5,2.6206896551724137,1,1,1,1,4,3.1724137931034484,0.5348198277354116,0.0344827586206896,0.5348198277354116
412019540,jackaduma,SpeakerRecognition-ResNet-GhostVLAD,"Utterance-level Aggregation For Speaker Recognition In The Wild, using a ""thin-ResNet"" trunk architecture, and a dictionary-based NetVLAD or GhostVLAD layer to aggregate features across time, that can be trained end-to-end",https://github.com/jackaduma/SpeakerRecognition-ResNet-GhostVLAD,5,7,7,0,0,2,4,1,3.0,1,0,0,0,1,5.75,45.82056280803352,1.5944444444444443,194.6232849698516
600225950,raulc27,myapp-ddd-ryax,"DDD (Domain Driven Design), python, ryax tech (https://ryax.tech) example",https://github.com/raulc27/myapp-ddd-ryax,19,0,0,0,0,1,9,2,4.111111111111111,1,1,1,1,4,3.111111111111111,6.136407235027625,0.2777777777777778,7.128337955709477
524634100,sergiomauz,Clean-Architecture-Python-Django,,https://github.com/sergiomauz/Clean-Architecture-Python-Django,62,0,0,0,0,1,79,7,2.392405063291139,1,1,1,0,3,2.088607594936709,9.957920213425128,0.3741176916902903,33.7434578458927
622137717,ilhamnyto,sanic-fw,Build REST API using Sanic Framework With Clean Architecture,https://github.com/ilhamnyto/sanic-fw,59,0,0,0,0,1,24,3,4.375,1,1,1,1,4,8.041666666666666,38.00415212701423,0.5924768518518518,82.06486938443621
606091608,Gaettaca,eauction-microservices,A small web application for electronic auctions build with FastAPI using a microservice architecture.,https://github.com/Gaettaca/eauction-microservices,25,0,0,0,0,1,14,4,3.2857142857142856,0,0,1,0,1,3.7857142857142856,1.4474758933207432,0.1071428571428571,1.2776584825291908
91356950,adilevin,event-sourcing-example,,https://github.com/adilevin/event-sourcing-example,48,0,0,0,0,1,25,0,1.76,0,0,0,0,0,6.8,15.940781232299685,0.6976190476190476,30.6942361295103
862488502,anqi-novo,clean_architecture_chatbot,,https://github.com/anqi-novo/clean_architecture_chatbot,12,0,0,0,0,1,1,0,4.0,0,0,0,0,0,1.0,36.541209043760986,1.5,54.81181356564148
786210334,GuiAnacleto,CleanArcStructureProject,"Template for a Python project following Clean Architecture principles. Separates business logic from infrastructure. Includes structured directories (app, config, tests) and __init__.py files for modularity.",https://github.com/GuiAnacleto/CleanArcStructureProject,16,0,0,0,0,1,24,3,1.1666666666666667,1,1,1,1,4,5.125,23.406693592082156,0.4594988344988345,84.11072419472133
647845559,bibekme,Django-PubSub-Microservices,Two standalone Django projects demonstrating the use of Redis for pub/sub pattern in microservice architecture [Proof of concept],https://github.com/bibekme/Django-PubSub-Microservices,98,8,8,1,0,1,57,4,1.4736842105263157,1,0,0,0,1,1.1754385964912282,0.9302272706662196,0.0526315789473684,1.1934150287304357
369202772,Sruinard,clean_architecture,Practical implementation of Robert C. Martin's Clean architecture.,https://github.com/Sruinard/clean_architecture,1277,0,0,0,0,1,15,3,2.0,1,1,1,1,4,3.1333333333333333,0.3169925001442312,0.0333333333333333,0.1584962500721156
741157810,ambarjobs,event_driven_monolith,"This project is a proof of concept (PoC) to study the viability, strengths, weaknesses and challenges of using an event-driven, services oriented architecture based on publish-subscribe pattern, but using a `monolith` instead of `microservices`.",https://github.com/ambarjobs/event_driven_monolith,2160,1,1,0,0,1,20,2,9.85,0,0,0,0,0,73.7,966.8724675107628,2.3886862848896104,4453.096252487281
434209855,unifiedstreaming,remix-live2live-event,POC for delayed live2live event using Remix nPVR & VOD2Live to create a virtual channel from a live source,https://github.com/unifiedstreaming/remix-live2live-event,497,0,0,1,0,0,2,3,8.5,0,0,0,0,0,100.5,530.9465903005278,6.212962962962963,3114.768300021681
488221464,emarbo,py-cqrs-message-bus,Small library to apply the message bus pattern in a Python project (CQRS + Events),https://github.com/emarbo/py-cqrs-message-bus,192,1,1,0,0,1,44,4,3.522727272727273,0,0,0,0,0,7.227272727272727,21.642505348607777,0.4190900009081826,41.76675848723748
251093604,gutscdav000,DebtBlitz-algorithm,avalanche and snowball debt repayments written for a microservice architecture.,https://github.com/gutscdav000/DebtBlitz-algorithm,55,0,0,0,0,1,14,2,3.857142857142857,0,0,0,0,0,11.5,141.62457797021622,3.2042859255249083,849.8596225073697
645385269,jgrove90,ufo-deltalake,"🛸 This project showcases an Extract, Load, Transform (ELT) pipeline built with Python, Apache Spark, Delta Lake, and Docker. The objective of the project is to scrape UFO sighting data from NUFORC and process it through the Medallion architecture to create a star schema in the Gold layer that is ready for analysis.",https://github.com/jgrove90/ufo-deltalake,1616,4,4,1,0,1,10,2,4.6,0,0,0,0,0,8.0,24.7483489081566,1.077777777777778,57.21240880890837
773471929,apakbin,UNET-Implementation,"A streamlined implementation of the U-Net architecture using PyTorch 2.2.1, featuring Conv2d layers and a custom convolution layer designed to reduce the number of parameters in the convolution layer.",https://github.com/apakbin/UNET-Implementation,46,0,0,0,0,1,2,0,3.0,0,0,0,0,0,24.0,356.282500982891,8.145454545454545,3263.2567464285576
318196785,Aayushpatel007,Doc_Profiler,DocProfiler- an open source platform which uses microservice architecture(Docker containers) and asynchronous processing capabilities to run multiple Natural Language Processing tasks and extract important features from text.,https://github.com/Aayushpatel007/Doc_Profiler,477,1,1,0,0,1,8,1,7.75,0,0,0,0,0,8.75,71.62073611248472,1.0478896103896105,118.87068027639964
634327340,Ketsuppimakkara,Distributed-Systems,Microservices architecture demonstration with Python using Sockets,https://github.com/Ketsuppimakkara/Distributed-Systems,4,0,0,0,0,1,5,1,3.4,0,0,0,1,1,15.8,161.0518340689636,1.6103962703962704,261.93328380578816
883935457,simuel,DjangoHexTemplate,"DjangoHexTemplate is a Django application template designed for projects that follow Hexagonal Architecture or Clean Architecture principles. This template simplifies the creation of applications with a highly modular and decoupled design, enabling better maintainability and scalability of the project.",https://github.com/simuel/DjangoHexTemplate,40,1,1,1,0,1,27,2,0.037037037037037,1,1,0,1,3,0.0,0.0,0.0,0.0
925787263,imansadati,Event_management_system,"This is an event management app based on microservice architecture, Django framework, and third-party services.",https://github.com/imansadati/Event_management_system,111,0,0,0,0,1,22,5,1.8636363636363635,1,1,0,0,2,2.272727272727273,2.653891353512827,0.1439393939393939,1.6817102329936136
492896797,maxipavlovic,dj-cqrs-rql-mongo,,https://github.com/maxipavlovic/dj-cqrs-rql-mongo,10,1,1,0,0,1,14,2,2.142857142857143,0,0,1,0,1,1.2142857142857142,0.6792696431662099,0.0714285714285714,0.3396348215831049
958593106,Chris-May,es_experiment,Experimenting with event sourcing and dynamic consistency boundaries in Python,https://github.com/Chris-May/es_experiment,8,0,0,0,0,1,2,2,2.0,0,0,0,0,0,14.5,122.09910819000817,1.3793103448275863,336.82512604140186
825507471,BSAkash,HanumaGPT,"Enhanced nanoGPT architecture with optimized key/query vector sizes, sliding window attention, register tokens, advanced MLP layers, and alternative Softmax approximations, improving efficiency and performance",https://github.com/BSAkash/HanumaGPT,18,1,1,0,0,1,4,0,11.25,0,0,0,0,0,41.25,976.4017930746656,8.594824831185237,12447.764955969056
863140939,LesterEvSe,Microservice-Architecture,,https://github.com/LesterEvSe/Microservice-Architecture,124,0,0,0,0,1,19,2,2.6842105263157894,1,0,0,0,1,14.157894736842104,69.56395243538725,0.8232386521860205,130.9673525890067
870416778,EdwinPuertas,CleanArchitecture,,https://github.com/EdwinPuertas/CleanArchitecture,5,0,0,0,0,1,9,2,2.0,1,1,1,1,4,6.111111111111111,14.89955233995452,0.8703703703703703,30.563730883716737
454355306,luru-eb,grpc-todo-list,From traditional layered architecture to vertical slices architecture,https://github.com/luru-eb/grpc-todo-list,42,6,6,2,0,1,25,3,2.92,0,1,0,0,1,3.32,1.1278492430325833,0.08,0.5639246215162916
828571500,iNTENSY,fastapi-ca-template,Данный шаблон является базовой структурой проекта под FastAPI с использованием принципов Clean Architecture.,https://github.com/iNTENSY/fastapi-ca-template,169,8,8,0,0,1,131,5,3.015267175572519,1,1,1,1,4,4.183206106870229,3.870295794094059,0.1709923664122137,4.885383627458811
419977869,ArnabChatterjee1996,MS,A small microservice architecture based application for students,https://github.com/ArnabChatterjee1996/MS,44,0,0,0,0,1,43,3,2.0232558139534884,0,0,0,0,0,3.511627906976744,18.04287918749597,0.2235049833887043,77.82001550226961
600871431,ryfranklin,nba_datascience_clean_architecture,,https://github.com/ryfranklin/nba_datascience_clean_architecture,8,0,0,0,0,1,18,2,1.6111111111111112,0,1,0,1,2,2.833333333333333,0.7924812503605781,0.0833333333333333,0.3962406251802891
248653826,aws-samples,cqrs-lab-on-aws,CQRS Lab on AWS,https://github.com/aws-samples/cqrs-lab-on-aws,4692,5,5,1,2,23,13,3,3.1538461538461537,0,0,0,0,0,9.615384615384617,261.1254104904827,1.1409163195510357,1051.1867428346145
117273141,shilpar27,Label-embeddings-in-image-classification,"Convolutional Neural Networks (CNNs) are being widely used for various tasks in Computer Vision. We focus on the task of image classification particularly using CNNs with more focus on the relation or similarity between class labels. The similarity between labels is judged using label word embeddings and incorporated into the loss layer. We propose that shallower networks be learnt with more complex and structured losses, in order to gain from shorter training time and equivalent complexity. We train two variants of CNNs with multiple architectures , all limited to a maximum of ten convolution layers to obtain an accuracy of 93.27% on the Fashion-MNIST dataset and 86.40% on the CIFAR 10 dataset. We further probe the adversarial robustness of the model as well the classspecific behavior by visualizing the class confusion matrix.We also show some preliminary results towards extending a trained variant to zero-shot learning.",https://github.com/shilpar27/Label-embeddings-in-image-classification,13,25,25,9,0,3,6,0,14.666666666666666,0,0,0,0,0,1.3333333333333333,95.86041983028224,3.232444638694639,323.9067795720775
786910916,mavboas,hexagonal-architecture-python,,https://github.com/mavboas/hexagonal-architecture-python,72,0,0,0,0,1,35,6,1.5142857142857142,1,1,1,1,4,2.3142857142857145,3.620471224930928,0.1766233766233766,5.189442283472312
76326731,outdoorpet,compare_catalogues,GUI (written with PyQt) for comparing event catalogues from different sources (via obspy FDSN client).,https://github.com/outdoorpet/compare_catalogues,57,0,0,0,0,1,2,0,2.0,0,0,0,0,0,22.0,656.643092377827,5.477528089887641,7193.561967060465
683205150,marcosjacinto,python-clean-arch,This repository represents a simplified example for educational purposes regarding the use of Clean Architecture in Python,https://github.com/marcosjacinto/python-clean-arch,17,1,1,0,0,1,7,1,2.4285714285714284,0,0,0,0,0,10.857142857142858,39.26591598241651,0.5054945054945055,22.052366508500096
142416252,pranvendra,tinyUrl,service to create tinyUrl in ROR framework using microservice architecture,https://github.com/pranvendra/tinyUrl,17,0,0,0,0,1,15,4,1.6666666666666667,0,0,0,0,0,0.8666666666666667,3.6858184066133566,0.1,1.8429092033066783
882250972,AnisulMahmud,Nginx-Docker-Microservices,"This project sets up a Dockerized microservices architecture using NGINX as a gateway for load balancing and basic authentication. It includes multiple service instances and NGINX configuration to manage secure, balanced access.",https://github.com/AnisulMahmud/Nginx-Docker-Microservices,770,0,0,0,0,1,4,2,3.25,0,0,0,0,0,9.25,111.13710549040044,1.7960526315789471,578.882288783555
489695193,fachter,fast-api-clean-architecture,A REST Api template for python with FastApi and JWT authentication with clean architecture,https://github.com/fachter/fast-api-clean-architecture,26,3,3,0,0,1,18,2,2.4444444444444446,0,1,0,1,2,3.388888888888889,4.339871662825923,0.175,6.425441507275218
413255998,AnandRamaka,Deepfake-Detector,This project trains a model that can detect deepfakes using an 18 layer ResNet architecture. It includes a pretrained model that can detect deepfakes images at a 70% accuracy.,https://github.com/AnandRamaka/Deepfake-Detector,9,2,2,0,0,1,1,0,20.0,0,0,0,0,0,0.0,38.03910001730775,0.5,19.01955000865388
229022586,hafizpatwary,microservices-country-quiz,An application that takes advantage of micro-service architecture and containerisation,https://github.com/hafizpatwary/microservices-country-quiz,11409,0,0,0,4,2,22,4,3.1818181818181817,0,1,0,0,1,4.227272727272728,11.942998088456193,0.4834710743801653,26.45780737097777
916448364,TommyL1,LeNet5,"This project involves implementing LeNet5, a CNN developed by Yann LeCun for recognizing handwritten digit images. LeNet5 formalized a deep-CNN architecture, including components such as convolutional layers, pooling layers, and fully connected layers. ",https://github.com/TommyL1/LeNet5,4338,0,0,0,0,1,8,0,7.5,0,0,0,0,0,17.0,268.80656306315103,3.698426773455378,2008.5182556223745
965487349,DhanaVazanth,Microservices-using-Docker,"A modular Docker-based microservices architecture featuring a PostgreSQL database, a Streamlit-powered frontend app, and seamless orchestration via Docker Compose. This project demonstrates scalable service isolation, containerized development workflows, and real-time interaction across independently deployed components using Docker CLI and custom ",https://github.com/DhanaVazanth/Microservices-using-Docker,5,0,0,0,0,1,1,1,2.0,0,0,0,0,0,0.0,0.0,0.0,0.0
885814302,dev-nihalsharma,blogapp-microservices,A basic Blog App backed To demonstrate how Microservices Architecture work,https://github.com/dev-nihalsharma/blogapp-microservices,4414,0,0,0,0,1,24,3,2.333333333333333,0,0,0,0,0,1.8333333333333333,2.1113245985334834,0.1354166666666666,1.5964633707525764
212304386,prashanthgpr,Web-Scraping-of-Earth-Quick-Data-Set,"Tools Use: Python, Source: Jigsaw Academy's Data Science Course Using python to query data from web to access from https://earthquake.usgs.gov ). This portal has a public API that I used to access data for all seismic events for a given duration of time. Web API.",https://github.com/prashanthgpr/Web-Scraping-of-Earth-Quick-Data-Set,1,0,0,0,0,1,1,0,2.0,0,0,0,0,0,0.0,4.754887502163469,0.5,2.3774437510817346
529465744,scottming,miro_cqrs_generator,,https://github.com/scottming/miro_cqrs_generator,4,0,0,0,0,2,4,1,1.0,0,0,0,0,0,3.75,7.9387218755408675,0.575,12.744360937770434
843463933,rohanchakraborty,r-event,Event Driven Architecture - Open Source Project,https://github.com/rohanchakraborty/r-event,5803,0,0,0,0,1,13,1,1.0769230769230769,0,0,0,0,0,2.923076923076923,1.2888375001664207,0.0897435897435897,0.7982649039293642
777086662,opielapatryk,Flask_Menu_API,Restaurant Menu Rest API made with Flask | Clean Architecture,https://github.com/opielapatryk/Flask_Menu_API,270,0,0,0,0,1,46,3,2.130434782608696,1,1,1,0,3,5.260869565217392,23.143028102527204,0.4803593678273985,66.62389832760243
913616283,arivictor,domain-driven-design-example,,https://github.com/arivictor/domain-driven-design-example,15,0,0,0,0,1,17,2,2.9411764705882355,1,1,1,1,4,3.5294117647058822,2.1415957563713643,0.1764705882352941,3.37085180660585
140081384,projectshift,shift-event,Simple event store for event-sourced systems,https://github.com/projectshift/shift-event,76,0,0,0,2,3,26,3,3.576923076923077,0,0,1,0,1,8.26923076923077,21.238618326691377,0.49004884004884,37.04563797135764
952255130,saltchang,python-clean-arch,Python Clean Architecture based on Uncle Bob's Clean Architecture,https://github.com/saltchang/python-clean-arch,52,2,2,0,0,1,41,4,3.317073170731707,1,0,1,0,2,7.341463414634147,41.31884270731853,0.6710075179596167,119.71550678223798
963344593,Walix74200,urban-farm-monitoring,"Projet de simulation d’une ferme urbaine connectée, basé sur une architecture cloud microservices. Le système collecte en temps réel des données de capteurs (température, humidité), détecte les anomalies, et permet la supervision des plantes via une interface web. Déploiement conteneurisé (Docker) et orchestré avec Kubernetes.",https://github.com/Walix74200/urban-farm-monitoring,32,2,2,0,0,1,14,3,4.214285714285714,0,0,0,0,0,4.0,12.731180271930928,0.8010204081632653,30.594384219570905
94602134,volgoweb,microservices_sandbox,My sandbox for getting experience in microservices (+ Domain Driven Design) architecture,https://github.com/volgoweb/microservices_sandbox,12,0,0,0,0,1,37,3,1.3243243243243243,1,0,1,1,3,3.4864864864864864,3.06336200900362,0.2297297297297297,1.9508641127268624
669325921,juniozguedes,fastapi_clean_arch,Clean architecture ultimate flask skeleton. Ready to deploy projects.,https://github.com/juniozguedes/fastapi_clean_arch,32,0,0,0,0,1,55,4,1.3818181818181818,1,1,1,1,4,2.2545454545454544,2.791995723271962,0.1181818181818181,2.106174365988379
603147504,omars44,meerkat,An opinionated Clean Architecture example in python ,https://github.com/omars44/meerkat,164,0,0,0,3,1,66,6,2.242424242424242,1,1,1,1,4,3.0454545454545454,3.0379904910416338,0.1401515151515151,3.589918988506497
865647249,asadali08527,document-based-gpt,"This is a project for a document-based GPT system that allows users to upload documents, and later query these documents. The solution is built using a microservice architecture, and employs a vector store (FAISS) for document embeddings, allowing fast retrieval of relevant content based on user queries.",https://github.com/asadali08527/document-based-gpt,76,1,1,0,0,1,37,5,2.027027027027027,1,1,1,0,3,2.216216216216216,5.542853653890475,0.2533783783783784,9.967054299462855
230187554,matthewzhaocc,microservices,A demo of a microservices architecture,https://github.com/matthewzhaocc/microservices,19,0,0,0,0,2,1,1,2.0,0,0,0,0,0,2.0,4.754887502163469,0.5,2.3774437510817346
628503784,Arsh0023,convert3,Created a video to mp3 converter using the microservices architecture.,https://github.com/Arsh0023/convert3,17,0,0,0,0,1,12,5,3.083333333333333,0,0,0,1,1,3.083333333333333,15.511350660632845,0.6858974358974358,35.46981048463186
777245511,gabrielgullon,py-clean-architecture,,https://github.com/gabrielgullon/py-clean-architecture,7,0,0,0,0,1,4,1,4.0,1,0,1,0,2,8.5,10.75488750216347,0.5,21.50977500432694
865049755,sruthic22,Volunter-Network_Platform,Designed and built a scalable ETL pipeline using AWS Glue and Redshift for centralizing volunteer-related data from multiple sources. Leveraged AWS Lambda for real-time synchronization and deployed event-driven architectures to ensure data consistency across the platform.,https://github.com/sruthic22/Volunter-Network_Platform,11,0,0,0,0,1,4,0,2.0,0,0,0,0,0,3.5,6.254887502163469,0.5,5.066165626622602
695298628,Mohamed2Sherif,TODO_APP,"A  todo app back end for companies to manage their tasks efficiently , the app  architecture is Modular Monolith and following the Clean Architecture principles",https://github.com/Mohamed2Sherif/TODO_APP,42,0,0,0,0,1,36,3,1.8888888888888888,0,0,0,0,0,1.9444444444444444,3.610432024683382,0.125,2.936990685179203
900720852,poovarasan123,Android-Automation,This script automates the setup of a Clean Architecture folder structure for Android projects.,https://github.com/poovarasan123/Android-Automation,12,0,0,0,0,1,1,0,4.0,0,0,0,0,0,40.0,257.2641000872811,3.0357142857142856,780.9803038363891
897686344,TuanNS10,anemoi,"This is the source which is the micro services article. It contains the CQRS, EDA, Saga... Especially, I'd like to introduce the news: Attribute-based mapping approach!",https://github.com/TuanNS10/anemoi,9,0,0,0,0,1,36,3,1.4722222222222223,0,1,0,0,1,4.194444444444445,0.0,0.0,0.0
296624921,samed-mirzayev,Clean_architecture,,https://github.com/samed-mirzayev/Clean_architecture,27,0,0,0,0,1,26,3,1.2692307692307692,1,0,0,0,1,4.038461538461538,25.37152339726073,0.389792899408284,28.72839855087367
825113966,muneebxhasan,Event-Driven-Microservices-Architecture-Api,,https://github.com/muneebxhasan/Event-Driven-Microservices-Architecture-Api,444,0,0,0,0,1,86,5,3.9069767441860463,1,0,1,0,2,4.441860465116279,18.69707541006877,0.3820521647365282,34.91593846690486
665174391,pythoneda-shared-artifact,events,Events related to changes in source code (artifact scope),https://github.com/pythoneda-shared-artifact/events,122,0,0,0,0,1,23,4,3.4347826086956523,0,0,0,0,0,4.521739130434782,2.0238953569624347,0.0869565217391304,1.0119476784812174
436463919,illud,pynavt,"Pynavt is a cli tool to create clean architecture app for you including Fastapi, bcrypt and jwt.",https://github.com/illud/pynavt,21,1,1,1,0,1,3,1,1.3333333333333333,0,0,0,0,0,4.333333333333333,507.5205718042873,1.5564116675839297,1273.3077550712626
799931369,mongodb-partners,Microservice-api-lambda-MongoDBAtlas,Repository to demonstrate the MongoDB Atlas with API based Microservice Architecture in Lambda Applications,https://github.com/mongodb-partners/Microservice-api-lambda-MongoDBAtlas,17,1,1,1,1,1,2,2,2.0,0,0,0,0,0,7.0,38.854617040481465,1.5555555555555556,120.881030792609
123822008,mertsurucu,Global-Terrorist-Attacks,Global Terrorism Database (GTD) is an open-source database including information on terrorist events around the world from 1970 through 2016. Some portion of the attacks have not been attributed to a particular terrorist group.  Model that can predict what group may have been responsible for an incident. ,https://github.com/mertsurucu/Global-Terrorist-Attacks,4218,3,3,3,0,1,2,0,3.0,0,0,0,0,0,0.0,75.72172771726083,2.923076923076923,337.13265162148144
956549604,AzMoo,clean-arch-in-python,FastAPI microservice intended to demonstrate a Clean Architecture in modern Python,https://github.com/AzMoo/clean-arch-in-python,1317,1,1,0,0,1,7,1,3.7142857142857135,0,0,0,0,0,16.0,47.22737245263151,0.5618279569892473,53.80078721708579
663417747,RichieOrito,Microservices-Architecture,,https://github.com/RichieOrito/Microservices-Architecture,1,0,0,0,0,1,1,0,5.0,0,0,0,0,0,9.0,93.45440529575887,3.230769230769231,301.9296171093748
171028210,98HRITIKA,ANoevel-Debugger-on-windows-based-application,"To handle the error code it is an easy task. Like everything else errors can be encountered in codes, software and systems and to handle those errors at a small level is easier task for a skilleduser but when the code length is in millions of lines the problem aggravates. That’s where we need a tool that may point the user straight to the scene of incident.Debuggers provide a whole host of features and functionality that are useful when assessing software for defects. Most come with the ability to run, pause, or step a process;set breakpoints; manipulate registers and memory; and catch exceptions that occur inside the target process.   Here we introduce two types of debugger white box debugger and black box debugger. Most development platforms, or IDEs, contain a built-in debugger that enables developers to trace through their source code with a high degree of control. This is called white-box debugging. While these debuggers are useful during development, a reverse engineer  or bug hunter, rarely has the source code available and must employ black- box debuggers for tracing target applications. A black-box debugger assumes that the software under inspection is completely opaque to the hacker, and the only information available is in a disassembled format. It is important to differentiate two subclasses of black-box debuggers: user mode and kernel mode.   Some examples of debuggers are WinDbg, from Microsoft, and OllyDbg .The main use of the debugger is when a bug is found at any point through the course of execution of a program. So, a need some debugging event is important. These events are breakpoints hits, exception created by the ongoing program and if or any memory violations occurs.  As discussed in the previous slide that the kernel mode is the highest mode of privilege for any user; let us see how. At the kernel level (i.e. the 0th ring of an operating system) a debugger interacts with the registers of the system which is the core of any operation being performed.  States of various registers can be examined",https://github.com/98HRITIKA/ANoevel-Debugger-on-windows-based-application,18,1,1,1,0,1,3,0,1.0,0,0,0,0,0,4.666666666666667,27.4880405277088,0.5909090909090909,33.760035102890306
132683004,arunavkonwar,what-layers-learn,visualizing the layers of vgg16 architecture,https://github.com/arunavkonwar/what-layers-learn,2603,0,0,0,0,2,1,0,6.0,0,0,0,0,0,3.0,774.0,6.142857142857143,4754.571428571428
537681895,Larrygf02,cqrs-pattern-python,Implementing CQRS pattern with python,https://github.com/Larrygf02/cqrs-pattern-python,249,2,2,0,0,1,5,2,2.2,0,0,0,0,0,1.6,0.9509775004326938,0.1,0.4754887502163469
195166951,uetiko,flask_standar,It's just a flask-based structure that will try to implement DDD and cqrs,https://github.com/uetiko/flask_standar,8,0,0,0,1,0,17,6,1.0,0,1,0,1,2,1.9411764705882355,1.0992032983228026,0.0588235294117647,0.5496016491614013
841839727,lucasinveninato,glue-project-cine-pipeline,"glue-project-cine-pipeline uses AWS Glue and Apache Airflow to build a data pipeline for IMDb data. It features a layered architecture: Landing (raw data), Raw (replicated data), Processed (cleaned and transformed data), Analytical (optimized for queries), and Consumption (data for reporting).",https://github.com/lucasinveninato/glue-project-cine-pipeline,29,0,0,0,0,1,5,4,5.0,0,0,0,0,0,3.4,18.14218845829804,0.8,18.17373011387853
617933436,OscarGarciaPeinado,smart-city-hexagonal-ddd,Example python Fast Api Hexagonal architecture DDD,https://github.com/OscarGarciaPeinado/smart-city-hexagonal-ddd,10,0,0,0,0,1,41,5,2.0,1,1,0,0,2,2.5365853658536586,5.441817913352078,0.2233739837398373,16.982512461984943
354103573,egmartin1810,ddd-python-rest-mysql,"Proyecto que consiste en armar un servicio web que exponga un endpoint para leer un archivo, consultar una serie de APIs públicas y cargar una base de datos con los datos del archivo y las consultas a las APIs, construido con patrones de diseño, concurrencia y Domain Driven Design.",https://github.com/egmartin1810/ddd-python-rest-mysql,1120,0,0,0,0,1,39,8,1.2564102564102564,0,0,1,0,1,4.17948717948718,17.187441886087147,0.263014763014763,30.12942492446269
789782592,welcloud-io,wio-clean-serverless-architecture-with-athena,,https://github.com/welcloud-io/wio-clean-serverless-architecture-with-athena,7,0,0,0,0,1,5,1,2.2,0,0,0,0,0,3.0,6.203910001730774,0.4,6.203910001730774
717866681,cando-jo,microservices-architecture-docker-kubernetes,,https://github.com/cando-jo/microservices-architecture-docker-kubernetes,13017,0,0,0,0,1,1,3,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
825393952,Hassan271,mart-api,Online Imtiaz Mart API Using Event-Driven Microservices Architecture,https://github.com/Hassan271/mart-api,87,0,0,0,0,2,23,3,2.782608695652174,1,0,0,0,1,3.0,14.704493509129282,0.3152173913043478,23.60651537090356
783057378,davidrichards,fast_template,Build a FastAPI application using conventional Python and layered architecture.,https://github.com/davidrichards/fast_template,40,0,0,0,0,1,14,4,2.142857142857143,1,0,0,0,1,11.642857142857142,58.573779347993664,1.2989525355596785,109.7636152330892
910487471,pvfarooq,multi-framework-microservices,A straightforward e-commerce backend built with a microservices architecture using FastAPI and ExpressJS,https://github.com/pvfarooq/multi-framework-microservices,101,3,3,1,0,1,39,4,2.641025641025641,1,1,1,0,3,2.7948717948717947,6.512885895358377,0.2948005698005698,8.906689754406873
513467011,joekingsleyMukundi,platinumendv2,new version of plartinum end writers  in microservice architecture,https://github.com/joekingsleyMukundi/platinumendv2,3684,1,1,0,0,1,107,7,2.0841121495327104,1,0,1,0,2,2.6728971962616823,3.4482820887229213,0.1122162883845126,4.743796868126666
900122057,dkcamargox,webhooks,"This branch is dedicated to exploring, prototyping, and validating the use of webhooks in a microservices architecture.",https://github.com/dkcamargox/webhooks,18,1,1,0,0,1,11,3,4.818181818181818,0,1,0,0,1,12.636363636363637,10.219125823602404,0.6212121212121212,15.572901919946974
855315798,JavierGonzalezLopez,HexPythonCursorAI,Testing CursorAI to create a Flask application with hexagonal architecture,https://github.com/JavierGonzalezLopez/HexPythonCursorAI,2797,0,0,0,0,1,18,3,0.5555555555555556,1,1,1,1,4,1.1666666666666667,2.0252298620325884,0.1111111111111111,2.773684376262024
380855672,KlimDos,fastapi-vue-postgresql,A pet project to show how to build a PROPER microservice architecture.,https://github.com/KlimDos/fastapi-vue-postgresql,143,2,2,0,1,1,55,6,3.6,1,0,1,0,2,4.709090909090909,22.55962436060991,0.4827792622050994,42.18003041202987
379036113,ComplexHeart,py-sdk,Provide a set of useful classes and tools to ease the adoption of Domain-Driven Design into your Python project.,https://github.com/ComplexHeart/py-sdk,17,0,0,0,1,1,6,2,0.8333333333333334,1,0,0,0,1,4.333333333333333,29.51102336102763,0.8333333333333334,73.77755840256908
143163198,mamrhein,CAmD3,Component Architecture meets Domain Driven Design,https://github.com/mamrhein/CAmD3,426,0,0,0,0,1,63,4,4.285714285714286,1,0,0,1,2,24.285714285714285,117.53178231975906,1.6893453853997178,732.4072469591795
618007602,ffaraone,cqrscap,Django CQRS events capturer,https://github.com/ffaraone/cqrscap,31,2,2,1,0,1,6,1,3.8333333333333335,0,0,0,0,0,8.0,10.66236140850618,0.6388888888888888,12.266120783325894
626091945,canna88,file-sync,"A file synchronization script that monitors and updates a destination directory with files from a source directory, and logs events to a CSV file. Includes a Windows batch file for easy execution",https://github.com/canna88/file-sync,24,0,0,0,0,1,1,0,5.0,0,0,0,0,0,0.0,158.12342722003538,4.8,758.9924506561698
770062161,carlos-m-a,votings-hex-core,Votings application core based on hexagonal architecture.,https://github.com/carlos-m-a/votings-hex-core,1308,0,0,0,0,1,29,6,0.0,1,1,0,1,3,0.0,0.0,0.0,0.0
700081386,klyn3,System-Based-a-Microsservices-with-Serverless-Architecture,The main objective of this project is the study of microservices technologies and the implementation of a system based on microservices with serverless architecture for event management.,https://github.com/klyn3/System-Based-a-Microsservices-with-Serverless-Architecture,1996,1,1,0,0,1,8,1,3.875,0,0,0,0,0,8.625,25.727673749890695,1.0875,53.157827263793386
133710946,eacarras,test_eventsourcing_python,A simple program using event sourcing library,https://github.com/eacarras/test_eventsourcing_python,11155,0,0,0,0,0,1,0,6.0,0,0,0,0,0,4.0,183.9358278562653,3.2142857142857144,591.2223038237099
324816832,Raja-mishra1,microservices_with_python,"An e-commerce web app built using microservices architecture using flask, Django, rabbitMQ, docker and  Typescript",https://github.com/Raja-mishra1/microservices_with_python,26,3,3,0,0,2,23,3,2.391304347826087,0,0,0,0,0,1.434782608695652,1.7355175157669624,0.1195652173913043,1.0949038976007233
510239912,licenseware,sample-clean-architecture,A practical guide to dependency injection,https://github.com/licenseware/sample-clean-architecture,15,1,1,0,1,2,28,3,1.75,0,0,1,0,1,1.5714285714285714,1.0070082527076638,0.0714285714285714,0.5035041263538319
766281737,Paola-CansecoPenagos,hotelReservation,Rest API with hexagonal architecture for a hotel search and reservation application,https://github.com/Paola-CansecoPenagos/hotelReservation,27,0,0,0,0,1,27,3,1.7037037037037035,1,1,1,1,4,4.851851851851852,8.568255617769234,0.3368606701940035,36.72361666642112
666420619,asanmateu,MADE-retail-store,A domain-driven-designed retail store based on MADE's microservice architecture but with enhanced functionalities,https://github.com/asanmateu/MADE-retail-store,13,0,0,0,0,1,9,0,2.555555555555556,0,0,0,0,0,10.11111111111111,40.2014636700778,1.1584110334110334,108.41050824805852
390605767,2bdkid,clean_architecture_example,Example of Clean Architecture for Jake :),https://github.com/2bdkid/clean_architecture_example,6,0,0,0,0,1,5,0,2.0,0,0,0,0,0,5.8,4.688268714730222,0.3,2.344134357365111
914486622,NastyRunner13,llama2-model,"PyTorch implementation of Llama 2 from scratch with RoPE embeddings, GQA attention, and RMSNorm. Clean, documented code focused on understanding the core architecture.",https://github.com/NastyRunner13/llama2-model,50,1,1,0,0,1,9,1,4.111111111111111,0,0,0,0,0,6.888888888888889,123.4050247671464,3.4686868686868686,905.7679006103316
375590355,igomrod,fastapi-hex-arch-kata,Kata to explore hexagonal architecture,https://github.com/igomrod/fastapi-hex-arch-kata,30,2,2,0,0,1,26,3,2.0384615384615383,1,0,1,0,2,2.8076923076923075,5.362723729775656,0.282051282051282,4.575514434275256
959890390,natcobbinah,Clean-Architecture-In-Python,A sample developed application following software development methodologies to achieve a clean architecture of the codebase using python and flask-web framework,https://github.com/natcobbinah/Clean-Architecture-In-Python,30,0,0,0,0,1,44,4,2.2954545454545454,1,1,1,0,3,5.7727272727272725,31.851140644744,0.580762987012987,46.41998774683285
497374774,washington-ygor-tcc,intelligent-system,This project is a POC of an intelligent system (adopting hexagonal architecture) which can serve a deployed model in MLflow both by FastAPI and NATSMessaging entrypoints.,https://github.com/washington-ygor-tcc/intelligent-system,92,0,0,0,0,0,26,4,1.8846153846153848,1,1,0,1,3,2.230769230769231,2.100173558052885,0.1282051282051282,2.1981492793038107
960891363,ToluGIT,docker-ms-architecture,"3-tier Docker microservices template with FastAPI, React, PostgreSQL, Redis, monitoring, and CLI tool. example for learning and real-world adoption.",https://github.com/ToluGIT/docker-ms-architecture,182,0,0,0,0,1,38,5,5.973684210526316,0,1,1,1,3,22.73684210526316,279.4820091002989,2.3030790396453766,2281.718064884324
156276217,Somebody25,csv2caldav,This script provides the ability to create calendar events from an csv source,https://github.com/Somebody25/csv2caldav,9,1,1,0,0,1,1,0,9.0,0,0,0,0,0,11.0,84.0,1.0,84.0
645906365,qodize,python_clean_architecture_template,,https://github.com/qodize/python_clean_architecture_template,2,0,0,0,0,1,12,3,0.9166666666666666,1,1,0,0,2,0.8333333333333334,0.3962406251802891,0.0416666666666666,0.1981203125901445
675701689,anish9999,Authentication_backend,"This is an independent api ,which validates on token based authentication, and uses microservices architecture for communication to other api.",https://github.com/anish9999/Authentication_backend,14,0,0,0,0,1,17,3,4.529411764705882,0,0,0,0,0,6.0,8.020348595597762,0.3235294117647059,8.346664404569765
322324572,keyu-tian,BUAA-compiler-principles-project-solution,"My solution for the course project of Compiler Principles 2021'Spring @ BUAA (北航编译原理). A compiler for language C0 including assembler, lexical tokenizer, and syntactic analyzer. Low coupling, high cohesion. Clean code architecture. Minimal design.",https://github.com/keyu-tian/BUAA-compiler-principles-project-solution,44,1,1,0,0,1,18,3,3.9444444444444446,0,0,0,0,0,17.555555555555557,167.20131802913974,2.0148483080100728,1051.482943398632
928759754,4ami,RUYAI-API,"This repository contains the backend for the ""RuyAI"", Intelligent Glaucoma Screening and Diagnosis System, designed using a microservices architecture with FastAPI.",https://github.com/4ami/RUYAI-API,1332,0,0,0,0,1,245,4,3.506122448979592,1,1,1,1,4,3.6897959183673463,18.4294119345178,0.3315560002090639,74.75839250390483
818696441,jeacevedo92,Estilos-de-Arquitectura,Layered Architecture practice ,https://github.com/jeacevedo92/Estilos-de-Arquitectura,2733,1,1,0,0,1,12,7,1.3333333333333333,0,0,0,0,0,3.9166666666666665,7.771196557330007,0.375,9.279351084913271
141055365,arjunp17,All-Conv-Net-for-Bird-Activity-Detection-Significance-of-Learned-Pooling,"Bird activity detection (BAD) deals with the task of predicting the presence or absence of bird vocalizations in a given audio recording. In this work, we propose an all-convolutional neural network (all-conv net) for bird activity detection. All the layers of this network including pooling and dense layers are implemented using convolution operations. The pooling operation implemented by convolution is termed as learned pooling. This learned pooling takes into account the inter featuremap correlations which are ignored in traditional max-pooling. This helps in learning a pooling function which aggregates the complementary information in various feature maps, leading to better bird activity detection. Experimental observations confirm this hypothesis. The performance of the proposed all-conv net is evaluated on the BAD Challenge 2017 dataset. The proposed all-conv net achieves state-of-art performance with a simple architecture and does not employ any data pre-processing or data augmentation techniques.",https://github.com/arjunp17/All-Conv-Net-for-Bird-Activity-Detection-Significance-of-Learned-Pooling,404,1,1,2,0,0,4,0,8.5,0,0,0,0,0,0.75,35.96997636784959,2.394230769230769,140.45480457398077
888666295,apendley,nunchuck-usb-keyboard,CircuitPython 9 source code for a dongle to translate Wii Nunchuck input into keyboard key events,https://github.com/apendley/nunchuck-usb-keyboard,13,0,0,0,0,1,2,3,4.5,0,0,0,0,0,10.0,143.62047909311843,3.71875,981.0622795609204
306431634,searchs,daily-growth,"Exploring various tenets of Software engineering including but not limited to Microservices, Design patterns, Domain-Driven Designs, Language ramp-ups, Framework designs and Process Automation",https://github.com/searchs/daily-growth,761,1,1,0,6,0,24,12,1.4166666666666667,0,0,0,0,0,8.666666666666666,33.140816629229086,0.8801697530864198,97.88388378727213
364486463,placemedas,Mircroservice-Based-Ecommerce-Platform,An ecommerce prototype based on microservice architecture using docker and kubernetes,https://github.com/placemedas/Mircroservice-Based-Ecommerce-Platform,553,0,0,0,0,1,19,4,11.421052631578949,0,0,0,0,0,25.210526315789476,386.6524683356101,2.8066985645933014,1149.6862170825182
827478386,svbuh,showcase_architecture_3-layer,Showcase of a 3 layer application with Python incl. Flask and PyTorch,https://github.com/svbuh/showcase_architecture_3-layer,9878,0,0,0,0,1,6,1,4.5,1,1,1,0,3,4.833333333333333,46.94556263221642,1.219187675070028,128.34103814182646
884855440,proutkarsh3104,Chess-AI-Utkarsh,"This project implements a neural network-based chess AI using TensorFlow and Keras. The model uses convolutional layers and residual blocks to predict the best chess moves and evaluate board states. It combines policy and value predictions to create a robust chess-playing AI, inspired by AlphaZero's architecture.",https://github.com/proutkarsh3104/Chess-AI-Utkarsh,26,1,1,0,0,1,2,3,10.0,0,0,0,0,0,56.0,1157.674983645186,11.300387596899224,13081.765436605963
870913902,cesarverapy,microservices-architecture,,https://github.com/cesarverapy/microservices-architecture,13,0,0,0,0,1,9,1,3.0,0,0,0,0,0,2.111111111111111,7.584962500721157,0.3888888888888889,6.792481250360578
848281998,AhmedHashim04,Questify,"Questify is a Q&A platform built with Django. It features secure user authentication, scalable architecture, and efficient database management using Django's ORM. Users have personalized profiles, and the platform is designed with a clean, responsive UI using HTML and CSS.",https://github.com/AhmedHashim04/Questify,1106,1,1,0,0,0,79,4,2.4430379746835444,0,0,0,0,0,5.69620253164557,25.438602957451295,0.4682209381273975,120.21169225315424
845626438,chandanadongre,Microservic_architecture,Monolithic to microservice architecture of an application using docker,https://github.com/chandanadongre/Microservic_architecture,7791,0,0,0,0,1,4,0,2.75,0,0,0,0,0,11.75,107.86887440506796,1.825,665.7847349956543
962792928,matheusmagnon,clean_architecture,,https://github.com/matheusmagnon/clean_architecture,37,0,0,0,0,1,50,4,1.38,1,1,1,1,4,2.56,5.6169004067234,0.15,4.429644358149337
192076864,robywan27,A-User-Modeling-Pipeline-for-Studying-Polarized-Political-Events-in-Social-Media,Master thesis source code,https://github.com/robywan27/A-User-Modeling-Pipeline-for-Studying-Polarized-Political-Events-in-Social-Media,476,1,1,0,0,1,18,2,6.555555555555555,0,0,0,0,0,24.61111111111111,1202.7597509420964,3.877335299068273,8791.35268233111
788645115,Simongolovinskiy,Primitive-DDD-template,Example of small struct Domain Driven Design,https://github.com/Simongolovinskiy/Primitive-DDD-template,13,0,0,0,0,1,17,3,0.5294117647058824,1,1,0,1,3,4.0588235294117645,4.016808488657195,0.3058823529411765,6.84461959856058
847742595,Hammad90,messaging-api,This repository is a django application for a messaging app following a microservice architecture,https://github.com/Hammad90/messaging-api,58,0,0,0,2,1,50,3,2.46,1,0,0,0,1,3.12,3.665717013207386,0.121,5.650238269480374
148236695,elkong,time-is-passing,"Extracts events from Wikipedia's year articles (and maybe other sources), to compile them into unnerving tidbits featuring the alarming rate of time's passage.",https://github.com/elkong/time-is-passing,14,1,1,0,0,1,3,0,2.0,0,0,0,0,0,35.666666666666664,1009.3268849867992,4.548924482776323,7670.833005105421
904154352,artemmmz,health-app,Application with microservice architecture,https://github.com/artemmmz/health-app,173,0,0,0,0,1,83,5,3.710843373493976,1,1,1,1,4,7.313253012048193,25.31813001700014,0.4310403902166584,46.127385712813485
956002411,Trojan3877,NYC-Finance-Data-Engineering-Project,"A Modular data pipeline that ingests, cleans stores, and analyzes NYC government financial data, simulating scalable, cloud-ready architecture using open data.",https://github.com/Trojan3877/NYC-Finance-Data-Engineering-Project,15,1,1,0,0,1,3,3,1.6666666666666667,0,0,0,0,0,1.0,6.754887502163469,0.5,5.96240625180289
962983583,jonasp-dev,nba-data-pipeline,microservice-based architecture designed to process NBA game data stored in an S3 bucket,https://github.com/jonasp-dev/nba-data-pipeline,9,0,0,0,0,1,7,3,2.857142857142857,0,1,0,1,2,2.0,3.696328997275317,0.3571428571428571,3.356694175692212
802207986,willemse-and-co,aggregate-root,A small Python library for defining domain-driven design aggregates and domain events.,https://github.com/willemse-and-co/aggregate-root,23,0,0,0,0,1,8,2,4.875,0,0,0,0,0,28.125,145.2988789978673,1.861038961038961,499.13993385268384
308987954,j-kincaid,django-fest-blog,"Kansas City Women in Technology is hosting our virtual Django Fest KC 2020 event.  I created this blog from the open-source DjangoGirls tutorial, which we are using in conjunction with the event. ",https://github.com/j-kincaid/django-fest-blog,11,0,0,0,0,1,14,3,1.6428571428571428,0,0,0,0,0,0.7142857142857143,0.3396348215831049,0.0357142857142857,0.1698174107915524
384740551,mathmed,clean-architecture-python,Projeto em Python/Flask utilizando conceitos de código limpo e arquitetura limpa.,https://github.com/mathmed/clean-architecture-python,76,1,1,0,0,1,70,4,2.3285714285714287,1,1,1,1,4,4.9,31.64389590910034,0.2817553000743964,25.00383897433365
672491296,etutionlk,core-books-ordering-srv,Sample project for hexagonal architecture,https://github.com/etutionlk/core-books-ordering-srv,9,0,0,0,0,1,47,6,0.7659574468085106,1,0,1,0,2,2.3617021276595747,0.4446245288082183,0.0159574468085106,0.3334683966061637
952718668,ege-boop,Student-Management-System-SMS---Layered-Architecture,"This project demonstrates the Layered Architecture pattern in Python by implementing a Student Management System (SMS) with three distinct layers:  Presentation Layer (CLI - main.py)  Provides a command-line interface for user interaction. Users can add, view, and delete students. Business Logic Layer (Service - student_service.py) ",https://github.com/ege-boop/Student-Management-System-SMS---Layered-Architecture,11,0,0,0,0,1,4,0,1.25,0,0,0,0,0,11.25,39.62676067106165,1.1102941176470589,106.1206136430847
936186814,tarikalim,LoungeRestaurant,"Sentiment analysis simulation for randomly generated comments using gRPC, Kafka, and FastAPI with microservice architecture.",https://github.com/tarikalim/LoungeRestaurant,223,0,0,0,0,1,41,3,2.5121951219512195,0,0,1,0,1,2.5365853658536586,5.869512914249383,0.3313588850174216,7.398534263402058
869792885,Alberto-Frigatto,clean-architecture-user-system,A Python user management REST API built following Clean Architecture principles.,https://github.com/Alberto-Frigatto/clean-architecture-user-system,126,1,1,0,0,1,146,4,3.116438356164384,1,1,1,1,4,5.239726027397261,38.54581038705851,0.3666120732690663,92.65860116369628
952717603,RanchoCooper,py-hexagonal,Python Hexagonal Architecture: Enterprise-grade Hexagonal Architectur Framework,https://github.com/RanchoCooper/py-hexagonal,83,0,0,1,0,1,59,4,2.6440677966101696,1,1,1,1,4,6.101694915254237,15.12971874326561,0.4683473389355742,51.93057369928388
288986248,heumsi,python-clean-architecture-example,A example python code of robert martin' clean architecture,https://github.com/heumsi/python-clean-architecture-example,208,28,28,2,0,3,19,2,2.0526315789473686,1,0,1,1,3,2.9473684210526314,1.5495443986132162,0.1228070175438596,1.7939578822855702
836023074,sai-sundeep,neural-networks-design,"Dive into the fundamentals of neural networks with my comprehensive repository, covering the design, implementation, and training of various architectures including Multi-Layer Perceptrons, Adaline networks, radial basis networks, and self-organizing feature maps. ",https://github.com/sai-sundeep/neural-networks-design,75,0,0,0,0,1,4,1,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
684630689,koyelr,indian-cuisine-deploy-5025,"The Indian Cuisine Analysis and Recommendation System project is a comprehensive initiative designed to deliver data-driven culinary insights and personalized recipe recommendations within the domain of Indian cuisine. This project combines various AWS services to achieve its objectives, making it an efficient and scalable solution.",https://github.com/koyelr/indian-cuisine-deploy-5025,85,0,0,0,0,1,2,0,9.5,0,0,0,0,0,17.5,852.6274246962768,4.032608695652174,5055.287743740771
185799476,miztiik,serverless-thumbnails-creator,AWS Lambda to process an Amazon S3 event input image. Resizes the image in the source bucket and save the output to the target bucket.,https://github.com/miztiik/serverless-thumbnails-creator,12782,7,7,9,0,1,2,1,4.5,0,0,0,0,0,12.5,57.85777089438336,2.25,135.13099028470583
857004201,t-d-jesus,app_clean_architecture,,https://github.com/t-d-jesus/app_clean_architecture,21,0,0,0,0,1,20,3,0.55,1,1,1,1,4,0.7,0.2377443751081734,0.025,0.1188721875540867
513564108,LLeonidd,django_jwt_auth_cqrs,,https://github.com/LLeonidd/django_jwt_auth_cqrs,80,0,0,0,0,1,49,4,1.8775510204081636,1,0,0,0,1,1.2448979591836735,0.1940770409046314,0.0204081632653061,0.0970385204523157
679862448,koruss,FastAPI-Clean-Architecture-Template,A project template to build REST APIs following some of the key concepts of Hexagonal Architecture,https://github.com/koruss/FastAPI-Clean-Architecture-Template,10,2,2,0,0,1,21,3,2.6666666666666665,1,1,0,1,3,3.1904761904761907,8.178678113330879,0.2555555555555556,5.669640771377958
642503506,24jmwangi,event-driven-microservices,This project demonstrates an event-driven microservices architecture using Apache Kafka for event streaming and webhook integration with external services,https://github.com/24jmwangi/event-driven-microservices,214,4,4,0,0,1,5,1,2.6,0,0,0,0,0,2.2,1.901955000865388,0.2,0.9509775004326938
632020640,cloud-native-everything,pygnmi-srl-nanog88,How to create a network lab using containerlab for a Spine/Leaf + Border-Leaf Datacenter Architecture using techs like: Layer 2/3 EVPN-VXLAN eBGP for Underlay. How to install the requirements for pyGNMI scripting. How to script in pyGNMI to operate and troubleshoot EVPN-VXLAN Design,https://github.com/cloud-native-everything/pygnmi-srl-nanog88,10344,5,5,0,0,1,3,2,6.0,0,0,0,0,0,16.0,55.53085680500885,1.8854166666666667,129.00383838830476
507276800,umschaudhary,fast-api-clean-architecture,"Fast API Clean Architecture template with docker, nginx, postgres, pgadmin4",https://github.com/umschaudhary/fast-api-clean-architecture,76,4,4,1,0,2,26,4,3.230769230769231,1,1,1,0,3,2.230769230769231,2.334739400162987,0.1794871794871794,2.209260511889925
419111883,reyesGeorge,Tarantula,"a Scrapy spider that utilizes Postgres as a DB, Squid as a proxy server, Redis for de-duplication and Splash to render JavaScript. All in a microservices architecture utilizing Docker and Docker Compose",https://github.com/reyesGeorge/Tarantula,1906,9,9,2,0,2,16,2,1.9375,0,0,0,0,0,3.75,2.947625960029792,0.1822916666666666,1.9253341183584312
975674792,Joshh99,bookstore-ms-v2,"Distributed Bookstore System CQRS pattern with MongoDB for queries, MySQL for commands, and automated data sync. Deployed on AWS EKS/Kubernetes.",https://github.com/Joshh99/bookstore-ms-v2,144,0,0,0,0,1,21,1,4.857142857142857,0,0,0,0,0,12.285714285714286,55.13214797150396,1.613982644339787,124.99621319683828
833192362,OzodbekPyDev,mcs-docs,"MCS Docs is a document management system built using modern web development frameworks. The project utilizes FastAPI for the backend, SQLAlchemy for ORM, and Alembic for database migrations. The architecture adheres to Domain-Driven Design (DDD) and Clean Architecture (CA) principles, ensuring a modular and maintainable codebase.",https://github.com/OzodbekPyDev/mcs-docs,21,0,0,0,0,1,40,5,4.15,1,1,1,1,4,4.1,2.904812188707937,0.16875,2.8350001574489228
882506267,brskyfolls,bees-breweries-data-engineering,"The goal of this test is to assess your skills in consuming data from an API, transforming and persisting it into a data lake following the medallion architecture with three layers: raw data, curated data partitioned by location, and an analytical aggregated layer.",https://github.com/brskyfolls/bees-breweries-data-engineering,5486,2,2,0,0,1,9,5,4.555555555555555,0,0,0,0,0,5.666666666666667,10.621354787983211,0.6111111111111112,12.682458425211538
10109529,jacegu,simple-cqrs,A small example of CQRS architecture based on gregoryyoung/m-r,https://github.com/jacegu/simple-cqrs,216,15,15,4,0,1,26,1,2.4615384615384617,0,0,0,0,0,8.115384615384615,12.121598571436529,0.5505424063116371,30.34906801088257
134777867,WoodProgrammer,EventSourcingExample,Event Sourcing example via Apache Kafka ,https://github.com/WoodProgrammer/EventSourcingExample,11,3,3,0,0,2,18,3,2.6666666666666665,0,0,0,0,0,4.388888888888889,3.3940879961000463,0.287037037037037,2.775625148697535
758207802,orafamoura,Study_CleanArch_py,Clean architecture com python,https://github.com/orafamoura/Study_CleanArch_py,211,0,0,0,0,1,11,3,1.4545454545454546,1,0,0,1,2,1.7272727272727273,0.0,0.0,0.0
270166225,GArmane,fastapi-hex-boilerplate,FastAPI boilerplate with hexagonal architecture,https://github.com/GArmane/fastapi-hex-boilerplate,43,3,3,0,0,1,44,5,1.4772727272727273,1,0,1,1,3,1.2045454545454546,0.890858246996423,0.0227272727272727,0.4454291234982115
185371253,adimitrioski,soa-shipments-microservice,Shipment Microservice for Service Oriented Architecture subject lab exercise,https://github.com/adimitrioski/soa-shipments-microservice,8,0,0,0,0,1,10,1,2.6,1,1,0,0,2,3.1,35.28401136034782,0.3142857142857143,56.33634294840108
258644651,ahmedmahmoud116,HTTP-Proxy,"Implemented Parallel HTTP proxy with caching using python 3, to show how proxies play an important role in the world wide web’s (web) architecture, and use TCP as the transport layer protocol. and how important to become familiar with error codes as it’s important for almost anyone writing applications nowadays.",https://github.com/ahmedmahmoud116/HTTP-Proxy,8,0,0,0,0,1,3,0,2.6666666666666665,0,0,0,0,0,30.0,666.4263010653697,3.821442495126705,3769.7768883566514
603071869,developer-cmsspin,clean_architecture_python,Clear architecture for python,https://github.com/developer-cmsspin/clean_architecture_python,251,0,0,0,0,1,27,6,3.1481481481481484,1,1,1,1,4,1.962962962962963,0.5283208335737187,0.0555555555555555,0.2641604167868593
959851661,mkhmtolzhas,fastapi-clean-architecture,,https://github.com/mkhmtolzhas/fastapi-clean-architecture,79,3,3,0,0,1,39,5,2.333333333333333,1,1,1,1,4,3.1538461538461537,0.8272990386279591,0.0512820512820512,0.6124927886002224
35073793,tahosa,openracer-python,Open source timing and scoring app for autocross or rallycross events,https://github.com/tahosa/openracer-python,34,0,0,0,0,0,17,4,1.8235294117647056,0,0,0,0,0,3.588235294117647,2.995202038509892,0.1441176470588235,2.84528773822315
947744252,unmuktoai,Wazuh-MCP-Server,"An open-source MCP server for integrating Wazuh security data with LLMs (such as the Claude Desktop App). This service authenticates with the Wazuh RESTful API, retrieves alerts from Elasticsearch indices, transforms events into an MCP-compliant JSON format, and exposes an HTTP endpoint for Claude Desktop to fetch real-time security context.",https://github.com/unmuktoai/Wazuh-MCP-Server,21,16,16,6,4,0,2,1,4.5,0,0,0,0,0,13.0,82.29093999588008,2.0972222222222223,263.6635790913123
973004413,iabhishekpratap,microservices-python-app,"This repository contains a Python-based microservice application that converts video files to audio format using a distributed architecture deployed on Kubernetes. The system consists of four main microservices working together to provide authentication, file conversion, API gateway, and notification functionality.",https://github.com/iabhishekpratap/microservices-python-app,3009,0,0,0,0,1,14,3,3.2857142857142856,0,0,0,0,0,3.142857142857143,13.736999356471944,0.6011904761904762,28.6850477133054
946704558,georggoetz,event-sourcing,,https://github.com/georggoetz/event-sourcing,2,0,0,0,0,1,1,0,0.0,0,0,0,0,0,72.0,170.02933482946506,4.380952380952381,744.8904192528946
19710225,Luigolas,PhotoOrganizerByEvents,"This is a personal project to put some order in my personal photos. I have so many photos, from many different sources that it is a big effort to put some order to them. This project is designed to order in folders depending on the event.",https://github.com/Luigolas/PhotoOrganizerByEvents,168,0,0,0,0,1,2,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
193165083,enricolo4,clean_architecture_python,,https://github.com/enricolo4/clean_architecture_python,10645,6,6,0,2,2,41,5,1.2682926829268293,1,1,1,1,4,1.9268292682926829,2.963726525428005,0.0585365853658536,5.468718386044213
744302103,zach323,python_regex,source and tests for checking port numbers in event txt files,https://github.com/zach323/python_regex,3,0,0,0,0,1,2,0,1.5,0,0,0,0,0,6.0,2.3774437510817346,0.25,1.1887218755408673
489077355,Trifel-guy,BankAccount,"kata for exalt it, implementing hexagonal architecture in python with TDD",https://github.com/Trifel-guy/BankAccount,25,1,1,0,0,1,16,3,3.1875,1,0,0,1,2,5.3125,11.49087015173392,0.25,11.278832532849126
971147409,amoilmomcode,mock_receipt-verification-api,"Backend API architecture example for high-volume receipt verification in mobile apps. Focus on reliability, extensibility, and clean design.",https://github.com/amoilmomcode/mock_receipt-verification-api,7,0,0,0,0,1,6,1,2.5,0,0,0,0,0,8.333333333333334,38.5201067495232,0.5,28.62454173527587
479448053,Harvard-University-iCommons,canvas-live-events-splunk,AWS SAM app to create a bridge between Canvas Live Events and Splunk using SQS and Lambda. This is an open-source version of the canvas-streaming-data-handler repository that's used by Harvard.,https://github.com/Harvard-University-iCommons/canvas-live-events-splunk,7,1,1,1,0,4,2,1,2.0,0,0,0,0,0,1.5,0.0,0.0,0.0
924382794,tmilen,CAERSDataAnalysis,an exploratory data analysis (EDA) of the Adverse Food Events dataset sourced from Kaggle,https://github.com/tmilen/CAERSDataAnalysis,2952,0,0,0,0,1,1,1,6.0,0,0,0,0,0,4.0,77.70923408096293,2.1,163.18939157002217
701377345,acoustics-code-salford,uas-sound-propagation,Render movement events from static hover UAS source recordings,https://github.com/acoustics-code-salford/uas-sound-propagation,395,1,1,0,9,0,6,2,3.5,0,0,0,0,0,20.666666666666668,713.7369653363543,3.782584594163541,5332.934515654136
977085857,arzw11,bot-aiogram-dialogs,"This is a Telegram bot built with aiogram and aiogram-dialogs, designed to track and manage betting statistics. The project follows Domain-Driven Design (DDD) principles where applicable, aiming for a clean and modular architecture.",https://github.com/arzw11/bot-aiogram-dialogs,44,0,0,0,0,1,46,4,2.717391304347826,1,0,0,1,2,8.195652173913043,63.78243278799084,0.5669804261524211,177.4725526274852
102802638,ferstdigital,cqrs-python-demo,For research purposes only. Learn from our experiments :),https://github.com/ferstdigital/cqrs-python-demo,40,38,38,9,13,4,17,3,2.764705882352941,0,0,0,0,0,2.294117647058824,8.97963806592503,0.4019607843137254,12.473679005301262
16569152,commoncode,cqrs,A collection of tools to create a CQRS like architecture with Django & Meteor.js,https://github.com/commoncode/cqrs,444,7,7,2,1,37,20,2,2.6,0,0,0,0,0,13.75,76.3190825860111,1.109362320896581,305.2824693647954
748028146,sravanre,Microservices-end-to-end,deploying online boutique app for the microservices architecture ,https://github.com/sravanre/Microservices-end-to-end,4217,2,2,0,0,1,11,6,6.181818181818182,0,1,0,0,1,24.90909090909091,32.19954427146147,1.0795454545454546,105.228810734727
606167080,AarnoStormborn,python-microservices,"Microservices Architecture - Python (Django, Flask), ReactJS and RabbitMQ",https://github.com/AarnoStormborn/python-microservices,36,0,0,0,0,1,22,3,2.1818181818181817,0,0,0,0,0,1.8636363636363635,4.4011030901662735,0.1704545454545454,6.9664628360610354
447941438,Marbok,CleanArchitectureCourse,,https://github.com/Marbok/CleanArchitectureCourse,12,0,0,0,0,1,24,2,1.5833333333333333,0,0,0,0,0,11.916666666666666,86.96577421565615,1.1946044546850998,188.94286308035316
969027737,yusrandi,django-clean-architecture,,https://github.com/yusrandi/django-clean-architecture,23,0,0,0,0,1,42,3,1.738095238095238,0,1,0,1,2,2.023809523809524,0.3396348215831049,0.0357142857142857,0.1698174107915524
912600990,m1guel17,hexagonal_architecture_template,,https://github.com/m1guel17/hexagonal_architecture_template,37,0,0,0,0,1,29,4,1.1724137931034482,1,1,0,1,3,1.1724137931034482,2.182214224660148,0.1206896551724138,4.799689009627821
377315390,cfdavidpetter,clean_architecture_with_python,,https://github.com/cfdavidpetter/clean_architecture_with_python,29,1,1,0,0,1,78,3,2.717948717948718,1,1,1,1,4,5.846153846153846,34.75098722034173,0.532703478857325,61.67318175635784
865081428,ZbirMohamed,microservice,c'est un cours special qui englobe l'architecture microservice les besoins technique et les bonnes pratiques a suivre .,https://github.com/ZbirMohamed/microservice,42,0,0,0,0,1,8,3,2.25,1,1,0,0,2,3.0,5.045565997075035,0.375,6.248385528189818
607988793,edwinmarinn,emergencies-python-hexagonal-architecture,,https://github.com/edwinmarinn/emergencies-python-hexagonal-architecture,440,1,1,0,0,1,235,8,2.5617021276595744,1,1,1,1,4,3.587234042553192,3.667861193993887,0.2091416621203855,5.140179603754793
197350851,QwilApp,gasofo,Hexagonal code architecture framework,https://github.com/QwilApp/gasofo,112,1,1,1,0,0,51,4,3.156862745098039,0,0,0,0,0,14.666666666666666,48.37251467203637,0.766694536146779,108.63072839529956
920914250,matheustsx,fastapi-repo,A FastApi API using Hexagonal Architecture,https://github.com/matheustsx/fastapi-repo,1,0,0,0,0,1,1,0,2.0,0,0,0,0,0,2.0,0.0,0.0,0.0
264528420,ozgurkara,fastapi-pydiator,Python clean architecture and usecase implementation with fastapi and pydiator-core,https://github.com/ozgurkara/fastapi-pydiator,996,153,153,30,1,3,74,5,2.621621621621621,0,1,0,0,1,4.594594594594595,10.4613238122085,0.2097097097097097,8.16688187015011
482419056,LLeon360,UNetBiomedicalDiagnosis,"Contains a module for functions that build and evaluate a U-Net Model which is a modified auto-encoder image-to-image architecture that includes skip connections from encoder to decoder layers with matching input dimensions to retain features from the encoded image. The model is designed for image segmentation and produces a mask based off x-ray data. The model is used with lung x-rays to segment out lungs, brain scans to segment out brain tumors, and pictures of a room to segment out a human figure. With the lungs dataset, it is able to manage 98% accuracy with a wide range of 3,4,5 encoding block of Conv2D and MaxPooling and BatchNormalization + 1 latent layer without pooling and the mirrored number of decoding layers that do Conv2DTranspose for deconvolution and UpScaling to reverse MaxPooling making 7,9,11 layers with doubling filters/kernels in each encoding block from 16,32,64,80 that double with each block like in a traditional CNN and then half with each decoding block.",https://github.com/LLeon360/UNetBiomedicalDiagnosis,113,7,7,2,0,2,3,1,5.0,0,0,0,0,0,8.666666666666666,396.9464206924584,3.707547169811321,4415.092735815174
669435766,will4j,python-ddd-in-practise,"DDD in practise with python, include hexagonal architecture, BDD etc.",https://github.com/will4j/python-ddd-in-practise,458,2,2,1,0,1,23,4,2.869565217391304,1,1,1,1,4,4.217391304347826,2.948931372126316,0.2065217391304347,2.4854794737625583
743523411,Rinzan-NP,blog-microservice,A blog web site using microservice architecture with Django and react,https://github.com/Rinzan-NP/blog-microservice,79,2,2,0,0,1,64,3,1.59375,0,0,1,1,2,1.078125,0.5891563450022113,0.046875,0.2945781725011056
577215371,prateekmohanty63,Microservices_fiesta,Building a python app using Django Flask RabbitMQ with microservices architecture,https://github.com/prateekmohanty63/Microservices_fiesta,53,1,1,1,0,1,24,3,2.25,0,0,0,0,0,1.4166666666666667,1.26696366076305,0.0729166666666666,0.8511625892772151
489903205,sanjeetbth7,Certificate-Generator-with-python,"The significant of our project is that it generate thousands of certificates in seconds. It make very easy to make certificate for various events. For making this project we choose a language i.e., python with OpenCV library it is an open source library used for computer vision, machine learning, and image processing. We take a name list of that persons and also a template of certificate who have to give the certificates. ",https://github.com/sanjeetbth7/Certificate-Generator-with-python,145,0,0,0,0,1,1,0,2.0,0,0,0,0,0,7.0,15.509775004326936,1.0,15.509775004326936
907823978,KojiOchiai,clean-todo-app,todo app to learn clean architecture,https://github.com/KojiOchiai/clean-todo-app,370,0,0,0,0,1,12,4,3.8333333333333335,0,0,0,0,0,22.5,132.1927610448681,1.4878120712807164,555.9292355709854
477528186,DerrikMilligan,CounterStrike-Warcraft-Mod,An addon for Counter Strike Source utilizing Event Script for Python that added classes from Warcraft III,https://github.com/DerrikMilligan/CounterStrike-Warcraft-Mod,1847,0,0,0,0,1,55,2,3.8181818181818175,0,0,0,0,0,57.54545454545455,2483.072614474009,3.876511357669148,46525.39832942375
495006665,ryszardorlikowski,todo-clean-architecture-django,,https://github.com/ryszardorlikowski/todo-clean-architecture-django,26,0,0,0,0,1,40,4,2.125,1,1,0,1,3,2.9,3.165660220179671,0.1101190476190476,2.286929139794746
709463073,Artphachara,facecheck-attendance,"Welcome to the facecheck-attendance library, version 0.1.0! This open-source Python library is designed to simplify attendance tracking using facial recognition technology. Whether you're an educator looking to streamline classroom management or an event organizer seeking an efficient way to monitor participants.",https://github.com/Artphachara/facecheck-attendance,4031,0,0,0,0,1,8,2,2.375,0,0,0,0,0,3.0,16.83366452621218,0.609375,51.68725468769611
219894170,vbinwang,Prediction-of-Keypoints-Positions-on-Face-Images,"(This work was done in 2016.) This paper describes an approach to predicting keypoint positions on greyscale images of faces, as part of the Facial Detection (2016) Kaggle competition. Facial keypoints include centers and corners of the eyes, eyebrows, nose and mouth, among other facial features. Our methodology involves four steps to producing our output predictions. The first step involves deciding the criterion for model accuracy which is RMSE, the root means square error of all keypoint coordinates. For the second stage, we use principal components analysis to reduce the dimensionality of the image and edge-detection to better identify the key components needed to perform the facial keypoint detection. The we predict the missing feature through a neural network with a sigmoid non-linearity on the output layer. At training time, we will introduce a special convolutional neural network model which looks like an inverted hourglass and compare with the baseline model. We evaluate our different model architectures, with and without data augmentation techniques based on their Root Mean Squared Error scores they produce on the test set.",https://github.com/vbinwang/Prediction-of-Keypoints-Positions-on-Face-Images,1508,1,1,0,0,1,13,2,2.1538461538461537,0,0,0,0,0,4.307692307692308,24.95198108792974,0.6463675213675214,73.54900245717548
352195065,rehannali,clean-architecture-structure,This script create Clean Architecture for Flutter app.,https://github.com/rehannali/clean-architecture-structure,8,0,0,0,0,1,1,0,1.0,0,0,0,0,0,19.0,82.0447025077789,1.75,143.57822938861307
928028948,bkaewell,micro-services,This repository serves as a scalable foundation for my microservice architecture,https://github.com/bkaewell/micro-services,59,1,1,0,0,1,2,2,6.5,0,0,0,0,0,3.0,32.849625007211564,1.1666666666666663,57.05438751177888
917572512,ahmedooo1,QuickServe_api,API de services à la demande basée sur une architecture microservices avec FastAPI et PostgreSQL.,https://github.com/ahmedooo1/QuickServe_api,1025,1,1,0,0,1,85,5,4.188235294117647,0,1,1,0,2,6.047058823529412,16.107757330804525,0.531484593837535,23.155737547294702
975978411,10daviesb,Atlas-Bot,"A modular Discord bot built with Hikari and Lightbulb, designed for learning, extensibility, and clean Python architecture.",https://github.com/10daviesb/Atlas-Bot,8,0,0,0,0,1,6,1,3.5,0,0,0,0,0,7.5,53.53885199519684,1.7166666666666668,131.7124180602858
534315697,perymerdeka,flask-microservice-boilerplate,Microservice Project Architecture using Flask Celery Background Task and Docker Automation,https://github.com/perymerdeka/flask-microservice-boilerplate,6,4,4,0,0,1,9,3,2.2222222222222223,1,0,0,0,1,1.1111111111111112,2.113283334294876,0.2222222222222222,1.0566416671474377
571253503,gabotachak,swarch2022ii_ganzola_1_ms,"Sample microservice with an MVC sub-architecture, in Python - Flask, with API-REST type exposure and use of a relational database.",https://github.com/gabotachak/swarch2022ii_ganzola_1_ms,34,0,0,0,0,1,26,2,2.769230769230769,1,0,1,1,3,4.576923076923077,6.613613053559435,0.3461538461538461,13.389680436233489
267754921,984881878,ProgressiveSearch,A Efficiently Layer-wise Progressive Neural Architecture Search Method,https://github.com/984881878/ProgressiveSearch,1201,1,1,2,0,1,20,2,4.6,1,0,0,0,1,45.3,788.7918776102246,5.8601203500531085,7865.564256455666
695313676,Joao-Marcelo-Melo,Clean_architecture,,https://github.com/Joao-Marcelo-Melo/Clean_architecture,19,1,1,0,0,1,22,4,1.181818181818182,1,1,1,1,4,1.9090909090909087,3.3801273831228698,0.0909090909090909,1.758245509743253
486306270,christinanelson,MyThesis,"These files show a selected subset of source code for my thesis. It is set to work in lxplus, the center for european nuclear research's (CERN's), computing cluster. The main function of these files is to process a large set of nutples. The processing selects events of interest, and jobs are handled for efficient processing with the use of the HT Condor batch system. Outputs can then be merged from the Condor jobs and results viewed after Plotting the distributions.",https://github.com/christinanelson/MyThesis,239,0,0,0,0,1,42,5,1.4523809523809523,0,0,0,0,0,6.642857142857143,887.9617985802208,1.4418299072778962,7103.52363620596
608995151,Jacky-Law,clean-architecture-fastapi-template,,https://github.com/Jacky-Law/clean-architecture-fastapi-template,48,2,2,0,0,1,20,4,0.4,1,0,0,1,2,0.35,2.6774437510817344,0.075,1.7264662506490407
154561951,trco,events-marketplace,An open source Events Marketplace built with Django.,https://github.com/trco/events-marketplace,69,2,2,0,2,0,55,4,2.2181818181818183,0,0,0,0,0,3.945454545454545,5.902889724346975,0.2537373737373737,6.611365555755711
877974896,TLPC1111111,Maximum-Independent-Set-Solver-using-GIN,This project implements a neural network-based solver for the Maximum Independent Set (MIS) problem using Graph Isomorphism Networks (GIN) from the PyTorch Geometric library. The network architecture consists of multiple GIN convolutional layers followed by fully connected layers to process graph-structured data.,https://github.com/TLPC1111111/Maximum-Independent-Set-Solver-using-GIN,11131,1,1,0,0,1,8,3,3.75,0,0,0,0,0,5.625,66.52373726598533,1.4166666666666663,423.4277425376349
868519902,chiranjeeviAWS-DEVOPS,TradeXCloud_User_CQRS_API,Python Flask API for Creating and Uploading Event Logs into S3 Bucket ,https://github.com/chiranjeeviAWS-DEVOPS/TradeXCloud_User_CQRS_API,0,0,0,0,0,1,1,0,4.0,0,0,0,0,0,5.0,4.754887502163469,0.5,2.3774437510817346
710453285,CodingBee77,hexagonal_architecture,"This is example of hexagonal architecure in Python, commonly named as the ports and adapters pattern.",https://github.com/CodingBee77/hexagonal_architecture,4,0,0,0,0,1,3,2,3.0,1,0,0,0,1,4.333333333333333,4.0,0.6666666666666666,8.0
848860128,simplydac,clean-architecture-demo,,https://github.com/simplydac/clean-architecture-demo,4,0,0,0,0,1,4,0,1.5,0,0,0,0,0,10.75,3.5661656266226016,0.375,1.7830828133113008
166837722,derconno,RSSPublisher,RSSPublisher collects events from different sources and publishes them to a RSS feed,https://github.com/derconno/RSSPublisher,39,0,0,0,0,1,8,1,4.5,1,0,0,0,1,8.125,41.30856779905263,1.0364583333333337,83.90794508107533
968086723,developeranku,fastapi-clean-architecture,,https://github.com/developeranku/fastapi-clean-architecture,40,1,1,0,0,1,36,3,0.8611111111111112,0,0,0,1,1,0.6666666666666666,1.18676394119309,0.09375,1.6665984051742424
561712335,MarkTLite,microservices-sportsbetx,"Used the microservices architecture pattern for a sports betting web application. Used flask, PostgreSQL, gRPC, openAPI, cloud run",https://github.com/MarkTLite/microservices-sportsbetx,18,0,0,1,0,1,18,2,2.7222222222222223,0,0,0,0,0,8.666666666666666,21.161936984062574,0.5582010582010581,27.835755348255127
632613849,vschmidt,hexagonal_architecture,,https://github.com/vschmidt/hexagonal_architecture,72,0,0,0,0,1,86,5,0.6627906976744186,1,1,1,1,4,0.7093023255813954,0.9223070966453568,0.0523255813953488,1.3371478414584792
18786468,commoncode,cqrs-renormalize,,https://github.com/commoncode/cqrs-renormalize,184,1,1,0,0,38,2,1,4.0,0,0,0,0,0,9.0,35.162015360476666,1.0,70.32403072095333
144139781,AnshThakur,All_conv_net_IS2018,"# All Conv-Net for Bird Activity Detection Significance of Learned Pooling Bird activity detection (BAD) deals with the task of predicting the presence or absence of bird vocalizations in a given audio recording. In this work, we propose an all-convolutional neural network (all-conv net) for bird activity detection. All the layers of this network including pooling and dense layers are implemented using convolution operations. The pooling operation implemented by convolution is termed as learned pooling. This learned pooling takes into account the inter featuremap correlations which are ignored in traditional max-pooling. This helps in learning a pooling function which aggregates the complementary information in various feature maps, leading to better bird activity detection. Experimental observations confirm this hypothesis. The performance of the proposed all-conv net is evaluated on the BAD Challenge 2017 dataset. The proposed all-conv net achieves state-of-art performance with a simple architecture and does not employ any data pre-processing or data augmentation techniques. This work is accepted for publication in INTERSPEECH 2018.        feature_extract.py is used to extract melspectrogram features.      all_convnet_BAD.py is the all convolutional model architecture      all_convnet_BAD_maxpool_variant.py is the maxpool variant of the all_conv_net model      get_activation_map.py is used to analyse any layer activations in the model     To know more about BAD 2017 challenge and to download data, follow this link http://machine-listening.eecs.qmul.ac.uk/bird-audio-detection-challenge/",https://github.com/AnshThakur/All_conv_net_IS2018,1957,1,1,1,0,0,4,0,8.5,0,0,0,0,0,0.75,35.96997636784959,2.394230769230769,140.45480457398077
315698516,Acetonen,clean-architecture,,https://github.com/Acetonen/clean-architecture,3,0,0,0,0,1,1,0,0.0,0,0,0,0,0,50.0,4.754887502163469,0.5,2.3774437510817346
928804501,markompab,EEG-Graph-Embedding-with-Small-World-Propensity-Guided-Autoencoders,"In the proposed architecture, encoder and decoder modules both contain long short-term memory layers to model the temporal properties at each node and graph sampling and aggregation convolution blocks to model internodal relationships.",https://github.com/markompab/EEG-Graph-Embedding-with-Small-World-Propensity-Guided-Autoencoders,71,0,0,0,0,1,30,1,5.433333333333334,1,0,0,0,1,17.620689655172413,378.439762844949,2.9514242161988564,2072.622210374056
448213374,Prakhar896,Access,"A clean, efficient file storage web app with features like file sharing and sorting powered by a robust system architecture.",https://github.com/Prakhar896/Access,5074,5,5,0,0,1,23,4,7.608695652173913,0,0,0,0,0,49.65217391304348,573.4354484706292,4.037651789065719,3407.220101379319
707900819,mvwebsolut,Clean-Architecture-com-Python,"Projeto de estudo sobre clean archtecture para projeto em python, o projeto consiste em um sistema de petshop , o curso é ofertado pelo ""Programador Lhama"" presente no seguinte link: https://www.youtube.com/watch?v=2pv9Bew4I9I&list=PLAgbpJQADBGJmTxeRZKWvdJAoJj8_x3si",https://github.com/mvwebsolut/Clean-Architecture-com-Python,0,0,0,0,0,1,10,3,0.2,1,0,0,1,2,0.4,0.0,0.0,0.0
22603238,weso,wixDom,Web Index Domain modelled using DDD and Hexagonal Architecture,https://github.com/weso/wixDom,2940,1,1,0,1,6,44,4,2.227272727272727,1,1,0,1,3,13.545454545454543,76.55631717159608,0.9868117337605526,628.0791684417172
647188874,akshita-kansal,DDoS-VanGuard," This project introduces the intrusion detection system to identify DDoS attacks in VANETs. It implements a multilayer perceptron (MLP) neural network architecture with three fully connected layers, achieving effective feature representation and classification of the DDoS dataset.",https://github.com/akshita-kansal/DDoS-VanGuard,4,2,2,0,0,1,1,0,11.0,0,0,0,0,0,4.0,46.50699332842308,1.9285714285714288,89.6920585619588
796336773,BadrTarek,python-grpc-users-operations,Python-gRPC-Users-Operations is a Python gRPC application designed with a clean architecture provided by Uncle Bob for user CRUD operations,https://github.com/BadrTarek/python-grpc-users-operations,98,2,2,0,0,1,89,6,3.550561797752809,1,1,1,1,4,2.865168539325843,1.1565405178527557,0.0596754057428214,1.1333016354784915
428955061,Fredstrom,Rip-and-ship,"Group-assignment for school: create a database, populate it and make an application with some basic functionality. Use multi layered architecture.",https://github.com/Fredstrom/Rip-and-ship,1310,0,0,0,5,1,57,5,1.6666666666666667,1,1,1,0,3,8.894736842105264,42.40875521427981,0.4210732714138286,186.99716825999488
251642786,uzh-rpg,rpg_vid2e,"Open source implementation of CVPR 2020 ""Video to Events: Recycling Video Dataset for Event Cameras""",https://github.com/uzh-rpg/rpg_vid2e,10226,352,352,83,41,19,23,5,5.173913043478261,0,0,0,0,0,12.347826086956522,237.7894612809922,3.3414202751679456,1634.1966233982605
964783539,lucasmilanezs,SecureAPI-Core,"Secure and scalable backend API using FastAPI, JWT, and clean architecture.",https://github.com/lucasmilanezs/SecureAPI-Core,21,0,0,0,0,1,26,2,2.923076923076923,1,1,1,0,3,2.8076923076923075,6.444939424241867,0.3113553113553113,14.596943272012371
622536092,breaktoprotect,test-auth-microservices,An exploratory work testing out how to provide authentication and authorization in a microservice architecture. ,https://github.com/breaktoprotect/test-auth-microservices,12,0,0,0,0,1,1,0,2.0,0,0,0,0,0,4.0,4.754887502163469,0.5,2.3774437510817346
646404438,elt0nxale,GoBook-backend,class booking app (Microservice Architecture) frontend: https://github.com/elt0nxale/GoBook-frontend,https://github.com/elt0nxale/GoBook-backend,10252,0,0,0,0,1,13,7,6.153846153846154,0,0,1,0,1,7.384615384615385,83.89030572141179,1.8353937728937733,234.8571173066721
541448000,DrompiX,popugator,Popug task manager,https://github.com/DrompiX/popugator,122,0,0,0,1,2,85,4,3.929411764705882,0,0,1,1,2,5.776470588235294,8.796729253340246,0.4902673796791444,13.88507543707985
884771646,tenaprog,MicroCart,Scalable Microservice Architecture for E-Commerce,https://github.com/tenaprog/MicroCart,411,0,0,0,0,1,29,2,3.3793103448275863,1,0,0,0,1,3.931034482758621,10.865705350338152,0.5233990147783252,22.51767606109686
219144539,GiilDe,OpenCEP,Initial implementation of an open source complex event processing library,https://github.com/GiilDe/OpenCEP,5457,1,1,0,0,2,9,1,2.2222222222222223,0,0,0,0,0,26.55555555555556,113.69593927454672,2.8195847362514024,651.6633335810459
388964984,DionVitor,PokeTeam,"Pokemon team management API, with clean architecture.",https://github.com/DionVitor/PokeTeam,55,5,5,0,2,1,47,4,2.3617021276595747,1,1,1,1,4,2.9574468085106385,4.007801681338044,0.1835106382978723,7.005858428457564
776660243,nasif-raihan,Document-Management-Tool,"Followed OOP, SOLID principles and layered architecture best practices",https://github.com/nasif-raihan/Document-Management-Tool,89,0,0,0,2,1,55,2,2.5636363636363635,1,0,1,0,2,4.363636363636363,2.902934990685697,0.1553030303030303,3.2815559382982045
467355083,pawanprjl,fast-api-ms-boilerplate,A fast api implementation boilerplate for microservice architecture.,https://github.com/pawanprjl/fast-api-ms-boilerplate,355,0,0,1,0,1,9,2,2.555555555555556,0,0,0,0,0,2.0,3.863996589205042,0.2444444444444444,3.897146740042844
450049368,8percent,jenga,Clean Architecture,https://github.com/8percent/jenga,51,5,5,6,1,3,9,2,1.2222222222222223,0,0,0,0,0,7.333333333333333,0.5283208335737188,0.0555555555555555,0.2641604167868594
747579662,youngjaekwon,hexagonal-architecture-boilerplate,,https://github.com/youngjaekwon/hexagonal-architecture-boilerplate,52,0,0,0,0,1,41,6,1.5121951219512195,1,1,0,1,3,1.7560975609756098,3.139443773802878,0.1514095660437124,5.751761242451553
498381751,AmzadHossainrafis,Video_Frame_Prediction,"The Convolutional LSTM architectures bring together time series processing and computer vision by introducing a convolutional recurrent cell in a LSTM layer. In this example, we will explore the Convolutional LSTM model in an application to next-frame prediction, the process of predicting what video frames come next given a series of past frames.",https://github.com/AmzadHossainrafis/Video_Frame_Prediction,8378,2,2,0,0,1,4,1,5.75,0,0,0,0,0,6.25,58.39113395730266,1.4415204678362574,158.93833594675505
399310465,NEONKID,cookiecutter-nk-fastapi,FastAPI Layered Architecture Template,https://github.com/NEONKID/cookiecutter-nk-fastapi,22,0,0,0,2,1,30,4,1.3,1,1,1,1,4,1.3,1.5169925001442313,0.0777777777777777,1.7584962500721155
902934115,robsonlimadeveloper,fast-api-mvc-example,"Simple example of FastAPI using MVC and microservices elements architecture, the application contained here develops some functionalities for accessing the database and creating models and tests. Below are the steps required to run the database and the application backend locally.",https://github.com/robsonlimadeveloper/fast-api-mvc-example,68,1,1,0,0,1,34,3,4.088235294117647,1,0,0,0,1,5.705882352941177,9.905770946759413,0.3970588235294117,13.452775426580269
85928825,OnShift,simple-es,"A ""simple"" Event Sourcing library for Python",https://github.com/OnShift/simple-es,16,0,0,2,0,0,7,3,0.4285714285714285,0,0,0,0,0,4.428571428571429,3.8876752683749,0.2142857142857142,3.5480404467917954
795825941,massgits,cs361-WeatherApp,A weather app implementation demonstrating understanding of a microservices architecture.,https://github.com/massgits/cs361-WeatherApp,9,0,0,0,0,1,5,0,2.2,0,0,0,0,0,4.6,42.27380737009574,1.1692307692307693,76.41278998820418
119871116,Jeffzfeng,eventure,crowd-sourced location sharing trip planner,https://github.com/Jeffzfeng/eventure,2,0,0,0,0,1,1,1,2.0,0,0,0,0,0,3.0,15.509775004326936,1.0,15.509775004326936
792828757,antonio-hus,News-Aggregator,The Daily Report is a web platform designed to aggregate news articles from multiple sources of Mass Media. It offers users one place to stay up to date with all current events and opinions of multiple jurnalists.,https://github.com/antonio-hus/News-Aggregator,11310,1,1,0,1,1,50,7,2.24,1,0,0,0,1,4.76,10.730827147886684,0.4715079365079364,24.353858672342604
804579568,Piovezan1207,python-hexagonal-architecture,,https://github.com/Piovezan1207/python-hexagonal-architecture,18,0,0,0,0,1,7,4,2.0,1,1,0,1,3,3.4285714285714284,0.0,0.0,0.0
636447369,ivarvingrencarrera,CleanCode-CleanArchitecture-DomainDrivenDesign-Python,,https://github.com/ivarvingrencarrera/CleanCode-CleanArchitecture-DomainDrivenDesign-Python,284,1,1,0,42,1,207,5,2.135265700483092,1,1,1,1,4,3.5603864734299515,10.5458301374988,0.2634605226774055,16.11430800787874
312033852,GreyTeam2020,GoOutSafe_microservice,:octocat: GoOutSafe a web app (with microservices architecture) that implements some cool features to survive during this covid19 Pandemic. This web app is developed during the Advanced Software Engineering course  by the Univerisity of Pisa :computer:,https://github.com/GreyTeam2020/GoOutSafe_microservice,732,3,3,3,3,2,41,5,3.8536585365853657,0,1,1,1,3,25.21951219512195,371.3642036651692,1.4830537372206023,1831.4664970609476
176705599,AndreasArne,Clean-Architecture,Workthrough of the book https://leanpub.com/clean-architectures-in-python.,https://github.com/AndreasArne/Clean-Architecture,1144,0,0,0,0,1,67,4,1.462686567164179,1,1,1,0,3,5.656716417910448,37.028035707157045,0.4731242298847633,50.10403719113321
828788217,ArtemKAF,clean_architecture_fa,,https://github.com/ArtemKAF/clean_architecture_fa,91,0,0,0,0,1,6,1,3.1666666666666665,0,0,0,0,0,2.5,3.1144093452479407,0.1666666666666666,1.5572046726239703
772045180,diandraaaaa,Programming-Fundamentals,"This Repository outlines the lab homework completed during the first semester of the Programming Fundamentals course, focusing on Python basics, basic OOP, and layered architecture.",https://github.com/diandraaaaa/Programming-Fundamentals,62,0,0,0,0,1,41,3,1.3658536585365857,0,0,0,0,0,7.536585365853658,75.40608642113006,1.277773170513486,258.72637833270574
956772822,potandr1977,CqrsProjections,"Project where I'm planning to have a fun with:  Modular monolith, CQRS, projections, aggregates, kafka and etc",https://github.com/potandr1977/CqrsProjections,18,0,0,0,0,1,52,3,1.3269230769230769,1,1,0,1,3,1.75,1.961806140990331,0.0673076923076923,3.488187161642736
928924956,rymarksr,Banking-System-Application,"A clean architecture implementation with Domain (Account/Transaction/Customer entities), Use Case (account management, transaction processing), and Infrastructure (data persistence, external integrations) layers, maintaining separation between business logic and technical implementation.",https://github.com/rymarksr/Banking-System-Application,129,0,0,0,0,1,10,2,2.5,1,1,0,1,3,8.2,30.199364081718905,1.307070707070707,69.25560146783234
866521264,fabianfalon,url-shortener-clean-architecture,"🐍 A URL shortener application that follows the principles of Clean Architecture. This project provides a simple and efficient way to shorten long URLs, making them easier to share and manage. It is designed for scalability and maintainability, ensuring a robust codebase that adheres to best practices.",https://github.com/fabianfalon/url-shortener-clean-architecture,35,0,0,0,1,1,20,3,3.8,1,1,1,1,4,6.6,3.8274437510817343,0.1821428571428571,3.8114072332400446
923907940,thalissonvs,finnect,"A production-ready Django financial ecosystem leveraging Docker, DRF, and microservices architecture. Built for reliability with CI/CD pipelines, cloud-native orchestration, Redis caching, Celery/RabbitMQ task queues, and Nginx optimization. 🏦",https://github.com/thalissonvs/finnect,184,1,1,0,0,2,43,4,3.5348837209302326,0,0,0,0,0,4.418604651162791,16.00129949899248,0.4286033088358669,38.90318375829107
757441847,VanderSVan,Clean_Architecture,,https://github.com/VanderSVan/Clean_Architecture,1655,0,0,0,0,1,179,8,3.0726256983240225,0,1,1,1,3,24.776536312849164,188.0296180489874,1.039764775707992,992.250604448856
316960529,AreebMalik1989,Clean-Bmi,Clean architecture based Bmi calculator implemented in Python,https://github.com/AreebMalik1989/Clean-Bmi,23,0,0,0,0,1,4,1,3.75,0,0,0,0,0,29.25,200.22901924018,2.55,1642.2976797528895
152909770,haritkumar,nats_messaging_system,"NATS Server is a simple, high performance open source messaging system for cloud native applications, IoT messaging, and microservices architectures.",https://github.com/haritkumar/nats_messaging_system,2940,0,0,1,0,1,1,0,4.0,0,0,0,0,0,3.0,28.529325012980813,1.5,42.793987519471216
217899170,teibit,xarray-events,An open-source API for handling events based on xarray.,https://github.com/teibit/xarray-events,162,2,2,1,1,2,14,6,4.785714285714286,0,0,0,0,0,11.142857142857142,209.0076315923841,1.0398719049302294,814.3052130660534
592885993,ttyobiwan,esorcerer,Event sourcing dashboard powered with various plugins.,https://github.com/ttyobiwan/esorcerer,51,0,0,0,2,0,41,3,2.951219512195122,1,0,1,1,3,6.414634146341464,34.39513608291194,0.4095766498205523,61.643788873946846
876552050,codertech120386,cqrs-fastapi,cqrs with fastapi using RabbitMQ / SQS,https://github.com/codertech120386/cqrs-fastapi,7,0,0,0,0,1,7,1,1.8571428571428568,0,0,0,0,0,3.0,0.6792696431662099,0.0714285714285714,0.3396348215831049
724258097,lps08,fast-api-clean-architecture,,https://github.com/lps08/fast-api-clean-architecture,20,0,0,0,1,1,27,4,1.7407407407407407,1,1,1,1,4,1.4074074074074074,0.1761069445245729,0.0185185185185185,0.0880534722622864
231173583,jamesonl,coffee-shop,"Life is a simulation - so is this. Change how you play by changing the game. An experiment in microservice architecture, gamification, and python.",https://github.com/jamesonl/coffee-shop,21,2,2,0,0,2,11,1,1.7272727272727273,0,0,0,0,0,1.0909090909090908,3.9732732800128656,0.2727272727272727,2.6916264129303844
272347104,BastinRobin,Sentiment-Microservice,Microservice architecture,https://github.com/BastinRobin/Sentiment-Microservice,4,0,0,0,0,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
394697192,umd-fire-coml,2021-Malware-Detection-Classification,"Malware detection is an important process in modern computing to help protect various systems from getting infected. The goal for any project, program, or system that aims to detect malware is to prevent any malicious software from running on a user’s computer. With our project, we have aimed to assist in the battle against malicious software by creating a model that can detect and label different types of programs as either malware or benign software. For this project, we used a Deep Neural Network (DNN) model.  archi  The architecture of our model, shown above, consists of a dense layer with relu activation, a batch normalization layer, and finally a dropout layer. As shown in the diagram, we use 10 of these layers. This project takes inspiration from the paper “Malware Analysis with Artificial Intelligence and a Particular Attention on Results Interpretability” created by Benjamin Marais, Tony Quertier, and Christophe Chesneau.",https://github.com/umd-fire-coml/2021-Malware-Detection-Classification,247,8,8,3,28,1,7,1,3.7142857142857135,0,0,0,0,0,2.857142857142857,4.285714285714286,0.5,6.0
152890664,matiasbastos,eventsorcery,Simple Event Sourcing ORM for Python,https://github.com/matiasbastos/eventsorcery,30,3,3,0,0,1,14,3,2.571428571428572,0,0,0,0,0,10.357142857142858,61.71192210632807,0.8637626262626262,128.08675514383972
805710514,therealirfanshafi,Quiz-App,This is repository is the source code for a quiz application to be used in gameshow type events,https://github.com/therealirfanshafi/Quiz-App,41,0,0,0,0,1,15,5,2.0,0,0,0,0,0,4.0,11.985163336602572,0.4133333333333333,22.03061725543752
595965074,governedbyprudence,django-microservices,Microservices architecture using django,https://github.com/governedbyprudence/django-microservices,3,0,0,0,0,1,6,2,1.6666666666666667,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
786607562,Suhas2Anumolu,Categorizer-,"The code uses TensorFlow and Keras to create a convolutional neural network (CNN) for classifying images from the CIFAR-10 dataset. It preprocesses the dataset, defines the CNN architecture with three convolutional layers, max pooling, and dense layers. The model is compiled with the Adam optimizer and categorical crossentropy loss. ",https://github.com/Suhas2Anumolu/Categorizer-,1,0,0,0,0,1,1,0,5.0,0,0,0,0,0,0.0,12.0,0.6666666666666666,8.0
719434718,BioCenter-SHU,MSFF-MA-DDI,"This is the repository of the work ""MSFF-MA-DDI: Multi-Source Feature Fusion with Multiple Attention blocks for predicting Drug-Drug Interaction events""",https://github.com/BioCenter-SHU/MSFF-MA-DDI,1681,0,0,0,1,0,10,1,16.3,0,0,0,0,0,24.9,271.9234997538348,3.833452700662003,1368.624033523999
815696646,Anton-Kot,quiz,Бэкенд приложения с опросами на фреймворке Sanic и Hexagonal Architecture,https://github.com/Anton-Kot/quiz,40,0,0,0,0,1,39,4,4.974358974358975,1,1,1,1,4,10.538461538461538,37.190907798592505,0.4665661136249371,61.49155505503708
804047349,alaamer12,event_sourcing_pattern,Event Sourcing pattern implementation.,https://github.com/alaamer12/event_sourcing_pattern,4,0,0,0,0,1,2,0,1.5,0,0,0,0,0,22.5,121.06593413314218,3.3035714285714284,411.897257107119
479930764,RunxinXu,TSAR,"Source code for ""A Two-Stream AMR-enhanced Model for Document-level Event Argument Extraction"" @ NAACL 2022",https://github.com/RunxinXu/TSAR,1140,36,36,7,8,2,10,2,6.8,0,0,0,0,0,39.0,1117.185114721366,7.368021846839494,15594.37366567383
829591337,neosergio,fastapi-clean,"A scalable To Do List application built with FastAPI, DynamoDB, and AWS CDK. Demonstrates a clean architecture approach, integration with AWS services, and unit testing with moto.",https://github.com/neosergio/fastapi-clean,8,0,0,0,0,1,17,3,1.0588235294117647,1,1,1,1,4,2.294117647058824,6.129779020167423,0.1862745098039215,10.09422774679186
702836481,serine000,FastAPI-Microservices-Proj,A project developed with FastAPI with a microservices architecture,https://github.com/serine000/FastAPI-Microservices-Proj,3,0,0,0,0,1,1,1,9.0,0,0,0,0,0,76.0,758.9007751774044,3.0223880597014925,2293.692641394394
659508187,andresacg30,it-services,"API Gateway that receives a job conversion and calls the necessary service. Returns the converted file. Tools used: Python (FastAPI), Microservices architecture, Factory Design Pattern, TDD.",https://github.com/andresacg30/it-services,315,0,0,0,0,1,20,4,2.2,0,1,0,0,1,5.55,23.28915961853944,0.3399999999999999,20.364197136490027
635130723,somerandomEthan,DLNLP_assignment_23,"This GitHub project focuses on sentiment analysis for Twitter data using RoBERTa and traditional algorithms. We preprocess the datasets with text cleaning and tokenization. RoBERTa's contextualized word embeddings and fine-tuned architecture excel in sentiment classification, outperforming traditional algorithms, especially with larger datasets.",https://github.com/somerandomEthan/DLNLP_assignment_23,913,2,2,0,0,1,8,1,6.75,0,0,0,0,0,5.625,139.01849344649457,2.1209478021978025,481.77594209865305
830426412,antoniahp,provider-integrations,This is an exercise to practice integrations with hexagonal architecture.,https://github.com/antoniahp/provider-integrations,51,0,0,0,0,1,72,5,2.2222222222222223,1,1,1,0,3,2.138888888888889,0.5456140627103373,0.0486111111111111,0.3805138022185501
723715184,luizferreira-io,hexagonal-architecture-python-example,Python example for hexagonal architecture implementation,https://github.com/luizferreira-io/hexagonal-architecture-python-example,885,3,3,2,0,1,19,3,2.210526315789474,1,1,0,1,3,3.789473684210526,17.2926245807893,0.596371610845295,27.08020907453488
939334525,sudankdk,WebSockets-Chatapp-,clean code architecture is followed,https://github.com/sudankdk/WebSockets-Chatapp-,7,0,0,0,0,1,21,2,2.238095238095238,1,0,0,1,2,1.3333333333333333,0.2264232143887366,0.0238095238095238,0.1132116071943683
739140720,RubenBranco,pytorch_nn,"Reimplementing PyTorch Layers and functions (e.g. Convolutional Layer) and Architectures (e.g. Transformer) for self-educational purposes. Nothing useful here, I'm afraid.",https://github.com/RubenBranco/pytorch_nn,9,0,0,0,0,1,8,2,3.5,0,0,0,0,0,10.375,44.68580858342519,1.1322916666666667,178.16793595656952
138855543,ganshan,rekognition-sqs,Use Rekognition to detect images with SQS as an event source,https://github.com/ganshan/rekognition-sqs,9,0,0,0,0,0,1,1,5.0,0,0,0,0,0,9.0,131.76952268336282,0.5,65.88476134168141
900459853,JuanJFarina,secrets-vault,"A secrets vault system inspired in Hashicorp Vault and used as example for my upcoming article on Domain-Driven Design. The system leverages a Ports and Adapters (a.k.a. Hexagonal, Onion, or Clean Architecture) together with an Event-Sourced Domain Model, and a Testing Pyramid emphasizing Unit Tests over Integration and E2E Tests (Shift-Left).",https://github.com/JuanJFarina/secrets-vault,31,1,1,0,0,1,20,2,1.85,0,0,0,0,0,3.3,8.03545093091814,0.5,10.685846092947058
693282139,johnerick-py,clean-architecture,,https://github.com/johnerick-py/clean-architecture,29,0,0,0,0,1,22,4,2.227272727272727,1,0,1,1,3,4.318181818181818,14.617193018506867,0.4769119769119769,25.057346052485244
457034402,scp756-221,term-project-data-miners,Implemented User-Music-Bookstore microservice architecture which is deployed on AWS Elastics Kubernetes Service where several REST APIs are used to fetch and store the data to and from AWS DynamoDB. Used Gatling to do load testing on the system and viewed the graphical metrics on Grafana,https://github.com/scp756-221/term-project-data-miners,487,1,1,2,0,2,28,3,5.357142857142857,0,0,0,0,0,11.75,156.82550482590798,2.10451091370209,466.92961792989576
817109061,teenmeem,Online-Mart,"This project aims to develop an online mart API using an event-driven microservices architecture. The API will leverage various technologies such as FastAPI, Docker, DevContainers, Docker Compose, PostgreSQL, Kafka, Protocol Buffers (Protobuf), and Kong for API gateway management. ",https://github.com/teenmeem/Online-Mart,5176,1,1,0,0,1,75,4,3.4133333333333336,0,0,1,0,1,4.546666666666667,21.386161188875683,0.7809292929292929,74.28656233216394
948333026,ahmadullah-ai-ops,self-healing-microservices-architecture, demo project showcasing the design of a self-healing system using containerized microservices and AI-driven recovery mechanisms.,https://github.com/ahmadullah-ai-ops/self-healing-microservices-architecture,9,0,0,0,0,1,5,2,1.4,0,0,0,0,0,3.4,16.403910001730775,0.9,18.803910001730777
375183980,ftnext,clean-review-practice,Implement review logic for practice of clean architecture,https://github.com/ftnext/clean-review-practice,35,0,0,0,0,1,31,3,2.193548387096774,1,1,1,0,3,3.5161290322580645,1.9858309371746727,0.1129032258064516,2.421821808778448
889757545,Holeekey,electronics_store_fastapi,E-Commerce API with FastAPI. Domain Driven Design and CQRS,https://github.com/Holeekey/electronics_store_fastapi,380,3,3,1,0,1,361,7,4.5069252077562325,1,1,1,1,4,4.212707182320442,11.495988763906306,0.2727978451700784,16.432241721453252
327485130,be-rock,coin-flipper,"A coin flipper created with influences from Onion/Clean/Hexagonal Architectures, DDD, and TDD  ",https://github.com/be-rock/coin-flipper,92,2,2,0,0,1,28,3,2.7142857142857144,1,0,1,1,3,4.357142857142857,11.474857474978489,0.3647186147186146,13.723732708863082
580466939,fabioalvarez,ml_app,"Web application that allow you to post a dog image and returns the race of it. For this project I use a microservices architecture: api (Flask API), redis and model.",https://github.com/fabioalvarez/ml_app,869,0,0,0,0,1,17,2,2.411764705882353,0,0,1,0,1,3.0588235294117645,13.313100904088412,0.4397759103641456,33.26178541856185
681257788,Praj2610,indian-cuisine-deploy-5030," The Indian Cuisine Analysis and Recommendation System project is a comprehensive initiative designed to deliver data-driven culinary insights and personalized recipe recommendations within the domain of Indian cuisine. This project combines various AWS services to achieve its objectives, making it an efficient and scalable solution.",https://github.com/Praj2610/indian-cuisine-deploy-5030,6904,0,0,0,0,1,2,0,10.5,0,0,0,0,0,17.5,892.8467002916622,4.032608695652174,5135.726294931541
672294707,MWronski12,smart-air-conditioning,Smart air conditioning system in microservices architecture,https://github.com/MWronski12/smart-air-conditioning,79,0,0,0,0,1,90,3,2.8666666666666667,0,1,0,0,1,7.1,10.999770662400154,0.2684967320261438,20.073838935098276
173375489,spember,eventsource-python,A terrible example of using event sourcing with python / django,https://github.com/spember/eventsource-python,13168,0,0,0,0,2,36,3,2.2222222222222223,0,1,0,0,1,6.222222222222222,26.11009516739597,0.5168985248908522,70.54059168972726
536027462,conradmugabe,comments_service,This repo demonstrates clean architecture pattern in python,https://github.com/conradmugabe/comments_service,39,0,0,0,0,1,36,3,1.4444444444444444,1,1,1,0,3,2.4166666666666665,6.529563752526125,0.2026143790849673,7.690356561294302
483441524,qlinhta,MLP-Mixer,"Implementation for paper MLP-Mixer: An all-MLP Architecture for Vision. MLP-Mixer, an architecture based exclusively on multi-layer perceptrons (MLPs). MLP-Mixer contains two types of layers: one with MLPs applied independently to image patches (i.e. ""mixing"" the per-location features), and one with MLPs applied across patches (i.e. ""mixing"" spatial information).",https://github.com/qlinhta/MLP-Mixer,513,17,17,0,0,1,3,1,5.333333333333333,0,0,0,0,0,5.333333333333333,60.42909203306677,1.9,159.04956622152096
630288783,jeffersondasilvamartins,pipeline-lakehouse-brewery,"Consume data from an API, and persist into a data lake architecture with three layers (bronze, silver, gold)",https://github.com/jeffersondasilvamartins/pipeline-lakehouse-brewery,3448,3,3,0,0,1,8,2,9.125,0,0,0,0,0,0.875,39.01466250649041,1.1964285714285714,49.607788401047415
455698207,abmaelbandeira,microservices-architecture,,https://github.com/abmaelbandeira/microservices-architecture,8,1,1,0,0,1,14,3,1.7857142857142858,0,0,0,0,0,1.1428571428571428,2.156391072149728,0.1607142857142857,2.186036607812502
464900667,pace-noge,python-clean-architecture,,https://github.com/pace-noge/python-clean-architecture,16,0,0,0,0,1,40,3,1.875,1,1,1,0,3,5.55,33.73848160126291,0.5560694740042565,53.02074197815743
683263574,nunesfi,Clean_Architecture,,https://github.com/nunesfi/Clean_Architecture,51,0,0,0,0,1,22,4,1.0454545454545454,1,1,1,1,4,1.9090909090909087,2.9460698876420497,0.1022727272727272,2.189610512297861
667910492,wangzihanggg,CMCL6D,Code for paper “Enhancing 6-DoF Object Pose Estimation through Multiple Modality Fusion: A Hybrid CNN Architecture with Cross-layer and Cross-modal Integration“”,https://github.com/wangzihanggg/CMCL6D,13276,25,25,2,0,1,26,12,11.884615384615383,0,0,0,0,0,21.26923076923077,912.937890407839,3.9726427960150175,10287.35031276778
561211995,AvidDevelopers,PythonObfuscatedPackageCleanArchitectureTemplate,a clean architecture template for python obfuscated package with stubs,https://github.com/AvidDevelopers/PythonObfuscatedPackageCleanArchitectureTemplate,50,3,3,1,5,1,15,4,2.8666666666666667,1,0,0,0,1,7.266666666666667,26.20504731044641,0.6570418470418471,54.68721706254309
641060503,naman09,VideoConvertorApp,Video to mp3 convertor with microservices architecture,https://github.com/naman09/VideoConvertorApp,100,0,0,0,0,1,14,3,3.0,0,0,0,1,1,2.7142857142857144,10.234211191723874,0.5561224489795918,16.441755374591985
671470401,PopClom,flask-microservice-template,This project is a Flask microservice template that follows a layered architecture design pattern.,https://github.com/PopClom/flask-microservice-template,9,0,0,0,0,1,19,2,1.894736842105263,1,1,1,1,4,4.473684210526316,5.80649013328695,0.3684210526315789,5.931618751764933
235998971,AureClai,stream-python,Stream - Mesoscopic event-based open-source traffic simulator,https://github.com/AureClai/stream-python,1562,4,4,2,11,1,37,2,3.081081081081081,0,0,0,0,0,16.972972972972972,549.0008613444659,2.8216895884762967,4358.748445816061
473367700,kod-kristoff,clean-architecture-fastapi-py,,https://github.com/kod-kristoff/clean-architecture-fastapi-py,35,0,0,0,1,1,16,5,1.125,0,0,1,0,1,0.75,1.1887218755408673,0.125,0.5943609377704336
903575978,manaswini1869,Video-to-Audio-App-on-Kubernetes,"This DevOps project demonstrates deploying a Python microservices app on Kubernetes (AWS EKS) that converts video to audio, using tools like Docker, Helm, RabbitMQ, MongoDB, and Postgres. It's an excellent project for both beginners and experienced professionals to understand microservices architecture and Kubernetes deployment.",https://github.com/manaswini1869/Video-to-Audio-App-on-Kubernetes,1243,0,0,0,0,1,9,3,4.888888888888889,0,0,0,0,0,4.555555555555555,28.03046447859899,1.14891975308642,79.1231528116499
807706022,flavien-hugs,fastapi-clean-architecture,"Clean Architecture with Python Build testable, scalable and maintainable Python applications with Clean Architecture by leveraging FastAPI capabilities",https://github.com/flavien-hugs/fastapi-clean-architecture,60,0,0,0,0,0,28,4,1.5,1,1,1,1,4,2.392857142857143,5.571962321043688,0.2619047619047619,9.470980022108224
837862444,Ross-logger,ProHired,A platform for getting hired using FastApi and microservices architecture.,https://github.com/Ross-logger/ProHired,133,1,1,0,0,1,15,2,3.8666666666666663,0,0,0,0,0,2.8,5.214503693398432,0.1393939393939393,5.618188026286551
5974777,wrohdewald,halirc,"halirc can get events from lirc and other sources. It controls devices like vdr, my Denon AVR 2805 Receiver (via RS232), my LG Plasma TV (via RS232) and other things by shell calls",https://github.com/wrohdewald/halirc,148,0,0,1,0,0,9,0,6.222222222222222,0,0,0,0,0,52.0,521.3840785088402,5.0489548585895605,4286.470837305226
849661750,dimolinas,Microservices-Web-Apps-with-RabbitMQ-React-TSX-Django-MaterialUI,"Build two microservices with Flask and Django, configuration with docker compose and event driven architecture communication with RabbitMQ, also the frontEnd is created with material UI and react based on Typescript",https://github.com/dimolinas/Microservices-Web-Apps-with-RabbitMQ-React-TSX-Django-MaterialUI,215,0,0,0,0,1,29,3,2.3793103448275863,0,0,1,0,1,1.5862068965517242,2.3679927712001247,0.1580459770114942,1.5020770136516677
606088550,marcosvliras,CleanArchitecture,Implementação de arquitetura limpa no back end de uma API,https://github.com/marcosvliras/CleanArchitecture,29,0,0,0,0,1,72,4,2.361111111111111,1,1,1,1,4,4.027777777777778,16.511907433671478,0.408507696007696,31.65888222733607
497558948,chaimakr,lab3-microservices-architecture,,https://github.com/chaimakr/lab3-microservices-architecture,49,2,2,0,0,1,5,3,5.6,1,0,0,0,1,7.2,24.48254606975687,0.6,43.35915531806744
709485964,jrdevn,clean-tdd-ddd-py,Clean Architecture + DDD + TDD + Frameworks Python (Django & Flask),https://github.com/jrdevn/clean-tdd-ddd-py,97,0,0,0,0,1,10,3,2.0,1,1,0,0,2,3.8,3.860964047443681,0.2,3.860964047443681
628116867,aneeshna07,Microservices-Architecture-Docker,,https://github.com/aneeshna07/Microservices-Architecture-Docker,9,0,0,0,0,1,9,4,2.6666666666666665,0,0,0,0,0,5.444444444444445,49.84067997606749,1.5290598290598292,162.86749561554473
968602899,gorbatsiukvladislav,etail-crm-product-service,Product Service - Part of Retail CRM V2 Microservices Architecture,https://github.com/gorbatsiukvladislav/etail-crm-product-service,19,0,0,0,0,1,25,2,2.4,1,1,1,0,3,5.16,17.314885169820386,0.2815238095238095,20.67221188143113
135310151,layzeelab,unicron,Distributed task queue and scheduler. A replacement for Cron Unix service in microservice architecture.,https://github.com/layzeelab/unicron,40,0,0,1,0,1,11,2,4.090909090909091,0,1,1,0,2,11.545454545454543,158.01568998134042,2.164903880768954,734.9903588097783
893113864,DiaconuAna,SOA-App,Library Management Application using a microservice architecture,https://github.com/DiaconuAna/SOA-App,1334,0,0,0,0,1,25,2,4.0,0,0,0,0,0,5.36,23.92385709426237,0.5613888888888888,60.63917487089738
786298860,AnkitXP,CCT-ViT,"A Compact Convolution Transformer is a neural network architecture that combines the efficiency of convolutional layers with the long-range dependency modeling capabilities of transformers, designed to reduce computational complexity while maintaining performance.",https://github.com/AnkitXP/CCT-ViT,571,0,0,0,0,1,7,1,6.142857142857143,0,0,0,0,0,12.428571428571429,151.4127007353402,2.4813492063492064,930.272822761879
820136246,Neihouse,slacksync,"SlackSync is a powerful suite of open-source tools designed to streamline communication, enhance collaboration, and optimize workflows for multi-event venues directly within Slack.",https://github.com/Neihouse/slacksync,9,0,0,0,0,1,19,2,0.8421052631578947,0,0,0,0,0,0.7894736842105263,5.623664474063767,0.1929824561403508,10.656430592427888
268371148,victororozco,microservice-architecture,Architecture example for microservices.,https://github.com/victororozco/microservice-architecture,110,0,0,0,19,1,23,5,3.869565217391304,1,1,1,0,3,1.6521739130434785,2.752404100688095,0.1608695652173913,3.385578616515513
497885184,ccreusot,bank_account_kata_evs,Trying to play with Event Sourcing on BankAccountKata,https://github.com/ccreusot/bank_account_kata_evs,303,0,0,0,0,1,9,0,1.0,0,0,0,0,0,3.7777777777777777,1.0566416671474377,0.1111111111111111,0.5283208335737188
575413594,texttest,BeeFriendly,app for learning about testing in a microservices architecture,https://github.com/texttest/BeeFriendly,1490,0,0,0,0,2,22,4,4.954545454545454,0,0,0,0,0,4.136363636363637,23.551356384426388,0.6158958001063264,41.24336320542033
656833174,almabud,clean_code_architecture_example,,https://github.com/almabud/clean_code_architecture_example,48,0,0,0,0,1,57,6,2.421052631578948,1,1,1,1,4,3.5964912280701755,1.0170007102802687,0.1228070175438596,0.769065074258423
703205523,anthonymelchor,HexagonalArchitecture,Hexagonal Architecture,https://github.com/anthonymelchor/HexagonalArchitecture,15,0,0,0,0,1,21,4,1.4761904761904765,1,1,0,1,3,5.666666666666667,7.958887138344587,0.238095238095238,14.965321725217754
949768449,volodyadev,clean-architecture,,https://github.com/volodyadev/clean-architecture,203,0,0,0,0,1,64,4,3.484375,1,1,0,1,3,5.109375,16.10833367226777,0.4778226114163614,37.9935683310794
114719288,amjaeger17,MLGitDemo,Demo Repo for https://boston-open-researcher-group.github.io/BORG/event/2017/12/04/Open-Source-Software-Development/,https://github.com/amjaeger17/MLGitDemo,4,1,1,9,3,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
958080424,PhoenixAnvil,bugsy,"Bugsy is a FastAPI microservice for tracking software issues, bugs, and feature requests. Built for modular integration in a microservices architecture.",https://github.com/PhoenixAnvil/bugsy,7,0,0,0,0,1,4,1,2.5,0,0,0,0,0,2.25,3.4828921423310435,0.125,1.7414460711655215
398761799,roma-glushko,domain-driven-design-katas,,https://github.com/roma-glushko/domain-driven-design-katas,21,0,0,0,0,2,6,2,1.6666666666666667,0,0,0,0,0,4.166666666666667,58.01674902932583,0.9595959595959596,184.10103484386312
323050742,aaaastark,Deep-Learning,"Deep learning (also known as deep structured learning) is part of a broader family of machine learning methods based on artificial neural networks with representation learning. Learning can be supervised, semi-supervised or unsupervised. Deep-learning architectures such as deep neural networks, deep belief networks, recurrent neural networks and convolutional neural networks have been applied to fields including computer vision, machine vision, speech recognition, natural language processing, audio recognition, social network filtering, machine translation, bioinformatics, drug design, medical image analysis, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance. Artificial neural networks (ANNs) were inspired by information processing and distributed communication nodes in biological systems. ANNs have various differences from biological brains. Specifically, neural networks tend to be static and symbolic, while the biological brain of most living organisms is dynamic (plastic) and analog. The adjective ""deep"" in deep learning comes from the use of multiple layers in the network. Early work showed that a linear perceptron cannot be a universal classifier, and then that a network with a nonpolynomial activation function with one hidden layer of unbounded width can on the other hand so be. Deep learning is a modern variation which is concerned with an unbounded number of layers of bounded size, which permits practical application and optimized implementation, while retaining theoretical universality under mild conditions. In deep learning the layers are also permitted to be heterogeneous and to deviate widely from biologically informed connectionist models, for the sake of efficiency, trainability and understandability, whence the ""structured"" part.",https://github.com/aaaastark/Deep-Learning,13,2,2,2,0,2,4,0,12.5,0,0,0,0,0,0.0,0.0,0.0,0.0
773470284,CompuTish,nn_handwriting_recognition,"This code defines a simple 3-layer fully connected neural network. The Net class defines the architecture, and the training loop updates the network's weights using the training data. After training, the network is tested on the test set to evaluate its performance.",https://github.com/CompuTish/nn_handwriting_recognition,2,0,0,0,0,1,1,0,6.0,0,0,0,0,0,4.0,225.94568133670737,4.227272727272728,955.1340165597176
646943039,herlanderbento,python-clean-architecture-ddd,,https://github.com/herlanderbento/python-clean-architecture-ddd,78,0,0,0,0,1,72,9,2.875,1,1,0,1,3,6.236111111111111,13.729913400894922,0.2892758142758143,63.97731188100514
136606306,microice333,Shouter,Shouter is project based on microservices architecture.,https://github.com/microice333/Shouter,3662,0,0,0,4,1,55,10,5.109090909090909,0,0,0,0,0,33.83636363636364,400.7986224079909,1.7640552958486149,3312.077918358977
881077797,severian42,Cascade-of-Semantically-Integrated-Layers,CaSIL is an advanced natural language processing system that implements a sophisticated four-layer semantic analysis architecture. It processes both user input and knowledge base content through progressive semantic layers.,https://github.com/severian42/Cascade-of-Semantically-Integrated-Layers,3712,66,66,8,0,4,10,2,7.5,0,0,1,0,1,49.8,426.27144645420697,2.609143366286224,3688.924691635785
194677277,vwt-digital,event-sourcing-helpers,Collection of gcloud functions,https://github.com/vwt-digital/event-sourcing-helpers,186,0,0,0,16,3,9,2,5.555555555555555,0,0,0,0,0,24.0,171.0911056158748,2.918670508744038,775.5826206160382
976566220,AhmedFerchich-i,url-shortener,FastAPI URL Shortener built with  a clean and modular architecture ,https://github.com/AhmedFerchich-i/url-shortener,7,0,0,0,0,1,15,2,2.7333333333333334,1,1,0,0,2,2.066666666666667,1.9509775004326937,0.3,1.792481250360578
723619373,eskazemi,CoffeeMesh,microservice architecture,https://github.com/eskazemi/CoffeeMesh,652,1,1,0,0,1,15,3,3.466666666666667,0,0,1,0,1,10.066666666666666,23.19647506570348,0.7794444444444444,59.54486819977962
202740303,0mars,monoskel,"An opinionated python app inspired by DDD and clean architecture [monorepo, REST, dependency-injection, falcon, marshmallow, swagger, openapi]",https://github.com/0mars/monoskel,294,3,3,0,8,1,94,8,2.4574468085106385,1,1,1,1,4,4.76595744680851,17.85821001108516,0.4336493563482461,53.07217180678467
570749918,flavien-hugs,fastapi-book-microservice,Une simple architecture de microservice avec FastAPI,https://github.com/flavien-hugs/fastapi-book-microservice,24,4,4,3,0,1,13,3,2.8461538461538463,0,0,1,0,1,3.3076923076923075,8.786813463646457,0.4230769230769231,7.959514425018498
591543085,FortressZero,Discord2Reddit,Microservices architecture that uploads discord images to Reddit posts,https://github.com/FortressZero/Discord2Reddit,3378,0,0,0,0,1,2,0,5.5,0,0,0,0,0,10.0,49.04736875252405,1.9772727272727275,127.22918693434224
889760388,MustafaYagci,Kubernetes-Microservice-Phonebook,Microservice Architecture for Phonebook Web Application (Python Flask) with MySQL using Kubernetes.,https://github.com/MustafaYagci/Kubernetes-Microservice-Phonebook,537,0,0,0,0,1,2,2,3.0,0,0,0,0,0,16.0,229.24980643862077,1.880434782608696,712.6753832138519
384397875,Clariteia,minos_microservice_cqrs,,https://github.com/Clariteia/minos_microservice_cqrs,6710,2,2,0,0,0,10,2,4.5,0,0,0,0,0,8.2,16.58998517751978,0.8166666666666667,42.80837333325637
649912272,reganmarie,DealerVision,"DealerVision is a web-based application created using Django, React, and Docker. The application uses Domain-Driven Design (DDD) and a RESTful architecture to ensure the separation of concerns and a clear separation of layers.  The application consists of three microservices: sales, inventory, and car servicing. ",https://github.com/reganmarie/DealerVision,355,0,0,0,0,1,58,4,1.9827586206896552,0,0,1,0,1,3.603448275862069,8.371754366793768,0.1423834785903751,11.066133711963728
652756303,ComicShrimp,fastapi-hexagonal-architecture-todolist,An implementation example of Fast API using hexagonal architecture,https://github.com/ComicShrimp/fastapi-hexagonal-architecture-todolist,45,0,0,0,0,1,13,3,1.6153846153846154,0,0,1,0,1,0.3846153846153846,4.163676895779905,0.2472527472527472,6.9026000217794445
701467209,SuganthiJagan,DE-Pipeline-for-EventSourcing,A CI/CD pipeline for an event source domain project with Redshift and dbt,https://github.com/SuganthiJagan/DE-Pipeline-for-EventSourcing,3878,0,0,0,0,1,3,6,2.0,1,0,0,0,1,8.333333333333334,24.626469869969387,0.7777777777777777,31.545333107243987
526546005,MarSpit,Deep_Learning_based_Depthmaps,"This repository presents a variety of neural networks that are capable of fusing sparse LiDAR point clouds and camera images in real-time to output dense depth images for autonomous driving. Those dense depth images can be used to assign depth data to every pixel in the camera image. This information can among others be used for the visual SLAM or to improve object detection. Various existing network architectures have been adopted to create lightweight networks which are capable to calculate the depth images with minimum computational resources and in a short period of time. This has for example been achieved by implementing depthwise separable convolutional layers, more efficient activation functions, a focus on the essential layers, and a reduction of the number of convolutions.",https://github.com/MarSpit/Deep_Learning_based_Depthmaps,2858,3,3,0,0,1,9,1,6.777777777777778,0,0,0,0,0,50.22222222222222,1802.2927319825808,7.611824166165151,21771.64287802821
910899531,UtkarshDhavale,AgenticAI-Applications,"A repository of AI agents designed for diverse domains, showcasing autonomous decision-making and problem-solving capabilities. Each project demonstrates domain-specific expertise, scalable architecture, and innovative AI-driven solutions. Contributions and feedback are encouraged to enhance and expand these intelligent agents!",https://github.com/UtkarshDhavale/AgenticAI-Applications,18,0,0,0,0,1,2,1,9.0,0,0,0,0,0,0.0,2.3774437510817346,0.25,1.1887218755408673
935421788,Nakakakilig,my_tinder_clone,"A pet project that implements simplified functionality similar to Tinder. The main goal is to practice microservices architecture, Clean Architecture concepts, and deployment. ",https://github.com/Nakakakilig/my_tinder_clone,542,0,0,0,7,1,172,4,3.186046511627907,1,1,1,1,4,4.261627906976744,8.320842206579124,0.3512302740863787,20.11481607673464
629623428,AN3WRAGE,UE20CS351-CC-Project-Microservice-Communication-using-Rabbitmq,"The project is about building and deploying a microservices architecture where multiple components communicate with each other using RabbitMQ, a message broker.",https://github.com/AN3WRAGE/UE20CS351-CC-Project-Microservice-Communication-using-Rabbitmq,546,0,0,3,0,1,5,3,3.2,0,0,0,0,0,2.2,0.9509775004326938,0.1,0.4754887502163469
950025554,sachintom999,ScrapeNinja,"A high-performance, distributed web scraper built with Scrapy, Kafka, and Redis, designed for large-scale data extraction. Features include anti-bot evasion (fingerprint spoofing, proxy rotation,), microservices architecture, and scalable storage (PostgreSQL)",https://github.com/sachintom999/ScrapeNinja,236,0,0,0,0,1,15,3,3.0,0,0,0,0,0,6.066666666666666,10.148224525063842,0.4142857142857143,27.69624240021893
298537574,paulgavrikov,visualkeras,"Visualkeras is a Python package to help visualize Keras (either standalone or included in TensorFlow) neural network architectures. It allows easy styling to fit most needs. This module supports layered style architecture generation which is great for CNNs (Convolutional Neural Networks), and a graph style architecture, which works great for most models including plain feed-forward networks.",https://github.com/paulgavrikov/visualkeras,1351,617,617,73,3,5,16,1,3.5625,0,0,0,0,0,17.1875,420.5394405986437,3.264923197871311,6760.70523571222
446086992,nishantwrp,microservices-example,A todo app based on microservice architecture.,https://github.com/nishantwrp/microservices-example,806,7,7,6,0,2,5,2,4.2,0,0,0,0,0,10.8,0.0,0.0,0.0
570413742,minhtran241,video-to-mp3-conveter-microservices,"Modular Microservices architecture for efficient video-to-MP3 conversion. Independent microservices handle video processing and audio extraction, providing adaptability for diverse applications and varying workloads.",https://github.com/minhtran241/video-to-mp3-conveter-microservices,299,1,1,0,0,1,16,2,5.25,0,0,0,1,1,2.375,16.85205757561333,0.71875,37.39320241136522
321155518,Gnoq,clean_architecture_in_python_-book_examples-,,https://github.com/Gnoq/clean_architecture_in_python_-book_examples-,33,0,0,0,0,1,10,1,1.2,0,0,0,0,0,6.4,48.35260234555251,0.65,90.46299028520998
275203127,s3pi,Iris-Segmentation-and-model-Interpretation,Pixel wise segmentation of Iris using Encoder-Decoder architecture and the interpretation of the model's decision using Layer-wise Relevance Propagation (LRP) algorithm.,https://github.com/s3pi/Iris-Segmentation-and-model-Interpretation,412,2,2,0,0,1,4,1,16.0,0,0,0,0,0,12.5,371.2625373118015,4.733141447368421,2702.6442525227203
678235756,luvemashru,TrackEventMapper,Tracking the Data flow from Source to destination,https://github.com/luvemashru/TrackEventMapper,39,0,0,0,0,1,19,3,3.526315789473684,0,0,0,0,0,7.2105263157894735,13.17452906891804,0.2894736842105263,21.14765102148036
795266324,VictoryChang,clean-architecture-api,clean-architecture-api,https://github.com/VictoryChang/clean-architecture-api,4,0,0,0,0,1,8,1,1.375,1,1,0,0,2,1.125,0.5943609377704336,0.0625,0.2971804688852168
784358508,asifrahaman13,ai-event-manager,The application is a simple tool to help the users to schedule the upcoming events from google calender and other data source.,https://github.com/asifrahaman13/ai-event-manager,3,0,0,0,0,1,3,0,4.333333333333333,0,0,0,0,0,5.0,55.47368752524047,1.45,208.26407259475997
789704505,Advanced-Observability,Micro-Services-Topology-Generator,Simple Microservices Architecture Generator,https://github.com/Advanced-Observability/Micro-Services-Topology-Generator,1573,3,3,0,0,2,10,3,4.9,0,0,0,0,0,58.5,901.13547932211,4.095729639011372,7405.478856929777
464093403,RavenbornJB,microservices-labs,A series of lab works for the Software Architecture course at UCU,https://github.com/RavenbornJB/microservices-labs,2077,0,0,0,0,1,5,1,6.0,0,0,0,0,0,7.0,47.931014090455086,1.7272727272727273,118.90068712053537
926799503,th3r4ven,python-clean-code-architecture,Studing Clean Code and Clean Architecture,https://github.com/th3r4ven/python-clean-code-architecture,4,0,0,0,0,1,25,6,0.8,1,1,1,1,4,1.84,0.08,0.02,0.04
518126589,yvanvrela,jsw-rest-api,Flask REST API with JWT and use of clean architecture.,https://github.com/yvanvrela/jsw-rest-api,14,0,0,0,0,1,13,4,2.6153846153846154,0,0,1,0,1,1.8461538461538465,1.0972817312684928,0.1153846153846153,0.5486408656342464
865945280,Maclovi,pure-architecture-fastapi,Implementation of Clean Architecture(Uncle Bob) on FastAPI.,https://github.com/Maclovi/pure-architecture-fastapi,215,21,21,0,0,2,92,6,3.108695652173913,1,1,1,1,4,3.4782608695652173,8.946485531963482,0.2543340788225698,9.221843510622556
605813116,Lucas382,B3tBurner,Este projeto está sendo desenvolvido com base na arquitetura de projeto Domain Driven Design (DDD) e utiliza padrões como Injeção de Dependência (Dependency Injection) e Inversão de Dependência (Dependency Inversion). O objetivo principal é aprimorar o entendimento sobre tópicos avançados no desenvolvimento de software.,https://github.com/Lucas382/B3tBurner,77,0,0,0,0,1,27,4,2.111111111111111,1,1,1,1,4,5.296296296296297,6.165692130564462,0.3425925925925926,10.801080649446227
616493952,vdittgen,clean_architecture_example,"Clean Architecture and CQRS (command query responsibility segregation) with Python3, FastAPI and Flask.",https://github.com/vdittgen/clean_architecture_example,38,2,2,1,0,1,28,4,2.321428571428572,1,1,1,1,4,4.607142857142857,2.466380358070058,0.1666666666666666,3.34242767996223
660804396,Sel52,Microservice-Architecture-for-Phonebook-Web-Application,Phonebook Microservice Web Application aims to create a web application with MySQL Database using Docker and Kubernetes to give the understanding of Microservice architecture.,https://github.com/Sel52/Microservice-Architecture-for-Phonebook-Web-Application,240,0,0,0,0,1,2,4,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
710284286,mahteuso,clean_arch_python,This project involves a database connection using the clean architecture concept. Based on the book Clean Architecture written by Leonardo Giornad,https://github.com/mahteuso/clean_arch_python,29,1,1,0,0,1,53,4,1.320754716981132,1,1,1,1,4,2.830188679245283,6.986255187271808,0.1544025157232704,5.372006645408834
830128326,Pragateeshwaran,GPT-2-From-Scratch,"This Project uses PyTorch to build and train a OpenAI’s GPT-like language model for text generation. It includes data preprocessing, defining model architecture with multi-head attention and feedforward layers, training with backpropagation, and text generation using the trained model.",https://github.com/Pragateeshwaran/GPT-2-From-Scratch,383,1,1,0,0,1,2,0,8.0,0,0,0,0,0,30.5,1068.1609500710897,10.326785714285714,13146.087286621056
769578332,MRzasa97,CQRS_PYTHON,,https://github.com/MRzasa97/CQRS_PYTHON,14,0,0,0,0,1,34,3,3.176470588235294,1,0,0,1,2,6.647058823529412,12.799378316497512,0.2438112745098039,26.781573641452677
726248918,abhisek11,event-management-python-microservice-,django and flast service to convert video to mp3 file with event management architecture microservice architecture ,https://github.com/abhisek11/event-management-python-microservice-,2,0,0,0,0,1,2,2,0.0,0,0,0,0,0,0.5,2.3774437510817346,0.25,1.1887218755408673
754004030,vjraghavanv,AWS-SAM-application,"AWS Serverless Application Model (AWS SAM) is an open-source framework for building serverless applications. It provides shorthand syntax to express functions, APIs, databases, and event source mappings.",https://github.com/vjraghavanv/AWS-SAM-application,10,0,0,0,0,1,8,3,1.0,0,0,0,0,0,2.625,9.648684376262024,0.3125,12.785526564393034
182544382,zooyf,event_sourcing,,https://github.com/zooyf/event_sourcing,1722,0,0,0,0,1,1,0,2.0,0,0,0,0,0,32.0,557.4893097309114,7.346938775510204,4095.839826594451
495610207,Eliezer090,Branas,"Repositório com os arquivos do curso do de ""Clean Code e Clean Architecture""",https://github.com/Eliezer090/Branas,48,0,0,0,0,1,22,4,2.3181818181818183,1,1,1,1,4,1.8636363636363635,1.6595352274694064,0.0909090909090909,1.4434039773710667
421468218,n1nj4t4nuk1,python-ddd-example,🐍 Example of a Python & FastAPI application using Domain-Driven Design and Command Query Response Segregation principles.,https://github.com/n1nj4t4nuk1/python-ddd-example,162,23,23,5,1,1,129,7,3.6589147286821695,1,1,1,1,4,4.596899224806202,4.560638732381423,0.2070299437604499,9.25978583464824
656939383,marcoslima,conway_game_of_life_labs,A simple exploration about clean architecture and game of life with a very compact expression using numpy,https://github.com/marcoslima/conway_game_of_life_labs,8,0,0,0,0,1,7,0,2.7142857142857144,0,0,0,0,0,8.714285714285714,45.755554452354815,1.4127551020408162,212.462168506456
196013458,McHogardty,Accounting,A small prototype project exploring event sourcing and CQRS,https://github.com/McHogardty/Accounting,8,0,0,0,0,0,12,2,2.833333333333333,1,1,0,1,3,8.666666666666666,9.007798660816738,0.3819444444444444,10.76444754454556
802996854,BrianThomasMcGrath,modular-monolith,,https://github.com/BrianThomasMcGrath/modular-monolith,52,0,0,0,0,1,32,4,2.8125,1,1,1,1,4,2.5625,2.183881841854071,0.0848214285714285,2.604604606991816
901661201,rigomoreirar,TO_DO_python_postgresql,"Simple TO-DO task project, using Python, Docker for PostgreSQL. This will work as a template for Hexagonal Architecture SOLID design. Will later create Opensource projects applying this design and same concept.",https://github.com/rigomoreirar/TO_DO_python_postgresql,33,1,1,0,0,1,60,3,1.0833333333333333,1,1,0,1,3,2.4,2.7531394975845127,0.1192129629629629,2.690211844939897
453191317,asSqr,dorapi,Doraemon API by Django REST framework (Clean Architecture) in-progress...,https://github.com/asSqr/dorapi,2109,3,3,0,3,2,138,8,2.5144927536231885,1,1,1,0,3,6.0144927536231885,22.690887357283746,0.3007459062676453,131.57808231187693
452255864,MohamadSerhal,gRPC_microservices,Applying microservices architecture using Python and gRPC APIs.,https://github.com/MohamadSerhal/gRPC_microservices,53,0,0,0,0,1,11,2,4.818181818181818,0,0,0,0,0,10.545454545454543,47.53339732104266,1.2324929971988796,209.7681702748163
303676132,Gun-mIn,2020_KSC,"This repo contains the source code of the paper submitted to KSC 2020. We pre-processed text data of web page and implemented human-web interaction using text summarization, tts, keyboard event.",https://github.com/Gun-mIn/2020_KSC,71,1,1,0,0,1,2,0,7.0,0,0,0,0,0,38.0,664.2473666086374,5.726461038961039,4334.093715094976
585242559,nivriti04,Twitter-Bot,"Made a Twitter Bot with tweepy (open source Python package) making use of the Twitter API and helped students have ease of access to offers, important dates and events happening around the University of Waterloo.",https://github.com/nivriti04/Twitter-Bot,3,0,0,0,0,1,1,0,2.0,0,0,0,0,0,10.0,0.0,0.0,0.0
136488493,bahnlink,pyclean,Python Clean Architecture Toolkit,https://github.com/bahnlink/pyclean,59,0,0,1,5,1,94,6,1.9680851063829787,1,0,0,1,2,10.54255319148936,65.12016101895992,0.5557574717191699,100.72470562492606
6571552,bitdeli,profile-toy-data,All events from the Bitdeli toy data source,https://github.com/bitdeli/profile-toy-data,122,1,1,2,0,2,1,1,1.0,0,0,0,0,0,0.0,0.0,0.0,0.0
743079337,ussoio,Usso-SSO,"Usso is a secure Single Sign-On (SSO) solution for businesses, enabling efficient authentication flows within microservice architectures. It supports multiple authentication methods, uses JWT with RSA encryption, and integrates with custom subdomains, simplifying user authentication and data management.",https://github.com/ussoio/Usso-SSO,993,1,1,0,0,1,45,3,5.333333333333333,1,0,1,0,2,14.2,122.78049252682818,1.6876610637219285,840.0881664697143
542463806,r4v3n-dr490n,whm-management,"fastapi, flask clean architecture",https://github.com/r4v3n-dr490n/whm-management,69,0,0,0,0,1,43,4,3.0232558139534884,1,1,0,0,2,2.441860465116279,2.604876099890956,0.1732558139534883,3.420522352643457
864225364,ageuribeiro,cleanarchpy,Demonstração de implantação da clean architecture em python.,https://github.com/ageuribeiro/cleanarchpy,12425,0,0,0,0,1,716,8,7.430167597765363,1,0,1,0,2,52.13826815642458,678.2900031707566,3.8500384180566094,6910.3125228968975
780810359,pi3c,clean-architecture-example,Blog RESTful API with clean architecture,https://github.com/pi3c/clean-architecture-example,231,5,5,1,0,0,102,6,3.1372549019607843,1,1,0,1,3,3.372549019607843,3.7463258691803,0.2238562091503267,6.415965483529724
919509241,ToshinoriIzumi,clean_architecture_sample,,https://github.com/ToshinoriIzumi/clean_architecture_sample,12,0,0,0,0,1,16,3,3.625,1,1,0,1,3,3.6875,0.5943609377704336,0.0625,0.2971804688852168
900286632,dinmohammadalamin,Microservices-Architecture-Project,,https://github.com/dinmohammadalamin/Microservices-Architecture-Project,5,0,0,0,0,1,7,2,1.8571428571428568,0,0,0,0,0,4.142857142857143,9.509775004326938,0.7142857142857143,12.906123220157982
704448779,maxwelbarno,video-to-audio-converter,A microservice architecture and distributed system design with python and kubernetes,https://github.com/maxwelbarno/video-to-audio-converter,14,0,0,0,0,1,8,3,2.5,0,1,0,1,2,3.5,22.81227682699176,1.0390625,59.82021357985103
834969668,AbhijeetRathi12,NeRF-View-Synthesis,"Implementation of Neural Radiance Fields (NeRF) for 3D view synthesis using sparse input views. This project showcases volumetric rendering, positional encoding, and multi-layer perceptron (MLP) architecture to generate high-quality, novel views of complex scenes. Developed as part of a computer vision project.",https://github.com/AbhijeetRathi12/NeRF-View-Synthesis,8408,0,0,0,0,1,3,2,6.666666666666667,0,0,0,0,0,15.0,1191.610345937723,6.04476911477327,9918.683495502411
810958921,JessicaE2344,CS-361-SE1,Course Work SE1- Vending Machine App using microservices architecture ,https://github.com/JessicaE2344/CS-361-SE1,4,0,0,0,0,1,5,0,1.6,0,0,0,0,0,9.2,84.40007541563376,1.8446153846153843,249.9102743051782
579847788,mrb987,VGGNet-CNN,VGG stands for Visual Geometry Group. it is a standard deep Convolutional Neural Network (CNN) architecture with multiple layers.,https://github.com/mrb987/VGGNet-CNN,4,2,2,0,0,1,1,0,11.0,0,0,0,0,0,0.0,12.0,0.6666666666666666,8.0
756550810,ocbunknown,fastapi-cqrs-mediator,Applying CQRS pattern with Python FastAPI.,https://github.com/ocbunknown/fastapi-cqrs-mediator,601,28,28,2,5,1,96,5,3.4479166666666665,1,1,1,1,4,5.635416666666667,10.08756872545936,0.3064472853535353,22.160950325998268
621221883,ROSUNICOLAE,Secure-ERP,"We created a highly secure ERP software that works offline, with a short, clean codebase, and modular structure. Our variant of MVC architecture ensures maximum security for local data files. Dummy data was used during development. This solution offers an efficient and secure way to manage daily operations without web or cloud technologies.",https://github.com/ROSUNICOLAE/Secure-ERP,122,1,1,0,0,1,12,2,2.833333333333333,0,0,0,0,0,17.916666666666668,247.2120194870901,2.190170436540672,1516.2714837389085
648095367,Sahal-P,Fusion-Server-Service-with-Clean-Architecture,Django Server Service using Channels and Redis implemented RabbitMQ message broker consumer In Clean Architecture,https://github.com/Sahal-P/Fusion-Server-Service-with-Clean-Architecture,81,0,0,0,0,1,91,7,1.7472527472527473,1,1,1,1,4,2.3956043956043955,1.216662144791939,0.0714285714285714,1.2889029697687406
674203019,Pasta-fantasia,elena,Hexagonal architecture trading bot in Python using CCXT with a Backtesting.py flavour,https://github.com/Pasta-fantasia/elena,716,3,3,1,1,1,74,5,3.5945945945945947,1,1,0,1,3,9.31081081081081,69.02187014846591,0.7040545801271544,379.8394330888763
386979839,sebajax,python-clean-architecture,Python code structure for developing using clean architecture,https://github.com/sebajax/python-clean-architecture,84,1,1,0,0,1,21,3,4.523809523809524,1,1,1,1,4,3.4761904761904763,5.221678709255762,0.2261904761904762,4.369105460719295
588908791,MISW4406,tutorial-5-cqrs-eventos,Repositorio con código base para el uso de un sistema usando el patrón CQRS y usando eventos de dominio e integración para la comunicación asíncrona entre componentes internos parte del mismo contexto acotado y sistemas externos.,https://github.com/MISW4406/tutorial-5-cqrs-eventos,6160,1,1,83,1,0,149,7,2.3422818791946307,0,0,1,0,1,4.134228187919463,5.387687248338473,0.147195589645254,7.06864407842398
141036510,bertbristow,GardenFoodPrep,Microservice architecture based Artificial Intelligence powered dietetics consultation module written in Python.,https://github.com/bertbristow/GardenFoodPrep,0,0,0,0,0,0,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
945944022,AlexKalll,Student-Registration-System-by-Applying-Clean-Architecture-Concepts,,https://github.com/AlexKalll/Student-Registration-System-by-Applying-Clean-Architecture-Concepts,13,0,0,0,0,1,7,1,1.5714285714285714,1,1,1,0,3,6.714285714285714,9.36452391493074,0.3333333333333333,6.687515473220801
246395452,nedstarksbastard,microservice-api,flask based microservice architecture,https://github.com/nedstarksbastard/microservice-api,36,0,0,0,2,1,6,4,4.0,0,0,0,0,0,10.833333333333334,21.115352710623167,0.7166666666666667,29.83807354397469
328865781,aberriel,clean_architecture_mongodb_adapter,Implementação da integração com o MongoDB para projetos em clean architecture.,https://github.com/aberriel/clean_architecture_mongodb_adapter,34,0,0,0,0,2,3,1,1.6666666666666667,0,0,0,0,0,14.666666666666666,94.49569391043292,1.1666666666666667,271.877441256862
201234454,hckcksrl,django-clean-architecture,,https://github.com/hckcksrl/django-clean-architecture,28,2,2,1,2,1,30,3,1.6,1,1,1,1,4,2.1666666666666665,1.4650883456668695,0.05,0.7325441728334348
905559332,YoraiLevi,modular-monolith-fastapi,"This is a modular monolith Fast API project that uses the latest and greatest tooling (uv, ruff, pyright, pydantic, pytest, fastapi, sqlmodel, etc) attempting to implement a modular monolith architecture. The repository include pre-commit hooks for ruff, pyright, and uv.",https://github.com/YoraiLevi/modular-monolith-fastapi,156,3,3,1,0,2,64,4,3.265625,1,1,0,0,2,6.359375,55.16070935069767,0.4087738151710835,128.96914404909415
90916978,Himon-SYNCRAFT,taskplus,"Example application which implements Robert Martin's ""Clean Architecture""",https://github.com/Himon-SYNCRAFT/taskplus,180,0,0,0,0,1,154,5,2.8766233766233764,1,0,1,1,3,12.87012987012987,88.16332856685666,0.7994543042286797,141.40904029635465
797328114,andromeda3453,python-kubernetes,Video to MP3 converter app built on the microservice architecture ,https://github.com/andromeda3453/python-kubernetes,17,0,0,0,0,1,6,3,3.1666666666666665,0,0,0,1,1,4.5,32.84445290061824,1.3405448717948716,91.87445718652184
879578930,sonu13204,fastapi_clean_architecture,"A FastAPI CRUD application for managing users, posts, and comments, following clean architecture principles. This project uses SQLAlchemy for asynchronous database interactions with PostgreSQL and Pydantic for data validation, providing a scalable RESTful API with interactive documentation.",https://github.com/sonu13204/fastapi_clean_architecture,11,0,0,0,0,1,32,3,2.1875,1,1,1,1,4,3.40625,4.844971875540867,0.265625,3.9852914066556497
152652607,crclark96,lug_hacktoberfest18,rollcall for our hacktoberfest event and intro to open source demo,https://github.com/crclark96/lug_hacktoberfest18,10,0,0,3,0,3,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
786671261,kapil-dhaimade,pydddcore,Python based Domain Driven Design building blocks.,https://github.com/kapil-dhaimade/pydddcore,34,2,2,0,0,1,4,2,2.25,0,0,0,0,0,37.75,440.4026093733423,2.549744897959184,2745.5606152926453
779803661,tselouie,restaurant-reservation-system,Cloud-based Restaurant Reservation System: A scalable and user-friendly platform utilizing a microservices architecture with Python backend and ReactJS frontend.,https://github.com/tselouie/restaurant-reservation-system,12016,0,0,0,0,1,10,3,5.8,0,0,1,0,1,16.5,80.99109529243272,1.14616368286445,150.80842453687
631685914,marcelobbfonseca,api-elimination-tournament-django,An elimination tournament API in python with Django and Clean architecture principles,https://github.com/marcelobbfonseca/api-elimination-tournament-django,116,0,0,0,2,2,57,3,2.6666666666666665,0,1,1,0,2,4.245614035087719,12.616185805743486,0.4158926728586171,37.16814320751854
878019669,Cray-HPE,vtds-application-vshasta,An application layer for vTDS that deploys CSM onto a Virtual Shasta architecture,https://github.com/Cray-HPE/vtds-application-vshasta,70,0,0,0,6,4,8,3,2.75,0,0,0,0,0,9.375,77.96498036586728,1.5655788177339902,259.42905063003457
945199774,micholeodon,clean_architecture_template,Based on Robert Martin's blog post about clean architecture.,https://github.com/micholeodon/clean_architecture_template,82,0,0,0,0,1,5,0,1.4,0,0,0,0,0,9.0,16.464968864896015,0.9357142857142856,25.906157798090184
745215353,baku01,Overengineering-em-python,Este repositório é um playground para explorar clean architecture e overengineering na prática.,https://github.com/baku01/Overengineering-em-python,16,0,0,0,0,1,8,2,1.0,1,0,0,1,2,1.125,0.0,0.0,0.0
366695147,j-kleemann,mvmeRoot2Spec,"Sort events of a ROOT file exported by the mvme_root_client from a Mesytech VME DAQ into spectra (histograms). Specifically aimed at the mvme DAQ used since 2021 at the High Intensity γ-ray Source (HIγS) facility, located at the Triangle Universities Nuclear Laboratory in Durham, NC, USA.",https://github.com/j-kleemann/mvmeRoot2Spec,146,2,2,0,0,1,1,0,17.0,0,0,0,0,0,345.0,6293.248181802489,16.372881355932204,103038.6058240882
555302578,kalimist123,SimplePortsAdapters,A very simplistic go at ports and adapters/clean architecture,https://github.com/kalimist123/SimplePortsAdapters,30,0,0,0,0,1,1,0,1.0,0,0,0,0,0,25.0,4.754887502163469,0.5,2.3774437510817346
792098915,brunoblda,python_clean_architecture,,https://github.com/brunoblda/python_clean_architecture,35,0,0,0,0,1,65,4,1.4615384615384617,1,1,1,1,4,2.6,5.01330108222806,0.1483516483516483,4.255446511863079
477498472,wellingtonf-souza,clean-architecture-lhama,,https://github.com/wellingtonf-souza/clean-architecture-lhama,44,0,0,0,0,1,78,3,2.6794871794871797,1,1,1,1,4,5.730769230769231,34.277791959618575,0.5441151441151442,64.29604105174263
886170660,avengerandy,MemoNest,An exercise CURD memo project inspired by Clean Architecture,https://github.com/avengerandy/MemoNest,68,0,0,0,0,1,30,3,2.5,1,0,0,0,1,10.833333333333334,11.582357165305584,0.3897619047619047,13.265778154362357
523600870,koei-kaji,ddd-clean-architecture-python,DDD example with Clean Architechture in Python,https://github.com/koei-kaji/ddd-clean-architecture-python,199,14,14,1,1,1,93,5,2.225806451612903,1,1,0,1,3,1.6774193548387095,0.8168889095336767,0.07168458781362,0.5762900512661588
912854762,PragmatikAI,stream-transformer,Transform snowplow events from a Kafka source. Flatten JSON output ready for wide table loading,https://github.com/PragmatikAI/stream-transformer,29,0,0,0,0,1,4,1,2.5,0,0,0,0,0,6.0,25.59295177628598,0.9,38.2534638846597
915821483,marcus-v-silva1,JWT-Api---Clean-Architecture,,https://github.com/marcus-v-silva1/JWT-Api---Clean-Architecture,8,0,0,0,0,1,7,3,2.571428571428572,1,1,1,1,4,3.2857142857142856,4.800644644196432,0.2857142857142857,4.800644644196432
880435297,pablons2,full-stack-nextjs-with-django,"Este projeto é uma aplicação web para cadastro e gerenciamento de projetos, implementando princípios de Clean Architecture. Ele utiliza Next.js 14 no front-end com TypeScript, Tailwind CSS e SWR para o consumo de APIs, além de Krakend como gateway para centralizar e gerenciar as APIs no back-end, que são construídas com Django e FastAPI.",https://github.com/pablons2/full-stack-nextjs-with-django,254,1,1,0,0,1,14,6,1.6428571428571428,0,1,1,0,2,0.5,0.6792696431662099,0.0714285714285714,0.3396348215831049
513713630,Antonio-Gabriel,event_driven_design_quiz_online_app,"Quiz online app using event drivel, clean architecture and segregation principal",https://github.com/Antonio-Gabriel/event_driven_design_quiz_online_app,19,1,1,0,0,1,16,3,2.5625,1,1,0,1,3,4.5,2.976126540050739,0.2604166666666666,6.979946424217333
96277032,iamleniac,python-rest-ddd,Python RESTful API with Domain Driven Design,https://github.com/iamleniac/python-rest-ddd,37,11,11,0,2,1,18,6,2.055555555555556,1,1,0,1,3,2.6666666666666665,0.2641604167868594,0.0277777777777777,0.1320802083934297
731012523,yuto-kamimura,clean-architecture,,https://github.com/yuto-kamimura/clean-architecture,24,0,0,0,0,1,32,3,2.40625,1,1,1,1,4,3.15625,2.7984023444260844,0.1302083333333333,2.3019267583195626
938541396,core-stack-org,core-stack-backend,"CoRE Stack Backend written in Django which computes layers, DB architecture. ",https://github.com/core-stack-org/core-stack-backend,4455,1,1,0,3,1,190,2,3.5210526315789474,0,0,0,0,0,13.557894736842105,417.2694249674874,1.252524679636625,3058.13839374079
889830840,ShahKaivan,microservice-application,"A scalable microservices-based architecture for enterprise applications, featuring API Gateway, secure authentication with Keycloak, asynchronous communication, and real-time monitoring with Prometheus and Grafana. Built with Go, Python, Java, and Docker.",https://github.com/ShahKaivan/microservice-application,52,0,0,1,0,1,4,9,4.0,0,0,0,0,0,8.25,22.59394269699545,0.625,29.532267168510003
375406115,satyap54,Microservices-Architecture,,https://github.com/satyap54/Microservices-Architecture,134,0,0,0,0,1,39,5,2.58974358974359,0,0,0,0,0,2.58974358974359,2.8914615998784887,0.173076923076923,4.785342012066659
973276160,uuuutsu,cqrs-template,Litestar webserver Ttemplate with CQRS,https://github.com/uuuutsu/cqrs-template,109,6,6,0,0,1,96,6,4.364583333333333,1,1,1,0,3,7.572916666666667,29.865750844514967,0.6045216199740182,130.51668324714825
123961721,psincraian,commandbus,Command Bus Pattern in Python,https://github.com/psincraian/commandbus,11,20,20,1,0,0,6,1,1.5,0,0,0,0,0,5.5,2.9182958340544896,0.25,2.7516291673878226
91834961,shudgston,links-web,Flask UI Companion to https://github.com/shudgston/clean-architecture-python,https://github.com/shudgston/links-web,9,0,0,0,0,0,16,3,2.6875,0,0,0,0,0,3.9375,3.19959058749442,0.171875,2.289117696916896
737326502,Tomdieu,DisasterFlow,"DisasterFlow is a robust and adaptable system designed to streamline disaster preparedness, response, and recovery efforts. It leverages a microservice architecture to provide enhanced scalability, flexibility, and fault tolerance.",https://github.com/Tomdieu/DisasterFlow,573,2,2,0,0,1,146,3,2.835616438356164,1,0,1,0,2,4.5479452054794525,14.323988403985302,0.3459503640781668,44.069184179191495
165278353,shreybatra,Fake-Twitter,A sample Django App to show proper Modules and Layered Architecture in an application.,https://github.com/shreybatra/Fake-Twitter,20,0,0,0,0,1,33,2,1.9393939393939397,1,0,1,0,2,2.757575757575758,9.57526544771085,0.2453102453102453,20.30247278318444
908403297,ldantascruz,clean_architecture_feature,,https://github.com/ldantascruz/clean_architecture_feature,4,3,3,0,0,1,1,0,1.0,0,0,0,0,0,4.0,366.6105269686288,3.6296296296296298,1330.6604312194677
461768724,shreyasharma04,HealthChatbot,"🤖 HealthCare ChatBot Major -1 (4th year - 7th semester)  Health Care Chat-Bot is a Healthcare Domain Chatbot to simulate the predictions of a General Physician.  ChatBot can be described as software that can chat with people using artificial intelligence. These software are used to perform tasks such as quickly responding to users, informing them, helping to purchase products and providing better service to customers. We have made a healthcare based chatbot.  The three main areas where chatbots can be used are diagnostics, patient engagement outside medical facilities, and mental health. In our major we are working on diagnostic.  📃 Brief A chatbot is an artificially intelligent creature which can converse with humans. This could be text-based, or a spoken conversation. In our project we will be using Python as it is currently the most popular language for creating an AI chatbot. In the middle of AI chatbot, architecture is the Natural Language Processing (NLP) layer.  This project aims to build an user-friendly healthcare chatbot which facilitates the job of a healthcare provider and helps improve their performance by interacting with users in a human-like way.  Through chatbots one can communicate with text or voice interface and get reply through artificial intelligence  Typically, a chat bot will communicate with a real person. Chat bots are used in applications such as E-commerce customer service, Call centres, Internet gaming,etc.  Chatbots are programs built to automatically engage with received messages. Chatbots can be programmed to respond the same way each time, to respond differently to messages containing certain keywords and even to use machine learning to adapt their responses to fit the situation.  A developing number of hospitals, nursing homes, and even private centres, presently utilize online Chatbots for human services on their sites. These bots connect with potential patients visiting the site, helping them discover specialists, booking their appointments, and getting them access to the correct treatment.  In any case, the utilization of artificial intelligence in an industry where individuals’ lives could be in question, still starts misgivings in individuals. It brings up issues about whether the task mentioned above ought to be assigned to human staff. This healthcare chatbot system will help hospitals to provide healthcare support online 24 x 7, it answers deep as well as general questions. It also helps to generate leads and automatically delivers the information of leads to sales. By asking the questions in series it helps patients by guiding what exactly he/she is looking for.  📜 Problem Statement During the pandemic, it is more important than ever to get your regular check-ups and to continue to take prescription medications. The healthier you are, the more likely you are to recover quickly from an illness.  In this time patients or health care workers within their practice, providers are deferring elective and preventive visits, such as annual physicals. For some, it is not possible to consult online. In this case, to avoid false information, our project can be of help.  📇 Features Register Screen. Sign-in Screen. Generates database for user login system. Offers you a GUI Based Chatbot for patients for diagnosing. [A pragmatic Approach for Diagnosis] Reccomends an appropriate doctor to you for the following symptom. 📜 Modules Used Our program uses a number of python modules to work properly:  tkinter os webbrowser numpy pandas matplotlib 📃 Algorithm We have used Decision tree for our health care based chat bot.  Decision Tree is a Supervised learning technique that can be used for both classification and Regression problems, but mostly it is preferred for solving Classification problems. It is a tree-structured classifier, where internal nodes represent the features of a dataset, branches represent the decision rules and each leaf node represents the outcome.It usually mimic human thinking ability while making a decision, so it is easy to understand.  :suspect: Project Members Anushka Bansal - 500067844 - R164218014 Shreya Sharma - 500068573 - R164218070 Silvi - 500069092 - R164218072 Ishika Agrawal - 500071154 - R164218097",https://github.com/shreyasharma04/HealthChatbot,62,108,108,19,0,1,3,0,6.333333333333333,0,0,0,0,0,23.33333333333333,299.30888750145886,3.546934865900383,1470.5313597111378
817926867,M0hc3n,Simple-Application-Based-on-Microservices-,This is a simple application that adopts the microservices architecture. It was developed for learning purposes.,https://github.com/M0hc3n/Simple-Application-Based-on-Microservices-,4,2,2,0,0,1,6,3,1.8333333333333333,0,0,0,0,0,3.8333333333333335,26.44111553883048,0.3333333333333333,13.22055776941524
753783576,suseendar1414,system-design-k8s,microservice architecture using kubernetes,https://github.com/suseendar1414/system-design-k8s,9403,0,0,0,0,1,1,1,5.0,0,0,0,0,0,5.0,50.18947501009619,2.25,112.92631877271644
626020344,TeoSean00,GoBook-Backend,"A one-stop class booking application built with a Microservices Architecture to manage a company’s class and user system, storing & displaying information for the classes and users via a catalogue page, along with a class reviewing functionality and a class recommendation feature for users based on their previously attended classes.",https://github.com/TeoSean00/GoBook-Backend,10295,4,4,0,0,1,13,7,6.153846153846154,0,0,1,0,1,7.384615384615385,83.89030572141179,1.8353937728937733,234.8571173066721
576968446,franciscobrioneslavados,template-python,A Python Template to run local with a Clean Architecture frameworks,https://github.com/franciscobrioneslavados/template-python,19,0,0,0,0,1,15,4,2.8666666666666667,1,1,1,1,4,2.6666666666666665,6.471368937116121,0.2777777777777778,9.854221322316809
814359592,jvanderlei,to-do-api,"To-do API for backend job application. Build focused on Clean Architecture modelling, observability and Test driven development",https://github.com/jvanderlei/to-do-api,42,0,0,0,0,1,14,3,4.357142857142857,1,1,1,1,4,9.0,16.85340002911675,0.3714285714285714,28.48493489840359
369220029,poltronSuperstar,CQRS,,https://github.com/poltronSuperstar/CQRS,12,0,0,0,0,1,19,2,2.263157894736842,0,0,0,0,0,5.157894736842105,17.7607840287221,0.5022773279352226,46.93660751823341
657913252,Farruxnet,fastapi-clean-architecture,,https://github.com/Farruxnet/fastapi-clean-architecture,17,0,0,0,0,1,33,4,0.0303030303030303,1,0,1,0,2,0.0606060606060606,0.0,0.0,0.0
88143105,slacker007,S3,Open Source Windows Security Event Log Correlation and Analysis Tool,https://github.com/slacker007/S3,24,1,1,3,0,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
420089558,Antonio-Gabriel,CleanArchitecture_With_Python,"Modeling a simple api with the aim of exploring the principles of a clean architecture, cycle operation and other crucial points",https://github.com/Antonio-Gabriel/CleanArchitecture_With_Python,3367,4,4,0,0,1,53,4,2.150943396226415,1,1,1,1,4,2.981132075471698,2.051298113642962,0.1415094339622641,2.675727123172172
605314736,pgorecki,mini_modular_monolith,,https://github.com/pgorecki/mini_modular_monolith,5,1,1,0,0,2,5,0,3.8,0,0,0,0,0,12.6,8.4477661915055,0.8,7.496788691072806
791529331,check24factory,c24_makeathon_game,"This is a small game for the Check24 participation on the TUM Makeathon. If you find this repository during the event, I would urge you not to peak into the source code to cheat. But I am not your dad, do whatever you want lol.",https://github.com/check24factory/c24_makeathon_game,52,0,0,0,0,0,7,1,3.0,0,0,0,0,0,6.714285714285714,80.42360485509013,1.52332361516035,531.5338985258935
422744200,sukovanej,python-persistence-abstraction-example,Example of a Python architecture with abstract persistance layer,https://github.com/sukovanej/python-persistence-abstraction-example,254,0,0,0,1,2,24,3,2.875,1,1,1,1,4,3.2916666666666665,6.9385691506441445,0.2013888888888888,8.328305740094518
678186444,mrojasb2000,fastapi-clean-architecture,,https://github.com/mrojasb2000/fastapi-clean-architecture,30,0,0,0,0,1,36,2,2.888888888888889,1,1,0,1,3,3.8333333333333335,0.1320802083934297,0.0138888888888888,0.0660401041967148
835891783,vadikko2,python-cqrs,Python CQRS framework,https://github.com/vadikko2/python-cqrs,182,10,10,1,1,1,79,4,4.481012658227848,0,0,0,1,1,7.253164556962025,14.08270708473778,0.5173852352399988,28.066731546211678
172272280,charlesmalafosse,FastText-sentiment-analysis-for-tweets,"Essential about fastText architecture, cleaning, upsampling and sentiments for tweets.",https://github.com/charlesmalafosse/FastText-sentiment-analysis-for-tweets,14,28,28,6,1,0,1,0,10.0,0,0,0,0,0,31.0,817.8406503721167,6.757142857142857,5526.266108943017
969278512,piygr,s6eagv1,Cognitive Layer based Agentic Architecture,https://github.com/piygr/s6eagv1,20,0,0,0,0,1,9,0,9.333333333333334,0,0,0,0,0,17.666666666666668,86.72277526688498,1.675084175084175,591.2146724385758
741582088,iamvisheshsrivastava,ChatBot,"Created an English-language chatbot integrated with open source GPT-2.0 and OpenAI GPT 3.5, specifically trained on domain-specific data. This chatbot is event-driven, capable of taking various actions based on user input, and designed to answer general questions.",https://github.com/iamvisheshsrivastava/ChatBot,21,1,1,0,0,1,2,1,3.5,0,0,0,0,0,86.0,90.76048999263462,1.2352941176470589,224.2317988053326
380582907,WilliamOtieno,RabbitMQ_python,Getting started with microservices architecture,https://github.com/WilliamOtieno/RabbitMQ_python,1,1,1,0,0,1,2,0,2.0,0,0,0,0,0,0.5,7.754887502163468,0.5,7.754887502163468
765524036,rubinmcluen02,layered_architecture,,https://github.com/rubinmcluen02/layered_architecture,99,1,1,0,0,1,20,2,4.0,0,1,0,0,1,15.85,43.78366359458568,0.7164516129032258,75.1962206626538
487750666,Radio-Eastern-FM,Event-Source-Service,Sources events using python and sends them to an MQTT topic. Events can be configured to run at intervals and can implement their own functionality for sourcing events. Each event type has its own addon which is modular.,https://github.com/Radio-Eastern-FM/Event-Source-Service,25,1,1,0,0,1,11,1,1.9090909090909087,0,0,0,0,0,3.8181818181818175,10.903861166320873,0.5909090909090909,19.58981380902941
111433597,laskoviymishka,cqrs-eventsource,Python implementation of eventsource with async in mind,https://github.com/laskoviymishka/cqrs-eventsource,61,10,10,1,0,2,32,2,4.09375,0,1,0,0,1,16.90625,44.77817236425973,1.162487695150594,173.513895797853
715707164,KevinMaggi,evolution-of-code-td-in-msa_rep-pkg,"Replication package for the master thesis work entitled ""Analysis of the Evolution of Code Technical Debt in Microservices Architectures"" in Computer Engineering at University of Florence",https://github.com/KevinMaggi/evolution-of-code-td-in-msa_rep-pkg,9360,0,0,0,0,1,16,5,8.1875,0,0,0,0,0,23.1875,404.0553158743698,3.716957180702779,2624.6179117754177
13778113,Fematich,agenda_updater,"Automatically update google calendar, by scraping events from different sources",https://github.com/Fematich/agenda_updater,128,0,0,0,0,1,4,0,3.25,0,0,0,0,0,1.0,11.943609377704338,0.625,22.10413594209737
353838433,mirevsky,django-grpc-cqrs-kafka-template,Django gRPC CQRS Kafka Microservice Template,https://github.com/mirevsky/django-grpc-cqrs-kafka-template,43,2,2,1,0,1,130,5,1.5615384615384615,0,0,0,0,0,1.8307692307692307,2.706704212637786,0.0743589743589743,3.2261876141034165
719605649,fabiobrasil1,python_clean_architecture,,https://github.com/fabiobrasil1/python_clean_architecture,10,0,0,0,0,1,11,3,1.5454545454545454,1,0,0,1,2,1.6363636363636365,0.0,0.0,0.0
361584154,Blackbackofficial,Hotel-Booking,"Microservice architecture. The system provides the user with a service for searching and booking hotels for the dates of interest. Depending on the number of orders, the loyalty system gives the user a discount on new bookings.",https://github.com/Blackbackofficial/Hotel-Booking,2986,3,3,0,0,1,146,5,2.1301369863013697,0,0,0,1,1,3.9863013698630136,45.03678799323725,0.2839252257700958,322.917753417964
775874957,jason-bourne-gg,Advertising-Tool-Backend,This Repository Contains the backend/API layer of performance Advertising tool architecture. This was completely designed and developed by me and for security purposes I have removed/ abstracted some sensitive information which might release strategies! Feel free to browse through. Refer Readme.md for more info.,https://github.com/jason-bourne-gg/Advertising-Tool-Backend,113,0,0,0,0,1,60,4,8.683333333333334,1,0,0,0,1,14.216666666666669,259.70827417035457,1.8335699442833,2248.58172919451
392096504,repodevs,twisobox,Twitter-like event sourcing with outbox pattern,https://github.com/repodevs/twisobox,31,0,0,1,0,1,30,4,3.033333333333333,1,0,1,0,2,2.6333333333333333,3.728390921109251,0.2214285714285714,4.401014016294004
809843579,KScaesar,senao2024,python clean architecture,https://github.com/KScaesar/senao2024,57,0,0,0,0,1,10,3,3.7,0,0,1,1,2,7.8,15.22233678759576,0.7923076923076924,48.27279902809571
464537851,jhancuch,multipleAccounts,Generate a webpage that hosts three twitter threads on the same page to help track events real time across multiple sources.,https://github.com/jhancuch/multipleAccounts,7,0,0,0,0,1,3,1,3.0,0,0,0,0,0,3.0,8.550746785383243,0.4166666666666667,6.016819463857143
901132366,karti479,microToken,"MicroTokenAI is designed as a cloud-native, distributed system that integrates seamlessly into existing microservice architectures. Here’s how it will be deployed and how microservices will generate and use ephemeral tokens.",https://github.com/karti479/microToken,9,0,0,0,0,1,14,3,2.2142857142857144,0,0,0,0,0,3.7142857142857135,29.347581205435365,0.9169433323568662,61.3691692429818
906529768,seike460,cqrs-es-sample,,https://github.com/seike460/cqrs-es-sample,9,0,0,0,0,1,4,1,2.75,0,0,0,0,0,5.0,8.718575745231803,0.4,6.392109494582763
855278397,DollaR84,clean-architecture-test,,https://github.com/DollaR84/clean-architecture-test,48,0,0,0,0,1,99,4,2.8585858585858586,1,1,1,0,3,3.9696969696969697,6.700471569165921,0.2605324958266135,9.16799827639567
900688905,YanivBohbot,Backend_System_Microservice,"This project is a modular and scalable backend system designed with a microservices architecture. Each microservice is responsible for a specific business function, and Apache Kafka is used for event-driven communication between them. The system ensures seamless handling of orders, processing workflows, notifications, and analytics.",https://github.com/YanivBohbot/Backend_System_Microservice,11,0,0,0,0,1,4,1,4.25,0,0,0,0,0,0.25,13.00488750216347,0.75,11.816165626622604
153301371,shiraco,python_clean_architecture,http://blog.thedigitalcatonline.com/blog/2016/11/14/clean-architectures-in-python-a-step-by-step-example/,https://github.com/shiraco/python_clean_architecture,14,0,0,0,0,0,13,2,1.0769230769230769,1,0,0,0,1,2.230769230769231,15.69195308998823,0.2846153846153846,17.694398852021905
941887614,penadidik,mvc_and_clean_architecture_python,,https://github.com/penadidik/mvc_and_clean_architecture_python,9,0,0,0,0,1,9,2,1.1111111111111112,1,0,1,0,2,0.4444444444444444,0.5283208335737188,0.0555555555555555,0.2641604167868594
606821022,akhundMurad,diator,Diator is a Python library for implementing CQRS pattern in your Python applications.,https://github.com/akhundMurad/diator,702,73,73,7,5,2,43,3,3.744186046511628,0,0,0,0,0,5.976744186046512,4.560476152307164,0.2695090439276486,3.90943635997944
299019177,shivangdubey,HacktoberFest2020,Repository to let enthusiasts create issues and pull requests for the Open Source event,https://github.com/shivangdubey/HacktoberFest2020,11765,34,34,274,174,1,167,4,1.9760479041916168,0,0,0,0,0,17.095808383233532,284.9507050309259,3.257916296343111,2201.401012925085
934825354,davidm-martin-plain,task-api-python,Task Management CRUD following Clean Architecture,https://github.com/davidm-martin-plain/task-api-python,17,0,0,0,0,1,23,5,3.739130434782609,1,1,1,1,4,4.0,4.816267888124422,0.1521739130434782,3.2747238818589133
160134414,diofeher,pizza_project,"Example Pizza project building an API, Single-page Application and a microservices architecture",https://github.com/diofeher/pizza_project,15,0,0,0,0,1,14,4,2.2142857142857144,0,0,1,0,1,1.1428571428571428,0.3396348215831049,0.0357142857142857,0.1698174107915524
492083671,devenes,kubernetes-microservice-app,Phonebook Microservice Web Application aims to create a web application with MySQL Database using Docker and Kubernetes to have the understanding of Microservice architecture.,https://github.com/devenes/kubernetes-microservice-app,440,7,7,8,0,2,2,2,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
944936797,murzinov01,delivery,Репозиторий для написания сервиса в рамках курса по DDD и Clean Architecture,https://github.com/murzinov01/delivery,258,0,0,0,0,1,87,5,2.6206896551724137,1,1,1,1,4,2.793103448275862,5.574531931727221,0.2353642526056319,20.628145928578
604404953,horozal,layered-architecture-python,Repository template for a layered architecture in Python,https://github.com/horozal/layered-architecture-python,36,0,0,0,0,1,8,2,0.625,1,1,1,1,4,2.25,0.5943609377704336,0.0625,0.2971804688852168
863701996,devGabyAlves,flask-calculator-design,"Calculator project developed with Flask, focused on good code design practices and clean architecture. The goal is to apply design patterns and clean code principles to create maintainable and maintainable code.",https://github.com/devGabyAlves/flask-calculator-design,20,0,0,0,0,1,26,3,1.6538461538461535,0,0,1,0,1,3.5,12.677329839649149,0.3269230769230769,23.30587336087338
22989741,nikosT,scisola,Open-source python based software for automatic Moment Tensor calculation of events provided by SeisComP3 in real-time,https://github.com/nikosT/scisola,4768,18,18,5,5,7,32,4,3.34375,0,0,0,0,0,13.4375,563.5358468783664,0.9805108853526138,2492.033670627777
839792077,Huseyin-Koc,Library-System-With-DDD,Library Management System Project using Domain Driven Design,https://github.com/Huseyin-Koc/Library-System-With-DDD,44,0,0,0,0,1,23,3,2.260869565217391,1,0,0,1,2,6.304347826086956,9.481823945646656,0.4239130434782608,21.565600390661785
449521469,aws-samples,aws-athena-cqrs-pattern,Example of CQRS(Command and Query Responsibility Segregation) Pattern using Amazon Athena,https://github.com/aws-samples/aws-athena-cqrs-pattern,262,2,2,0,0,2,6,4,4.0,0,0,0,0,0,4.833333333333333,37.792558800658334,0.9722222222222224,113.58540742131731
873177747,BreaGG,Attention_Is_All_You_Need_From_Scratch,"Implementing a Transformer model from scratch using PyTorch, based on the ""Attention Is All You Need"" paper. It covers the full model architecture, including multi-head attention, positional encoding, and encoder-decoder layers, with a focus on deep learning concepts.",https://github.com/BreaGG/Attention_Is_All_You_Need_From_Scratch,22,2,2,0,0,1,4,0,3.75,0,0,0,0,0,22.0,174.26667925993937,3.482142857142857,986.9997367211294
713522169,jpkrajewski,Event-Sourcing,,https://github.com/jpkrajewski/Event-Sourcing,113,0,0,0,0,1,24,2,2.6666666666666665,1,0,0,0,1,6.208333333333333,23.340269106428853,0.6916666666666668,67.32144484956918
136679479,wou-cs,wolfit,"Sample monolithic app for CS 465, Microservices Architecture, at Western Oregon University",https://github.com/wou-cs/wolfit,331,0,0,14,2,0,24,3,3.5,0,0,0,0,0,12.041666666666666,101.27829794606872,0.9307065788439788,364.4919680494028
907581931,Manny-Santana,Streaming-gRPC-Microservice-Test,testing grpc with microservice architecture requiring a front end stream ,https://github.com/Manny-Santana/Streaming-gRPC-Microservice-Test,14,1,1,0,0,1,10,1,4.1,0,0,0,0,0,5.2,3.3284212515144285,0.35,1.6642106257572142
932283832,BortnikD,NetworkFastAPI,The FastAPI application with clean architecture,https://github.com/BortnikD/NetworkFastAPI,264,2,2,0,0,1,126,6,3.738095238095238,1,1,1,1,4,4.246031746031746,8.687473543748993,0.3491986188414759,15.714065825333268
475609366,nelsonimon,python_clean_architecture,A simple to do list in python with clean architecture,https://github.com/nelsonimon/python_clean_architecture,370,2,2,0,0,1,29,5,3.103448275862069,1,1,1,1,4,4.896551724137931,10.00078447301178,0.4045977011494253,14.4397413316489
531444802,aws-samples,lambda-hexagonal-architecture-sample,,https://github.com/aws-samples/lambda-hexagonal-architecture-sample,407,62,62,20,3,6,48,4,2.5625,1,0,1,1,3,3.5416666666666665,1.6360595167710177,0.0868055555555555,1.4041359489950758
607853242,socon-dev,socon,Socon is a microservice architecture framework that helps you focussing on deploying/chaining individual commands and custom services between your different projects,https://github.com/socon-dev/socon,212,26,26,3,11,2,128,6,2.1328125,1,0,0,0,1,11.6640625,98.95702238012323,0.7396518104944484,450.9600101624973
766206598,edpyt,buber_dinner,,https://github.com/edpyt/buber_dinner,560,1,1,0,1,1,226,6,2.6769911504424777,1,1,1,1,4,2.2168141592920354,1.9823789053778824,0.1064159292035398,1.847711013518885
796664496,Sakif-Hossain,microservice-archetecture-py,Video to Audio file converting application that utilizes microservice architecture to ensure scalability and management of large user base.,https://github.com/Sakif-Hossain/microservice-archetecture-py,1618,0,0,0,0,1,14,4,3.071428571428572,0,0,0,1,1,3.142857142857143,18.78779055782531,0.7743055555555556,51.80290761129245
210455592,AnandVishnu,cqrs-with-event-sourcing,,https://github.com/AnandVishnu/cqrs-with-event-sourcing,9,1,1,0,0,1,22,2,2.9545454545454546,1,0,0,0,1,8.0,24.014462353027987,0.6994372294372294,89.47424824543451
683831941,s0rg,clickhouse-kafka-compose,Example docker-compose with clickhouse and kafka or redpanda as event sources,https://github.com/s0rg/clickhouse-kafka-compose,18,2,2,0,0,2,1,2,10.0,0,0,0,0,0,8.0,39.86313713864836,1.7142857142857142,68.33680652339717
946847132,TallaMbunwe,savings-microservices-app,Savings application based on Python. Built with a microserve architecture for deployment on a Kubernetes cluster,https://github.com/TallaMbunwe/savings-microservices-app,2,0,0,0,0,1,1,2,2.0,0,0,0,0,0,5.0,4.754887502163469,0.5,2.3774437510817346
806137556,katerinkaivanova,fastapi-ddd-stories-service,This project is an example of Domain-Driven Design architecture using Python's FastAPI framework and SQLAlchemy ORM.,https://github.com/katerinkaivanova/fastapi-ddd-stories-service,29,1,1,0,0,1,70,5,3.5142857142857142,1,1,0,1,3,3.8857142857142857,11.652114076974172,0.4237301587301587,35.657657827560456
338622871,AIAnytime,Activation-Function,"An implementation of different activation functions like Sigmoid, tanh, ReLU, Linear, and Softmax. This repository also describes which activation function to use in hidden layer and the output layers based on the neural network architectures.",https://github.com/AIAnytime/Activation-Function,58,3,3,2,0,1,5,0,2.4,0,0,0,0,0,1.0,18.505865002596163,1.11,35.87398563008416
848311693,galezra,python-clean-architecture-boilerplate,"A boilerplate project following Clean Architecture principles in Python. It includes a structured separation of concerns, dependency injection, and integrations with FastAPI and Poetry for scalable, maintainable, and testable applications. 🚀",https://github.com/galezra/python-clean-architecture-boilerplate,86,0,0,0,2,1,22,4,2.3181818181818183,1,1,1,1,4,3.227272727272727,5.283678799254249,0.1931818181818181,6.428351055836822
525442376,jasondchambers,hex,Hexagonal architecture version of NetOrganizer,https://github.com/jasondchambers/hex,680,0,0,0,0,1,30,1,3.733333333333333,0,0,0,1,1,19.766666666666666,48.10182950823347,0.9462856007042054,141.57122055433544
260913929,BbsonLin,meteor,The meteor is a starlette  async web framework  for scaffolding based on domain-driven-design with clean architecture,https://github.com/BbsonLin/meteor,910,1,1,0,0,0,91,5,2.9450549450549453,1,1,1,1,4,2.7472527472527477,3.557419435064433,0.1175491175491175,5.845749800570895
912305789,komronium,fastapi-template,"A FastAPI project template with a scalable and clean architecture, designed to help you quickly start building production-ready applications.",https://github.com/komronium/fastapi-template,47,3,3,0,0,1,29,4,3.206896551724138,1,1,1,0,3,3.034482758620689,5.331840809247966,0.2389162561576354,7.225201063643694
554016761,RxMobile-Dummy,python-ecommerce-clean-architecture,Ecommerce API built with Flask followed by clean architecture,https://github.com/RxMobile-Dummy/python-ecommerce-clean-architecture,65,0,0,0,0,0,175,5,4.531428571428571,1,1,1,0,3,5.748571428571428,23.093826899545878,0.4442011830819284,72.73117926279421
197572691,teamhide,msa_example,Microservice Architecture with Kubernetes,https://github.com/teamhide/msa_example,45,2,2,0,4,0,2,2,1.0,0,0,1,0,1,0.5,2.3774437510817346,0.25,1.1887218755408673
484371504,EdwardPaul,stock_exchange,A simple stock exchange CLI python program inspired by Clean Architecture,https://github.com/EdwardPaul/stock_exchange,15,0,0,0,0,1,25,2,1.32,1,1,0,0,2,13.44,117.31210020166716,0.8343145743145743,459.200611908455
709479533,vcjuliocesar,file-management-API,"API,Python, Clean Architecture,FastAPI",https://github.com/vcjuliocesar/file-management-API,75,0,0,0,0,2,69,4,2.5217391304347827,1,1,1,1,4,3.695652173913044,4.539364946794931,0.1292270531400966,4.501140205501882
448114290,vh-2020,kafka-avro-lambda,Kafka as a event source for Lambda,https://github.com/vh-2020/kafka-avro-lambda,0,0,0,0,0,1,1,2,0.0,0,0,0,0,0,1.0,0.0,0.0,0.0
902455198,Sierra-034,hexagonal-architecture,,https://github.com/Sierra-034/hexagonal-architecture,60,0,0,0,0,1,63,7,1.126984126984127,1,1,0,1,3,2.634920634920635,0.2581692461347684,0.0317460317460317,0.1290846230673842
435800256,n1nj4t4nuk1,python-ddd-skeleton,🐍 Template of a Python & FastAPI application using Domain-Driven Design and Command Query Response Segregation principles.,https://github.com/n1nj4t4nuk1/python-ddd-skeleton,650,23,23,1,0,3,52,6,2.230769230769231,1,0,0,1,2,5.307692307692308,10.167935760369582,0.3729841430499325,30.485422187741044
703689478,joaopcanario,ntse-lstm,"Source code of the paper entitled as ""Noise-tolerant Self-embedded LSTM for Seismic Event Classification""",https://github.com/joaopcanario/ntse-lstm,9,0,0,2,0,2,5,2,4.8,0,0,0,0,0,24.4,310.1306555508644,3.1635897435897435,1949.9841805063609
231277045,djeada,NeuraCommand,"NeuraCommand is a Python package and CLI tool designed for streamlined creation, training, and deployment of neural networks. It offers a clear-cut interface for managing complex neural architectures, including multi-layer perceptrons. The tool facilitates efficient data loading, model training, and application of models for predictive tasks. ",https://github.com/djeada/NeuraCommand,162,0,0,0,4,2,71,6,2.507042253521127,0,0,0,0,0,8.56338028169014,53.28502292817529,1.2022457525489132,227.49127479208715
962314447,amal-babu-git,fastapi-admin-cli,"A Django-inspired CLI tool for managing FastAPI applications with a modular structure. This tool helps developers quickly scaffold and manage FastAPI projects with a clean, organized architecture.",https://github.com/amal-babu-git/fastapi-admin-cli,5045,1,1,0,0,1,14,2,3.5,0,0,0,0,0,6.285714285714286,31.67701804319484,0.7420634920634921,76.6594536459492
434394148,aws-samples,aws-cdk-deploy-lamp-with-waf-r53-alb,"Deploy a secure and highly available LAMP stack application using AWS WAF, Application Load Balancer, AWS Route 53 and secured by a TLS certificate using AWS Certificate Manager. We walk you through how to launch this classic layered architecture LAMP stack application that can host a variety of popular web applications, such as WordPress, Wikipedia, and Drupal in minutes.",https://github.com/aws-samples/aws-cdk-deploy-lamp-with-waf-r53-alb,748,7,7,6,0,1,4,1,3.5,0,0,0,0,0,2.25,0.0,0.0,0.0
644834607,amroXismail,Space-Shooter-Reimplementation,Reimplementation of the space shooter using layered architecture (horizontally and vertically layered) and drawing using opengl only and the rest is handled by pygame,https://github.com/amroXismail/Space-Shooter-Reimplementation,4807,0,0,0,0,1,4,0,2.75,0,0,0,0,0,21.5,629.2588862425183,3.071443754087639,4514.8234593763245
688411264,mshr0969,python_clean_architecture,,https://github.com/mshr0969/python_clean_architecture,98,0,0,0,0,1,5,2,1.6,0,0,0,0,0,2.6,5.186313713864835,0.5,6.193156856932417
920674415,smooth-55,fast-api-skeleton,Clean Architecture to get stated with Python - FastAPI,https://github.com/smooth-55/fast-api-skeleton,38,1,1,0,0,1,27,4,3.1481481481481484,1,1,1,0,3,2.2222222222222223,2.2414133026185907,0.1716049382716049,3.0668022273652062
861514023,KevinQuinonesA,clean_architecture_flask,"A Clean architecure demosntration project using python, postgres and flask",https://github.com/KevinQuinonesA/clean_architecture_flask,15,1,1,0,0,1,12,4,1.1666666666666667,1,0,0,1,2,2.25,6.196900202391928,0.1666666666666666,3.223450101195964
965830843,gpressutto5,kafka_microservices,This project is a simple Kafka-based microservices architecture built in Python.,https://github.com/gpressutto5/kafka_microservices,8,0,0,0,0,1,4,1,3.5,0,0,0,0,0,1.0,7.443609377704337,0.625,5.660526564393035
754583109,RaquelRufino,PokemonGame,A Pokemon Go game project using Architecture Hexagonal with FastAPI,https://github.com/RaquelRufino/PokemonGame,2,0,0,0,0,1,3,2,0.3333333333333333,0,0,0,0,0,0.6666666666666666,1.5849625007211563,0.1666666666666666,0.7924812503605781
604175004,e183b796621afbf902067460,oogway-trading,Microservice based architecture for C3D3 Research vault management using FastAPI.,https://github.com/e183b796621afbf902067460/oogway-trading,85,0,0,0,0,1,296,8,2.216216216216216,1,1,1,1,4,1.8513513513513515,5.828252789699308,0.1182432432432432,5.455469857021804
683197744,joaoheusi,clean-architecture-fastapi,,https://github.com/joaoheusi/clean-architecture-fastapi,163,0,0,0,0,1,105,5,2.123809523809524,1,1,1,1,4,2.323809523809524,5.782240252088429,0.1479591836734693,10.118264542256387
273866515,donnieprakoso,workshop-eventDrivenMicroservices,This repo contains all codes that I used for Event Driven Architecture talks.,https://github.com/donnieprakoso/workshop-eventDrivenMicroservices,810,66,66,27,0,2,26,4,3.923076923076923,0,0,0,0,0,2.3846153846153846,0.9230769230769232,0.0512820512820512,0.6153846153846154
817938131,KERELKO,microservices,Simple microservices example of communication through gRPC and RabbitMQ,https://github.com/KERELKO/microservices,499,1,1,0,0,1,58,5,2.7413793103448274,1,1,1,1,4,3.827586206896552,10.542041376406354,0.3469827586206896,19.7490524476642
823866133,dee0512,Temporally-Layered-Architecture,Official code for Temporally Layered Architecture (TLA),https://github.com/dee0512/Temporally-Layered-Architecture,242,2,2,3,0,1,8,1,3.75,0,0,0,0,0,14.375,367.499629579629,4.225835500553015,2999.008419332597
358027953,Azel-ytof,rust-clean-architecture-example,Example of clean architecture in rust language,https://github.com/Azel-ytof/rust-clean-architecture-example,53,6,6,2,0,1,1,3,3.0,1,1,0,1,3,40.0,322.4095353505972,2.7205882352941178,877.1435888214777
725970209,Lanznx,Birthday_Greeting_Kata,Implementation of Clean Architecture with FastAPI,https://github.com/Lanznx/Birthday_Greeting_Kata,118,3,3,0,0,1,38,4,3.473684210526316,1,1,1,1,4,7.236842105263157,33.44264846500073,0.60185479340604,53.13043034541644
664777300,DubrovskijRD,budget_assistant,A example python code of clean architecture with async singleton repository,https://github.com/DubrovskijRD/budget_assistant,47,0,0,0,0,1,39,3,2.641025641025641,1,1,1,1,4,4.589743589743589,8.886417538288784,0.3043580351272659,19.23100006207428
861296408,Chris91ss,Hammurabi-Python-Game,"A Python-based Hammurabi game using layered architecture. Manage your city for five years, making strategic decisions about land, grain, and population. Includes exception handling, unit tests, and a text-based user interface.",https://github.com/Chris91ss/Hammurabi-Python-Game,7,0,0,0,0,1,5,1,1.4,0,0,0,0,0,8.4,135.50953704128133,1.5747826086956522,632.4802080119166
622635059,milkandpie,clean_architecture,,https://github.com/milkandpie/clean_architecture,179,0,0,0,0,1,135,6,3.088888888888889,1,0,1,1,3,5.5777777777777775,5.302626545744167,0.2326739618406285,9.344779965821438
972282607,OussamaBenSlama,Event-Chatbot,A RAG system and chatbot designed to provide answers to questions about event details. It helps event organizers by leveraging open-source models from Hugging Face for question answering.,https://github.com/OussamaBenSlama/Event-Chatbot,202,0,0,0,0,1,4,2,5.75,0,0,0,0,0,3.0,11.512746012021982,0.625,14.891675266951236
809688963,Dmitriy-kon,Dmitriy-kon-fastapi_clean_architecture_template,Template for fastapi with ca,https://github.com/Dmitriy-kon/Dmitriy-kon-fastapi_clean_architecture_template,94,0,0,0,0,1,65,6,2.0923076923076924,1,1,0,1,3,2.6153846153846154,2.9986913044655847,0.1023443223443223,3.6359244847913295
928088825,humaid24,backend-exam-job-application,Backend exam take home task does mimic a banking system implementing clean code architecture,https://github.com/humaid24/backend-exam-job-application,4,0,0,0,0,1,5,0,1.4,0,0,0,0,0,8.0,11.61892620425159,0.79,18.582927997487893
589623818,0enzi,microservices-marketplace-fastapi,A marketplace using the Microservices Architecture in FastAPI,https://github.com/0enzi/microservices-marketplace-fastapi,769,1,1,1,0,1,66,5,3.8333333333333335,1,0,1,0,2,3.984848484848485,24.61407529727082,0.4009399691217873,45.68939198355344
626033430,byrogr,architecture-n-capas,Example Project Architecture Layering,https://github.com/byrogr/architecture-n-capas,9,0,0,0,0,1,11,2,0.6363636363636364,1,1,0,0,2,4.454545454545454,8.2188298053012,0.4166666666666666,9.493445649332106
827663743,richiebtlr852,Lambda_Project_1,Basic file load from source S3 bucket to target S3 bucket that uses a docker container and is invoked by an S3 event when a file is loaded into the source s3 bucket,https://github.com/richiebtlr852/Lambda_Project_1,23,0,0,0,0,1,1,0,3.0,0,0,0,0,0,8.0,4.754887502163469,0.5,2.3774437510817346
570018635,fgarcialainez,Quart-Microservices-API-Python,Building a microservices API with Quart and SQLAlchemy using DDD and Hexagonal architecture.,https://github.com/fgarcialainez/Quart-Microservices-API-Python,15,0,0,0,0,1,31,3,3.032258064516129,1,1,1,1,4,6.258064516129032,14.434052267113795,0.4644137224782386,26.249506114491894
400819945,mathmed,hexagonal-architecture-python,Projeto em Python/Flask utilizando conceitos de código limpo e arquitetura hexagonal (ports and adapters.,https://github.com/mathmed/hexagonal-architecture-python,37,3,3,0,0,1,51,4,1.9803921568627447,1,1,0,1,3,2.5098039215686274,5.7767478641186045,0.1803921568627451,4.400977084277132
545394745,RakenHammed,training,"A simple User RESTful API developed using Flask(python) and PostgresSQL, using a clean architecture",https://github.com/RakenHammed/training,244,0,0,0,0,1,20,2,2.35,1,1,1,1,4,5.05,0.7547368752524047,0.1,0.3773684376262023
513890202,data-max-hq,dog-breed-classification-ml,Serve contanerized machine learning models in microservice architecture with seldon-core or Tensorflow Serving,https://github.com/data-max-hq/dog-breed-classification-ml,5064,2,2,0,0,2,9,3,5.222222222222222,0,0,0,0,0,1.6666666666666667,198.3447255276761,1.2422382398718588,237.91769494818183
361441151,somyalalwani,IOT-Platform,Developed an IOT Platform for deploying various IOT Applications with real time monitoring using microservice architecture.,https://github.com/somyalalwani/IOT-Platform,3220,0,0,0,0,1,14,2,5.357142857142857,0,0,0,0,0,14.428571428571429,463.67699914972593,2.1581062426394437,2392.779755227251
163649908,rok-povsic,tracki,Time sheet tracker built using Clean Architecture,https://github.com/rok-povsic/tracki,36,0,0,0,0,2,34,5,1.4411764705882353,1,1,0,1,3,2.2058823529411766,5.027722813105667,0.15359477124183,7.187837210589254
896549316,ybenitezf,ca-todo-app,ToDo application with clean architecture and python polylith,https://github.com/ybenitezf/ca-todo-app,24,1,1,0,0,1,5,4,1.2,1,0,0,0,1,2.0,16.94186817307463,0.3333333333333333,19.131527868298605
466786315,georgenadejde,Template-For-Layered-Architecture-OOP,Jinja2 template for the layered architecture in OOP using Python,https://github.com/georgenadejde/Template-For-Layered-Architecture-OOP,9,0,0,0,0,1,9,1,1.1111111111111112,1,0,0,0,1,8.666666666666666,137.80080151816483,0.8092592592592592,677.3355127700141
440703303,SmaranDhg,StockTrading-ReinforcementLearning,"This is the starting model, where I created the stock market environment with APIs similar to OpenAI gym environment.Here I am experimenting with 1D convolution for feature extraction and normal Dense layer following Dueling Architecture for Reinforcement Learning.",https://github.com/SmaranDhg/StockTrading-ReinforcementLearning,2927,0,0,0,0,1,8,1,4.25,0,0,0,0,0,12.0,326.2340576864119,5.2859219269103,2750.7243026605784
848818095,nazmul-prince,clean-architecture-fastapi,,https://github.com/nazmul-prince/clean-architecture-fastapi,97,1,1,3,0,1,83,4,3.855421686746988,1,1,1,1,4,3.9397590361445785,10.285158118002434,0.2457024430801893,22.730688637752717
276072838,CapnSK,Facial-Recognition,We have used VGG16 architecture without using topmost layer to get 2048 facial features and then using feature vector comparison for classification.,https://github.com/CapnSK/Facial-Recognition,481,0,0,0,0,1,2,1,7.0,0,0,0,0,0,7.5,261.4729228737506,4.894230769230769,1269.8731355066611
11590388,longjos,recall,A CQRS Library for Python,https://github.com/longjos/recall,100,13,13,1,0,2,14,2,3.857142857142857,0,0,0,0,0,34.857142857142854,122.01396457780798,1.4946196660482374,486.107449020476
769134033,mariaurena,cqrs-ejemplo,Pequeño ejemplo del uso de cqrs,https://github.com/mariaurena/cqrs-ejemplo,68,0,0,0,0,1,18,3,1.1111111111111112,1,1,0,1,3,4.833333333333333,1.1677527782585486,0.1388888888888889,0.5838763891292743
600122513,ifnesi,python-kafka-microservices,Implementing an Event Sourcing/CQRS microservices with Apache Kafka,https://github.com/ifnesi/python-kafka-microservices,6437,52,52,19,0,1,10,3,5.9,0,0,0,0,0,20.4,128.75913300656012,2.687112010796221,585.6671171144656
811888336,j-laurie,eventsourceexample,Example code for a talk given on event sourcing ,https://github.com/j-laurie/eventsourceexample,20,0,0,0,2,1,18,2,1.5,0,0,0,0,0,1.2777777777777777,4.957558293423536,0.2063492063492063,6.27526839801161
964620333,RanchoCooper,py-quantix,Hexagonal Architecture Quantitative Trading System,https://github.com/RanchoCooper/py-quantix,84,0,0,0,0,1,79,4,2.3417721518987342,1,1,1,1,4,7.620253164556962,47.91279922270306,0.6281290279654115,324.7069042229632
781250978,7dvorovanastya,microservices-architecture,,https://github.com/7dvorovanastya/microservices-architecture,1,0,0,0,0,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
608295894,ShahriyarR,hexagonal-calculator,Calculator application using Architectural patterns and Hexagonal Architecture in Python,https://github.com/ShahriyarR/hexagonal-calculator,150,18,18,5,0,1,56,6,2.1607142857142856,1,1,1,1,4,4.678571428571429,22.67421776921958,0.2313387418921056,22.72874275505261
933923537,jchiu21,video-mp3-microservices,Video to mp3 converter using microservice architecture,https://github.com/jchiu21/video-mp3-microservices,14,0,0,0,0,1,11,3,3.090909090909091,0,0,0,1,1,2.8181818181818183,18.00720244026555,0.7937062937062936,42.67775747414185
875833958,erogol,BlaGPT,"Experimental playground for benchmarking language model (LM) architectures, layers, and tricks on smaller datasets. Designed for flexible experimentation and exploration.",https://github.com/erogol/BlaGPT,877,31,31,3,1,5,63,4,6.841269841269841,0,0,0,0,0,64.3015873015873,3122.815143101166,8.272417277185296,46449.64695629934
674886823,OliverJonasQueen,real-time-sound-event-detection,"This is a source code for real-time sound event detection (RTSED). The clip ""train"" is the code of model training stage.  The clip ""detect"" is the algorithm for detection, where the ""GhoDenNet.pth"" is the trained model.  ""run"" is the executable code for RTSED. This algorithm can detect the enviromental sound event.",https://github.com/OliverJonasQueen/real-time-sound-event-detection,1157,2,2,0,1,1,6,1,6.333333333333333,0,0,0,0,0,13.166666666666666,211.3062870232553,3.7018716577540105,1000.362720487542
448679359,farkle314159,derby_runner,This is an open source python project (still under development) that attempts to provide a GUI interface to tables and reports that facilitate managing and scoring Scouting events like a Klondike Derby.,https://github.com/farkle314159/derby_runner,5740,0,0,0,2,1,7,4,5.571428571428571,0,0,0,0,0,25.0,194.97403237413124,1.8238866396761133,657.9635424239548
437688491,pedroalles,backend-clean-architecture-python,,https://github.com/pedroalles/backend-clean-architecture-python,32,0,0,0,0,1,22,3,2.272727272727273,1,0,1,1,3,4.227272727272728,15.515930475245966,0.5076741440377804,29.817408718461365
350487581,kevinjacksonm,eudract_ae,Eudract_AE is python source code designed to help sponsors upload Adverse Event information to eudra ct's web portal via XML. ,https://github.com/kevinjacksonm/eudract_ae,205,1,1,0,0,1,1,0,4.0,0,0,0,0,0,20.0,564.7337327387368,3.452830188679245,1949.929680965827
141027053,proteanhq,protean,Pragmatic Framework for Ambitious Applications,https://github.com/proteanhq/protean,7647,30,30,39,26,9,596,6,4.701342281879195,1,0,1,1,3,18.568791946308725,123.39515007954996,1.1654751251155249,403.29945460841856
804103896,carlosgomez2,hexagonal_architecture_project,hexagonal_architecture_project python project,https://github.com/carlosgomez2/hexagonal_architecture_project,3,0,0,0,0,1,11,2,1.2727272727272727,1,1,0,1,3,2.8181818181818183,1.729050000786716,0.1818181818181818,0.864525000393358
675936149,anish9999,Organization-Management,It is an independent api for organization management of different modules. It too uses microservices architecture for communication between apis,https://github.com/anish9999/Organization-Management,20,0,0,0,0,1,24,3,4.458333333333333,0,0,0,0,0,7.333333333333333,26.18785027756624,0.4695457175925925,89.52197872098304
816270081,luizcarlosom,api-seven-deadly-sins,"The API of the Seven Deadly Sins was created in Python with a clean architecture and utilizes a MySQL database. It provides access to detailed information about each character, such as their name, which sin they represent, a description of them, and, when applicable, their sacred treasure.",https://github.com/luizcarlosom/api-seven-deadly-sins,70,1,1,0,0,1,82,4,1.8902439024390243,1,1,1,1,4,4.158536585365853,18.71334917194111,0.2753027862611387,23.491589802098016
519710414,kiyan-rezaee,ResNet-architecture,"In this novel architecture, the input of each layer consists of the feature maps of all earlier layer, and its output is passed to each subsequent layer.",https://github.com/kiyan-rezaee/ResNet-architecture,177,0,0,0,0,1,1,0,9.0,0,0,0,0,0,0.0,11.60964047443681,1.0,11.60964047443681
218206938,quanghieu-vu,bigdata19,Source code of the IEEE BigData 2019 Cup: Suspicious Network Event Recognition: winning solution,https://github.com/quanghieu-vu/bigdata19,19,0,0,2,0,0,8,0,5.625,0,0,0,0,0,31.75,522.9265349049408,4.05909015587587,2658.0714960637865
881679760,BrenoFreitasM,clean_architecture_python,,https://github.com/BrenoFreitasM/clean_architecture_python,10,0,0,0,0,1,25,4,2.2,1,1,1,1,4,2.4,1.7879700005769252,0.16,2.621955000865388
508618264,hainv-ohio,clean_architecture_sample,,https://github.com/hainv-ohio/clean_architecture_sample,14,0,0,0,0,1,49,3,2.163265306122449,1,1,0,0,2,2.6122448979591835,4.780160776705807,0.2193877551020408,7.295098228568697
769741563,simonprudhomme,microservice-architecture-demo,Create a microservice event-based roject using K8s,https://github.com/simonprudhomme/microservice-architecture-demo,7586,0,0,0,0,1,14,3,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
873403262,roxn21,T41_Microservices-Architecture-Diagram,,https://github.com/roxn21/T41_Microservices-Architecture-Diagram,1,0,0,0,0,1,1,0,7.0,0,0,0,0,0,10.0,116.6920585619588,2.25,262.55713176440725
254448959,sardonrx,Microservices-Web-App-Django-Flask-RabbitMQ-Docker-,Microservices are an architectural style that develops a single application as a set of small services. Each service runs in its own process. ,https://github.com/sardonrx/Microservices-Web-App-Django-Flask-RabbitMQ-Docker-,9,1,1,2,2,1,8,2,2.75,0,0,0,0,0,1.25,3.80089098228915,0.21875,2.553487767831645
817849214,flango-dev,cqrs-rest,An example how to create RESTful API suitable for CQRS.,https://github.com/flango-dev/cqrs-rest,17,0,0,0,0,1,16,2,1.4375,0,0,1,0,1,2.25,10.892091054332017,0.4097222222222222,25.31398348772254
205011104,outech-robotic,hl-flowing-clean-arch,Just a PoC for the flowing clean architecture.,https://github.com/outech-robotic/hl-flowing-clean-arch,1829,2,2,0,0,0,78,4,3.8461538461538463,1,0,0,1,2,6.512820512820513,64.52447166455006,1.0277147380004712,280.7894422235529
580367828,FadedGuy,Video2Audio,Microservices app created when following a course in Microservices Architecture and System Design,https://github.com/FadedGuy/Video2Audio,31,0,0,0,0,1,14,4,3.071428571428572,0,0,0,1,1,2.7857142857142856,15.138974074573635,0.7148962148962149,38.38830272659734
694221023,bharat-sunny,AWS-Evaluation,"A sample microservice architecture designed on AWS for Users, Orders and Notification Services",https://github.com/bharat-sunny/AWS-Evaluation,71,0,0,0,0,1,74,2,1.6756756756756757,0,0,0,0,0,2.7972972972972974,11.967351254731913,0.4144144144144142,14.91555619385494
896767960,Distributed-IoT-Software-Arch-Course,iot-microservice-arch-playground,A Playground for a Microservices oriented Software Architecture for an IoT use case,https://github.com/Distributed-IoT-Software-Arch-Course/iot-microservice-arch-playground,2222,0,0,0,0,1,28,3,2.7857142857142856,0,0,0,1,1,5.142857142857143,20.153186585508035,0.4337278267950536,22.56788615463057
878170629,napolifabrizio,CQRS,,https://github.com/napolifabrizio/CQRS,10192,1,1,0,0,1,7,2,3.571428571428572,1,1,0,1,3,6.0,3.609456328359777,0.0714285714285714,1.8047281641798885
883689590,JanneKarki,DevOpsKubernetes,Software with a microservice architecture that utilizes Kubernetes to serve software that scales and deploys automatically. Introductory course to Kubernetes with K3s and GKE.,https://github.com/JanneKarki/DevOpsKubernetes,1312,0,0,0,0,1,5,5,4.2,0,0,0,0,0,5.6,20.86011665831752,0.9,28.78821998661089
921396064,aws-samples,aws-lambda-layer-deployment-template,"🚀 AWS Lambda Layer Deployment Template | Streamline Python dependency management in your serverless applications by automatically creating, versioning, and deploying Lambda Layers. Features version control, multiple runtime and architecture support, and Infrastructure as Code (IaC) templates for seamless CI/CD integration.",https://github.com/aws-samples/aws-lambda-layer-deployment-template,83,3,3,0,0,1,2,1,7.5,0,0,0,0,0,13.5,96.92642097673122,1.5962566844919786,188.76238512530065
298940499,AjanShrestha,rentomatic,A demo implementation of a clean architecture in Python - https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html,https://github.com/AjanShrestha/rentomatic,107,0,0,0,0,1,41,3,1.829268292682927,1,1,1,0,3,7.2439024390243905,47.31447761042701,0.6021001028868849,61.31047468953776
578204144,vishwaskalani,COL334-P2S-Network-design,This project consists of design of a P2S network similar to P2P architecture. It consists of implementation of application layer with experimentation on using different transport layer protocols for different purposes.,https://github.com/vishwaskalani/COL334-P2S-Network-design,574,0,0,0,0,1,4,0,8.0,0,0,0,0,0,19.5,571.5804204461715,6.618704212454212,3887.883063819215
202503314,tinni2806,SidecarProxy,MicroService architecture routing using Envoy as a sidecar proxy in a ServiceMesh architecture and using Zipkin and Jaeger for Request tracing.,https://github.com/tinni2806/SidecarProxy,33,0,0,0,0,1,3,3,6.0,0,0,0,0,0,17.666666666666668,174.14207229289067,2.4914529914529915,548.9887218673817
287584061,Hyaxia,Bank-DDD-CQRS-ES,cqrs and event sourcing playground,https://github.com/Hyaxia/Bank-DDD-CQRS-ES,3530,9,9,2,0,1,71,4,3.1690140845070425,0,1,1,1,3,7.253521126760563,43.924525898558535,0.5947838648226023,157.76531179827583
656183918,wonjinsin,python-clean-architecture,,https://github.com/wonjinsin/python-clean-architecture,46,0,0,0,0,1,29,3,1.9655172413793105,0,0,0,0,0,2.3448275862068964,5.836712500223807,0.2241379310344828,14.786172342065926
65321032,vaiski,sqlalchemy-eventsource,Event sourcing with SQLAlchemy,https://github.com/vaiski/sqlalchemy-eventsource,11,0,0,0,0,0,8,2,2.625,0,0,0,0,0,4.125,8.885853483010306,0.28125,11.369653394454248
735621588,muaid-mughrabi,clean-architecture-minesweeper,A repo to create a simple ,https://github.com/muaid-mughrabi/clean-architecture-minesweeper,22,0,0,0,1,1,21,3,1.2857142857142858,0,0,1,0,1,3.571428571428572,10.109595788729802,0.4804421768707482,18.55038874674124
711446458,GoldenJaden,Edu-Platform,Educational platform using microservices architecture. Written with python Django and Flask.,https://github.com/GoldenJaden/Edu-Platform,34,1,1,0,0,1,38,3,2.526315789473684,0,0,0,0,0,5.552631578947368,14.282380010283296,0.2843567251461988,56.48573673776532
532667200,Johnkayode,product-microservices,event-driven architecture with python and rabbitmq,https://github.com/Johnkayode/product-microservices,21,0,0,0,0,1,18,6,1.7777777777777777,0,1,1,0,2,1.0,1.0566416671474377,0.1111111111111111,0.5283208335737188
600972740,shawnduong,badger-poc,"Badger is an open source IoT RFID-based authentication, attendance tracking, notification, and rewards system for small to large scale events.",https://github.com/shawnduong/badger-poc,684,1,1,2,0,1,25,5,2.92,1,0,1,0,2,14.28,98.2300891680384,1.391517256945919,361.1273297722473
498915217,YuryTinos,backend-python,Curso de Clean Architecture com Python,https://github.com/YuryTinos/backend-python,22,0,0,0,0,1,21,3,2.1904761904761907,1,0,1,1,3,4.142857142857143,16.254784307400534,0.5318491032776747,31.237285324102388
776852638,disha-200,NEURAL-NETWORK-,Implemented a neural network from scratch with adjustable number of layers and neurons and analyzed performance by varying architecture and regularization parameter on 4 diverse datasets.,https://github.com/disha-200/NEURAL-NETWORK-,97,0,0,0,0,1,10,0,3.0,0,0,0,0,0,43.8,2039.702880125252,6.6266957644459765,13551.245482981249
827082065,forged-by-grace,web-scrapper,"This application is designed to scrape event data from a specified web source, transform the data into a structured JSON format, and persist it into an SQLite database. It leverages several components including data ingestion, data transformation, and data persistence to achieve this goal.",https://github.com/forged-by-grace/web-scrapper,40,0,0,0,0,2,21,2,2.4761904761904763,1,0,1,0,2,2.523809523809524,3.6884950671488106,0.1309523809523809,4.55998535583497
870409899,astor-dev,event-driven-microservices-with-fastapi,"[fastAPI, kafka] ddd,eda,cqrs seed",https://github.com/astor-dev/event-driven-microservices-with-fastapi,60,1,1,0,0,1,44,8,3.9318181818181817,1,1,1,1,4,4.5227272727272725,3.566729838626669,0.1931818181818181,3.649305186113801
891567605,nanvel,slides-ddd,Tactical Domain-Driven Design in Python,https://github.com/nanvel/slides-ddd,1448,0,0,0,0,1,30,3,0.7333333333333333,1,1,0,0,2,3.033333333333333,34.26501032652211,0.5952380952380952,224.41936793427317
273001226,KazakovDenis,praktikum,Online cinema on microservice architecture,https://github.com/KazakovDenis/praktikum,553,0,0,0,3,1,48,4,2.6666666666666665,0,0,1,0,1,7.270833333333333,35.46467342507565,0.6533654088525913,137.29292464948395
945423930,jajos12,CleanArchitecture-With-Django,,https://github.com/jajos12/CleanArchitecture-With-Django,40,0,0,0,0,1,23,3,1.9130434782608696,1,1,1,1,4,2.608695652173913,0.4134684784489973,0.0434782608695652,0.2067342392244986
42242593,shawnchin,hexaviz,Visualisation utility for an abstract hexagonal architecture,https://github.com/shawnchin/hexaviz,72,0,0,0,0,2,4,1,2.5,0,0,0,0,0,41.75,89.90448567839695,0.8141025641025641,245.13140218923272
390393034,sangmin7648,flask-layered-template,template for Flask app with 3-tier layered architecture,https://github.com/sangmin7648/flask-layered-template,4,0,0,0,0,0,11,1,1.0909090909090908,0,0,0,0,0,1.181818181818182,0.432262500196679,0.0454545454545454,0.2161312500983395
191313428,Parikshit22,UNet-using-Dense-Layer,"Basically, I implemented U-Net architecture using Dense-Blocks instead of Convolution layers and also added a Dilated Spatial Pooling Layer in the BottleNeck layer ",https://github.com/Parikshit22/UNet-using-Dense-Layer,4,15,15,5,0,0,1,0,11.0,0,0,0,0,0,17.0,325.3715058335023,4.629032258064516,1506.155196358309
715828459,pukmark,MLA_Simulation,Multi Layer Architecture Simulation,https://github.com/pukmark/MLA_Simulation,120,0,0,0,0,1,8,0,4.25,0,0,0,0,0,23.75,858.6235758647639,6.096568313827516,8404.259019093832
919684573,rodrigoBojorquez,python-clean-architecture,Una forma interesante de utilizar patrones de arquitectura en Python,https://github.com/rodrigoBojorquez/python-clean-architecture,1705,1,1,0,0,1,24,4,2.625,1,1,0,1,3,2.5,3.1274437510817346,0.1875,4.264285939212746
402699174,ganesanarun,clean-architecture,SOLID,https://github.com/ganesanarun/clean-architecture,4,0,0,0,0,1,1,0,1.0,0,0,0,0,0,3.0,39.86313713864836,1.7142857142857142,68.33680652339717
464552652,sperea,clean-architecture-python-boilerplate,,https://github.com/sperea/clean-architecture-python-boilerplate,35,0,0,0,0,1,35,3,2.0285714285714285,1,1,1,0,3,3.4,20.37264047094072,0.5143956043956044,31.571852293988844
703040075,auth-Afham,ML-UserInputSim-PY,"This repository contains a Python script for creating a human-machine interface that interprets user actions based on sensor data. The system utilizes multiple input sources, including keyboard and mouse events, screen pixels, and audio data.",https://github.com/auth-Afham/ML-UserInputSim-PY,51,0,0,0,0,1,2,0,9.0,0,0,0,0,0,39.5,1059.696145669525,6.720703125,11635.107824977087
974023562,ZhanB-Z,e_library,"My E-library application. Python, Flet, Pydantic, SQLite, SQLAlchemy, Loguru + clean architecture, repository pattern, and dependency injection :)",https://github.com/ZhanB-Z/e_library,2272,0,0,0,0,1,24,3,3.25,1,0,0,0,1,11.166666666666666,52.62772302748465,1.146802503052503,239.8692105990145
850892959,seanssullivan,dodecahedron,Collection of classes and functions to support domain driven design and hexagonal architecture.,https://github.com/seanssullivan/dodecahedron,100,0,0,0,0,1,104,4,4.394230769230769,1,0,0,1,2,14.375,49.74844097333232,0.6927024101757587,124.04155851245932
565438890,thanhNt16,dddbase,Domain driven design with python Fastapi,https://github.com/thanhNt16/dddbase,12,0,0,0,0,1,25,4,2.04,1,1,0,1,3,2.36,1.1207820003461548,0.12,0.9305865002596164
186156434,dooriburn,dootcha-server-django,building a microservice server architecture with python django cloning Watcha web,https://github.com/dooriburn/dootcha-server-django,5,0,0,0,0,0,12,3,1.0833333333333333,0,0,0,0,0,0.5,0.3962406251802891,0.0416666666666666,0.1981203125901445
933994496,gonchigars,Clean_Architecture,,https://github.com/gonchigars/Clean_Architecture,16,0,0,0,0,1,7,3,2.571428571428572,1,1,1,1,4,5.285714285714286,12.381295521079176,0.5714285714285714,27.21188522982705
754488912,lokeshk307,banking_system,This is a simplified version of a banking system application based on clean architecture principles.,https://github.com/lokeshk307/banking_system,17,0,0,0,0,1,16,1,1.0625,1,0,0,1,2,3.875,6.88357749622003,0.5260416666666667,17.190271467563385
634802533,Yves-Byiringiro,simple-microservices-project,"a simple bog using microservices architecture, built it using different technologies such as NodeJS, Django, PostgreSQL and MongoDB.",https://github.com/Yves-Byiringiro/simple-microservices-project,695,0,0,0,0,1,25,3,1.96,1,0,0,0,1,1.76,2.676676114505605,0.15,2.087311585792665
285285179,sahbijabnouni,clean-architecture-python,,https://github.com/sahbijabnouni/clean-architecture-python,4,0,0,0,0,1,19,4,1.5789473684210529,1,1,1,1,4,1.3157894736842106,0.6584092107540493,0.1052631578947368,0.4081519737980773
535043114,oboforty,tomcru,"Py & node.js application framework that can target multiple architectures (microservices, FaaS, monolithic) over multiple vendors (AWS, Azure, on premise, single server)",https://github.com/oboforty/tomcru,279,0,0,0,0,1,100,7,3.08,1,1,0,0,2,10.45,43.05617784843896,0.9346158853401502,143.5278902026258
879455652,GaspTO,3Tree,"3Tree is a Python library for flexible, tree-based search algorithms. Wrap any problem in a standard interface to apply search methods like BFS, DFS, and heuristic-driven approaches. Designed for adaptability, 3Tree makes it easy to experiment with and apply search techniques across diverse problem domains.",https://github.com/GaspTO/3Tree,15,0,0,0,0,1,13,1,2.076923076923077,0,0,0,0,0,7.769230769230769,35.899530222746336,1.010989010989011,103.33358375820548
789029163,Ezequiel-Valencia,EventScraper,Application used to flow events from one source to another. Currently used by CTGrassRoots,https://github.com/Ezequiel-Valencia/EventScraper,588,6,6,0,6,2,35,3,4.342857142857143,0,0,0,0,0,10.571428571428571,69.72391950055,1.5634330708342774,286.030441342309
549586215,azhar-iqbal2942,micro-services,"Sample Project using gRPC, Protobufs, python for microservices architecture.",https://github.com/azhar-iqbal2942/micro-services,19,0,0,0,0,1,4,2,3.25,0,0,0,0,0,3.0,8.943609377704336,0.625,8.349248439933902
924096691,ivutenskuikpyTeHckui,clean_architecture_fastapi,,https://github.com/ivutenskuikpyTeHckui/clean_architecture_fastapi,52,0,0,0,0,1,36,2,2.333333333333333,1,1,1,1,4,2.4166666666666665,1.0141604167868594,0.0555555555555555,0.8820802083934297
519228428,ruddasgupta,Flash-Cards-App-Microservices,Flash Cards App Microservices Architecture,https://github.com/ruddasgupta/Flash-Cards-App-Microservices,1819,0,0,0,0,1,15,3,4.0,0,0,0,0,0,4.8,52.0295812864194,0.530623973727422,103.01509177181684
594187877,JoseHenriqueSiqueira,DiscordEventsBot_2023,"This repository contains the source code of DiscordEventsBot_2023, a bot developed based on Apollo, but completely free. It includes custom buttons, emoji options and other features that make it unique and easy to use. If you are interested in using this bot on your own server, feel free to download it and customize it to your needs.",https://github.com/JoseHenriqueSiqueira/DiscordEventsBot_2023,80,0,0,0,0,1,1,1,3.0,0,0,0,0,0,17.0,125.09775004326936,2.857142857142857,357.42214298076965
475753209,268-282-303-334-CloudHack-3,ProblemStatement3,CReating microservices for a calculator application from a monolithic architecture.,https://github.com/268-282-303-334-CloudHack-3/ProblemStatement3,13,0,0,0,0,0,13,5,3.8461538461538463,0,0,0,0,0,3.076923076923077,14.65847503212326,0.8999999999999999,15.059997018914554
368138534,SmartDogHouse,SmartDogHouse-Software,Automation of an Animal Shelter for SmartCity project. Using Domain-Driven-Design and Build Automation + Continuous-Integration/Continuous-Delivery,https://github.com/SmartDogHouse/SmartDogHouse-Software,990,3,3,0,8,0,39,4,2.743589743589744,0,0,0,0,0,13.564102564102564,34.826363332878614,0.955410112763054,139.15270155562135
873966643,wilkerdossantos,flix_app,"FlixApp é um frontend escrito em Python usando a biblioteca Streamlit. O projeto segue a abordagem de Domain-Driven Design (DDD), implementando os padrões Service e Repository. O FlixApp consome dados da FlixApi, um backend responsável por fornecer informações sobre filmes e séries.",https://github.com/wilkerdossantos/flix_app,19,1,1,0,0,1,24,1,2.375,0,0,1,0,1,4.666666666666667,11.028042517923806,0.2944444444444444,9.454258970655134
234636862,shashankshekhardehradun,Newswires-Classification,A multiclass classification model implemented on the Reuters Dataset. Output is one out of 46 different classes. Uses simple sequential neural network architecture with just two hidden layers.,https://github.com/shashankshekhardehradun/Newswires-Classification,1,0,0,0,0,1,1,0,5.0,0,0,0,0,0,2.0,0.0,0.0,0.0
774908225,ZeroNLP,ZS_TE,Source code for LREC-COLING 2024 paper titled Zero-shot Event Detection using a Textual Entailment Model as an Enhanced Annotator.,https://github.com/ZeroNLP/ZS_TE,1415,2,2,2,0,0,5,3,9.4,0,0,0,0,0,50.4,878.1677706828683,6.865057654303719,7555.601796002088
359406789,filwaline,cookiecutter-python-clean-architecture,,https://github.com/filwaline/cookiecutter-python-clean-architecture,35,1,1,0,0,1,20,4,0.4,1,0,0,1,2,0.35,2.6774437510817344,0.075,1.7264662506490407
578684354,mrb987,AlexNet-CNN,AlexNet CNN architecture is one of the popular architectures of Convolutional Neural Networks. It was the first CNN architecture to stack convolutional layers directly on top of one another.,https://github.com/mrb987/AlexNet-CNN,4,2,2,0,0,1,1,0,9.0,0,0,0,0,0,0.0,12.0,0.6666666666666666,8.0
622681801,bittencourt-lucas,boilerplate-fastapi-ddd,A boilerplate to create a backend app with FastAPI following Domain-Driven Design,https://github.com/bittencourt-lucas/boilerplate-fastapi-ddd,11,1,1,0,0,1,25,4,1.04,1,1,1,1,4,1.76,3.906091551054862,0.2435714285714285,5.847193045756183
563728375,szymon6927,hexagonal-architecture-python,An example project that uses FastAPI and follows the hexagonal architecture rules.,https://github.com/szymon6927/hexagonal-architecture-python,120,107,107,14,0,3,81,3,3.740740740740741,1,1,0,1,3,5.08641975308642,12.854679421722375,0.2433915878360323,14.430185600124467
622924413,santurini,cleanvit,Vision Transformer Architectures for Image Denoising,https://github.com/santurini/cleanvit,7,0,0,0,0,1,12,1,6.5,0,0,0,0,0,8.916666666666666,109.4068447769572,2.652398459383753,432.7444157200316
870762597,samuel005005,FastAPI-Hexagonal-Clean-Architecture, Esta es una aplicación de demostración de FastAPI que implementa la Arquitectura Hexagonal.,https://github.com/samuel005005/FastAPI-Hexagonal-Clean-Architecture,8,0,0,0,0,1,32,5,3.375,1,1,1,1,4,4.34375,2.0698540966600727,0.109375,4.006731737182204
780933761,gentil-eilison,hotel-rooms-microservice,Microservice whose responsibility is creating hotel rooms for Software Architecture course,https://github.com/gentil-eilison/hotel-rooms-microservice,45,1,1,0,4,1,38,3,1.8157894736842104,0,0,1,0,1,1.6842105263157894,0.3753858554339581,0.0394736842105263,0.187692927716979
585773750,paramirez,prueba-gigflow,Implementation of a REST API to find and list services using a hexagonal architecture,https://github.com/paramirez/prueba-gigflow,57,2,2,0,1,1,22,5,2.863636363636364,1,1,0,1,3,2.090909090909091,0.432262500196679,0.0454545454545454,0.2161312500983395
352534042,Anyesh,microservice-pinterest,Microservices architecture with GraphQL federation for Pinterest clone,https://github.com/Anyesh/microservice-pinterest,17,0,0,0,1,1,23,4,2.391304347826087,1,0,0,0,1,4.565217391304348,10.967300891809968,0.4822134387351778,22.15632716765297
304464661,urbancomp,fogarch,Multi-Layered Fog Computing Architecture for DataReduction in a Traffic Congestion Detection System,https://github.com/urbancomp/fogarch,6646,1,1,0,0,1,25,4,9.52,0,0,0,0,0,8.72,490.4634371805645,4.209670324668664,3665.571115663918
708494043,MaheshBailwal,python-clean-architecture,,https://github.com/MaheshBailwal/python-clean-architecture,9,0,0,0,0,1,22,2,4.454545454545454,1,1,1,1,4,4.818181818181818,10.111485589439136,0.3422459893048128,24.648630195218484
817442014,codewitgabi,microservice,Microservice architecture with django and nodejs,https://github.com/codewitgabi/microservice,60,0,0,1,0,1,97,4,2.402061855670103,0,0,0,1,1,2.329896907216495,4.559104191308026,0.2413843888070692,5.165574894710391
35590598,solnet-cloud,docker-logstash,"Logstash is a flexible, open source data collection, parsing, and enrichment pipeline. With connectors to common infrastructure for easy integration, Logstash is designed to efficiently process a growing list of log, event, and unstructured data sources for distribution into a variety of outputs, including Elasticsearch.",https://github.com/solnet-cloud/docker-logstash,56,0,0,0,0,1,3,2,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
323177847,ChristoferBerruz,GanArchitectures,"Multi-Layer Perceptron Gan, Deconvolutional Gan, WGAN with gradient clipping, and WGAN with gradient penalty.",https://github.com/ChristoferBerruz/GanArchitectures,40,1,1,0,0,1,11,2,3.363636363636364,1,0,0,0,1,15.0,124.82821923036198,2.714524446142093,810.7346297461579
901168856,a-niazi,EventSourcing,Event Sourcing Python Sample,https://github.com/a-niazi/EventSourcing,30,0,0,0,0,0,72,3,1.4583333333333333,1,1,0,1,3,5.888888888888889,12.220799598991022,0.7385802469135803,28.54616986203496
903362333,app-physiobuddy,root,Root folder and instructions for the app backend system. Developed in a microservices architecture with clean code,https://github.com/app-physiobuddy/root,346,0,0,0,0,0,1,0,2.0,0,0,0,0,0,5.0,27.0,1.0,27.0
78198784,bmwasaru,bank,event sourcing illustration,https://github.com/bmwasaru/bank,4,0,0,0,0,1,8,2,2.625,0,0,0,0,0,0.875,1.1887218755408673,0.125,0.5943609377704336
86284609,xyicheng,DemoSystem,"Demo of a CQRS system using python, redis, rabbitmq and docker.",https://github.com/xyicheng/DemoSystem,234,0,0,0,0,0,3,4,3.6666666666666665,0,0,0,0,0,5.333333333333333,12.67970000576925,0.8333333333333334,15.849625007211564
356862753,nicktindall,es_messageboard,Event sourced messageboard example,https://github.com/nicktindall/es_messageboard,17,0,0,0,0,1,10,2,3.8,0,0,0,0,0,8.7,49.932369845999055,1.0611721611721614,129.9157837019694
178770651,GLaDO8,CNN-architectural-components,"➰❌ Loop-less Numpy implementation of CNN architectural components like convolution, pooling, upsampling and fully-connected layers",https://github.com/GLaDO8/CNN-architectural-components,44,0,0,0,0,0,5,1,2.6,0,0,0,0,0,2.6,111.4312800138462,1.7033333333333331,570.6238290725195
200148038,yoophi,clean-architecture-flask-sample,Clean Architecture 기반의 Flask App 을 위한 샘플 코드 ,https://github.com/yoophi/clean-architecture-flask-sample,3,0,0,0,0,1,8,3,2.25,1,1,1,1,4,5.125,0.0,0.0,0.0
928203975,YasinKar,rabbitmq-microservices,"Simple e-commerce backend built using a microservices architecture with rabbitmq message broker and JWT authentication. backend includes a three services of products, orders and users. project developed with Django and DRF",https://github.com/YasinKar/rabbitmq-microservices,1065,0,0,0,0,1,67,5,2.1343283582089554,0,1,1,1,3,1.8955223880597012,7.006196188878653,0.3199004975124378,10.632157676631406
364150218,yulio94,python-ddd-example,A Python backend skeleton to develop in a domain-driven design framework.,https://github.com/yulio94/python-ddd-example,34,2,2,1,0,1,25,5,0.28,1,1,0,0,2,0.16,0.0,0.0,0.0
641024728,isaacgg,pymessaging,CQRS and event sourcing library for python,https://github.com/isaacgg/pymessaging,71,0,0,0,0,1,66,5,1.181818181818182,1,0,0,1,2,2.287878787878788,1.6370592250901368,0.0757575757575757,2.2660467921150995
667669284,tuananhphan97vn,RAiO-LongMRC,";This repo is the offical code for paper: Read-All-in-Once (RAiO): Multi-layer Contextual Architecture for Long-Text Machine Reading Comprehension, which is accepted in Q1 journal IEEE Access",https://github.com/tuananhphan97vn/RAiO-LongMRC,88,2,2,1,0,1,10,0,10.0,0,0,0,0,0,66.0,1138.9826353666567,6.712801042254847,12285.340962203907
673008311,cloin,cloin.datadog,Datadog collection containing Event-Driven Ansible source plugin,https://github.com/cloin/cloin.datadog,46,3,3,1,0,1,2,4,4.0,0,0,0,0,0,10.0,71.77444286430566,2.75,208.37780715192173
739963789,xuzy8888,Auction-Website-Microservices,An auction website implemented with Microservices Architecture,https://github.com/xuzy8888/Auction-Website-Microservices,8406,0,0,0,0,1,15,4,3.8666666666666663,0,0,0,0,0,12.266666666666667,103.66388872170089,1.925922459893048,426.68579928031545
470786285,hackgvl,slack-events-bot,An automated Slack bot to syndicate local events into Slack channels in a weekly digest format. Event data is sourced from HackGreenville Labs' Events API.,https://github.com/hackgvl/slack-events-bot,143,5,5,4,5,29,19,2,4.894736842105263,0,0,0,0,0,10.894736842105264,81.22960246376462,1.7396526980118314,328.3600495066652
900024455,MosheRoimicherCode,employeesManager,CQRS_employeeManagerView,https://github.com/MosheRoimicherCode/employeesManager,1621,0,0,0,0,1,31,4,3.5806451612903225,1,1,1,1,4,9.709677419354838,13.380998183580695,0.4951381386016361,19.879260448512238
517381218,zuhairmhtb,PyMessagingFramework,A python MessagingFramework to manage communication between different services of a microservice architecture.,https://github.com/zuhairmhtb/PyMessagingFramework,200,0,0,0,0,1,5,2,4.0,0,0,0,0,0,43.4,480.3435224938801,2.0515079365079365,2738.862521064072
364787747,rissuuuu,domain_driven_design,,https://github.com/rissuuuu/domain_driven_design,23,0,0,0,0,1,41,4,3.3902439024390243,1,0,0,1,2,8.146341463414634,23.692889464256595,0.6537790691022587,54.80699326350462
719280759,Slimcent,Image_Classification_Using_Neural_Network,The purpose of this deep learning project is to leverage the Fashion MNIST dataset to build a neural network for image classification. The goal is to explore a more complex neural network architecture with additional layers and fine-tuned parameters to improve the model's performance.,https://github.com/Slimcent/Image_Classification_Using_Neural_Network,451,0,0,0,0,1,1,0,8.0,0,0,0,0,0,0.0,36.0,1.3333333333333333,48.0
931913044,devgabriellimaruas,create-layered-architecture,,https://github.com/devgabriellimaruas/create-layered-architecture,4,0,0,0,0,1,3,1,1.3333333333333333,0,0,0,0,0,3.333333333333333,23.78760080956771,0.7666666666666666,40.757230206284376
599066023,microsoft,cookiecutter-python-flask-clean-architecture,Cookiecutter Python Flask template for jumpstarting production-ready projects quickly.,https://github.com/microsoft/cookiecutter-python-flask-clean-architecture,945,137,137,26,5,4,48,5,2.1666666666666665,1,1,1,1,4,4.041666666666667,12.673082392890764,0.3648080065359478,44.49828036098966
465186333,xitonchong,Architecture_pattern_with_python,"From ""Harry Percival - Architecture patterns with python: enabling TTD, DDD, Event-driven microservices""",https://github.com/xitonchong/Architecture_pattern_with_python,122,0,0,0,0,1,37,3,3.3783783783783785,1,0,0,1,2,7.891891891891892,24.386436329828552,0.5953287582544549,55.79586311850328
607349266,hoxas,stocks,Stock price fetching web app with a monorepo microservices architecture,https://github.com/hoxas/stocks,690,0,0,0,0,1,11,3,2.090909090909091,0,0,1,0,1,8.090909090909092,45.684768915012256,0.2997782705099778,44.789702293850645
311147402,XandeCoding,ddd_fastAPI,implementação de um projeto simples usando FastAPI com conceitos de Domain Driven Design,https://github.com/XandeCoding/ddd_fastAPI,15,2,2,0,0,0,7,2,2.2857142857142856,0,0,0,1,1,1.4285714285714286,0.6792696431662099,0.0714285714285714,0.3396348215831049
851982740,PedroGuilhermeSilv,architecture-hexagonal,,https://github.com/PedroGuilhermeSilv/architecture-hexagonal,4860,0,0,0,0,1,75,6,1.9466666666666668,1,0,0,1,2,2.546666666666667,8.869581247074274,0.1012136752136752,13.688348330687452
415803054,enzomar,cqrs,Command Query Responsability Segregation - Playground,https://github.com/enzomar/cqrs,16,0,0,0,0,1,5,1,2.6,0,0,0,0,0,6.6,21.962294808144517,0.9857142857142858,31.956750517503885
10646552,renzon,gaebusiness,Micro Architecture for Business Layer on Google App Engine,https://github.com/renzon/gaebusiness,57,1,1,0,1,1,8,1,5.375,0,0,0,0,0,32.0,88.55232428384903,1.595357142857143,399.85161069792986
126392397,bobthemighty,eventsourcing-101,Slides and code for event sourcing 101 talk,https://github.com/bobthemighty/eventsourcing-101,1755,31,31,6,0,0,5,2,2.4,0,0,0,0,0,11.8,14.94646243090276,0.5,18.932776144767598
952204773,DaliGabriel,FlaskAPIScalableProductionReady,"This is a Flask REST API built with PostgreSQL, SQLAlchemy, and Docker, following SOLID principles and a clean architecture for maintainability and scalability.",https://github.com/DaliGabriel/FlaskAPIScalableProductionReady,14869,1,1,0,0,1,11,2,2.090909090909091,1,1,1,1,4,4.0,2.0995215913680085,0.1363636363636363,1.0497607956840045
103845041,anishk23733,vexscout,A python script that automatically scouts data about teams when given a Robot Source VEX Event.,https://github.com/anishk23733/vexscout,16,0,0,0,0,1,2,0,8.5,0,0,0,0,0,3.0,259.7724119154575,1.9411764705882355,1008.528187436482
859299596,MohamadAlturky,clean-architecture-generator,clean architecture code generator from database specification.,https://github.com/MohamadAlturky/clean-architecture-generator,7,5,5,0,0,2,10,2,1.0,1,0,0,0,1,3.5,18.08733520675056,0.4599999999999999,22.05762708005119
424803332,MSrvComm,BLOC,A tool to build an arbitrary microservice architecture.,https://github.com/MSrvComm/BLOC,355,0,0,0,0,1,6,1,4.166666666666667,0,0,0,0,0,6.5,98.59387107759788,2.681372549019608,597.2251118127192
870291948,kohiry,cdn,A simple example of clean architecture by me.,https://github.com/kohiry/cdn,23,0,0,0,0,1,17,3,2.0,1,1,1,0,3,2.117647058823529,4.4728882363122215,0.1588235294117647,4.89353397163179
828237582,Qwor01,EventSourcingFastAPI,Event Sourcing backend run with FastAPI,https://github.com/Qwor01/EventSourcingFastAPI,33,0,0,0,0,1,4,0,6.0,0,0,0,0,0,11.5,100.78077225888028,1.59375,558.1355884322876
539642081,MaycolTeles,clean-architecture,"Repository containing studies from the book ""Clean Architecture"" by Robert Martin.",https://github.com/MaycolTeles/clean-architecture,93,1,1,0,0,1,12,3,2.583333333333333,0,0,0,0,0,2.25,0.3962406251802891,0.0416666666666666,0.1981203125901445
265909990,ferminhg,django-reactjs-hexarch,Django + Reactjs Hexagonal Architecture Example,https://github.com/ferminhg/django-reactjs-hexarch,20,1,1,0,0,1,15,3,1.9333333333333331,0,0,0,0,0,1.6666666666666667,3.812631667339746,0.2166666666666666,3.8403008339583353
593095373,greenlynx,python-event-sourcing,,https://github.com/greenlynx/python-event-sourcing,4,0,0,0,0,1,1,0,6.0,0,0,0,0,0,31.0,155.11451069865606,4.052631578947368,628.6219644103429
765511038,matt1007k,fastapi-app,"Make python server, with clean architecture, and TDD with FastAPI",https://github.com/matt1007k/fastapi-app,2,0,0,0,0,1,2,1,3.0,0,0,0,0,0,1.0,0.0,0.0,0.0
736149014,NUCCASJNR,CommandIQ-Bank-API,"Powerful backend APIs for a modern banking system, leveraging CQRS for scalable command and real-time query operations. Seamlessly manage user registration, account creation, and financial transactions.",https://github.com/NUCCASJNR/CommandIQ-Bank-API,76,0,0,0,0,1,37,2,2.5945945945945947,1,0,1,0,2,4.702702702702703,2.671347124391821,0.1756756756756756,2.525919508609633
169890814,zrev2220,cqr,Canvas Quiz Review (CQR): Program for reviewing Canvas quizzes,https://github.com/zrev2220/cqr,8,0,0,0,3,0,3,0,4.0,0,0,0,0,0,17.666666666666668,379.62038918303256,4.757044864664442,2107.213072475788
647666179,dinarabz,MicroserviceArchitectureForStreamingDataProcessing,The main goal of this thesis is to develop a microservice architecture for streamed data. The architecture employs an MQTT client to connect remote IoT devices with the server.,https://github.com/dinarabz/MicroserviceArchitectureForStreamingDataProcessing,33,0,0,0,0,1,2,1,7.0,0,0,0,0,0,15.0,59.47757024720563,1.95,195.3291519623621
624498790,davidnavo,python-hexagonal-architecture-exercise,Exercise on hexagonal architecture using Python,https://github.com/davidnavo/python-hexagonal-architecture-exercise,11,0,0,0,0,1,22,1,2.8181818181818183,1,1,0,1,3,6.136363636363637,20.622436468286992,0.4920900178253118,43.809508828085335
923156212,emvalencaf,data-pipeline-knowledge-vector-database,This project implements a data pipeline using microservices-oriented architecture for ingestion data into vector database,https://github.com/emvalencaf/data-pipeline-knowledge-vector-database,234,0,0,0,0,1,22,2,4.454545454545454,0,0,0,0,0,4.727272727272728,5.437152494206016,0.2727272727272727,4.715006187141984
870765073,logicblocks,event.store,Eventing infrastructure for event sourced architectures.,https://github.com/logicblocks/event.store,1163,10,10,3,16,5,154,9,6.090909090909091,0,1,0,1,2,29.48701298701299,249.7443381018976,1.1826488444521424,878.0489926542188
133839880,theSage21,hungarian-layer, Hungarian Layer: Logics Empowered Neural Architecture [UNMAINTAINED],https://github.com/theSage21/hungarian-layer,8,8,8,3,0,3,1,0,4.0,0,0,0,0,0,23.0,313.9937575983544,3.4411764705882355,1080.5079305590432
533757055,Michael-M34,eventlog-generator,"This repo contains the source code for a simple python eventlog generator, which outputs a .csv file",https://github.com/Michael-M34/eventlog-generator,454,0,0,0,0,1,10,1,3.3,0,0,0,0,0,26.6,754.4014842305053,4.310108951242195,6155.890306172076
816223745,Karmanya03,VSoC-FlaskServer2024,VSoC'24 Open-Source event Flask server,https://github.com/Karmanya03/VSoC-FlaskServer2024,5,0,0,0,0,1,1,0,5.0,0,0,0,0,0,5.0,27.0,1.0,27.0
404334745,seppeljordan,django-clean-architecture-exampl,Draft on how to implement clean architecture (with django),https://github.com/seppeljordan/django-clean-architecture-exampl,33,2,2,1,0,2,26,3,2.4615384615384617,0,0,0,0,0,5.6923076923076925,2.5954016765753414,0.1538461538461538,2.693247473485527
974558317,jackby03,python-hexagonal-cqrs,,https://github.com/jackby03/python-hexagonal-cqrs,347,0,0,0,0,1,51,4,2.3529411764705883,1,1,1,1,4,3.823529411764706,9.306986965901244,0.3519607843137254,14.138187070446502
306813276,carlosrendonduque,EcommerceSystem_Python_DDD,Domain-Driven Design Ecommerce System using Python,https://github.com/carlosrendonduque/EcommerceSystem_Python_DDD,30,2,2,0,0,1,39,3,0.2564102564102564,1,1,1,1,4,0.1025641025641025,0.1219201923631658,0.0128205128205128,0.0609600961815829
941371883,showitok,fastapi_project,"This is a project written in fastapi. The project is based on the domain-driven design model. This project is not a complete project, but mainly a large framework that combines the domain-driven design model with fastapi. The specific business code needs to be implemented according to your business needs.",https://github.com/showitok/fastapi_project,23,0,0,0,0,1,38,4,2.3947368421052637,1,1,0,1,3,3.763157894736842,4.7865020416930735,0.2464912280701754,6.569596209512351
420975572,DorukSega,sevi,Source 2 Sound Event Tools,https://github.com/DorukSega/sevi,4,0,0,0,0,1,1,0,3.0,0,0,0,0,0,0.0,323.1448300675329,1.96875,636.1913841954554
846424788,ulas-kaplan,Order-Management-FastAPI,"An order management system using FastAPI, Redis and microservices architecture",https://github.com/ulas-kaplan/Order-Management-FastAPI,8,0,0,0,0,1,3,1,4.0,0,0,0,0,0,3.6666666666666665,14.169925001442314,0.6666666666666666,14.169925001442314
443169946,xurvan,pddd,Pythonic Domain Driven Design (DDD) toolkit,https://github.com/xurvan/pddd,41,0,0,1,0,1,9,2,3.2222222222222223,1,1,0,1,3,13.555555555555555,9.333333333333334,0.2407407407407407,20.22222222222222
4455548,guyzmo,event-source-library,Python Event Source Library,https://github.com/guyzmo/event-source-library,71,34,34,9,4,6,6,1,6.166666666666667,0,0,0,0,0,19.666666666666668,193.35305637002597,3.009313725490196,1037.465016171095
727975043,V1ctorGip,CQRS,Padrão arquitetural desenvolvido em sala. Tem o objetivo de separar os comandos e as leituras em dois bancos diferentes.,https://github.com/V1ctorGip/CQRS,13938,0,0,0,0,1,8,2,2.375,0,0,0,0,0,5.375,1.7830828133113008,0.1875,0.8915414066556504
631712663,CodingCosmic,MultiverseMagic,"multiverse.py is a code that leverages quantum computing to scenarios in alternate universes based on historical events The script uses Qiskit, open-source quantum computing  to create a quantum circuit and simulate the multiverse possibilities. ",https://github.com/CodingCosmic/MultiverseMagic,9,0,0,0,0,1,1,0,5.0,0,0,0,0,0,12.0,94.01164534875782,2.3076923076923075,216.94995080482573
976776086,temafey,rag-vector-doc-claude,"A multilingual Retrieval Augmented Generation (RAG) system built with Qdrant vector database and LangChain, featuring Domain-Driven Design (DDD), Command Query Responsibility Segregation (CQRS), and event-driven architecture.",https://github.com/temafey/rag-vector-doc-claude,41,0,0,0,0,1,42,3,4.0,1,1,1,1,4,12.142857142857142,39.8396805369719,1.0889667802261789,177.8244115489887
204868731,JumaKahiga,clean_arch,Simple API built to demonstrate the use of clean architecture in Django.,https://github.com/JumaKahiga/clean_arch,10,0,0,0,2,1,23,4,0.9565217391304348,1,1,0,1,3,1.3043478260869563,1.1832055164619262,0.1032608695652173,1.9342507644324256
390496305,vinigmoraes,python-clean-architecture,,https://github.com/vinigmoraes/python-clean-architecture,53,0,0,0,0,1,44,5,1.7727272727272727,1,1,0,1,3,1.9318181818181817,1.0746411935260065,0.106060606060606,0.906972017365058
506735161,knands42,Python-DDD-Clean-Architecture,Just a fast Api project to learn how to implement a architecture patterns,https://github.com/knands42/Python-DDD-Clean-Architecture,92,1,1,0,0,1,106,5,1.7358490566037736,1,1,1,1,4,5.650943396226415,28.89081845115017,0.284145195188528,30.36585734624372
485337461,VeshRaazThapa,Django-Clean-Architecture-Boilerplate,"A Django project template equipped with Docker containers and convenient make commands for streamlined setup, providing a ready-to-use foundation for initiating your own Django project.",https://github.com/VeshRaazThapa/Django-Clean-Architecture-Boilerplate,41,0,0,0,0,1,42,4,2.4285714285714284,1,0,1,0,2,3.595238095238096,12.47379718532865,0.3157509157509157,41.01099794013126
664284282,Stonetech66,MicroRide,MicroRide is a scalable microservice ride application showcasing  key architectural patterns and seamless integration with modern technologies ,https://github.com/Stonetech66/MicroRide,349,16,16,6,0,1,69,4,3.985507246376812,1,0,0,0,1,6.3478260869565215,29.748501752297734,0.4587192716348727,51.724455291222974
813669479,MashoodBilal,Bilal_mart,"This project aims to develop an online mart API using an event-driven microservices architecture. The API will leverage various technologies such as FastAPI, Docker, Docker Compose, PostgreSQL, Kafka and Kong for API gateway management.",https://github.com/MashoodBilal/Bilal_mart,153,0,0,0,0,1,26,2,2.5,0,0,0,0,0,4.423076923076923,30.62045719755212,0.2259615384615384,35.9496051500795
974488913,TimFrenzel,MoA-MultiAgent-Phi2-LLM-Medical-AI,"A collaborative Mixture-of-Agents (MoA) pipeline integrating quantized, externally fine-tuned Phi-2 models and GPT-3.5 refinement for medical diagnosis. Applied to synthetic clinical data (Synthea), the layered architecture achieves improved predictive accuracy and robust clinical reasoning within tight resource constraints.",https://github.com/TimFrenzel/MoA-MultiAgent-Phi2-LLM-Medical-AI,14394,0,0,0,0,1,18,2,9.666666666666666,0,0,0,0,0,31.83333333333333,508.9462732781613,5.160873687083869,3529.7953537804515
339815557,kgtdbx,tableaueventrefresh,Python Code developed to have an event based refresh for the data sources on tableau.,https://github.com/kgtdbx/tableaueventrefresh,28,0,0,0,0,0,2,0,3.5,0,0,0,0,0,3.0,137.29225715660036,1.3333333333333337,210.8956160907281
754064040,mathurk29,cqrs,,https://github.com/mathurk29/cqrs,0,0,0,0,0,1,1,0,3.0,0,0,0,0,0,1.0,0.0,0.0,0.0
330063443,gabrielpereiram10,clean-api,"API de estudo sobre Clean Architecture, Design Patterns e SOLID principles",https://github.com/gabrielpereiram10/clean-api,19,3,3,0,0,1,43,4,1.162790697674419,1,1,1,1,4,1.9534883720930232,0.5625459304673532,0.0581395348837209,0.2812729652336766
701110791,CassiusThalles,fullcycle_mba_ddd_project,"This is the result of the Domain Driven Design module from MBA on Full Cycle Architecture and Development. Te course was explained in TypeScript, but since I do not know TypeScript I used Python instead",https://github.com/CassiusThalles/fullcycle_mba_ddd_project,42,1,1,0,0,1,26,4,1.0769230769230769,1,1,0,1,3,6.5,59.786166328051685,0.6569407738304059,152.282868865637
960266462,gurusaran1205,Communication-Overhead-in-Microservices,"🚀 Lightweight Microservices with NATS & SQLite3 🏗️ Build a scalable microservices architecture using NATS for messaging and SQLite3 for caching. This project demonstrates efficient inter-service communication with Python-based order, inventory, and payment services.",https://github.com/gurusaran1205/Communication-Overhead-in-Microservices,9197,0,0,1,0,1,3,1,4.0,0,0,0,0,0,4.666666666666667,14.792983340064126,1.2666666666666666,34.12952584886222
462969418,zhangcheng,todobackend_python,Todo Backend in Clean Architecture Style,https://github.com/zhangcheng/todobackend_python,52,0,0,0,0,2,32,3,3.46875,1,1,0,0,2,5.625,12.885185062137255,0.1955915178571428,19.974768756675765
910035360,farr13,BudgetingApp,This is a second attempt at the automatic budgeter. This iteration will use the MVC architecture instead of Clean architecture,https://github.com/farr13/BudgetingApp,50,1,1,0,0,1,10,3,1.4,1,0,0,0,1,3.2,9.201637077644332,0.4222222222222222,15.510287810686656
397012112,pcah,pca-errors,"Declarative, parametrizable & L10n-independent errors for python-clean-architecture",https://github.com/pcah/pca-errors,91,2,2,0,4,2,12,3,2.6666666666666665,0,0,0,0,0,22.58333333333333,95.14885179611622,1.051888881686976,134.412428387289
732007317,Danzxz,fastapi_template,This is a template of fastapi application using Clean Architecture pattern,https://github.com/Danzxz/fastapi_template,143,0,0,0,0,1,110,5,2.6545454545454548,1,1,1,1,4,3.3545454545454545,8.351484789666271,0.3664755509641874,22.97183552700609
759248353,ffekirnew,python-microservices,Woking on a Microservices architecture tutorial with Python.,https://github.com/ffekirnew/python-microservices,90,2,2,1,0,1,21,3,1.809523809523809,1,1,0,1,3,1.8571428571428568,2.697860497727401,0.1845238095238095,3.1887298509968964
930001790,sjHong645,clean_architecture_fastapi,FastAPI로 배우는 백엔드 프로그래밍 with 클린 아키텍처 공부,https://github.com/sjHong645/clean_architecture_fastapi,2,0,0,0,0,1,5,3,2.8,1,1,0,1,3,4.2,3.101955000865387,0.2,3.101955000865387
846148808,Ross-logger,ProHiredMicroservices,A platform for getting hired using FastApi and microservices architecture.,https://github.com/Ross-logger/ProHiredMicroservices,11,0,0,0,0,1,18,2,4.666666666666667,0,0,0,0,0,3.333333333333333,12.577808032852438,0.369047619047619,14.880899463284385
422340173,yaroslaff,ws-emit,"Easily emit websocket events from any sources (python, php, bash, whatever) using redis or HTTP interface",https://github.com/yaroslaff/ws-emit,57,4,4,1,0,2,5,2,6.6,0,0,0,0,0,8.6,55.03929492770514,1.3801470588235294,158.26933125402948
651858876,omerahmed41,AMS_Data_Processor_Numpy,AMS Data Processor using Numpy and Panda. #DDD #layer_architecture #TDD #Docker #Jenkins.,https://github.com/omerahmed41/AMS_Data_Processor_Numpy,32,2,2,0,0,1,25,3,1.4,1,0,0,1,2,4.32,14.17422189498553,0.3828571428571428,37.38089941255984
573350319,norb-c,microservices-python,Microservice Architecture and System Design with Python & Kubernetes,https://github.com/norb-c/microservices-python,13,0,0,0,0,1,12,3,3.583333333333333,0,0,0,1,1,3.333333333333333,19.252329857592432,0.8298368298368297,48.86685683670913
100817324,ledmonster,ddd-python-inject,"DDD, CQRS and Hexagonal Architecture example using inject package",https://github.com/ledmonster/ddd-python-inject,105,116,116,10,2,7,34,4,2.176470588235294,0,0,0,1,1,5.235294117647059,8.21022232882439,0.1808823529411765,9.302990201197629
125142657,eswan18,microservice_practice,Trying out microservice architecture,https://github.com/eswan18/microservice_practice,1,0,0,0,0,1,2,0,3.0,0,0,0,0,0,2.0,57.10012649612389,2.125,242.67553760852653
862755400,abcen7,fastapi-service-template,Onion-sliced microservice architecture for FastAPI framework,https://github.com/abcen7/fastapi-service-template,37,0,0,0,0,1,26,4,2.8461538461538463,1,0,1,0,2,1.4230769230769231,2.088606250915314,0.173076923076923,2.3244651452708984
436736534,nikasakandelidze,event-sourcing-workshop,,https://github.com/nikasakandelidze/event-sourcing-workshop,3,1,1,0,0,1,10,2,1.4,1,0,0,0,1,3.3,4.61635471525047,0.3,7.252195181215617
356868682,devtorello,py-clean-arch,🐍 A project made with Python and Clean Architecture.,https://github.com/devtorello/py-clean-arch,106,1,1,0,0,1,98,5,2.224489795918368,1,1,1,1,4,3.224489795918368,8.396495894489505,0.2100709849157054,10.97637327904286
683205055,mihir1739,SoundWiz,An mp4 to mp3 converter utilising microservice architecture.,https://github.com/mihir1739/SoundWiz,10302,0,0,0,0,1,14,3,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
609456466,MiChaelinzo,Determined-AI-to-train-a-deep-neural-network-with-the-CIFAR-10,"This code uses the CIFAR-10 dataset, a common benchmark dataset for image classification. The model architecture is a convolutional neural network that consists of two convolutional layers, max-pool",https://github.com/MiChaelinzo/Determined-AI-to-train-a-deep-neural-network-with-the-CIFAR-10,130,2,2,0,0,2,8,0,4.0,0,0,0,0,0,2.375,33.793013998357395,1.2761029411764704,94.6836508587486
798382475,Robbivan,Alla,An application for analysis the model and dynamic load on a microservice architecture with Prometheus,https://github.com/Robbivan/Alla,223,0,0,0,0,1,7,2,2.2857142857142856,1,0,0,0,1,18.428571428571427,176.46889066287795,2.113447935992579,621.155888579845
655568563,niklonberg,python-exam-project,"Took a 6 week python course from april to may, and had to create a project to go the exam. In it we had quite free reigns over what we wanted to do, as long as it was designed using a three-layer-architecture, using either Python Flask framework or tkinter, with having an actual database being completely optional. Styling was optional aswell.",https://github.com/niklonberg/python-exam-project,1848,0,0,0,0,1,11,2,1.3636363636363635,1,0,0,0,1,12.363636363636363,12.762052592221918,0.1420454545454545,7.008080254711862
747380161,MatheusLoeblein,clean_architecture,,https://github.com/MatheusLoeblein/clean_architecture,96,0,0,0,0,1,60,4,1.3333333333333333,1,1,1,1,4,2.65,4.414724453189221,0.1333333333333333,3.4291092305482502
158916837,amitmore17,event_geolocalization,Code for geo-localization of the events in crow-sourced videos,https://github.com/amitmore17/event_geolocalization,72,0,0,0,0,0,7,1,0.7142857142857143,0,0,0,0,0,2.0,44.16201536047667,0.2142857142857142,66.243023040715
942707996,meucontroletech,brick-cli,"BrickCLI is a Python command-line interface (CLI) library designed to automate the creation of files and directories for projects following the Clean Architecture principles. It simplifies project scaffolding, making it faster and more consistent.",https://github.com/meucontroletech/brick-cli,15,1,1,0,0,0,8,3,1.875,0,1,0,0,1,2.0,5.349248439933903,0.125,2.6746242199669514
763085314,EkaterinaShamanaeva,otus-microservice-architecture,Otus Microservice Architecture Course Hometasks,https://github.com/EkaterinaShamanaeva/otus-microservice-architecture,191,0,0,0,0,1,10,4,1.9,1,0,0,0,1,3.6,3.175488750216347,0.15,2.9377443751081733
815276004,proteanhq,library-cqrs,Library in CQRS Pattern - Example Protean Implementation,https://github.com/proteanhq/library-cqrs,360,0,0,0,0,1,55,6,3.0545454545454547,0,0,0,0,0,8.581818181818182,42.01722880535733,0.60687610610056,95.7817682005929
227406374,ionutdejeu,Python-Flask-Domain-Driven-Desing,This is a simple API based on Domain Driven Design principles,https://github.com/ionutdejeu/Python-Flask-Domain-Driven-Desing,4,2,2,0,0,1,12,4,1.4166666666666667,1,1,1,1,4,4.916666666666667,7.781610686414429,0.3708333333333333,8.177471946160571
946140343,blackhammer116,Test-Clean-architecture-implemtation,,https://github.com/blackhammer116/Test-Clean-architecture-implemtation,6,0,0,0,0,1,7,1,2.2857142857142856,1,1,0,0,2,5.571428571428571,18.139173838751272,0.8435374149659864,31.209985818285904
163018294,valkharb,microservices,Organization of end-to-end authentication and authorization mechanism in microservices architecture.,https://github.com/valkharb/microservices,10,0,0,0,0,1,22,2,3.0,0,0,1,0,1,4.045454545454546,12.281316476982418,0.5103896103896104,16.81611358943404
953215382,gabrielrovesti,PredictSense,"ML-based anomaly detection system with microservice architecture, asynchronous communication, and real-time dashboard",https://github.com/gabrielrovesti/PredictSense,65,1,1,0,0,1,37,3,5.216216216216216,1,0,1,0,2,18.18918918918919,193.54280151424044,2.3312563170827985,1415.2012861606213
897387156,Askus99,flask-rest-api,multi layered architecture flask rest api,https://github.com/Askus99/flask-rest-api,6,0,0,0,0,1,7,2,1.8571428571428568,1,1,1,0,3,6.714285714285714,5.947246039302675,0.2857142857142857,3.8028830535396807
584929145,Ozkanyuce,Kubernetes-Microservice-Phonebook-Project,Microservice Architecture for Phonebook Web Application (Python Flask) with MySQL using Kubernetes.,https://github.com/Ozkanyuce/Kubernetes-Microservice-Phonebook-Project,234,1,1,0,0,1,4,4,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
108342209,mednasr,RESTful_micro-service_architecture,RESTful microservice architecture,https://github.com/mednasr/RESTful_micro-service_architecture,5,0,0,1,0,1,45,4,0.9555555555555556,0,0,0,1,1,0.2888888888888888,1.565647500368591,0.1095238095238095,5.426203751118364
123186283,astoliarov,azamuku,URL shortener in Python+Clean Architecture,https://github.com/astoliarov/azamuku,18,3,3,0,0,2,38,5,1.5526315789473684,1,1,0,1,3,2.473684210526316,1.6460230268851233,0.131578947368421,1.6393154610387164
697710181,Nour-el-houda3,EventManagementApp,This open source project aims to develop a complete web-based event management application using the Django framework for both Front-Office and Back-Office.,https://github.com/Nour-el-houda3/EventManagementApp,1282,0,0,0,0,1,37,2,2.0,0,0,1,0,1,1.3783783783783785,1.72893698882789,0.1216216216216216,1.2836516026389972
544305299,bosungpark,architecture-fastapi-backend,"Studying Test-Driven Development, Domain-Driven Design with Python",https://github.com/bosungpark/architecture-fastapi-backend,72,0,0,0,0,1,115,4,2.373913043478261,1,0,0,1,2,5.973913043478261,22.212620710350517,0.6586916947786512,55.48268763648522
487153759,pcah,pca-scaffold,Scaffolding template for python-clean-architecture repositories.,https://github.com/pcah/pca-scaffold,1789,4,4,1,7,0,7,4,2.142857142857143,0,0,0,0,0,8.142857142857142,79.74204676795873,0.9857142857142858,253.0243477037496
946209990,shahidadoni,multi-modal-chatbot,Scalable and secure chat platform powered by Large Language Models (LLMs). Enterprise-ready with real-time messaging and modern microservices architecture.,https://github.com/shahidadoni/multi-modal-chatbot,11,0,0,0,0,1,2,3,7.5,0,0,0,0,0,9.0,21.25488750216347,1.0,21.25488750216347
647241487,GDSC-IIIT-V,clubs-event-platform-backend,An open source project designed to provide a comprehensive and customizable solution for organizing and managing events for all the clubs of IIITV.,https://github.com/GDSC-IIIT-V/clubs-event-platform-backend,14,0,0,2,4,0,7,2,2.0,0,0,1,0,1,0.4285714285714285,0.6792696431662099,0.0714285714285714,0.3396348215831049
885006533,anthoHerrera,posts_micro_service_hex_arch,Dummy project posts for practice hexagonal architecture,https://github.com/anthoHerrera/posts_micro_service_hex_arch,17,0,0,0,0,1,10,1,2.8,1,1,1,1,4,5.0,8.470934086537316,0.15,8.23318971142914
700590828,victoroliveirabarros,hexagonal-architecture,,https://github.com/victoroliveirabarros/hexagonal-architecture,3,0,0,0,0,1,11,2,1.9090909090909087,1,0,1,1,3,3.636363636363636,9.693405903199412,0.3272727272727272,6.694563519840528
263777088,vibhutimishra,Microservices-,IOT_EXTENSIBLE_FRAMEWORK( Introduction of Microservice architecture to IOT devices),https://github.com/vibhutimishra/Microservices-,18,0,0,0,5,1,4,4,2.5,0,0,0,0,0,1.25,4.754887502163469,0.5,2.3774437510817346
315413223,tjweldon,Abaqus,Small event sourced tool for doing your accounts,https://github.com/tjweldon/Abaqus,7,1,1,0,0,1,7,1,5.571428571428571,0,0,0,0,0,16.285714285714285,162.2694442708857,4.1136904761904765,1264.2741395992598
710194095,Tobi-De,django_modular_monolith,,https://github.com/Tobi-De/django_modular_monolith,7,2,2,0,0,1,35,4,0.8571428571428571,1,0,0,0,1,0.1714285714285714,0.2717078572664839,0.0285714285714285,0.1358539286332419
129218180,nicholasjgreen,Pycroservice,,https://github.com/nicholasjgreen/Pycroservice,18,0,0,0,0,1,16,4,1.625,0,1,1,1,3,1.4375,1.783082813311301,0.1875,0.8915414066556505
732345357,BIT-Vision,ECOS,"Source code for ""Continuous-time Object Segmentation using High Temporal Resolution Event Camera""",https://github.com/BIT-Vision/ECOS,47,4,4,0,0,0,19,1,5.789473684210527,1,0,0,0,1,24.42105263157895,402.8391332542327,5.09926268101925,3554.176358193477
696831469,TitouCoch,Microservices_Architecture,Microservices Architecture,https://github.com/TitouCoch/Microservices_Architecture,213,1,1,0,0,1,20,3,3.3,0,0,0,0,0,19.55,58.168786642594,1.0649738207819168,125.19397959275555
964806929,box90,purchase-cart-service,A simple order price calculator made with Python FastAPI in Hexagonal Architecture,https://github.com/box90/purchase-cart-service,24,0,0,0,0,1,51,4,2.372549019607843,1,1,0,1,3,3.3529411764705883,14.804128477897812,0.1935116319835725,10.47502761585134
849183335,Spiker1992,python-event-sourcing,An example of how event sourcing can be implemented using python,https://github.com/Spiker1992/python-event-sourcing,33,0,0,0,0,2,16,2,2.8125,0,0,0,0,0,4.75,6.852306555074138,0.34375,5.944834679533271
675378522,josuperstar,clean-architecture,"Clean Architectue implementation, from Uncle Bob's book, in python where the user interface uses Flask and QT and the database is in SQLlite and MysQL",https://github.com/josuperstar/clean-architecture,261,0,0,0,0,2,68,6,2.1911764705882355,0,1,1,1,3,4.514705882352941,6.830023552433972,0.2985294117647059,7.089401573089584
526085837,edygg,python_clean_architecture,Clean Architecture template using Python,https://github.com/edygg/python_clean_architecture,27,1,1,0,2,1,41,7,0.3658536585365853,1,1,0,1,3,0.8048780487804879,0.0,0.0,0.0
588558060,philipkogel,event-driven-microservices,Python | Django | Event Driven Microservices Architecture,https://github.com/philipkogel/event-driven-microservices,284,3,3,0,0,1,77,5,1.7532467532467533,1,0,0,0,1,1.818181818181818,5.156530428715089,0.1638361638361638,10.198920759424444
974477245,saso78,QA-to-Go---API-Testing-Edition,"A clean, professional API testing starter kit using Python, Pytest, and Requests. Includes HTML reporting, environment management, and clean architecture — ready to expand or integrate into any project.",https://github.com/saso78/QA-to-Go---API-Testing-Edition,6,1,1,0,0,1,9,1,1.2222222222222223,0,0,0,0,0,3.888888888888889,12.117274532639009,0.3333333333333333,13.08769096346171
662351401,TengHu,pyloom,A event sourcing framework for building large language model applications,https://github.com/TengHu/pyloom,103,71,71,0,0,1,7,1,3.571428571428572,0,0,0,0,0,30.0,220.2557780791048,2.86806330341984,1627.5460872278102
972811217,Daaguilar21,flightClient,PubSub Kafka Cassandra/MySQL CQRS Architecture,https://github.com/Daaguilar21/flightClient,482,0,0,0,0,1,9,0,4.222222222222222,0,0,0,0,0,5.888888888888889,26.37542790560502,1.2222222222222223,57.592780394698416
936954042,Salvador511,cqrs_django,,https://github.com/Salvador511/cqrs_django,22,0,0,0,0,1,20,2,1.65,0,0,0,0,0,1.85,2.2642106257572143,0.1149999999999999,1.597398563008415
669644180,michelclemer,clean-architecture-python,,https://github.com/michelclemer/clean-architecture-python,3,0,0,0,0,1,12,4,0.8333333333333334,1,0,0,1,2,1.5,0.3962406251802891,0.0416666666666666,0.1981203125901445
313450160,lepirescomp,Django-with-Clean-Architecture,This repo saves the progress of my studies about Django with Clean Architecture approach.,https://github.com/lepirescomp/Django-with-Clean-Architecture,26,3,3,1,0,1,22,2,2.090909090909091,0,0,0,0,0,5.454545454545454,24.024451820076056,0.5445116186495497,67.27354122988994
52236999,sousouindustries,gateway,CQRS Command server,https://github.com/sousouindustries/gateway,25,0,0,0,0,2,14,2,5.0,0,0,0,1,1,8.5,22.285045836648017,0.7763605442176871,46.61616597441331
937540784,oskardudycz,EventSourcing.Python,,https://github.com/oskardudycz/EventSourcing.Python,74,6,6,1,2,2,31,3,3.161290322580645,0,0,0,0,0,4.838709677419355,25.31746581957836,0.4679224001804646,70.6631109381275
222085153,shuaiwa16,image-enhanced-event-extraction,The source code of the paper image enhanced event detection in news articles.,https://github.com/shuaiwa16/image-enhanced-event-extraction,154,10,10,8,3,1,28,0,9.535714285714286,0,0,0,0,0,57.60714285714285,997.3217038938292,6.87033155320601,9554.310081063772
933515685,AliKHaliliT,ResNet18-2Plus1DD,Custom ResNet18 3D Network using Conv2Plus1D layers with Improved Architecture,https://github.com/AliKHaliliT/ResNet18-2Plus1DD,68,0,0,0,0,1,34,5,1.4411764705882353,0,0,0,0,0,4.705882352941177,41.34630036426592,0.9167419798107924,222.26795137440504
645572233,kishore7403,Multi-Continer-Docker-Environment,Microservices architecture using Docker.,https://github.com/kishore7403/Multi-Continer-Docker-Environment,6,0,0,0,0,1,2,1,4.5,0,0,0,0,0,8.0,86.13714552179968,1.5,129.20571828269954
248366080,parhamDm,community-detecror-core,core of a simple system for calculationg different community detection methods using microservice architecture,https://github.com/parhamDm/community-detecror-core,143,0,0,0,0,0,14,2,1.7857142857142858,0,0,0,0,0,3.0,43.19889132407652,0.3626373626373626,196.33333755681912
918398433,khybort,shared-ledger-system,"Shared Ledger System with Clean Architecture, DI, FastAPI, NGINX, Load Balancer and Docker",https://github.com/khybort/shared-ledger-system,554,0,0,0,0,1,31,4,3.548387096774193,1,1,0,1,3,4.0,5.230858897204563,0.2868663594470046,8.516255831458706
333788910,Niyokee,clean_architecture_py,,https://github.com/Niyokee/clean_architecture_py,11,0,0,0,0,1,17,3,1.7058823529411764,1,1,1,1,4,3.0588235294117645,19.69263655913305,0.1654411764705882,25.164818525831336
587523732,cenciati,lamb-ddd-clean-arch-solid,Microservice backend example of a customer experience software as a service using tests and DDD + Clean code/architecture + SOLID principles.,https://github.com/cenciati/lamb-ddd-clean-arch-solid,759,10,10,0,0,1,155,5,2.619354838709677,1,1,1,1,4,5.051612903225807,24.04462556602388,0.2881306059531866,25.285180836812824
861279428,Chris91ss,Gomoku-Python-OOP-Game,A Gomoku game developed in Python using object-oriented programming and layered architecture. The game includes both a text-based UI and a GUI implemented with Tkinter. It features unit testing for most modules and safeguards against invalid user input,https://github.com/Chris91ss/Gomoku-Python-OOP-Game,1018,0,0,0,0,1,9,2,1.5555555555555556,1,1,0,0,2,17.77777777777778,116.14540551409692,1.9680613267569784,482.0625088083138
671510560,uclouvain,ddd_bootstrapper,Provide utilities to generate files and code implementing tactical patterns of the Domain Driven Design,https://github.com/uclouvain/ddd_bootstrapper,35,0,0,1,0,3,24,1,4.666666666666667,0,0,0,0,0,7.416666666666667,1.783693137798906,0.1041666666666666,3.2702058067125948
868983755,GabrielFaglioni,system-design-kubernetes,"Learning about microservice architectures and distributed systems using Python, Kubernetes, RabbitMQ, MongoDB, mySQL.",https://github.com/GabrielFaglioni/system-design-kubernetes,18,0,0,0,0,1,14,4,3.071428571428572,0,0,0,1,1,2.857142857142857,18.01958430767078,0.7385912698412699,50.86488395034637
951864166,sebadp,FastAPI-RabbitMQ-Event-driven-design,"A scalable, event-driven microservice architecture for processing orders in real-time using FastAPI, RabbitMQ, PostgreSQL, and Redis with Kubernetes support.",https://github.com/sebadp/FastAPI-RabbitMQ-Event-driven-design,43,0,0,0,0,1,35,2,3.1714285714285717,1,1,0,0,2,5.342857142857143,33.78806997887513,0.8027210884353742,165.06864527816526
804046676,alaamer12,cqrs_pattern,CQRS pattern implementation with examples.,https://github.com/alaamer12/cqrs_pattern,4,0,0,0,0,1,2,0,2.5,0,0,0,0,0,19.0,56.77995039854143,1.8392857142857144,142.34534745504791
684753697,gmolveau,microsoft-python-flask-clean-architecture,,https://github.com/gmolveau/microsoft-python-flask-clean-architecture,17,0,0,0,0,2,47,4,2.0,1,1,1,1,4,3.872340425531915,13.045759872306157,0.3323551962475617,46.67221641162372
551092111,CrvcMaestro1,hexagonal-architecture-workshop,,https://github.com/CrvcMaestro1/hexagonal-architecture-workshop,59,0,0,0,0,1,68,6,2.838235294117647,1,0,0,1,2,4.705882352941177,9.059797307528015,0.2955882352941176,13.69464985772758
686788071,Girish-Krishnan,Transformer-FNet-Music-Generation-Style-Transfer," Generating music and implementing style transfer using an F-Net Transformer Architecture, which speeds up training by replacing self attention with a Fourier transform layer.",https://github.com/Girish-Krishnan/Transformer-FNet-Music-Generation-Style-Transfer,210,0,0,1,0,1,6,0,6.0,0,0,0,0,0,11.5,125.90331256588291,1.986844636844637,284.44394738991514
847448626,GlebRazgar,DDD,Architectural experimentation with Domain Driven Design.,https://github.com/GlebRazgar/DDD,9,0,0,0,0,1,14,2,3.0,1,1,0,1,3,5.785714285714286,15.64510151704711,0.5238095238095238,27.35494703910844
515828265,pnowk,carch,Clean architecture implementation pieces taken from various books,https://github.com/pnowk/carch,35,0,0,0,0,1,21,2,2.238095238095238,1,0,0,1,2,4.809523809523809,15.07112853612044,0.4693877551020408,44.681410217409365
823471282,saart,GenT,Gen-T is a cutting-edge system designed to address the challenges of distributed tracing (DT) in microservice architectures by leveraging deep generative compression techniques. ,https://github.com/saart/GenT,2212,0,0,1,0,3,76,6,5.526315789473684,0,0,0,0,0,24.0,284.08042740516464,2.4938246131048043,2172.5773670571884
195150086,ArgosOfIthaca,scalu,scalu is an event-based programming language and compiler targeting config files in Valve's Source Engine,https://github.com/ArgosOfIthaca/scalu,451,55,55,4,4,6,52,4,1.4038461538461535,0,0,1,0,1,20.53846153846154,259.16167605162906,1.5694590078424564,1529.26362625664
455613806,ZechCodes,Schism,Schism is an autowiring library that makes modularity simple in monolithes and simplifies code sharing in microservices.,https://github.com/ZechCodes/Schism,204,2,2,0,0,1,16,3,5.625,0,0,0,0,0,17.0625,30.40090225459682,0.93125,59.87530557179184
680324508,alexplesoiu,LayeredArchitecture-Example,Layered Architecture Demonstration With Python,https://github.com/alexplesoiu/LayeredArchitecture-Example,7,2,2,0,0,1,8,1,1.75,1,0,0,0,1,8.5,10.119115196397708,0.5125,12.348554157364337
220252426,RikSchoonbeek,clean_project_management,A simple project management system based on clean architecture.,https://github.com/RikSchoonbeek/clean_project_management,2,0,0,0,0,1,7,3,0.8571428571428571,1,0,0,0,1,4.0,10.890468126754026,0.2857142857142857,10.890468126754026
454190652,ronyldo12,fastapi-clean-architecture,,https://github.com/ronyldo12/fastapi-clean-architecture,8,0,0,0,0,1,17,3,2.588235294117647,1,1,1,0,3,5.176470588235294,18.09690852947149,0.3021390374331551,13.069415996973802
158358818,ytbeepbeep,flask-app,Interact with our microservices architecture,https://github.com/ytbeepbeep/flask-app,130,0,0,0,0,1,25,3,5.36,0,0,1,0,1,11.2,142.46096001234685,2.424095935931148,476.5352150548118
877506663,sserghei,microservices_example,Architecture solution for multi-stack microservices project ,https://github.com/sserghei/microservices_example,4,0,0,0,0,1,3,1,3.6666666666666665,0,0,0,0,0,2.0,1.5849625007211563,0.1666666666666666,0.7924812503605781
865742274,dcohenm,quote_fast_api,"Proof of concept to create api with fastAPI, mongoDB and microservices architecture",https://github.com/dcohenm/quote_fast_api,4,0,0,0,0,1,6,2,3.333333333333333,0,0,0,0,0,2.6666666666666665,3.5199025797939583,0.3333333333333333,2.72742132943338
470344293,sakhrNab,microservices_review_service_Tennis_Portal,This Django service handles the reviews for the site: tennis-companion within in a microservices architecture,https://github.com/sakhrNab/microservices_review_service_Tennis_Portal,9863,0,0,0,0,1,35,3,2.4857142857142858,0,0,0,0,0,5.371428571428571,16.052145764961562,0.381415643180349,54.57528526540178
951180600,datacode-app,kurdistan-calendar-api,An open-source Kurdish calendar API for holidays and events,https://github.com/datacode-app/kurdistan-calendar-api,72,8,8,0,0,1,14,2,38.92857142857143,1,0,1,0,2,29.642857142857142,503.1181224617623,3.111147458164935,4081.985665547343
927505465,Julian-Bio0404,Kitsune,"This project is a backend built with FastAPI, designed following the principles of hexagonal architecture and based on microservices. It consists of two main services:  Authentication Service, responsible for user management and authentication. Chat Service, which exposes a WebSocket-based API to enable real-time conversations between users.",https://github.com/Julian-Bio0404/Kitsune,45,0,0,0,0,1,79,6,2.4177215189873418,1,1,1,1,4,1.9240506329113924,0.5744819998133438,0.0822784810126582,0.3986944206309555
835346760,thadeshammer,chatterbox,open source Event-planning-centric async communication app,https://github.com/thadeshammer/chatterbox,364,1,1,0,4,2,49,3,5.285714285714286,1,0,1,0,2,11.06122448979592,70.84776050800352,0.7221081375535885,142.92699170282495
764738167,jcazallasc,clean_architecture,,https://github.com/jcazallasc/clean_architecture,38,0,0,0,0,1,107,4,2.05607476635514,1,1,1,1,4,1.7850467289719627,2.6956082779833004,0.0445223260643821,1.870867892312276
919405084,airelcamilo,rabbitmq-e-commerce-project,"A personal project designed to practice skills with RabbitMQ and microservices architecture. The project consists of two microservices built using Go and two using the Python FastAPI framework, with PostgreSQL as the database and Docker for containerization.",https://github.com/airelcamilo/rabbitmq-e-commerce-project,8588,2,2,0,0,1,27,3,3.074074074074074,0,0,0,0,0,2.333333333333333,3.247957045846765,0.1931216931216931,4.177275107500385
939426810,AjBorbzz,real_time_security_event,"Automated incident response system for AWS EC2 instances, featuring isolation, forensic data collection, and email notifications. Built with Python, OOP, and a microservice-inspired architecture.",https://github.com/AjBorbzz/real_time_security_event,14,0,0,0,0,1,6,1,3.6666666666666665,0,0,0,0,0,13.5,4.792481250360578,0.3333333333333333,6.3962406251802895
108911736,mcanaves,chubbyrepo,Project to play with Python 3 and Clean Architecture,https://github.com/mcanaves/chubbyrepo,21,0,0,0,0,1,22,2,2.8181818181818183,1,0,0,0,1,13.181818181818182,65.78475718618569,0.6602645416598905,82.32582637555923
820996976,fuzail-afsar,todo-app-microservices,Todo App using FastApi and PostgreSql Microservices Architecture,https://github.com/fuzail-afsar/todo-app-microservices,52,0,0,0,0,1,24,4,3.083333333333333,1,0,1,0,2,4.208333333333333,14.917988865851216,0.3521464646464646,21.518068825344844
84238139,ccube-eml,worker,"A component of cCube, the cloud microservices architecture for Evolutionary Machine Learning (EML) classification.",https://github.com/ccube-eml/worker,281,0,0,0,0,0,17,3,4.294117647058823,0,0,0,0,0,6.882352941176471,18.22845926890893,0.509090909090909,41.73813760382119
201617897,GGebbia,clean-architecture,Learning TDD following the Clean Architecture in Python book by Leonardo Giordani,https://github.com/GGebbia/clean-architecture,47,0,0,0,0,1,44,4,1.2272727272727273,1,1,1,0,3,3.022727272727273,13.045991239336798,0.2733232676414495,12.87387256151291
684638109,isaacdecoded,arpeggio-py,Coding template for DDD and Clean Architecture based projects on Python.,https://github.com/isaacdecoded/arpeggio-py,109,2,2,0,1,1,28,4,2.142857142857143,1,1,0,1,3,3.071428571428572,4.12430155681996,0.2976190476190475,10.92704954705402
640388462,Bruno-Fioreze,python-clean-architecture,,https://github.com/Bruno-Fioreze/python-clean-architecture,10,0,0,0,0,1,12,3,1.5833333333333333,1,0,0,1,2,2.083333333333333,0.3962406251802891,0.0416666666666666,0.1981203125901445
779827127,Guuhp,clean_Architecture_Python,,https://github.com/Guuhp/clean_Architecture_Python,69,0,0,0,0,1,61,4,1.3934426229508197,1,1,1,1,4,2.442622950819672,3.6371241040135063,0.1393442622950819,2.586014433015693
969183016,jojopko,hexagonal_template,A template for hexagonal architecture in Python,https://github.com/jojopko/hexagonal_template,281,0,0,0,0,1,14,3,0.0,1,1,0,1,3,0.0,0.0,0.0,0.0
61172622,DayleChettiar,queueing_simulation,"analytical simulator model for open queuing network systems (Jackson Networks) using the open-source process-based discrete event simulation package, SimPy. ",https://github.com/DayleChettiar/queueing_simulation,3,3,3,0,0,1,1,0,4.0,0,0,0,0,0,19.0,961.666539485924,4.25,4087.0827928151775
165834986,joaoantoniocn,AM-SincNet,"The Additive Margin SincNet (AM-SincNet) is a new approach for speaker recognition problems which is based in the neural network architecture SincNet and the additive margin softmax (AM-Softmax) loss function. It uses the architecture of the SincNet, but with an improved AM-Softmax layer.",https://github.com/joaoantoniocn/AM-SincNet,206,44,44,8,4,3,4,2,7.5,0,0,0,0,0,24.0,908.0577173058168,5.70088141025641,6911.38655337405
759936422,c-rubin,booking-microservices,"A program consisting of microservices architecture, where users can add/remove apartments, add/remove/change bookings and search for free apartments.",https://github.com/c-rubin/booking-microservices,17,0,0,0,0,1,4,1,5.25,0,0,0,1,1,18.5,182.3412619531227,1.7025058275058274,507.7709266300636
428015806,Diacrome,otus-microservice-architecture,Homework for https://otus.ru/lessons/microservice-architecture/,https://github.com/Diacrome/otus-microservice-architecture,228,0,0,0,0,1,7,4,6.571428571428571,1,0,1,0,2,21.857142857142858,209.5230192055265,2.5519200952037666,988.611811782674
627119336,CarlosEduardosp,CleanArchitecture,,https://github.com/CarlosEduardosp/CleanArchitecture,60,0,0,0,0,1,18,3,1.5,1,0,1,1,3,2.1666666666666665,2.395238195205665,0.1666666666666666,4.262155556837611
273863784,davelush,event-sourcing,,https://github.com/davelush/event-sourcing,17,0,0,0,1,1,17,4,2.294117647058824,0,0,0,0,0,2.0588235294117645,1.4531987046755823,0.1470588235294117,1.0680593662918152
200358018,kapeed2091,clean_architecture_example,This repo is to demonstrate the code structure that we have adopted in accordance with clean_architecture principles,https://github.com/kapeed2091/clean_architecture_example,32,0,0,0,3,1,74,4,1.445945945945946,1,1,1,1,4,1.135135135135135,5.877652866562957,0.1665005415005415,8.335577713394528
781857816,jonathanzhang53,edm-event-extractor,flask backend for multi-source edm event extraction,https://github.com/jonathanzhang53/edm-event-extractor,4,0,0,0,0,1,8,1,1.25,0,0,0,0,0,3.125,3.206530044518716,0.15625,2.256307298946429
639011750,royhayward,kafka-orchestration-example,This is a collection of python scripts used to illustrate an orchestrated microservices architecture. This implementation uses Kafka as its common message bus.,https://github.com/royhayward/kafka-orchestration-example,12,0,0,0,0,1,13,1,2.1538461538461537,0,1,0,0,1,1.3076923076923077,28.79968803398638,0.4294871794871794,33.15100182957485
834943075,ZHunter51,feature-aligned-aa-forecast,"Implementation for 2020 OhioT1D competition submission. Architecture is AA-Forecast, N-BEATS, with modifications to RNN layer ",https://github.com/ZHunter51/feature-aligned-aa-forecast,16,11,11,0,0,1,13,1,4.846153846153846,1,0,0,0,1,15.461538461538462,200.07478982212749,2.6888585607940447,1115.633351289844
263737716,villematti,rentomatic-app,My Rentomatic app version from Clean Architectures in Python book,https://github.com/villematti/rentomatic-app,20,0,0,0,0,1,16,2,1.0,1,1,0,0,2,2.25,15.69504919472212,0.2575,16.680210318202075
626549755,skylergrandel,CS6381-Final-Project,This is a final project for CS6381 - Distributed Systems Principles. It implements a microservice architecture using pyZMQ.,https://github.com/skylergrandel/CS6381-Final-Project,977,0,0,0,0,1,4,1,3.25,0,0,0,0,0,13.0,144.5204470933218,2.977020202020202,580.9550617185877
687673370,rao-arya-g,automated-microservices-extraction-from-monolithic-applications,"Application for automating the extraction of microservice candidates from monolithic code bases, reducing manual effort and improving architectural agility",https://github.com/rao-arya-g/automated-microservices-extraction-from-monolithic-applications,7,0,0,0,0,1,10,1,3.4,0,0,0,0,0,9.5,62.68779668090929,1.8370352564102563,162.52378045831426
849481418,hungyunxuan,automatic_differentiation,"This repository provides a simple neural network framework with automatic differentiation. It includes base modules like neurons (MyNeuron), layers (MyLayer), and a multi-layer perceptron (MyMLP) to build custom networks. Designed for educational purposes, it enables easy experimentation with architectures and training routines.",https://github.com/hungyunxuan/automatic_differentiation,6,0,0,0,0,1,1,0,2.0,0,0,0,0,0,77.0,2178.395968253393,8.46484375,18439.78149689493
432496083,jmasonlee,hexagonal_arch,Exploring Hexagonal Architecture,https://github.com/jmasonlee/hexagonal_arch,1,0,0,0,0,1,1,0,2.0,0,0,0,0,0,1.0,0.0,0.0,0.0
878679371,Damir44400,fastapi-boilerplate,🚀 FastAPI + Clean architecture,https://github.com/Damir44400/fastapi-boilerplate,27,1,1,0,0,1,32,5,0.09375,1,1,1,1,4,0.28125,0.1485902344426084,0.015625,0.0742951172213042
188654164,chairus,testdriven-app,A codecademy-like app with microservice architecture,https://github.com/chairus/testdriven-app,5802,0,0,0,25,1,10,6,3.2,0,1,1,0,2,6.9,11.877596930284538,0.3,11.402108180068192
868395679,100nm,python-cq,Lightweight CQRS library.,https://github.com/100nm/python-cq,251,1,1,1,0,0,27,3,3.259259259259259,1,0,0,0,1,7.703703703703703,14.480134353664416,0.3935366739288307,17.1089974356832
954191003,yurevych2,architecture_microservices,,https://github.com/yurevych2/architecture_microservices,10,0,0,0,0,1,3,2,2.6666666666666665,0,0,0,0,0,6.666666666666667,17.0,0.8333333333333334,21.0
764714138,coughlinalbert1,distributed-banking,"Distributed banking service using microservice architecture. The tech stack is Python, FastAPI, Redis, OAuth2, JWT, and Docker.",https://github.com/coughlinalbert1/distributed-banking,64,1,1,0,0,1,4,1,9.5,0,0,0,0,0,21.75,158.98469084083987,3.0088709677419354,812.4227233030065
845854534,hasanisaeed,simple-event-sourcing,Simple implementation of event sourcing,https://github.com/hasanisaeed/simple-event-sourcing,2,0,0,0,0,1,3,0,2.6666666666666665,0,0,0,0,0,2.0,4.643856189774724,0.1666666666666666,2.321928094887362
944799084,Cleosazelda,CleanArc_Cleosa,Tugas Day 1: MVC and Clean Architecture,https://github.com/Cleosazelda/CleanArc_Cleosa,14043,0,0,0,0,1,8,1,2.0,1,1,1,0,3,3.25,0.5943609377704336,0.0625,0.2971804688852168
385391324,Shotokhan,sad_project_microservices,Project related to Software Architecture Design exam.,https://github.com/Shotokhan/sad_project_microservices,1548,0,0,0,0,1,38,3,3.131578947368421,0,0,0,1,1,12.210526315789474,105.5476021647895,1.3789024764094018,334.55007637343937
436004760,luizth,architecture-patterns-with-python,"Studies from the book Architecture Patterns with Python: Enabling Test-Driven Development, Domain-Driven Design, and Event-Driven Microservices",https://github.com/luizth/architecture-patterns-with-python,883,0,0,0,0,1,19,3,2.631578947368421,1,0,0,1,2,8.157894736842104,32.31345610199244,0.8376951995373049,73.3739584029724
335931304,duanribeiro,kafka_monitor,"Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.",https://github.com/duanribeiro/kafka_monitor,20,0,0,0,0,1,5,1,3.6,0,0,1,0,1,0.2,7.154887502163469,0.5,6.679398751947121
428224128,arolla,choreography-kata,"A kata to learn and practice Choreography as opposed to Orchestration, as in a microservices architecture",https://github.com/arolla/choreography-kata,154,24,24,12,2,18,1,1,3.0,0,0,0,0,0,10.0,0.0,0.0,0.0
545482115,UppalaSagar,JPMC-tools-and-frameworks,"Typically, traders monitor stock prices and trading strategies by having data displayed visually on their screens in chart form. Often these charts will be accompanied by alerts that notify users when certain events occur or when preset price thresholds are hit.  JPMorgan Chase created the Perspective tool over many years to allow users to present and manipulate data feeds visually in web applications.  Perspective provides a set of flexible data transforms, such as pivots, filters, and aggregations. It utilises bleeding-edge browser technology such as Web Assembly and Apache Arrow and is unmatched in browser performance. It is engineered for reliability and production-vetted on the JPMorgan Chase trading floor. Now it’s available to the development community as an open source library. If you want to explore that, a link is provided in the resources section.",https://github.com/UppalaSagar/JPMC-tools-and-frameworks,205,0,0,0,0,1,1,0,12.0,0,0,0,0,0,64.0,876.4001680045061,6.19620253164557,5430.352939724124
627025446,avollmaier,hypercrawler,🚀HyperCrawler🚀 - Scalable web crawler based on a microservice architecture,https://github.com/avollmaier/hypercrawler,81,1,1,1,0,1,1,5,6.0,0,0,0,0,0,33.0,496.6593447001757,4.8023255813953485,2385.119876292704
799391981,Gabriel0598,BEES-Breweries-Case,"Objective: The goal of this test is to assess your skills in consuming data from an API, transforming and persisting it into a data lake following the medallion architecture with three layers: raw data, curated data partitioned by location, and an analytical aggregated layer.",https://github.com/Gabriel0598/BEES-Breweries-Case,49,1,1,0,0,1,3,3,3.0,0,0,0,0,0,0.0,51.86313713864835,0.2105263157894736,32.75566556125159
706025627,VYatharth,user_app_demo,Clean Architecture Template for FastAPI (Python),https://github.com/VYatharth/user_app_demo,17,0,0,0,0,1,17,2,2.176470588235294,1,1,0,1,3,2.117647058823529,0.9959746217249514,0.1372549019607843,1.2691426328881703
697243546,antoniovmonge,fastapi_microservices,Microservices architecture with FastAPI,https://github.com/antoniovmonge/fastapi_microservices,7,0,0,0,0,1,13,2,2.3846153846153846,1,0,1,0,2,2.230769230769231,0.3657605770894976,0.0384615384615384,0.1828802885447488
892154331,nfbarcob03,clean_architecture,Curso de arquitecturas limpias y patrones de diseño netec,https://github.com/nfbarcob03/clean_architecture,2412,0,0,0,0,1,64,3,1.21875,1,0,1,1,3,6.421875,12.16114942839065,0.6337459415584416,21.30826064523978
911365043,Maryam-tli,low_office_project,"A bilingual (Persian and English) desktop app for managing clients, cases, and appointments in law offices. Built with Tkinter and designed with a three-layer architecture.",https://github.com/Maryam-tli/low_office_project,2294,1,1,0,0,1,7,1,4.428571428571429,0,0,0,0,0,59.57142857142857,463.67231824067727,1.7247153050822777,1905.070089263762
176114160,haggaret,google-calendar-syncer,Utility to sync events from source calendar(s) to a destination calendar,https://github.com/haggaret/google-calendar-syncer,43,0,0,0,1,1,1,1,13.0,0,0,0,0,0,129.0,2603.6785886612347,7.68,19996.25156091828
912271706,kkndw880326,fastapi-clean-architecture,,https://github.com/kkndw880326/fastapi-clean-architecture,31,0,0,0,0,1,6,3,2.333333333333333,1,1,0,1,3,3.6666666666666665,1.5849625007211563,0.1666666666666666,0.7924812503605781
213980954,MarlonIC,demo-clean-architecture-projects-tasks,Crear un projecto y que contenga sus respectivas tareas. Arquitectura limpia,https://github.com/MarlonIC/demo-clean-architecture-projects-tasks,642,0,0,0,10,1,59,5,2.440677966101695,1,1,1,1,4,6.711864406779661,35.574920526976946,0.3832756519132174,42.55480278835032
743098378,rootwarepo,Fastapi-Example,"Python fastapi example with sqlite3 / for bookstore  Designed according to SOLID Principles and it is an example of layered architecture.  fastapi start command: ""python -m uvicorn main:app --reload""",https://github.com/rootwarepo/Fastapi-Example,22,0,0,0,0,1,3,0,2.6666666666666665,0,0,0,0,0,8.333333333333334,0.6666666666666666,0.1666666666666666,0.3333333333333333
589273990,AyariAhmed,video-converter,Converting mp4 videos to mp3 using a microservices architecture.,https://github.com/AyariAhmed/video-converter,272,3,3,0,0,1,14,4,3.142857142857143,0,0,0,1,1,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
311039001,skitoo,hastur,Hastur is a web-based download management application for large files.,https://github.com/skitoo/hastur,164,5,5,1,1,2,50,4,4.4,1,0,0,0,1,8.56,14.749278736704287,0.398030303030303,16.66864387168097
958154914,AhmedFerchich-i,library-management-app,a library management app built using clean architecture with python and fast api,https://github.com/AhmedFerchich-i/library-management-app,6,0,0,0,0,1,17,3,1.588235294117647,1,0,1,1,3,4.0,7.299622584105933,0.3319327731092437,10.509616408718632
643425711,eltonjncorreia,patterns,"Practice design, architecture, and microservices patterns",https://github.com/eltonjncorreia/patterns,19,0,0,0,0,1,3,3,1.0,0,0,0,0,0,4.0,8.550746785383243,0.4166666666666667,6.016819463857143
653250887,iangalvao,CleanArchitecture_StrategyGame,civ3 based game,https://github.com/iangalvao/CleanArchitecture_StrategyGame,72,0,0,0,0,1,27,2,3.111111111111111,1,1,1,1,4,9.444444444444445,57.46021707636506,1.2123732658046382,298.7332121256951
351264386,elpapi42,hexagonal-microservice,Python microservice that features an Hexagonal Architecture exposed through a Rest API (FastAPI) and connected to a Message Broker (RabbitMQ) for consume and publish events. MongoDB as persistent storage and getting the most out of Python asyncio library.,https://github.com/elpapi42/hexagonal-microservice,16,1,1,1,0,1,15,3,2.0,1,0,0,1,2,1.8,0.6339850002884625,0.0666666666666666,0.3169925001442312
715356156,raymondlang,pro-peak,"API w/ FastAPI and best practices, hexagonal architecture pattern ",https://github.com/raymondlang/pro-peak,77,0,0,0,0,1,64,3,3.28125,1,1,0,1,3,3.921875,8.782273418871595,0.2165178571428571,11.145871896507668
169094587,findnitai,TDNN-layer,"A keras layer implementation of Peddinti's paper ""A time delay neural network architecture for efficient modeling of long  temporal contexts"". [Work in progress]",https://github.com/findnitai/TDNN-layer,6,14,14,11,0,1,2,1,3.5,0,0,0,0,0,8.0,83.31687474284763,1.75,150.90688068359563
171712826,rokwire,rokwire-building-blocks-api,"Source code repository of the Rokwire App Config, Authentication, Events, Profile, and Logging Building Blocks, and Authentication Middleware Library.",https://github.com/rokwire/rokwire-building-blocks-api,7268,3,3,4,71,10,136,5,2.7279411764705883,1,0,1,0,2,13.705882352941176,159.8247281447545,1.1561751017743485,779.4943575491254
825528618,victor-alago,Python_Microservices,A video converter app built using microservices architecture and devops for deployment (docker and k8s),https://github.com/victor-alago/Python_Microservices,12984,1,1,0,0,1,14,3,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
683956492,ritamghoshgds,DnA-F1-POC,"The project harnessed an ETL multi-hop architecture, ingesting data from the Ergast API into a storage backed by Azure Data Lake. The process involved weekly ingestion of bronze layer data as cutover and delta files. Raw data, in varied formats, was transformed using Azure Databricks PySpark notebooks into enriched Silver and Gold layers.",https://github.com/ritamghoshgds/DnA-F1-POC,5946,1,1,0,0,1,14,3,2.0,0,0,0,0,0,0.2142857142857142,2.669493724498235,0.1428571428571428,2.32985890291513
975673728,rishit-047,Nimda_Worm_Detection_and_Mitigation_System,"A Python-based Linux tool that monitors TCP traffic in real-time to detect threats like the Nimda worm, high packet rates, and blacklisted IPs. It blocks malicious sources using iptables and logs all events for review.",https://github.com/rishit-047/Nimda_Worm_Detection_and_Mitigation_System,8,0,0,0,0,1,1,0,5.0,0,0,0,0,0,14.0,215.4298867116886,5.6,1206.407365585456
474736566,data-max-hq,ab-testing-in-ml,  Deploy A/B testing infrastructure in a containerized microservice architecture for Machine Learning applications.,https://github.com/data-max-hq/ab-testing-in-ml,8232,40,40,9,0,3,10,3,3.8,1,0,0,0,1,3.6,13.213756824907842,0.5681818181818181,24.13996676357405
628072414,Digitous,StratusScope,LayerScope is a language model tool that loads two language models of the same architecture and parameter size and generates a bar graph detailing which layers have the most difference between the models.,https://github.com/Digitous/StratusScope,83,6,6,0,1,1,1,0,10.0,0,0,0,0,0,26.0,134.671829503467,3.0,404.015488510401
916905254,derekshum,rec-finder,A Django based site to aggregate recreation events from multiple sources for easy viewing and comparison.,https://github.com/derekshum/rec-finder,14,0,0,0,0,1,21,3,1.619047619047619,0,0,0,0,0,2.238095238095238,10.309491169036896,0.238095238095238,26.768430350889304
210338132,qa-majeed,Inception-v3,"In this program, I have write inception_v3 in tensorflow core. It is a basic architecture of this model. I have printed each convolution layers shape, you can comment.",https://github.com/qa-majeed/Inception-v3,11,0,0,0,0,1,1,0,1.0,0,0,0,0,0,3.0,501.4827251399043,24.5,12286.326765927655
161918587,AirHug,clean-architecture-1,,https://github.com/AirHug/clean-architecture-1,2,0,0,0,0,1,11,1,1.3636363636363635,0,0,0,0,0,3.8181818181818175,8.257757956118937,0.7000000000000001,11.436005757234168
241193075,hicetnunc2000,ungrund,an open source microservice architecture which implements fa1.2 standard and other smart contracts enabling interactions with multiple users' interfaces on tezos blockchain,https://github.com/hicetnunc2000/ungrund,213,14,14,3,3,0,19,2,6.052631578947368,0,0,1,0,1,14.842105263157896,64.85662660320368,0.7303231920298484,223.96284459504204
901266274,bommaz159,Clean-Architecture,,https://github.com/bommaz159/Clean-Architecture,8,0,0,0,0,1,7,1,2.2857142857142856,1,1,1,1,4,4.285714285714286,0.4285714285714285,0.1428571428571428,0.4285714285714285
334129227,vladikk,elastic-event-store,A fully serverless event store,https://github.com/vladikk/elastic-event-store,334,39,39,7,8,5,33,3,3.303030303030303,0,0,1,1,2,17.696969696969695,131.82089906813616,1.33618697785904,430.8207260903397
624912713,chickooooo,clean_architecture_in_python,,https://github.com/chickooooo/clean_architecture_in_python,2,0,0,0,0,1,11,2,1.4545454545454546,1,1,0,0,2,2.636363636363636,3.6239215580589415,0.0909090909090909,3.6239215580589415
167185720,pidevops,py-domain-driven-design,,https://github.com/pidevops/py-domain-driven-design,19,2,2,0,0,2,18,5,1.7777777777777777,1,1,1,1,4,8.11111111111111,22.04576414371152,0.5996732026143791,53.19523860036231
620593256,Dev-dk404,Video_Game_Microservices_Architecture,,https://github.com/Dev-dk404/Video_Game_Microservices_Architecture,201,0,0,0,0,1,9,2,4.222222222222222,0,1,0,0,1,4.111111111111111,16.557263454934535,0.6828282828282828,28.04530544166891
522291219,andrewmalandrin,clean-architecture,Clean Architecture Lab Repository,https://github.com/andrewmalandrin/clean-architecture,8,0,0,0,0,1,1,0,0.0,0,0,0,0,0,1.0,0.0,0.0,0.0
450891853,YisusYaro,SalesApp,Sam application example using driven domain design and cqrs.,https://github.com/YisusYaro/SalesApp,108,0,0,1,0,1,85,3,1.623529411764706,1,1,1,1,4,2.4705882352941178,0.5807591526658856,0.0470588235294117,0.5174951085355123
654779261,MatthewWeppenaar,Artificial-Neural-Network-Pytorch,"This is a project that explores the differences in efficiency and accuracy between different Artificial Neural Network architectures. These are MLP(Multi-Layered-Perceptron), CNN(Convolutional Network-LaNet5) and RESNet(Residual Network-Resnet9).",https://github.com/MatthewWeppenaar/Artificial-Neural-Network-Pytorch,5166,1,1,0,0,1,3,0,8.0,0,0,0,0,0,9.333333333333334,148.70190575306864,2.3562435500516,350.6273540379696
605366626,invent00,CleanArchitecture-fastapi-mongodb,,https://github.com/invent00/CleanArchitecture-fastapi-mongodb,29,0,0,0,0,1,5,2,2.8,1,1,0,1,3,4.6,2.4,0.3,3.6
828793944,ka10uta,py-clean-architecture,CleanArchitecture implementation in Python's DDD,https://github.com/ka10uta/py-clean-architecture,17,0,0,0,0,1,50,5,1.78,1,1,0,1,3,1.24,0.1901955000865387,0.02,0.0950977500432693
641882324,subhamay-cloudworks,0001-tarius-sam,AWS Serverless Real Time Data Load to DynamoDB using Python Lambda and S3 Event Source Mapping and creating the stack using AWS SAM (Serverless Application Model),https://github.com/subhamay-cloudworks/0001-tarius-sam,8,1,1,0,0,1,1,1,7.0,0,0,0,0,0,34.0,134.671829503467,3.0,404.015488510401
700782978,mcislab840832,Extracting-Key-Segments-of-Videos-for-Event-Detection,the code for Extracting Key Segments of Videos for Event Detection by Learning From Web Sources of TMM2018,https://github.com/mcislab840832/Extracting-Key-Segments-of-Videos-for-Event-Detection,4,0,0,0,0,1,3,0,11.0,0,0,0,0,0,5.0,482.44218152885946,3.5005376344086017,2605.7854267533435
935734226,Leonardoloda,lambda-data-ingestion,"A Python-based AWS Lambda function for ingesting and storing data in MySQL. Supports high-throughput event processing, data validation, and robust error handling. Designed for flexibility with multiple event sources (e.g., MSK, SQS).",https://github.com/Leonardoloda/lambda-data-ingestion,34,0,0,0,0,1,11,0,2.5454545454545454,0,0,0,0,0,5.181818181818182,5.434039773710668,0.3484848484848484,5.444292614128061
212246151,devopsadda,docker-schoolapp,Microservice Architecture School Mgmt Application,https://github.com/devopsadda/docker-schoolapp,4,0,0,0,1,1,1,1,2.0,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
91569103,dipakdotyadav,cqrs,,https://github.com/dipakdotyadav/cqrs,103,1,1,0,0,1,19,4,1.631578947368421,1,0,0,0,1,1.0526315789473684,0.983497687973034,0.0526315789473684,0.4917488439865169
944763597,JulioCesarForero,GestionPedidosArquitecturaHexagonal,Sistema de Gestión de Pedidos usando Arquitectura de Microservicios Hexagonal CQRS con SAGA ,https://github.com/JulioCesarForero/GestionPedidosArquitecturaHexagonal,48,0,0,0,0,1,121,5,1.5537190082644627,1,1,1,1,4,3.884297520661157,13.94133657084863,0.2018544357387332,33.333718570174206
672727590,mkazutaka,langchain-clean-architecture,,https://github.com/mkazutaka/langchain-clean-architecture,53,1,1,0,0,1,12,3,3.583333333333333,1,0,1,1,3,2.333333333333333,3.0339273215261,0.1458333333333333,2.598565803734719
259349062,YegorMedvedev,python-onion-scaffold,Simple clean code architecture application based on Python,https://github.com/YegorMedvedev/python-onion-scaffold,64,1,1,2,3,1,33,4,1.696969696969697,1,1,1,1,4,2.636363636363636,2.840556061567603,0.1515151515151515,3.856003788971449
949648482,gugamainchein,github-ia-code-validation,"This project is a Serverless application that leverages generative AI to analyze developers' code, providing improvement suggestions based on Domain-Driven Design (DDD) and Clean Code principles.",https://github.com/gugamainchein/github-ia-code-validation,59,3,3,0,0,1,12,2,1.0833333333333333,0,1,0,1,2,1.8333333333333333,0.7924812503605781,0.0833333333333333,0.3962406251802891
846124097,hoyirul,lintasarta-api,"A simple marketplace API application with a Python-based microservice architecture allows sellers to offer their APIs, while buyers access them through separately managed tokens. This system is designed to streamline transactions and efficiently manage API usage limits with flexible scaling.",https://github.com/hoyirul/lintasarta-api,15,0,0,0,0,1,2,1,1.5,0,0,0,0,0,18.0,210.88101343931265,2.2934782608695654,489.8870034182596
940915805,jac2206,exampleFastApiCleanArchitecture,Ejemplo fastApi Arquitectura Limpia,https://github.com/jac2206/exampleFastApiCleanArchitecture,28,1,1,0,0,1,24,4,3.2916666666666665,1,1,1,1,4,4.208333333333333,6.136610381805689,0.156454248366013,8.638792330980428
886300227,VictorAlexandre1986,API-de-Ponto,"Api desenvolvida utilizando Python, Flask  e Clean Architecture",https://github.com/VictorAlexandre1986/API-de-Ponto,46,0,0,0,0,1,42,2,2.238095238095238,1,1,1,1,4,5.833333333333333,3.810067388715415,0.2142857142857142,5.242691026349096
397790455,anishpdm,Layered-Architecture-Sample,,https://github.com/anishpdm/Layered-Architecture-Sample,3,0,0,0,0,1,5,1,1.6,0,0,0,0,0,0.8,4.179470570797252,0.15,3.1346029280979386
269456868,timothygmitchell,Deep_Learning_for_Digit_Recognition,"5 neural network architectures for digit recongition, from single layer perceptron to deep CNN with batch normalization",https://github.com/timothygmitchell/Deep_Learning_for_Digit_Recognition,36,0,0,0,0,1,1,0,22.0,0,0,0,0,0,9.0,101.95026032264605,2.857142857142857,291.28645806470297
370904914,san99tiago,python-clean-tests,"Simple Python projects for ilustrating clean architecture, package management and tests.",https://github.com/san99tiago/python-clean-tests,403,3,3,1,0,2,9,2,1.1111111111111112,0,0,0,0,0,6.333333333333333,48.04545173058139,1.1099887766554433,91.03675798717089
197781408,LucasRGoes,ports-adapters-sample,A sample project that uses the ports and adapters architecture (or hexagonal architecture) for a micro service.,https://github.com/LucasRGoes/ports-adapters-sample,109,44,44,6,3,0,22,2,4.181818181818182,1,0,0,1,2,14.272727272727272,28.210408176167608,0.6899538370126606,49.99502102125182
596093983,dj-ms,dj-ms-core,"Sample Django project ready for microservices architecture. Supports both Docker Compose and Kubernetes deployment. Includes some improvements, such as expiring token authentication.",https://github.com/dj-ms/dj-ms-core,1029,39,39,7,0,3,29,3,2.1379310344827585,1,0,1,0,2,2.0,9.507632959947292,0.3396551724137931,15.812436782498764
708052397,pgorecki,lato,Python microframework for modular monoliths and loosely coupled apps,https://github.com/pgorecki/lato,200,182,182,5,4,4,67,3,3.283582089552239,0,0,0,0,0,9.805970149253731,34.429335526171364,0.7273694571459182,74.25752165581538
78555015,teitei-tk,Marguerite,"Marguerite provides a declarative, consistent accessor to data layer.",https://github.com/teitei-tk/Marguerite,33,1,1,1,2,1,19,2,2.0,0,0,0,0,0,5.789473684210527,10.692480633499178,0.3684210526315789,11.972554651970446
941451812,excel-azmin,python-cqrs,,https://github.com/excel-azmin/python-cqrs,129,0,0,0,0,1,76,3,4.552631578947368,0,0,0,1,1,7.578947368421052,15.037079897492482,0.5410978103152618,29.850484642091835
586898168,ghga-de,metldata,"A framework for handling metadata based on ETL, CQRS, and event sourcing.",https://github.com/ghga-de/metldata,1416,1,1,0,0,9,186,7,4.462365591397849,0,0,0,0,0,8.940860215053764,48.22064108440232,0.904895882843003,160.36750937193094
962029560,NPS-Dive,ForexPredictionAIPipeLine_Python,A Clean Architecture Solution with python to implement AI to predict Forex Pair currencies: CNN-LSTM + XGBoost + Monte Carlo  ,https://github.com/NPS-Dive/ForexPredictionAIPipeLine_Python,53,0,0,0,0,1,19,2,3.263157894736842,1,1,0,1,3,6.947368421052632,79.86070541724648,1.5151388085598612,309.8492697888332
490789427,jdbaigorria,HexagonalArchitectureVideoGames,,https://github.com/jdbaigorria/HexagonalArchitectureVideoGames,57,0,0,0,0,0,68,4,2.588235294117647,1,1,1,1,4,3.426470588235294,3.2856238533619404,0.1763220439691027,7.007707740644359
874731456,marimorex,BudgetTracker," Application that can track expenses and manage the monthly and annual budget, as well as the current value of the capital. Following a Microservices Architecture. ",https://github.com/marimorex/BudgetTracker,22,0,0,0,1,1,6,3,0.3333333333333333,1,0,1,0,2,0.3333333333333333,0.7924812503605781,0.0833333333333333,0.3962406251802891
232031725,AxeemHaider,clean-architecture-sample,,https://github.com/AxeemHaider/clean-architecture-sample,4,0,0,0,0,1,12,3,0.5,1,1,0,1,3,2.333333333333333,1.9387218755408668,0.125,2.908082813311301
806854132,moralesjhonatan,clean-architecture-python-practica1,clean architecture usando python como lenguaje para la practica realizada con NETEC,https://github.com/moralesjhonatan/clean-architecture-python-practica1,6,0,0,0,0,1,5,2,1.2,1,1,0,1,3,2.6,0.9509775004326938,0.1,0.4754887502163469
131746573,irubaiyar,Real-time-updated-dashboard,"The dashboard uses both structured and unstructured data, including Twitter data, news articles, and pricing information to give the user a general overview of current and historic Bitcoin activity. The historic price chart and current price, is useful for identifying where Bitcoin is currently sitting relative to the past. The chart showing a count of “#Bitcoin” and “#Ethereum” usage pulled from Twitter gives insight into the social media buzz surrounding this specific cryptocurrency, and some indication on the impact of any concurrent events. The word cloud generated from news sources can show general market sentiment from reputable news organizations which is useful if users of the dashboard have limited time to sift through various news websites.  The Naïve Bayesian Classifier uses Google News to determine if the returns for the day will be positive or negative.  ",https://github.com/irubaiyar/Real-time-updated-dashboard,2345,2,2,1,1,1,11,0,10.181818181818182,0,0,0,0,0,3.4545454545454546,105.991173118366,1.9305194805194803,473.0012425435969
526446020,Iazzetta,brasfoot-clone,Cloning brasfoot in Python with Hexagonal Architecture,https://github.com/Iazzetta/brasfoot-clone,17,2,2,1,0,2,16,1,2.625,0,0,1,0,1,4.625,35.87281490817217,0.5836038961038961,152.79017064122246
203490480,minhtuan221,python-clean-architecture,Clean architecture for python user management,https://github.com/minhtuan221/python-clean-architecture,224,4,4,1,2,1,129,5,4.782945736434108,1,0,0,1,2,14.356589147286822,90.99289770722952,0.9177753893722926,216.4434204949322
944599843,GantangSatria,Arkavidia-Academya-FlaskCleanArchitecture,,https://github.com/GantangSatria/Arkavidia-Academya-FlaskCleanArchitecture,2,0,0,0,0,1,9,1,1.8888888888888888,1,1,1,0,3,2.4444444444444446,0.5283208335737188,0.0555555555555555,0.2641604167868594
703810541,Fishfinna,microservices,Service Based Architecture Repo,https://github.com/Fishfinna/microservices,1506,0,0,0,0,1,14,3,5.642857142857143,0,0,0,0,0,4.357142857142857,75.03645089313234,1.6391927498708636,343.7894481148784
201444782,evangraan,aws-lambda-api_gateway-pgbouncer-postgres,"AWS back-end infrastructure for a project. Microservices architecture using PostgreSQL RDS, EC2, PGBouncer, API Gateway and Python Lambas.",https://github.com/evangraan/aws-lambda-api_gateway-pgbouncer-postgres,4761,0,0,0,0,1,555,7,4.315315315315315,0,0,0,0,0,41.990990990990994,810.7085964402537,3.781703883403288,15264.604233065387
236891519,HBIII,Classification-of-Handwritten-Digits,Implemented neural network based on multi-layer perceptron architecture for k-class classification to categorize MNIST database of handwritten digits,https://github.com/HBIII/Classification-of-Handwritten-Digits,317,0,0,0,0,1,2,0,1.0,0,0,0,0,0,9.0,117.01164534875782,1.879629629629629,439.8771112184785
801887641,LUCIFERsDen26,Idan_web-app,This project demonstrates how to set up an authentication server using Casdoor in conjunction with Flask. The application leverages OAuth2 and OIDC authentication mechanisms. It adopts a microservices architecture and includes a web app component along with a Redis server for server-side session storage.,https://github.com/LUCIFERsDen26/Idan_web-app,76,1,1,0,0,1,14,4,3.857142857142857,0,0,1,0,1,3.571428571428572,2.0971000008241787,0.25,1.0485500004120891
379175413,nirina-jacques,Python-refs,Fastapi with architecture clean,https://github.com/nirina-jacques/Python-refs,198,0,0,0,0,1,16,5,1.5625,1,1,1,1,4,1.25,0.125,0.03125,0.0625
823017343,shaikhafreen16,aws-lambda-layer-version,"Automates the management of AWS Lambda layers and updates associated Lambda functions. Supports creating new layers, updating existing ones, and ensuring compatibility across multiple runtimes and architectures.",https://github.com/shaikhafreen16/aws-lambda-layer-version,4,0,0,0,0,1,1,0,1.0,0,0,0,0,0,18.0,57.11032383086405,2.0,114.22064766172812
411713334,Ashutosh-Tester,Python_Projects,Beginners who are new to Open Source and Hacktoberfest event can contribute over here.,https://github.com/Ashutosh-Tester/Python_Projects,45,2,2,9,6,1,37,1,0.1891891891891892,0,0,0,0,0,1.2162162162162162,32.76398666286581,1.832287558758147,119.6833921387695
764685047,Shaheer-Ahmd,TourBuddy-Backend-DomainDrivenDesign,,https://github.com/Shaheer-Ahmd/TourBuddy-Backend-DomainDrivenDesign,28,0,0,0,0,1,28,5,2.607142857142857,1,0,1,1,3,3.75,6.384103125077266,0.1838697017268445,9.90202016536438
698924832,brickredrock,PlayDay-Management-System,"Open Source PlayDay Management System for tracking events like Cloverleaf Barrels, Straightaway Barrels, and Poles for anyone to use",https://github.com/brickredrock/PlayDay-Management-System,393,0,0,0,0,1,6,2,7.0,0,0,0,0,0,60.66666666666666,1373.3282982578337,5.044085130326349,8625.588295292899
886378257,DenLopes,ssys-challenge,"FastAPI-based employee management system with authentication, reporting features, and clean architecture. Built with Python, PostgreSQL, and Docker for the SSYS challenge.",https://github.com/DenLopes/ssys-challenge,26,1,1,0,0,1,29,3,4.517241379310345,1,1,1,1,4,5.275862068965517,13.169323016692331,0.4724137931034483,19.02081505024341
744841405,RustyGuard,clean_shopping_list,Сlean architecture using a shopping list as an example,https://github.com/RustyGuard/clean_shopping_list,14,0,0,0,0,1,22,6,3.5454545454545454,1,0,0,1,2,1.8636363636363635,3.0487302658531736,0.1818181818181818,1.7882205982546964
530245580,NatanSiilva,clean_architecture_python,"Este repositório contém um exemplo de implementação de uma arquitetura limpa em Python, utilizando o framework Flask. O objetivo é fornecer um exemplo simples e didático de como aplicar os conceitos de arquitetura limpa em um projeto Python.",https://github.com/NatanSiilva/clean_architecture_python,78,0,0,0,0,1,87,4,2.6436781609195403,1,1,1,1,4,5.563218390804598,33.88938144127837,0.6143458074492557,73.3871636777014
17980691,sammyrulez,rich-crypto-hamster,A bitcoin exchange built with EventSourcing and CQRS,https://github.com/sammyrulez/rich-crypto-hamster,329,3,3,5,0,3,21,2,2.142857142857143,0,0,0,0,0,2.0,2.622707810346317,0.1607142857142857,2.7818731500604748
901535426,lorenzozangari,ME2-BERT,Source code of ME²-BERT: Are Events and Emotions what you need for Moral Foundations Prediction?,https://github.com/lorenzozangari/ME2-BERT,102,3,3,0,0,1,10,1,6.8,1,0,0,0,1,17.6,395.43603971244494,4.249434507136852,3460.6640710761103
770746347,rcvdigo,inscricao_online_clean_architecture,,https://github.com/rcvdigo/inscricao_online_clean_architecture,21,0,0,0,0,1,53,4,1.849056603773585,1,1,1,1,4,2.0943396226415096,5.053104146079479,0.202085402184707,24.89347835731411
578522548,Vitor-labs,Clean_Architecture,something realy is going on here,https://github.com/Vitor-labs/Clean_Architecture,72,6,6,0,0,1,57,3,2.421052631578948,1,1,1,1,4,5.614035087719298,28.98265487315321,0.5431768523873788,52.34343701624921
597188741,NwabuezeFranklin,alx-backend-python,"Backend Python :snake: is a solution for building scalable and reliable web applications and APIs using the Python programming language. It leverages popular Python frameworks such as Flask and SQLAlchemy, and provides a clean and modular architecture for easy maintenance and scalability",https://github.com/NwabuezeFranklin/alx-backend-python,24,1,1,0,0,1,26,1,1.5,0,0,0,0,0,2.576923076923077,3.9000732480064193,0.2994505494505494,5.099481433402873
400063700,asSqr,django-api-clean-arch, Api rest with Django architected with clean architecture and repository pattern principles.,https://github.com/asSqr/django-api-clean-arch,42,0,0,0,0,0,45,3,1.022222222222222,1,1,1,0,3,0.7333333333333333,0.1056641667147437,0.0111111111111111,0.0528320833573718
693548463,sda97ghb,news-fastapi,An example of DDD and Hexagonal Architecture in Python ,https://github.com/sda97ghb/news-fastapi,271,2,2,0,0,1,142,5,4.901408450704225,1,0,0,1,2,15.26056338028169,34.058040029796445,0.7393258573381836,88.13624077310483
872053986,yeshwanthlm,image-pixelater-aws-project,"An event-driven image processing pipeline using AWS Lambda and S3. When images are uploaded to a source S3 bucket, Lambda triggers and pixelates the images in five variations (8x8, 16x16, 32x32, 48x48, 64x64) using the PIL library, then stores them in a processed S3 bucket.",https://github.com/yeshwanthlm/image-pixelater-aws-project,15,0,0,1,0,1,1,0,6.0,0,0,0,0,0,6.0,13.931568569324174,0.5,6.965784284662087
701324272,tumurzakov,esbill,Billing application. Event sourcing app using eventsourcing lib.,https://github.com/tumurzakov/esbill,26,0,0,0,0,1,51,3,3.196078431372549,1,0,1,1,3,5.176470588235294,5.633920966708642,0.1890903729913017,6.021926626716456
895212164,PymesHub,django-clean-todo-project,CRUD with django and python with clean architecture,https://github.com/PymesHub/django-clean-todo-project,50,0,0,0,0,1,18,2,1.8333333333333333,1,1,0,0,2,3.111111111111111,3.1892848810174,0.1527777777777778,2.63488345236962
353362989,sushilk123,Ecommerce-Application-using-Microservices,"In this project, I have used micro-service architecture to develop an e-commerce application and the project is deployed using docker containers.",https://github.com/sushilk123/Ecommerce-Application-using-Microservices,8002,1,1,0,0,1,34,4,3.0588235294117645,0,1,1,0,2,3.5294117647058822,8.401867947842138,0.2696078431372549,11.018875974520288
710328081,filipbadger,separation_of_concerns,Quick example of separation of concerns based on chapters 25 and 26 of Uncle Bob's Clean Architecture,https://github.com/filipbadger/separation_of_concerns,0,0,0,0,0,1,5,1,1.4,0,0,0,0,0,3.4,0.9509775004326938,0.1,0.4754887502163469
796153257,Paola-CansecoPenagos,SOAdiagnostic,diagnostic examination of an API with hexagonal architecture,https://github.com/Paola-CansecoPenagos/SOAdiagnostic,45,0,0,0,0,1,26,3,2.423076923076923,1,1,1,1,4,4.769230769230769,11.567334945689248,0.6009615384615385,17.872140177508133
699539890,GeniaKybalchych,ExamenFinalA015,"Système de gestion des projets d'une entreprise spécialisée dans la construction.  Fiat partie d'une architecture globale basée sur une approche microservices, encapsulant différentes responsabilités dans des services distincts tout en offrant une interface unifiée aux utilisateurs.",https://github.com/GeniaKybalchych/ExamenFinalA015,11,0,0,0,0,1,13,3,2.3076923076923075,0,0,0,0,0,1.7692307692307692,3.75338365534394,0.3461538461538461,2.4732216355306984
130257424,im037,Minibank,"This project is focused on best practices of Object Oriented using Domain Driven Design (DDD), Event Source and Test Driven Development (TDD)",https://github.com/im037/Minibank,2,2,2,0,0,0,1,0,1.0,0,0,0,0,0,25.0,57.11032383086405,2.0,114.22064766172812
471727989,othercodes,sample-todo-list-hexagonal-architecture,Sample of TO-DO List Application using Hexagonal Architecture. ,https://github.com/othercodes/sample-todo-list-hexagonal-architecture,81,0,0,0,0,1,27,4,2.888888888888889,1,1,0,1,3,5.148148148148148,7.485907648027661,0.3068783068783068,9.797389342672188
577263820,arfatmateen,UdaConnect_Message_Passing,Microservice architecture using message passing | Bosch AI Talent Accelerator Scholarship Program,https://github.com/arfatmateen/UdaConnect_Message_Passing,503,0,0,0,0,1,34,4,3.852941176470588,0,0,1,0,1,4.0,6.033882810987855,0.3987394957983193,10.980020519445636
871235249,GAAYUSHKR,Flipkart-Product-Image-Detection_Object-Localisation,"This project builds and tests a machine learning model for product image detection using the Flipkart dataset. It employs the MobileNetV2 architecture, fine-tuned for product recognition. The training and testing involve neural network layers, optimization techniques, and callbacks to enhance model accuracy for detecting products in images.",https://github.com/GAAYUSHKR/Flipkart-Product-Image-Detection_Object-Localisation,3,0,0,0,0,1,2,0,15.5,0,0,0,0,0,8.0,405.8080746061411,3.2920258620689653,1368.7419205029346
612113800,keremclp,Reservation,The reservation microservice of the project we made with the microservice architecture that I made with Flask.,https://github.com/keremclp/Reservation,3,0,0,0,0,1,1,0,3.0,0,0,0,0,0,34.0,208.89318279048564,2.0,417.7863655809713
890692198,ihleonel,clean-architecture-python,,https://github.com/ihleonel/clean-architecture-python,36,0,0,0,0,1,39,3,1.4615384615384617,1,1,1,1,4,4.0,12.377899243707438,0.3359211775878443,30.15193547363043
340414381,vitor656,clean-architecture-py,Clean architecture sample project using Python,https://github.com/vitor656/clean-architecture-py,52,0,0,0,0,1,78,3,2.7051282051282053,1,1,1,1,4,4.512820512820513,18.621282419028056,0.488324780632473,36.82447845382352
946387817,bagasdisini,py-clean-arch,FastAPI Clean Architecture API,https://github.com/bagasdisini/py-clean-arch,13,0,0,0,0,1,27,3,2.592592592592593,1,1,1,1,4,4.407407407407407,10.80157753722683,0.3247354497354497,19.81578085165472
101219729,jumcorredorro,layered-architecture,,https://github.com/jumcorredorro/layered-architecture,5144,0,0,0,0,0,14,4,2.5,0,0,0,0,0,3.4285714285714284,3.853651326998432,0.2261904761904762,3.731444413962816
965243901,dgallitelli,mcp-sse-client-server-docker,"A simple implementation of MCP Client/Server architecture with HTTP SSE transport layer, dockerized.",https://github.com/dgallitelli/mcp-sse-client-server-docker,13,2,2,0,0,1,3,1,3.6666666666666665,0,0,0,0,0,9.666666666666666,38.84537795054069,1.3333333333333333,108.6113213480163
609154711,Biebras,flask-microservice-architecture-template,"Template for building microservice architectures using Flask, Docker, and Docker Compose. It includes several microservices and instructions for using and testing the application.",https://github.com/Biebras/flask-microservice-architecture-template,36,21,21,7,1,1,21,3,1.6666666666666667,0,1,0,0,1,1.380952380952381,2.6853553405537696,0.1904761904761904,1.3426776702768848
789455997,patrykpartyka,microservices-video-to-mp3-converter,Learning purpose repository that contains microservices architecture related video to mp3 converter project. ,https://github.com/patrykpartyka/microservices-video-to-mp3-converter,804,0,0,0,0,1,14,5,3.2142857142857144,0,0,0,1,1,2.7857142857142856,15.138974074573635,0.7148962148962149,38.38830272659734
177252396,thunlp,Adv-ED,"Source code and dataset for NAACL 2019 paper ""Adversarial Training for Weakly Supervised Event Detection"".",https://github.com/thunlp/Adv-ED,10,72,72,22,1,6,10,1,4.9,0,0,0,0,0,13.0,360.700584177882,3.250224027709831,2374.913029376244
674801912,ffekirnew,rentomatic,Clean architecture practice with Python following the book Clean Architectures with Pyton by Leonardo Giordani.,https://github.com/ffekirnew/rentomatic,20,1,1,0,0,1,17,4,3.5294117647058822,1,1,1,1,4,5.588235294117647,4.566121324589936,0.1294117647058823,5.087766618741519
645313668,m-nanda,End-to-End-ML,"An ""End-to-End Machine Learning"" project focuses on building a machine learning pipeline that prevents data leakage and deploys the model with microservice-architecture for real-world use.",https://github.com/m-nanda/End-to-End-ML,3079,3,3,0,0,1,4,1,9.5,0,0,0,0,0,16.0,82.33846740353638,1.875,213.314777568666
676248876,Felipe-Baz,fastapi-clean-architecture,,https://github.com/Felipe-Baz/fastapi-clean-architecture,29,3,3,0,0,1,22,2,3.0,1,0,0,1,2,4.181818181818182,4.902005665889344,0.1818181818181818,3.2691846511264897
720629301,AyeJayM,ML-Assignment4,"A program that constructs a neural network architecture with different values for the number of hidden layers, neurons per layer, and learning rates. It will iterate through different permutations of these hyperparameters to train the deep learning model and calculate the accuracy for each one. Finally, we create a visualization of the models.",https://github.com/AyeJayM/ML-Assignment4,232,0,0,0,0,1,2,0,5.0,0,0,0,0,0,1.0,96.29338573358996,3.5,341.5657435229197
475016929,ItunuIjila,Flood-Sentiment-Analysis,"This project will analyse text and image data from social media tweets collected during historical flooding events. With the ever-increasing use of social media, this kind of data is becoming an important source of information during flooding (and other emergency) events, and can potentially be used to direct emergency response, rescue or other assistance where it is most needed. This can be achieved via a combination of sentiment analysis and topic identification, i.e. what are people tweeting about and how badly (or not) are they affected? Current approaches to this idea are still in their infancy mostly due to the difficulty in processing such information in real time, i.e. whilst they occur. Data and baseline code for this project are available. The key objective is to build on top of an existing system that can identify sentiment and topics offline, and establish experimentally whether it is feasible to do so online from a live stream of tweets.",https://github.com/ItunuIjila/Flood-Sentiment-Analysis,8,0,0,1,0,1,8,1,2.125,0,0,0,0,0,7.0,48.19991175227361,1.6011904761904765,178.3787504600721
367355614,rscarrera27,not-so-minitweet,Minitweet(not so mini but anyway) for my architecture study. (Currently Work-In-Progress),https://github.com/rscarrera27/not-so-minitweet,68,2,2,0,0,1,67,4,1.9701492537313432,1,1,1,1,4,2.82089552238806,4.632514818034207,0.1324626865671641,7.284448079205059
402936073,bharathklogan,microservices_practice,"To practice micro services architecture using Python, gRPC, CI/CD, Docker and Kubernetes",https://github.com/bharathklogan/microservices_practice,3593,0,0,0,0,1,49,6,5.183673469387755,0,0,0,0,0,4.204081632653061,7.245736194327591,0.4120505344995142,9.621279038165431
360789668,bailabs,fastapi_clean_architecture,,https://github.com/bailabs/fastapi_clean_architecture,118,2,2,1,0,2,15,2,4.133333333333334,1,1,1,1,4,6.866666666666666,13.777939043866828,0.4,18.91277314853261
937670020,Quekzhengseng,GrabOrgan,SMU ESD Microservice Architecture for Organ Matching & Delivery,https://github.com/Quekzhengseng/GrabOrgan,724,0,0,0,0,1,34,8,6.147058823529412,0,0,0,0,0,20.529411764705884,214.4291884535597,3.0983792177412406,1137.154448685381
570701381,ConoscereLinux,asso-django,"An open source Django Framework to manage Events, Member and basic Accounting for an Italian Association",https://github.com/ConoscereLinux/asso-django,449,0,0,3,14,2,65,4,2.292307692307692,0,0,0,0,0,3.876923076923077,9.979283494071982,0.3512820512820513,30.89547347339652
295289384,Gulfam92,DeepLearning_Residual-Dense-Neural-Network,"This project proposes a neural network architecture Residual Dense Neural Network - ResDen, to dig the optimization ability of neural networks. With enhanced modeling of Resnet and Densenet, this architecture is easier to interpret and less prone to overfitting than traditional fully connected layers or even architectures such as Resnet with higher levels of layers in the network.",https://github.com/Gulfam92/DeepLearning_Residual-Dense-Neural-Network,539,0,0,0,0,1,7,2,7.571428571428571,1,0,0,0,1,10.428571428571429,138.53941186429256,3.335176463747892,920.7503987304376
783285987,JhonatasMenezes,Clean_Architecture,Repository that I going to put a example of Clean Arch concepts and to use it for improve my knowledge about this.,https://github.com/JhonatasMenezes/Clean_Architecture,19,0,0,0,0,1,28,4,1.2857142857142858,1,1,1,1,4,3.357142857142857,9.306441351059986,0.2142857142857142,7.271249969716364
231798269,moriaki3193,python-api-clean-architecture,Python implemented web API with clean architecture,https://github.com/moriaki3193/python-api-clean-architecture,43,3,3,0,1,2,17,3,2.0,1,1,1,0,3,2.294117647058824,0.0,0.0,0.0
846619712,onlythompson,drf_api_project_template,This project template provides a structured foundation for building scalable and maintainable Django REST Framework (DRF) applications using Domain-Driven Design (DDD) principles and Clean Architecture.,https://github.com/onlythompson/drf_api_project_template,9,10,10,0,0,2,1,0,2.0,0,0,0,0,0,7.0,15.509775004326936,1.0,15.509775004326936
124457843,alvquiJuan,FD-microservices,Microservices based architecture for fault detection investigation project.,https://github.com/alvquiJuan/FD-microservices,75,1,1,0,0,0,3,1,4.0,0,0,0,0,0,5.666666666666667,19.43458750793272,1.5666666666666669,46.537446270264496
80619777,cbrafter,CrowdTLL,Crowd sourced traffic light control for engagement events ,https://github.com/cbrafter/CrowdTLL,2112,5,5,0,0,1,31,3,1.6129032258064515,1,0,0,0,1,4.709677419354839,73.41752129735019,1.4645605055793585,346.35980717106315
730658918,neromantic,corx,Python package to work with CQRS + ES architecture,https://github.com/neromantic/corx,36,1,1,0,1,1,13,2,3.4615384615384617,0,0,0,0,0,9.461538461538462,19.954160675810613,1.0,37.287954617270096
331478582,ivandika3,tornado-microservice,Simple microservice architecture using Tornado framework and Docker-compose,https://github.com/ivandika3/tornado-microservice,79,2,2,2,0,1,4,2,7.5,0,1,0,0,1,26.5,260.7386077095076,3.227564102564102,917.6127465827342
923957593,Afia-59,Mnist_CNN,"The code provided in this repository uses TensorFlow and Keras to build, train, and evaluate a CNN model on the MNIST dataset. The model architecture includes two convolutional layers followed by max-pooling layers, a dropout layer for regularization, and a dense output layer with softmax activation for classification.",https://github.com/Afia-59/Mnist_CNN,9,0,0,0,0,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
809553567,josalaza,clean_architecture_bc,,https://github.com/josalaza/clean_architecture_bc,27,0,0,0,0,1,26,4,1.2307692307692308,0,0,1,0,1,5.307692307692308,11.768363440177795,0.4722222222222222,18.44367771759721
401276329,PJ64,dynamodb_stream_cqrs,This is an example of a CQRS (command query response segregation) microservice pattern. This example also demonstrates using API Gateway mapping templates to directly update a DynamoDB table without invoking a Lambda function.,https://github.com/PJ64/dynamodb_stream_cqrs,9999,1,1,0,0,1,449,8,5.616926503340757,1,0,0,0,1,41.9554565701559,536.0175332506302,2.9773811274314466,5898.795748208445
825306915,ChWasam,online_mart_api,Online Mart API Using Event-Driven Microservices Architecture,https://github.com/ChWasam/online_mart_api,321,2,2,0,0,2,57,3,4.754385964912281,0,0,0,0,0,7.157894736842105,41.75679544312176,1.0555379395407096,205.12233331101524
789428418,welcloud-io,wio-clean-serverless-architecture,Code used for demos at AWS Paris summit 2024,https://github.com/welcloud-io/wio-clean-serverless-architecture,6,0,0,0,0,1,7,1,1.4285714285714286,0,0,0,0,0,2.4285714285714284,0.6792696431662099,0.0714285714285714,0.3396348215831049
341231009,obpFin,my-architectures,software architecture lessons,https://github.com/obpFin/my-architectures,200,0,0,0,0,1,5,4,1.6,0,0,0,1,1,13.4,16.26662847147761,0.9,15.791139721261263
835232919,PaulKalho,event-sourced-process-mining,Process mining applied on top of event logs of helpwave/services event-sourced architecture.,https://github.com/PaulKalho/event-sourced-process-mining,1588,1,1,0,0,1,59,5,3.2033898305084745,0,1,0,0,1,7.711864406779661,7.369095173616657,0.3300218960343848,14.47105047965821
213707084,nataspowers,eventapi,Example event API  using data sources from eventbrite. You can search for and update events.,https://github.com/nataspowers/eventapi,92,0,0,0,6,1,20,2,2.55,0,0,1,0,1,2.05,12.865992590335514,0.25,34.709255895465674
965247607,a-jalilian66,yadlog-blog,"Production-ready Django backend for a blog platform, using Docker, Gunicorn, and Nginx. Built with a clean architecture and multi-environment support.",https://github.com/a-jalilian66/yadlog-blog,1715,0,0,0,0,1,47,7,1.9574468085106385,1,0,0,0,1,2.851063829787234,15.644360464149258,0.3893617021276595,25.487693518250108
903017750,The-Swarm-Corporation,AgentOS,"AgentOS implements a comprehensive security architecture leveraging containerization, orchestration, and multi-layer isolation to ensure secure execution of autonomous agents. ",https://github.com/The-Swarm-Corporation/AgentOS,40,6,6,0,1,1,3,1,8.333333333333334,0,0,1,0,1,49.333333333333336,591.6644410848311,4.053221288515407,4339.376539085608
574568761,ddzky,TeksimBAB_8,"source code mengacu pada persoalan yang ada pada buku ""Discrete-Event System Simulation"" (2013) - Jerry Banks, BAB 8",https://github.com/ddzky/TeksimBAB_8,3,0,0,0,0,1,6,0,2.6666666666666665,0,0,0,0,0,1.1666666666666667,95.17114670974776,3.5767255892255894,411.5069938490744
137870635,Psychadia,cqrs-test,,https://github.com/Psychadia/cqrs-test,3,0,0,0,0,1,4,2,0.5,0,0,0,0,0,3.75,3.877443751081734,0.25,3.877443751081734
505301697,kdh92417,practice-clean-architecture,클린 아키텍처를 적용하여 실습해보는 프로젝트,https://github.com/kdh92417/practice-clean-architecture,10,0,0,0,0,1,11,4,2.5454545454545454,1,1,1,1,4,3.8181818181818175,2.910868182604898,0.4090909090909091,2.5008886367569945
122096070,anatoly-scherbakov,antroporama,An article about human evolution built on Semantic Web and Clean architecture,https://github.com/anatoly-scherbakov/antroporama,14907,0,0,0,8,0,11,4,2.363636363636364,0,0,0,0,0,4.727272727272728,2.131031233968282,0.1363636363636363,1.065515616984141
700347319,staiton,HacktoberFest2023.1,"Welcome to the Hacktoberfest 2023 repository! Join us in celebrating open source during Hacktoberfest by contributing to this exciting project. Explore coding challenges, enhance documentation, or collaborate on innovative ideas. Let's make Hacktoberfest 2023 a memorable event together!""",https://github.com/staiton/HacktoberFest2023.1,10,0,0,9,0,0,2,0,1.0,0,0,0,0,0,9.5,177.32822121872732,2.905844155844156,515.6832592897587
962375805,rijojohn85,clean_architecture,,https://github.com/rijojohn85/clean_architecture,14,0,0,0,0,1,30,2,4.133333333333334,1,0,0,0,1,6.4,30.46530978836324,0.6826012876012876,71.20691362422029
794067267,alexted,fastapi-clean-architecture-app-template,fastapi-clean-architecture-app-template,https://github.com/alexted/fastapi-clean-architecture-app-template,74,0,0,0,2,1,67,6,2.955223880597015,1,1,1,0,3,3.656716417910448,9.240883622253062,0.3528784648187633,16.193588250069087
825310073,lcy2723,MAVEN-FACT,"Source code and dataset for paper ""MAVEN-FACT: A Large-scale Event Factuality Detection Dataset"".",https://github.com/lcy2723/MAVEN-FACT,28,1,1,0,0,1,10,1,7.8,0,0,0,0,0,28.1,494.6728141787513,4.506861383388357,2730.484343253785
882441216,CloudComputingUAO,microservices,"This project consists of a microservices architecture with a user service, a notification service, and monitoring setup using Traefik and Prometheus.",https://github.com/CloudComputingUAO/microservices,231,0,0,0,0,0,2,1,8.0,0,0,0,0,0,4.0,6.965784284662087,0.25,3.4828921423310435
666551257,Hafezx,python-flask-clean-architecture,Sample Clean Architecture for Python Flask App,https://github.com/Hafezx/python-flask-clean-architecture,11,0,0,0,0,1,15,4,4.133333333333334,0,1,1,1,3,8.2,39.188103907750026,1.2357396633867224,93.45349832741137
270296630,emilybache,BeeFriendly,app for learning about testing in a microservices architecture,https://github.com/emilybache/BeeFriendly,1452,5,5,3,3,2,22,4,4.818181818181818,0,0,0,0,0,4.090909090909091,21.18884095950816,0.5445574162679425,33.156792488385776
711665171,nsagot,TA-Eventgen-Learning,Eventgen Splunk App ready to use with multiples sources.,https://github.com/nsagot/TA-Eventgen-Learning,936,0,0,1,0,1,1,2,3.0,0,0,0,0,0,15.0,348.3892322882048,6.8478260869565215,2385.7088732779243
103769977,elastic-event-components,e2c,Elastic Event Components is an open source software library to build flexible components using function flow graphs.,https://github.com/elastic-event-components/e2c,731,1,1,0,1,0,59,7,2.4915254237288136,1,0,0,0,1,6.983050847457627,35.93871474345563,0.7819413637210247,70.13202536688615
839482532,alpino-sg,example-micro-services,A todo app based on microservice architecture. ,https://github.com/alpino-sg/example-micro-services,373,0,0,3,0,1,35,4,2.2857142857142856,0,0,1,0,1,2.571428571428572,5.138474276234736,0.2465986394557823,4.951191801878869
955993767,DA-rr1ck,django-microservice-ecomm-web,An e-commerce website built in microservice architecture using Django,https://github.com/DA-rr1ck/django-microservice-ecomm-web,207,0,0,0,0,1,140,4,1.6071428571428572,0,1,0,0,1,1.6571428571428573,2.6077687729492283,0.1318877551020408,4.391608168830853
899854491,Distributed-IoT-Software-Arch-Course,iot-microservice-arch-laboratory,Python & Docker Microservices Distributed Software Architecture - Laboratory,https://github.com/Distributed-IoT-Software-Arch-Course/iot-microservice-arch-laboratory,2768,0,0,0,0,1,17,3,2.176470588235294,0,0,0,1,1,3.411764705882353,11.741043743698947,0.4117647058823529,7.695201284123232
955788515,gagin,WaveExperiment,"Investigating a new approach to neural network layer design. The WaveLayer replaces standard weights with trainable sine wave functions, aiming for improved parameter efficiency. This project compares WaveLayers to MLPs and RNNs on MNIST and RSI prediction tasks, focusing on the impact of periodic activation and network architecture.",https://github.com/gagin/WaveExperiment,57,0,0,0,0,1,5,0,8.6,0,0,0,0,0,22.4,463.8956305686496,5.288810601163542,3212.542086356978
569342258,Shankar-Balajee,Model_Architecture_CleanTheLiDAR,,https://github.com/Shankar-Balajee/Model_Architecture_CleanTheLiDAR,52,0,0,1,1,1,13,1,6.6923076923076925,0,0,0,0,0,22.07692307692308,284.80279725757015,4.182643676235953,1777.6779534449
671033916,chips-analytics-Miguel,CleanArchitecturePatient,,https://github.com/chips-analytics-Miguel/CleanArchitecturePatient,854,0,0,1,0,1,35,2,4.371428571428571,1,0,1,1,3,6.742857142857143,4.813498242997391,0.2428571428571428,4.858442720629325
477898484,Ik-Emmanuel,FastAPI-Microservices-with-Redis-and-Redis-Stream-Events,A shopping microservices architecture using FastAPI and Redis. Consists of an inventory microservice and an order/payment microservice. ,https://github.com/Ik-Emmanuel/FastAPI-Microservices-with-Redis-and-Redis-Stream-Events,4,0,0,1,0,1,4,1,3.5,0,0,0,0,0,3.75,11.816165626622604,0.625,11.221804688852169
161357266,NVISOsecurity,ee-outliers,Open-source framework to detect outliers in Elasticsearch events,https://github.com/NVISOsecurity/ee-outliers,4107,209,209,33,33,20,45,6,6.2444444444444445,0,1,0,0,1,31.377777777777776,405.2576165831574,2.5700454328947067,2776.0864645124648
682647685,devsjc,python-project-structure,"Information on how to structure a python project, based on the Hexagonal Architecture pattern ",https://github.com/devsjc/python-project-structure,15,1,1,0,0,1,8,4,2.25,0,0,0,0,0,3.75,9.453007814753612,0.4479166666666666,13.92481250360578
788457358,ulkenauer,fast-api-clean-architecture,,https://github.com/ulkenauer/fast-api-clean-architecture,17,5,5,0,0,1,31,6,2.2580645161290325,1,1,1,1,4,2.4516129032258065,0.9604657261553984,0.0806451612903225,0.730390524437811
936088702,Xenokrat,Clean-Architecture-Exercises,Learn Clean Architecture,https://github.com/Xenokrat/Clean-Architecture-Exercises,26,0,0,0,0,1,22,1,2.136363636363636,0,0,0,0,0,11.727272727272728,56.78189754071374,1.1746392496392497,127.65148162051814
706931275,radamin,dz6_clean_architecture,,https://github.com/radamin/dz6_clean_architecture,58,0,0,0,0,1,6,1,0.0,0,0,0,0,0,8.0,1.5849625007211563,0.1666666666666666,0.7924812503605781
953504800,susmitpy,docker-kong-fastapi-otel-openobserve,Demonstrates end-to-end observability in a microservices architecture and usage of Plugins,https://github.com/susmitpy/docker-kong-fastapi-otel-openobserve,669,0,0,0,0,1,24,3,4.583333333333333,0,0,0,0,0,5.625,24.47656684964068,0.7059782608695652,54.60028500280459
624076507,erickdsama,pokemon_fastapi,"Clean architecture implementation using FastApi, sample example getting data from pokemon api",https://github.com/erickdsama/pokemon_fastapi,96,0,0,0,0,1,16,3,2.1875,1,1,0,1,3,4.375,5.362219956968704,0.25,9.40291466733652
944344483,ShyamSundhar1411,structura-py,"Structura is a CLI tool that automates folder structure generation and dependency management for Python projects. It supports multiple architectures (MVC, MVCS, Hexagonal) and frameworks (Flask, FastAPI), using YAML configuration for flexibility.",https://github.com/ShyamSundhar1411/structura-py,218,0,0,0,0,1,14,2,3.357142857142857,1,0,0,0,1,5.285714285714286,15.432746107252369,0.5178571428571429,29.53353408809335
860630863,andresm3,cqrs_users,,https://github.com/andresm3/cqrs_users,59,0,0,0,0,1,44,4,2.159090909090909,1,1,1,1,4,2.8181818181818183,0.3923786933293274,0.0568181818181818,0.2302802557555728
735595741,Musabs2802,video-to-audio,A microservice architecture based python application to convert video to audio,https://github.com/Musabs2802/video-to-audio,2,0,0,0,0,1,1,1,5.0,0,0,0,0,0,9.0,93.45440529575887,3.230769230769231,301.9296171093748
766541013,sach6781,flask-async-websocket-messaging,"The ""flask-async-websocket-microservices"" project demonstrates a simple yet powerful architecture for building microservices using Flask, a popular Python web framework. The microservices communicate asynchronously through WebSocket technology, allowing for efficient and real-time data exchange.",https://github.com/sach6781/flask-async-websocket-messaging,7,0,0,0,0,1,2,2,3.0,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
491068974,julienharbulot,clean-architecture-example,"[2022] Python example of the clean architecture (use-cased based ""hexagonal architecture"" or ""ports & adapters architecture"") with both an http controller and a Kafka controller.",https://github.com/julienharbulot/clean-architecture-example,86,5,5,0,0,2,48,3,4.25,0,0,1,1,2,4.666666666666667,12.112274428524016,0.3611111111111111,21.812830977009924
19631138,commoncode,cqrs-edits,,https://github.com/commoncode/cqrs-edits,160,0,0,0,0,2,9,3,2.555555555555556,0,0,0,0,0,10.555555555555555,86.41898351354268,0.6731078904991948,342.19372083728007
755700609,williamelias,python_clean_architecture,This project is designed to learn about clean architecture with python applied project.,https://github.com/williamelias/python_clean_architecture,100,1,1,0,0,1,32,3,1.96875,1,0,0,1,2,3.625,5.295369698940378,0.21875,8.236874659546297
717038806,Jannoshh,clean-llamas,Clean version of the Llama transformer architecture. ,https://github.com/Jannoshh/clean-llamas,3,0,0,0,0,1,1,0,7.0,0,0,0,0,0,37.0,189.46125880997533,2.6041666666666665,493.3886948176441
545285747,eric0241,AIS-Ransomware-Workshop,"The source code for the ""Analyzing Ransomware with Python"" workshop hosted by me. File structure needs to be cleaned up, but all of the code is the same as presented in the event.",https://github.com/eric0241/AIS-Ransomware-Workshop,114,1,1,0,0,1,4,3,2.5,0,0,0,0,0,5.0,2.3774437510817346,0.25,1.1887218755408673
757761245,zeflaviodev,clean-architecture-python,,https://github.com/zeflaviodev/clean-architecture-python,34,0,0,0,0,1,63,4,1.380952380952381,1,1,1,1,4,2.5873015873015874,5.044950560046064,0.119047619047619,3.308099014107391
973286103,nikgalanop,tnt,A small library for representing layered ML architectures bundled with a batch GD trainer,https://github.com/nikgalanop/tnt,9,0,0,0,0,1,5,1,1.0,0,0,0,0,0,11.0,22.283610007500023,0.7769230769230769,58.43365213538838
939332397,Sergiu236,PythonGames,"A collection of Python games structured using a layered architecture,  designed for modularity and separation of concerns",https://github.com/Sergiu236/PythonGames,6,0,0,0,0,1,11,2,1.4545454545454546,0,0,0,0,0,8.818181818181818,120.71722834060246,1.9163927859580037,763.0997861959245
79367527,meako689,parselvivevents,collection of scripts to parse and visualize events (real life ones) from various sources,https://github.com/meako689/parselvivevents,7,0,0,0,0,1,7,2,1.8571428571428568,0,0,0,0,0,1.8571428571428568,0.6792696431662099,0.0714285714285714,0.3396348215831049
902415612,Roronoazoro2702,window-shopping-microservices-fastapi,This project demonstrates a microservices architecture using FastAPI and Redis Streams for event-driven communication.,https://github.com/Roronoazoro2702/window-shopping-microservices-fastapi,7,0,0,0,0,1,4,1,3.5,0,0,0,0,0,3.0,11.816165626622604,0.625,11.221804688852169
805873965,Diegosd75,CleanArchitectureSOLID,Repositorio para evaluar la arquitectura limpia,https://github.com/Diegosd75/CleanArchitectureSOLID,22,0,0,0,0,1,34,4,1.3823529411764706,1,1,1,0,3,4.5588235294117645,5.809264713411613,0.2689075630252101,6.674975217686016
955543758,adithya-crypto,Healthcare-Data-ETL-Pipeline,"This project implements a robust Extract-Transform-Load (ETL) pipeline for healthcare appointment data, following the medallion architecture pattern (bronze, silver, gold layers). The pipeline handles raw healthcare data, performs comprehensive data cleaning and normalization, and loads the processed data into a MySQL database.",https://github.com/adithya-crypto/Healthcare-Data-ETL-Pipeline,27,0,0,0,0,1,2,2,8.0,0,0,0,0,0,22.0,428.4966020030027,5.275899912203688,2332.725040846104
746279943,meghanareddy10,CeBAE,"CeBAE (Celestial Bodies Accuracy Enhancement) is a project where my approach focused on refining accuracy. Strategic dropout layers, extended training epochs, and a dynamic learning rate scheduler enhanced the CNN architecture for precise celestial body classification.",https://github.com/meghanareddy10/CeBAE,343,0,0,0,0,1,1,0,4.0,0,0,0,0,0,0.0,33.68825906469125,1.6,53.901214503506
254398083,rharris115-zz,SuspectedSourceInference,"Given a history of contacts, can we identify possible infection events and sources.",https://github.com/rharris115-zz/SuspectedSourceInference,17,0,0,0,0,1,6,1,3.1666666666666665,0,0,0,0,0,5.833333333333333,64.30862456056745,1.452861952861953,190.85834794130676
374372417,vieirinhasantana,python-clean-architecture,,https://github.com/vieirinhasantana/python-clean-architecture,13,0,0,0,0,1,15,5,1.9333333333333331,1,1,1,0,3,3.466666666666667,1.0621045712882782,0.0666666666666666,0.5310522856441391
132489554,freetopos,clean-customer,A rudimentary clean architecture customer registration service,https://github.com/freetopos/clean-customer,4,0,0,0,0,1,6,1,2.0,1,0,0,1,2,10.833333333333334,72.8785425111951,0.9791666666666666,164.52862312223337
973342366,frankdelphin,flask-k8s-microservices-lab,"Un laboratoire pour explorer les architectures MSA avec Flask, Kubernetes, RabbitMQ et K9s.",https://github.com/frankdelphin/flask-k8s-microservices-lab,15,0,0,0,0,1,11,4,3.0,0,0,0,1,1,2.727272727272727,16.756983508541456,0.7937062937062936,40.17731961069367
606737220,SykamRaju,Sykam-Raju-W11_Graded-Assignment,Graded Assignment on Implementing Micro Services,https://github.com/SykamRaju/Sykam-Raju-W11_Graded-Assignment,4351,0,0,0,0,1,4,1,5.5,0,0,0,0,0,2.0,7.290314864682542,0.625,8.558028545942078
811833296,Bkpone,flaskd3,Flask based platform for writing domain driven design applications.,https://github.com/Bkpone/flaskd3,113,0,0,0,4,1,203,5,2.9655172413793105,1,1,0,1,3,12.246305418719212,62.5976715414494,0.8593892427792323,522.5359367854621
950200352,fernandoc-dev,fastlayers,"Template for building APIs with the framework FastAPI, based on a layered architecture.",https://github.com/fernandoc-dev/fastlayers,13,1,1,0,0,1,18,3,3.1666666666666665,1,1,1,1,4,3.6666666666666665,2.868003473223828,0.1666666666666666,3.0189642373330705
599709011,AlexanderFA,susu_microservices,Subject of study: Architecture of distributed computing systems,https://github.com/AlexanderFA/susu_microservices,62,0,0,0,0,1,14,2,3.2142857142857144,0,0,0,0,0,5.785714285714286,31.392266049456516,0.7244124922696351,55.798514293384976
402911178,zhangzx-uiuc,EventKE,Source code for the EMNLP 2021 finding paper: Event-enhanced Knowledge Graph Embeddings,https://github.com/zhangzx-uiuc/EventKE,36,14,14,2,2,1,9,1,5.222222222222222,0,0,0,0,0,50.0,1213.6131083550338,5.590250645877608,14745.588924957388
5832490,robrant,crowded,event driven crowd sourced media (& other buzzwords),https://github.com/robrant/crowded,264,4,4,2,0,2,14,2,0.5714285714285714,0,0,0,0,0,0.2142857142857142,2.610086360268642,0.1071428571428571,3.9151295404029622
711199135,Guilherme-07062002,clean-architecture-analysis,,https://github.com/Guilherme-07062002/clean-architecture-analysis,0,0,0,0,0,1,1,0,4.0,0,0,0,0,0,0.0,13.931568569324174,1.3333333333333333,18.575424759098897
503684808,henseljahja,fastapi-boilerplate,Boilerplate implementing clean architecture,https://github.com/henseljahja/fastapi-boilerplate,27,0,0,0,0,1,20,4,2.3,1,1,1,0,3,0.7,16.753868716611255,0.2016666666666666,18.70660896320748
251566540,kunalkini15,song-hunt-django,A replica of spotify built using microservice architecture with reactJS on the frontend and django rest framework on the backend.,https://github.com/kunalkini15/song-hunt-django,671,1,1,0,4,1,22,2,2.227272727272727,0,0,0,0,0,5.545454545454546,5.652603079708682,0.2445887445887446,6.94271775994294
497505184,mushut,http-test,Idea is to gather event data from different sources and combine them in one place. Coding mostly for learning purposes.,https://github.com/mushut/http-test,6,0,0,0,0,1,2,0,2.5,0,0,0,0,0,12.0,27.753297886058192,0.75,41.62994682908729
482101318,MarcosRibeiroJesus,github-actions-with-aws-sam,"Continuous integration and continuous deployment (CI/CD) is one of the major DevOps components. This allows you to build, test, and deploy your applications rapidly and reliably, while improving quality and reducing time to market.  GitHub is an AWS Partner Network (APN) with the AWS DevOps Competency. GitHub Actions is a GitHub feature that allows you to automate tasks within your software development lifecycle. You can use GitHub Actions to run a CI/CD pipeline to build, test, and deploy software directly from GitHub.  The AWS Serverless Application Model (AWS SAM) is an open-source framework for building serverless applications. It provides shorthand syntax to express functions, APIs, databases, and event source mappings. With a few lines per resource, you can define the application you want and model it using YAML.",https://github.com/MarcosRibeiroJesus/github-actions-with-aws-sam,15,0,0,0,0,1,4,2,1.0,0,0,0,0,0,1.5,6.75,0.25,6.75
646834362,JavadTorabiKh,ProxyDesignPattern,"The Proxy Design Pattern in the User Registration System project demonstrates how to use a proxy as an intermediary to manage user registration processes. This pattern enhances software architecture by providing a layer that can handle security, authentication, and performance optimizations.",https://github.com/JavadTorabiKh/ProxyDesignPattern,22,0,0,0,0,1,3,1,2.0,0,0,0,0,0,12.0,23.15997372571424,0.5,22.36749247535366
917847113,PaoAFK,backend_hexagonal_cqrs,,https://github.com/PaoAFK/backend_hexagonal_cqrs,16,0,0,0,0,0,44,4,1.8863636363636365,1,1,1,1,4,1.8863636363636365,3.197006602281783,0.2064393939393939,2.8625226533280013
957040597,VinoStudio,auth_service,"Microservice for user authentication, authorization based on JWT mechanism with role-based access control. Project implement Event Driven Arhitecture, CQRS and Kafka as message broker. ",https://github.com/VinoStudio/auth_service,466,0,0,0,0,1,123,4,3.2764227642276422,1,1,1,1,4,4.170731707317073,10.614322874546223,0.2446610921725946,20.675431853284767
409698826,jenkem1337,flask-oop-todo-app,i tried write loosely coupled layered architecture todo app software,https://github.com/jenkem1337/flask-oop-todo-app,68,1,1,0,0,1,18,3,2.1666666666666665,1,1,1,0,3,7.166666666666667,18.68372737059624,0.3138227513227513,30.02967216823668
816911655,irnoz,WeatherData,distributed app used for cleaning data of weather sensors using consumer/produser architecture,https://github.com/irnoz/WeatherData,23,0,0,0,0,1,4,1,4.5,0,0,0,0,0,12.5,71.66548623796172,2.015625,448.6848743252243
104123081,mblitherland,flask-microservice-demo,This is a very simple demonstration of a microservice architecture using common Python3 libraries and Docker.,https://github.com/mblitherland/flask-microservice-demo,173,6,6,12,1,2,8,2,1.625,0,0,0,0,0,2.625,3.721804688852168,0.3125,2.830263282196517
785408590,VictorAlexandre1986,API-CLINICA-HOSPITALAR-FLASK,"Api de clinica hospitalar feita em flask , utilizando clean architecture",https://github.com/VictorAlexandre1986/API-CLINICA-HOSPITALAR-FLASK,411,0,0,0,0,1,190,4,3.310526315789473,0,1,1,1,3,5.652631578947369,5.402315031545003,0.1973684210526315,10.798104831355424
419729365,bvujicic,domain-driven-design-user-management,"Showcase od Domain Driven Design approach from scratch to user registration, authentication, various CRUD operations in pure Python. Database and API implemented as add-ons to the core domain code Using SQLAlchemy and FastAPI.",https://github.com/bvujicic/domain-driven-design-user-management,453,2,2,0,10,1,106,4,3.5849056603773586,1,0,1,0,2,11.41509433962264,45.61215952429399,0.4986311932129826,110.46703607116469
277362615,tiagoperesduarte,flask-microservices,This is a very simple demonstration of a microservice architecture using Flask RESTful API with MongoDB and Docker,https://github.com/tiagoperesduarte/flask-microservices,67,0,0,0,4,1,92,4,1.5978260869565215,1,1,0,1,3,3.6739130434782608,9.625144586336528,0.1526794742163801,9.258500490644751
223556821,kenoseni,Grading-Code-Exercises,Creating a platform to grade code exercises using a microservice architecture,https://github.com/kenoseni/Grading-Code-Exercises,345,0,0,0,6,1,25,5,3.84,1,1,1,0,3,4.6,36.0487446795702,0.3771428571428571,55.86678537773918
729649599,douglaschalegre,fastapi-template,"🔨 This is a template that serves as a kickstarter for a back-end API application.  Implemented with FastAPI, Pydantic, SQLAlchemy and Alembic with a layered architecture structure.",https://github.com/douglaschalegre/fastapi-template,156,19,19,0,0,2,55,3,2.872727272727273,1,1,1,1,4,2.309090909090909,12.858326713173089,0.4797852068186996,29.35132757939606
72530304,hanskrupakar,RNN-In-Numpy,This is a converging bottom up implementation of the Recurrent Neural Network architecture with 3 layers and a tanh activation function using only numpy in Python. ,https://github.com/hanskrupakar/RNN-In-Numpy,2,3,3,1,0,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
871768256,tecnosam,scalable-notifications-service,A scalable notifications microservice in python focused on clean architecture. Can be consumed through it's REST API or Kafka message brokers,https://github.com/tecnosam/scalable-notifications-service,10,1,1,0,0,1,16,3,3.125,0,0,1,0,1,3.1875,0.2971804688852168,0.03125,0.1485902344426084
830640349,kavya-r30,GPT-Reimagined,"This presents an implementation of a Generative Pre-trained Transformer (GPT) model, focusing on comparing the performance and effectiveness of Kolmogorov-Arnold Networks (KANs) and traditional multilayer perceptron (MLP) layers within the architecture.",https://github.com/kavya-r30/GPT-Reimagined,5352,3,3,0,0,1,9,1,7.0,0,0,0,0,0,25.444444444444443,767.5703991193184,4.6844170517220025,7920.518710697524
675766660,djuricic1,py_clean_arch_task_manager, Python project exemplifying Clean Architecture principles. ,https://github.com/djuricic1/py_clean_arch_task_manager,94,0,0,0,0,1,36,4,2.25,1,1,0,1,3,3.333333333333333,11.816870123254551,0.1304012345679012,8.603628505153017
928339485,marinrafael09,clean-architecture,,https://github.com/marinrafael09/clean-architecture,5,0,0,0,0,1,6,4,2.1666666666666665,1,0,0,1,2,4.0,5.503513633446985,0.3333333333333333,3.0017568167234927
667536405,guhenriq,clean-python,Sistema simples desenvolvido para prática da Clean Architecture,https://github.com/guhenriq/clean-python,7,0,0,0,0,1,15,3,1.5333333333333334,1,0,0,1,2,3.0,10.180121811059898,0.1214285714285714,5.884851902118312
292102657,victoramsantos,netflix-backend,"Here we implemented a sample of Netflix's backend. We had designed a Domain Driven Architecture using microservices and Kafka. In order to simulate a real scenario, we pick up a real dataset with 1,000 of the most popular movies on IMDB in the last 10 years.",https://github.com/victoramsantos/netflix-backend,1405,18,18,10,0,1,89,4,1.5842696629213484,0,0,0,0,0,3.5842696629213484,1.6080959485632524,0.1303370786516854,1.611755911298152
800606195,Awmirhm,PasswordHashingTraining,This project is a simple educational project in which I used three-layer architecture (MVC).,https://github.com/Awmirhm/PasswordHashingTraining,8548,0,0,0,0,1,13,1,1.3076923076923077,0,0,0,0,0,4.538461538461538,7.073419489477668,0.141025641025641,7.790784276185485
181579266,vilmarschmelzer,django-clean-arch,Clean Architecture em projeto django,https://github.com/vilmarschmelzer/django-clean-arch,11,1,1,0,0,1,29,3,1.7586206896551724,1,0,1,0,2,3.793103448275862,3.7944707974701903,0.1988505747126437,8.43432784523012
230804180,regCore,regCore,Open source complete event registration and management system,https://github.com/regCore/regCore,47,0,0,0,8,1,16,2,1.8125,0,0,0,0,0,2.3125,3.766342704642491,0.1701388888888889,7.857839647236551
444962769,lukasz-duda,event-sourcing,,https://github.com/lukasz-duda/event-sourcing,66,0,0,0,0,1,18,2,3.6666666666666665,0,0,1,0,1,12.88888888888889,17.46191945368334,0.662004662004662,42.21868412121541
206044966,vwt-digital,event-sourcing-consumers,"Event sourcing helpers, consuming side",https://github.com/vwt-digital/event-sourcing-consumers,162,0,0,0,5,2,6,3,5.5,0,0,0,0,0,26.166666666666668,355.79497570201033,3.731698139025725,3226.845697287335
704938769,sashkinaaa,gpssGUI,This GPSS Simulation Tool proposes an open-source version of the well-known discrete event simulator,https://github.com/sashkinaaa/gpssGUI,46,0,0,0,0,1,16,1,2.4375,0,0,0,0,0,22.8125,284.8695672693852,3.556694071817184,2468.973864580562
391998683,andreccgoncalves,python_project,"Assignment Introduction A company has come to you as a developer and asked you to develop an application using Python. You have been asked to design and implement a system which will allow editors in a news room keep track of different world events as they occur. In other words, a real time news feed. In order to be able to access real time data, you will need to connect to external API to request news. Specific Requirements • The application should have a welcome screen that displays the current date and time. • The application should be able to display Business news, Sports News and Financial News – Each of these should be gathered from a JSON News Feed https://newsapi.org • All of the data that is collected should be parsed to extract content, leaving only the date/time and brief description of the news story. Raw JSON should not be printed to the user. • Whenever any JSON service is queried, all the data should be stored locally inside of an array which will later be used to present the data to the user. This reduces the number of requests which are made on the services. • There must be button for the user to save automatically a specific headline to be retrieved later, this way the user can keep record of the news of their interest. • Finally, you will have to produce a short document that justifies the design (graphic and logic) decisions that you took to complete the assignment. Python Programming Page 2 of 2 Notes • The main point of this assignment is that you apply all the tools that we’ll see in class. You will have to make decisions in the process about the type of functionalities that you want to include in your project: o Graphic User Interface vs. Command Line Interface. o Login functionality. o Use of databases or text based files. • Comment your code! Deliverables • Upload a single zip file which contains: o Source code for your application o Document containing screenshots of your application in action, and justification of your chosen technology and design decisions.",https://github.com/andreccgoncalves/python_project,4,0,0,0,0,1,1,0,6.0,0,0,0,0,0,10.0,27.0,1.0,27.0
894495358,nisharathod231,EDA-using-Kafka,"This project implements an event-driven architecture for certificate verification using Apache Kafka. The system enables scalable, loosely coupled microservices communication for processing certificate verification requests.",https://github.com/nisharathod231/EDA-using-Kafka,5617,0,0,0,0,1,10,0,2.2,0,0,0,0,0,3.6,16.448725242960013,0.75,19.42797600664221
445495318,joshikanan,flask-clean-architecture,,https://github.com/joshikanan/flask-clean-architecture,16,0,0,0,0,1,31,4,1.967741935483871,1,1,0,1,3,1.967741935483871,1.3593214673360523,0.0967741935483871,1.7872138062550975
930129698,Banyango,tidygen,A tiny CLI tool for clean architecture project scaffolds in python,https://github.com/Banyango/tidygen,7,0,0,0,0,1,12,3,1.9166666666666667,1,0,0,0,1,1.3333333333333333,20.650839733531942,0.2326007326007325,15.256575374616997
966943868,Shivani-Sathe,K8s-scalable-Microservice-Architecture-Project,K8s scalable Microservice Architecture Project,https://github.com/Shivani-Sathe/K8s-scalable-Microservice-Architecture-Project,1061,1,1,0,0,1,3,1,1.0,0,0,0,0,0,1.0,4.754887502163469,0.5,2.3774437510817346
56482463,vklap,demo-ddd-python,Demo Domain Driven Design Application with Python,https://github.com/vklap/demo-ddd-python,26,8,8,0,0,1,31,5,1.7741935483870968,1,1,1,1,4,2.096774193548387,5.725000559429566,0.2,5.284139693974061
674002165,TijmenSimons,FastAPI-munchie-template,A Python Fastapi layered architecture template.,https://github.com/TijmenSimons/FastAPI-munchie-template,107,1,1,0,0,1,103,3,2.737864077669903,1,1,1,0,3,5.058252427184466,17.513043117783063,0.424771861423306,33.14014762656564
907649358,aalvaropc,init-project-cqrs-fastapi,,https://github.com/aalvaropc/init-project-cqrs-fastapi,156,0,0,0,0,1,59,5,2.457627118644068,1,1,0,1,3,3.6779661016949152,6.61602855609923,0.2898708635996771,11.89172189365849
525984250,ChampIsMe,clean-architecture-flask,Showcasing Clean Architecture with Flask using Python,https://github.com/ChampIsMe/clean-architecture-flask,153,0,0,0,0,1,34,3,2.3529411764705883,1,1,0,0,2,6.147058823529412,34.46758002390788,0.5390866873065017,47.48642999559013
921783597,santanna37,arquitetura_limpa,estudo sobre Clean Architecture feito em python,https://github.com/santanna37/arquitetura_limpa,21,0,0,0,0,1,57,4,1.3157894736842106,1,0,1,1,3,2.1403508771929824,1.204047759212609,0.0789473684210526,1.1512312521890835
53090590,rzanluchi,DDD-something,This is a research project to learn about DDD using some tutorials like http://cqrs.nu/tutorial/cs/01-design,https://github.com/rzanluchi/DDD-something,19,2,2,0,0,1,19,2,0.8947368421052632,1,0,0,0,1,12.263157894736842,41.37696985569725,0.8501334858886347,144.60525672087033
497399652,Prajwalmithun,ecom-microservice,"This is an attempt to create an ecom app by applying microservice architecture using FastAPI, React, Redis etc",https://github.com/Prajwalmithun/ecom-microservice,6,0,0,0,3,1,4,2,6.25,0,0,0,0,0,4.75,11.816165626622604,0.625,11.221804688852169
866042169,hhee4455,TORO_Server,"django - study, clean architecture 적용해보기",https://github.com/hhee4455/TORO_Server,178,0,0,0,1,1,54,5,4.2407407407407405,1,1,1,1,4,4.518518518518518,5.22548597579655,0.2307332585110362,10.04021251325992
545393444,fahadfiaz,UdaConnect,Refactoring UdaConnect application monolith architecture using a microservice architecture and implementing message passing strategies to improve its design.,https://github.com/fahadfiaz/UdaConnect,531,0,0,0,0,1,36,4,3.8055555555555554,0,0,1,0,1,3.888888888888889,6.006930620379869,0.3670634920634921,11.068874692753909
775269474,mdark1001,rentomatic-py-clean-architecture,,https://github.com/mdark1001/rentomatic-py-clean-architecture,28,0,0,0,0,1,40,2,1.8,1,1,1,0,3,5.85,36.26799908754624,0.423439027370479,45.01062679702533
601855494,warzinnn,phone-recharges,"Backend project - API used for phone recharges. The user can buy telephone credits for his phone by informing his phone number. Created utilizing Python, Flask, TDD, Clean Architecture, etc.",https://github.com/warzinnn/phone-recharges,146,1,1,0,0,1,97,4,3.0721649484536084,1,1,1,1,4,10.268041237113405,36.982773938707695,0.5127937516604093,44.9618269148681
824084525,il-gen,flask-hexagonal,This repo about building a Flask Application with Hexagonal Software Architecture,https://github.com/il-gen/flask-hexagonal,9,3,3,1,0,1,13,2,2.769230769230769,1,0,0,1,2,4.6923076923076925,13.253286427957374,0.3137651821862348,18.76854785147641
565606754,Tolu-Orina,TalentPlusWeek1,simple microservice architecture,https://github.com/Tolu-Orina/TalentPlusWeek1,4,0,0,0,0,1,2,2,2.0,0,0,0,0,0,1.0,2.3774437510817346,0.25,1.1887218755408673
508786272,dznwtf,Tela-Hypesquad-Events-API,"A mesma source das telas: Fyren, nikki e as outras",https://github.com/dznwtf/Tela-Hypesquad-Events-API,7456,1,1,0,0,1,1,1,6.0,0,0,1,0,1,22.0,435.6270750562503,4.439024390243903,1933.7592112253064
117298419,dogoncouch,LogESP,Open Source SIEM (Security Information and Event Management system).,https://github.com/dogoncouch/LogESP,2457,209,209,67,4,15,85,4,2.5176470588235293,0,0,0,0,0,11.117647058823527,105.8152408720364,0.6306621686758864,903.2672596483256
220813877,t-tiger,Python-CleanArchitecture-Example,Sample Python(Flask) web application with Clean Architecture.,https://github.com/t-tiger/Python-CleanArchitecture-Example,7,128,128,22,1,4,15,3,2.6666666666666665,1,1,1,0,3,3.2,0.0,0.0,0.0
968818190,klishinoleg,lare,"A new version of Lazy Reader, rebuilt with a clean architecture approach. The project features strict layer separation, event-driven communication, and scalable modular design for future growth.",https://github.com/klishinoleg/lare,331,0,0,0,0,1,322,5,4.1770186335403725,1,1,1,1,4,5.170807453416149,15.676938928025926,0.4699512503496648,40.09625795336466
383348118,thestupendous,eshop-app,"e commerce app, based on microservice architecture",https://github.com/thestupendous/eshop-app,5,1,1,0,0,1,1,1,3.0,0,0,0,0,0,7.0,178.81353752812512,3.421052631578948,611.7305231225333
384022289,sonusuman202,Facial-Emotion-Recognition-Using-CNN,"The steps of the method are as follows. In the first phase, the method takes the input image and it checks for face region in the image. If the face is detected, then it applies image processing techniques to extract features and provides it to next step for training the neural network.   Facial features extraction is a process of locating specific regions, point, landmarks or curves in 2D or 3D image. This is actually done with the help of OpenCV library which consists haar cascade classifier and pre-trained facial landmark predictor, haar features helps to identify the features such as lips, eyes, eyebrows, nose etc.   CNN architectures are used for facial expression recognition, the input images considered are of size 48x48 pixels. Architectures are composed of convolution layers, pooling layers, and fully connected layers. After each convolutional layer and fully connected layer (except the output layer), the activation function is applied. The output layer consists of 7 neurons corresponding to 7 emotional labels: angry, disgust, fear, happy, sad, surprise and neutral.      We have used two different datasets for different stages. This model is first fitted to a training set which is made from collecting various examples that are used to match the limitations of the model. The fitted model will normally use to predict the responses of the second dataset i.e., validation dataset observations. The validation dataset offers an  assessment of a model that is fit for the training dataset. For regularization we may use early stopping of validation of datasets. This dataset comprises 35,887 face crops with 28,821 training and 7066 validation photos. Images are resolutions of 48x48 pixels, and grayscale. This dataset 's human accuracy was about 70%.",https://github.com/sonusuman202/Facial-Emotion-Recognition-Using-CNN,161,2,2,0,0,2,2,0,7.5,0,0,0,0,0,0.0,64.84412953234562,2.618181818181818,201.49606179720757
541265217,ShahriyarR,hexagonal-ticket,The simple Ticket with Hexagonal Architecture + Flask + Dependency Injector,https://github.com/ShahriyarR/hexagonal-ticket,6,8,8,1,0,1,17,4,2.235294117647059,1,0,1,1,3,5.235294117647059,11.311013238433269,0.2745098039215686,10.877045958957872
527570522,baolanlequang,clean_architecture_in_python,Tutorial project for Clean Architecture in Python Flask,https://github.com/baolanlequang/clean_architecture_in_python,23,0,0,0,0,1,36,3,2.25,1,1,1,0,3,7.722222222222222,47.73991973925413,0.6860367892976588,64.99862479588488
282976720,AnirudhHosur,Severstal-Steel-Defect-Detection,"A basic CNN with simple a architecture with 2 constitutional layers, one dense hidden layer and an output layer. ",https://github.com/AnirudhHosur/Severstal-Steel-Defect-Detection,7508,0,0,0,0,0,2,0,13.0,0,0,0,0,0,0.0,60.55505675862256,2.2222222222222223,156.39350991571465
671377350,BANDI-SREEKANTH,microservices-k8s-main,A small microservice architecture deployed using k8s.,https://github.com/BANDI-SREEKANTH/microservices-k8s-main,2,0,0,0,0,1,1,2,4.0,0,0,0,0,0,9.0,4.754887502163469,0.5,2.3774437510817346
864728565,AsmitaJha,microservices-architecture-for-2-apps-in-2-different-projects,microservices architecture for 2 apps in 2 different projects,https://github.com/AsmitaJha/microservices-architecture-for-2-apps-in-2-different-projects,9,0,0,0,0,1,14,2,1.7142857142857142,0,0,0,0,0,0.7142857142857143,1.0189044647493148,0.1071428571428571,0.5094522323746574
908219410,Asritha0204,FirstExp,"This project demonstrates the implementation of a clean architecture by separating data management, data fetching, and presentation logic",https://github.com/Asritha0204/FirstExp,5821,0,0,0,0,1,3,1,1.3333333333333333,0,0,0,0,0,1.0,1.5849625007211563,0.1666666666666666,0.7924812503605781
880195829,Vashkatsi,deply,Keep your python architecture clean.,https://github.com/Vashkatsi/deply,219,154,154,3,2,3,57,3,4.894736842105263,1,0,0,0,1,15.052631578947368,71.05262145102938,1.2509536978477356,202.8825606068086
481243637,filipgeppert,data_linking_exercise,"Imagine that a company needs to link different kinds of data, such as event and person lists.  Data comes from different sources and it is not always clear how to link it. Furthermore, records can be inaccurate with missing details and misspellings, and it's not always obvious how best to handle this.",https://github.com/filipgeppert/data_linking_exercise,525,0,0,0,0,1,2,1,2.5,0,0,0,0,0,2.0,27.291904462736955,0.875,32.33179776510989
616419236,mopa,fastapi-todo-cqrs,Simple ToDo Api with FastAPI using CQRS for educational purposes,https://github.com/mopa/fastapi-todo-cqrs,25,0,0,0,0,1,31,3,2.4516129032258065,1,0,1,0,2,1.6774193548387095,2.578978609744329,0.2204301075268817,5.737138459565535
884777798,themafto,aws-pet-project,"Scalable, secure AWS microservice architecture using ECS, ALB, RDS, and ElastiCache. ECR manages deployments, and Cloud Map/Route53 handle service discovery within a secure VPC.",https://github.com/themafto/aws-pet-project,135,2,2,0,0,1,18,2,2.555555555555556,1,0,0,0,1,0.8888888888888888,4.620111964470926,0.2361111111111111,4.378074771874161
441096996,Mahi,EasyEvents,Advanced events package for Source.Python ,https://github.com/Mahi/EasyEvents,5,0,0,0,0,1,7,5,3.4285714285714284,0,0,0,0,0,7.714285714285714,21.24414551690897,0.8131868131868132,43.6836540889913
188611419,tu-github,telegram_info_aggregation_bot,"Using this bot you can aggregate events / info / other in your community, which helps eliminate/lower transactional costs attributed to dissemenation of information from several independent information sources. For instance, it might work great if you launch one at your university to make it easy for students to get to know what's happening there without the need to subscribe to multiple accounts, etc. So they will have all event alerts aggregated in the same channel with transparent notification settings and some personalization. In this implementation you will be able to personalize your subscribitions in the following dimensions: location, theme, organization.  Basically this bot connects event organizers and subscribers on the same platform on Telegram.",https://github.com/tu-github/telegram_info_aggregation_bot,60,0,0,0,0,0,15,2,5.466666666666667,0,0,0,0,0,49.6,2585.250223331117,2.998804959505756,14704.719531330891
358319290,cdddg,py-clean-arch,"A Python implementation of Clean Architecture, inspired by Uncle Bob's book",https://github.com/cdddg/py-clean-arch,3457,106,106,17,1,2,67,4,2.985074626865672,1,1,0,1,3,6.626865671641791,26.830250852897777,0.4923248193412387,65.21303168322085
949690249,gusdev-r,gds-catalog-microsservice,"Catalog Microservice project designed using DDD (Domain-Driven Design), SOLID principles, and Clean Architecture. It provides a structured and scalable solution for managing catalogs.",https://github.com/gusdev-r/gds-catalog-microsservice,20,0,0,0,0,1,23,5,2.0,1,1,0,1,3,4.869565217391305,9.643848034667371,0.2146739130434782,35.17983890842718
949682054,hPurnell,clean_architecture_litestar_faststream,,https://github.com/hPurnell/clean_architecture_litestar_faststream,50,1,1,0,0,1,54,4,2.7962962962962963,1,0,1,0,2,5.074074074074074,11.661332318391556,0.2731481481481481,12.70583848602935
272572140,teamhide,fastapi-layered-architecture,FastAPI Layered Architecture,https://github.com/teamhide/fastapi-layered-architecture,201,316,316,30,2,3,50,4,2.48,1,0,1,0,2,3.04,2.513263250706734,0.1733333333333333,2.3657143756850987
884304792,omarkhalled,Medallion-Architecture-on-Azure-Databricks," Designed and implemented a medallion architecture on Azure Databricks, using Unity Catalog for data governance and  Azure Data Lake Gen2 for storage. Created schemas with Spark SQL, ingested data from ADLS into the Bronze layer,  and transformed it into Silver and Gold layers to improve data quality and accessibility for downstream use cases.",https://github.com/omarkhalled/Medallion-Architecture-on-Azure-Databricks,6323,2,2,0,0,1,5,2,2.2,0,0,0,0,0,4.8,45.683682105914144,0.5,44.29052524898172
756123541,raywu60kg,python-clean-architecture,,https://github.com/raywu60kg/python-clean-architecture,253,1,1,0,0,1,45,5,4.444444444444445,1,1,0,1,3,5.511111111111111,13.332696615149,0.5025190631808278,29.75289031792076
208138785,Enforcer,clean-architecture,Example project showing off clean/hexagonal architecture concepts in Python,https://github.com/Enforcer/clean-architecture,1163,540,540,54,19,10,141,6,3.5531914893617023,1,1,1,1,4,5.070921985815603,17.651360171242285,0.3489709088791274,45.77381995814447
975883978,JaekwonHa,book-FastAPI-With-Clean-Architecture,,https://github.com/JaekwonHa/book-FastAPI-With-Clean-Architecture,63,0,0,0,0,1,4,3,2.5,1,1,0,0,2,2.5,0.0,0.0,0.0
830455649,Sachi-CloudAnalogy,Microservices_architecture,,https://github.com/Sachi-CloudAnalogy/Microservices_architecture,8223,0,0,1,0,1,2,3,1.5,0,0,0,0,0,4.0,30.130741637139927,1.0,42.81866870462815
901563816,Youssef-Sabri,cse363-cloud-computing-Cloud_warriors-Multi-Lang-Microservices,"This project is a cloud-native platform designed for real-time translation and text summarization. It leverages a scalable architecture based on microservices, asynchronous message queues, and modern frontend technologies to deliver high performance and seamless user experience.",https://github.com/Youssef-Sabri/cse363-cloud-computing-Cloud_warriors-Multi-Lang-Microservices,12086,0,0,0,0,1,10,12,4.4,1,1,1,1,4,7.2,20.344066363021007,0.95,27.16677323885033
526825380,treinaweb,treinaweb-clean-architecture-python-example,,https://github.com/treinaweb/treinaweb-clean-architecture-python-example,158,0,0,1,4,2,26,3,2.3076923076923075,1,1,1,1,4,6.6923076923076925,19.9952304146828,0.407532638301869,17.420635448172217
759273959,PheFreire,Vigenere-Cypher-Microsservice,Vigenere Cypher Microsservice API in Hexagonal Architecture,https://github.com/PheFreire/Vigenere-Cypher-Microsservice,16,1,1,0,0,1,28,4,2.2857142857142856,1,1,1,1,4,2.571428571428572,1.0189044647493148,0.0535714285714285,1.528356697123972
426423814,emmanuel-carreira,clean-architecture-python,Alura course about Clean Architecture,https://github.com/emmanuel-carreira/clean-architecture-python,39,0,0,0,0,1,54,4,1.5,1,1,0,1,3,3.1666666666666665,2.4839599541177004,0.1604938271604938,3.397892940271102
788586243,Resheba,CQRS-fastapi,CQRS & Mediator pattern template,https://github.com/Resheba/CQRS-fastapi,135,7,7,2,0,1,108,4,2.5277777777777777,1,0,0,1,2,4.0,7.206498220008904,0.2473438084549195,7.246540188106621
32853539,laco,python-hexconnector,Python Hexagonal Architecture with Dynamic Module Loading,https://github.com/laco/python-hexconnector,148,2,2,0,0,2,4,1,1.25,0,0,0,0,0,8.0,58.05341402627204,1.28125,196.1504448496148
790174875,amit-kumar-shaw,video2mp3,"Microservice architecture based Video to Mp3 converter Python, Kubernetes, RabbitMQ, MongoDB, mySQL, and Docker.",https://github.com/amit-kumar-shaw/video2mp3,21,0,0,0,0,1,14,4,3.2142857142857144,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
448088205,EduardoFranco82,API-mini-e-commerce-para-o-Clean-Architecture,,https://github.com/EduardoFranco82/API-mini-e-commerce-para-o-Clean-Architecture,21,0,0,0,0,1,58,4,3.086206896551724,1,1,1,1,4,1.793103448275862,1.1430849421043126,0.0754310344827586,1.5050867236232606
812653848,wechulimaven,django_microservices_architecture_demo,,https://github.com/wechulimaven/django_microservices_architecture_demo,527,2,2,1,0,1,91,4,2.56043956043956,0,1,0,1,2,3.67032967032967,4.589370513026207,0.2069597069597069,6.086744921486715
966200324,upNorthDev,LayeredPy,LayeredPy is a Python library for clean layered architecture with service-oriented programming and built-in dependency injection (DI).,https://github.com/upNorthDev/LayeredPy,14,0,0,0,0,1,16,1,1.1875,0,0,1,0,1,3.75,7.513312463035287,0.3675595238095238,10.940066416958508
694121555,Franklyne-kibet,Real-time-Financial-Market,"This data engineering project aims to build a streaming data pipeline using Finnhub's real-time financial market data API. The architecture of this project primarily comprises five layers- Data Ingestion, Message broker, Stream processing, Serving database, and Visualization. ",https://github.com/Franklyne-kibet/Real-time-Financial-Market,19,1,1,0,0,1,3,3,4.666666666666667,0,0,0,0,0,6.666666666666667,11.591989767615123,0.5,5.795994883807563
566877098,AkkiYacine,Scrapper_Youtube,TP Noté Architecture Microservices,https://github.com/AkkiYacine/Scrapper_Youtube,9,0,0,0,0,1,3,0,3.0,0,0,0,0,0,10.666666666666666,122.7999524261508,0.9396825396825398,102.39956117280065
59281582,CrowdTruth,Events-in-Text,Text Events Detection using crowd-sourced annotation data ,https://github.com/CrowdTruth/Events-in-Text,12362,4,4,2,0,13,10,2,0.9,0,0,0,0,0,15.2,236.40719924866085,1.030595930232558,1264.5511679731137
973228817,COD332,clean_architecture,,https://github.com/COD332/clean_architecture,20,0,0,0,0,1,41,7,3.3902439024390243,1,1,1,1,4,5.052631578947368,21.57225590465099,0.7702210070631123,79.3216128746228
842244413,Rested,event-sourcing-feature-store,code accompanying a blog on interaction between event sourcing and feature stores.,https://github.com/Rested/event-sourcing-feature-store,5,0,0,0,0,1,8,1,3.25,0,0,0,0,0,8.625,20.479776937730097,0.75,52.05327381759791
718439795,alvesdm,fastapi-clean-architecture,A clean-architecture like rest api in python with FastAPI and Mongo,https://github.com/alvesdm/fastapi-clean-architecture,8,0,0,0,0,1,13,4,3.1538461538461537,1,1,1,1,4,4.153846153846154,1.4630423083579904,0.1538461538461538,0.7315211541789952
858401591,alya1007,chatter-room,"Chat platform with microservices architecture, with a lot of features (service discovery, gateway, load balancing, cache etc).",https://github.com/alya1007/chatter-room,462,1,1,0,0,1,18,3,4.722222222222222,1,1,0,1,3,9.5,34.57084507630342,0.875,83.8807657273488
663416563,Vaishnavi-N24,Cloud-Computing---Monolithic-Application,"A monolithic application is an integrated, indivisible entity. Conversely, a microservices architecture disassembles it into multiple self-contained, smaller units. To illustrate, we have disintegrated a calculator's monolithic architecture into several microservices, like addition, subtraction, division, etc. These microservices employ restful API",https://github.com/Vaishnavi-N24/Cloud-Computing---Monolithic-Application,55,0,0,0,0,1,8,4,2.125,0,0,0,0,0,4.125,25.477543295845795,0.9125,23.1047038557782
639073800,aoc81,eyesonrussia,"This Python scripts collects the events that have been added to the Russia-Ukraine Monitor Map made by Centre for Information Resilience (CIR), Bellingcat, Conflict Intelligence Team and the wider open source community.",https://github.com/aoc81/eyesonrussia,51,6,6,0,0,1,1,0,7.0,0,0,0,0,0,2.0,551.0323889115764,7.903225806451613,4354.933396236652
743512329,dilaraakocoglu,CQRS-Python,,https://github.com/dilaraakocoglu/CQRS-Python,14,1,1,0,0,1,10,1,4.7,0,0,1,0,1,3.8,2.8529325012980813,0.15,4.279398751947122
118312424,kotgaf,UrlShortnerDemo,Demo project with Django. Layered architecture pattern. Just simple demo for employer.  ,https://github.com/kotgaf/UrlShortnerDemo,10,0,0,0,0,1,19,3,1.631578947368421,1,0,0,0,1,2.263157894736842,3.567156279097125,0.2631578947368421,6.994104455338037
45849508,alextucker,django_event_sourcing_reference,A reference implementation of using Event Sourcing in Django,https://github.com/alextucker/django_event_sourcing_reference,0,1,1,0,1,1,11,3,1.0909090909090908,0,0,0,0,0,0.0,0.432262500196679,0.0454545454545454,0.2161312500983395
454472093,marcos-lima-stormgroup,ca_live_branas_python,Implementação de Clean Architecture em python seguindo a live do Branas em JS.,https://github.com/marcos-lima-stormgroup/ca_live_branas_python,20,1,1,0,0,2,30,3,1.7666666666666666,1,1,1,1,4,2.3666666666666667,1.9803319318146293,0.15,1.3644799555149951
214881564,MagalixCorp,jobsite,Simple microservices application written in Python to show the difference between event-driven and request/response architectures,https://github.com/MagalixCorp/jobsite,14,1,1,3,0,2,6,2,3.1666666666666665,0,0,0,0,0,1.1666666666666667,8.462406251802891,0.5833333333333334,6.4812031259014455
86518465,shudgston,clean-architecture-python,A trivial example of what the clean architecture might look like in Python,https://github.com/shudgston/clean-architecture-python,70,10,10,3,0,0,40,3,3.7,0,1,0,0,1,13.85,11.627831061096868,0.4138157894736842,31.30245256131061
529975310,sergiomauz,Clean-Architecture-Python-FastApi,,https://github.com/sergiomauz/Clean-Architecture-Python-FastApi,38,0,0,0,0,1,73,7,2.5616438356164384,1,1,1,1,4,2.547945205479452,8.23242689984653,0.3313310380191927,30.08364072876724
972846072,allgoll8,library-management-system,"Library OOP project in Python. Book management, lending, returning, clean code architecture.",https://github.com/allgoll8/library-management-system,2,1,1,0,0,1,3,0,1.0,0,0,0,0,0,6.333333333333333,24.42909203306678,1.277777777777778,76.93957969151266
400793456,VedantYadav,testing-devops-microservices,testing CI pipelines in microservice architecture,https://github.com/VedantYadav/testing-devops-microservices,6,0,0,0,0,1,2,1,2.0,0,0,0,0,0,1.0,4.754887502163469,0.5,2.3774437510817346
920195318,Chronos-Network-Simulator,ChronosSim,"A highly configurable, open-source, discrete-event simulator for Delay-Tolerant Networks (DTNs)",https://github.com/Chronos-Network-Simulator/ChronosSim,1373,4,4,1,1,2,77,4,3.727272727272727,0,0,0,0,0,12.03896103896104,109.46016898376024,1.4235009954277165,695.4918280472951
341220797,Shakedlewkoz,BGU-Systems-Programming-DB-management,"Management of the database of a vaccine distribution center, using SQL and persistent layer architecture.",https://github.com/Shakedlewkoz/BGU-Systems-Programming-DB-management,228,0,0,0,0,1,5,2,3.0,0,0,0,0,0,11.8,85.37568759753655,0.9787878787878788,170.2428521755323
159855024,priyanshugandhi,SyslogManager,"Syslog is a way for network devices to send event messages to a logging server – usually known as a Syslog server. The Syslog protocol is supported by a wide range of devices and can be used to log different types of events. The Assignment is to collect Syslog from any syslog source, retrieve the Events from the Syslog & display the events.",https://github.com/priyanshugandhi/SyslogManager,382,0,0,0,0,0,4,1,6.0,0,0,0,0,0,23.5,153.27630785524823,3.3107517482517483,633.754036235482
935431964,CodeWithRahul1,Django-Microservices,Microservices Architecture for User & Job Management,https://github.com/CodeWithRahul1/Django-Microservices,24,0,0,0,0,1,33,3,2.0,0,0,0,0,0,1.303030303030303,0.5763500002622387,0.0606060606060606,0.2881750001311193
516845690,Simuschlatz,Digit-Recognizer,An interactive digit recognizer made of a three-layer CNN architecture without any DL framework,https://github.com/Simuschlatz/Digit-Recognizer,9134,3,3,0,0,1,2,1,3.0,0,0,0,0,0,17.0,611.0048288665411,6.936604429005644,4383.85933904089
132382602,YcMcGong,SmileyAppBackend,"Third version of SmileyAppBackend, completely migrated to AWS and microservices architecture.",https://github.com/YcMcGong/SmileyAppBackend,106,2,2,1,0,2,55,3,1.945454545454545,0,0,0,0,0,4.909090909090909,14.35166352066142,0.2678201368523949,15.617725057717724
883376951,Mr-DooSun,fastapi_layered_architecture,fastapi layerd architecture,https://github.com/Mr-DooSun/fastapi_layered_architecture,273,2,2,1,0,1,63,5,1.6666666666666667,1,1,1,1,4,2.3492063492063493,4.433630116886353,0.1893424036281179,14.970659917636551
922537606,MKR-24,Microservices_using_Python,Microservices Architecture Implemented using Python,https://github.com/MKR-24/Microservices_using_Python,22,0,0,0,0,1,14,3,3.071428571428572,0,0,0,1,1,2.857142857142857,15.138974074573635,0.7148962148962149,38.38830272659734
684355935,rubythalib33,Implementation-of-Microservices-and-Clean-Architecture-using-kubernetes-and-kafka,,https://github.com/rubythalib33/Implementation-of-Microservices-and-Clean-Architecture-using-kubernetes-and-kafka,20,2,2,0,0,1,6,1,7.0,0,0,1,0,1,11.666666666666666,49.36790600945948,1.488095238095238,80.52554021220698
833491873,eduardblbulyan,Common-Microservice-Architecture,Try to build microservice,https://github.com/eduardblbulyan/Common-Microservice-Architecture,16,0,0,0,0,1,14,2,1.6428571428571428,0,0,0,0,0,0.2857142857142857,0.3396348215831049,0.0357142857142857,0.1698174107915524
483478426,rogeriopaulos,ccca_ecommerce,Projeto do curso Clean Code e Clean Architecture - Turma 6,https://github.com/rogeriopaulos/ccca_ecommerce,102,0,0,0,0,1,47,4,2.9574468085106385,0,0,0,1,1,6.127659574468085,18.317181817645576,0.6589205121120014,37.796069694314944
917201193,clavay,PyScada-SSE,Server-Sent-Event extension for PyScada a Python and Django based Open Source SCADA System,https://github.com/clavay/PyScada-SSE,52,0,0,0,0,1,17,6,4.176470588235294,0,0,0,0,0,7.235294117647059,107.16876784436282,1.5943472022955525,715.8680903030039
434613276,jmasonlee,birthday_kata,A repository for learning about Hexagonal Architecture,https://github.com/jmasonlee/birthday_kata,7,0,0,0,0,1,4,1,1.0,0,0,0,0,0,9.0,16.137398302534,0.5,23.01737557826013
465652638,puneet20j,django-clean-architecture,,https://github.com/puneet20j/django-clean-architecture,276,0,0,0,0,0,27,3,3.185185185185185,0,1,1,0,2,3.185185185185185,1.3022968652028395,0.0833333333333333,0.8446424405087
895418255,yordi68,student-registration-system,"A distributed system built with FastAPI, Flask, and Node.js using a microservices architecture. Includes Teacher, Student, Course Registration, and Authentication services, communicating via RabbitMQ. Uses MongoDB Atlas for scalable data storage and Nginx as a reverse proxy. ",https://github.com/yordi68/student-registration-system,3131,0,0,2,2,3,11,3,3.1818181818181817,1,0,1,0,2,4.454545454545454,14.42365015874063,0.4545454545454545,23.1944016494586
160635509,swakita14,Microservice-Architecture,This is for CS407 Microservice Architecture. Microservices is a major architectural pattern in the software industry.,https://github.com/swakita14/Microservice-Architecture,2706,0,0,0,0,0,68,4,3.4705882352941178,0,0,0,0,0,9.985294117647058,83.80249844093944,0.8994380272609946,268.4279725629687
521278714,RioAtHome,ShowReviewApi,A simple API built using django framework using microservices architecture,https://github.com/RioAtHome/ShowReviewApi,78,0,0,0,0,1,59,4,2.389830508474576,0,0,0,1,1,4.813559322033898,32.809411183420494,0.4209995327301304,122.8843068824526
663216911,jacksonsr451,youtube-music-service,"O YouTube Music Service é um microserviço em Python com o framework Flask que permite pesquisar músicas no YouTube e obter os resultados encontrados. Com uma arquitetura limpa (clean architecture), o projeto oferece uma separação clara das responsabilidades, facilitando a manutenção e a testabilidade do código. O serviço utiliza a API do YouTube pa",https://github.com/jacksonsr451/youtube-music-service,9,0,0,0,0,1,15,2,1.4666666666666666,1,1,1,0,3,2.1333333333333333,0.6339850002884625,0.0666666666666666,0.3169925001442312
960400349,the-y9,FastAPI-Authentication-Starter-Pack,FastAPI starter for handling user signup and login using Pydantic models and clean service-based architecture.,https://github.com/the-y9/FastAPI-Authentication-Starter-Pack,23,0,0,0,0,1,7,2,1.7142857142857142,0,1,1,0,2,1.5714285714285714,39.29967857760992,0.9523809523809524,261.9978571840661
590922192,troshujin,FastAPI-Template,A layer architecture template for FastAPI,https://github.com/troshujin/FastAPI-Template,64,0,0,0,0,1,81,3,2.382716049382716,1,1,1,0,3,5.074074074074074,24.674160306976898,0.3321393989694644,59.11395331161015
341597864,ThibautBernard,reminder_google_event_discord,Reminder google calendar event discord bot and open source friendly ,https://github.com/ThibautBernard/reminder_google_event_discord,98,4,4,0,2,1,8,2,4.125,1,0,0,0,1,11.5,47.44842833057554,1.338815789473684,204.7705981469873
834698042,Mohana777,Python-Microservices-Full-Course---Event-Driven-Architecture,Python,https://github.com/Mohana777/Python-Microservices-Full-Course---Event-Driven-Architecture,22,0,0,0,0,1,24,5,2.375,0,0,0,0,0,1.375,1.663204285943339,0.1145833333333333,1.0492829018673595
634537093,KSRAO-2002,Microservices-communication-using-RabbitMQ,"This is a microservices architecture project that uses RabbitMQ for inter-service communication. It consists of four microservices and is implemented in Python, with each service deployed on Docker. The project includes CRUD operations on a Student Management Database and can be tested using Postman or cURL.",https://github.com/KSRAO-2002/Microservices-communication-using-RabbitMQ,5,1,1,1,0,1,5,1,5.6,0,0,0,0,0,2.0,10.378294855911893,0.2222222222222222,11.531438728790992
222349483,kivo360,jamboree,Fast event-sourcing library using Redis and Mongo.,https://github.com/kivo360/jamboree,2125,81,81,0,1,2,113,5,4.84070796460177,1,0,1,0,2,19.353982300884955,112.6369692774885,1.2502485787104036,551.7566770511063
250846386,thepabloaguilar,clean-architecture-python,,https://github.com/thepabloaguilar/clean-architecture-python,12,4,4,0,1,1,35,4,1.6,1,1,1,0,3,1.542857142857143,1.195431064731123,0.119047619047619,1.4813217148735285
20151895,johannth,lifelog,Capture life as an immutable stream of events by aggregating data from different sources (third-party APIs and manual input) and expose data as an personal API of your life's events.,https://github.com/johannth/lifelog,144,3,3,0,0,2,15,2,2.1333333333333333,0,0,0,0,0,5.0,14.757698408921057,0.4777777777777778,16.67218465918548
641696540,Ibadullah-Kahttana,MNIST-Deep-Neural-Network-Numpy,"Training MNIST Dataset Deep Neural Network using NumPy only, MNIST consists of 70,000 grayscale images. Training Images are 60,000 Testing Images are 10,000. Neural Network Architecture: Input layer of 784 neurons (representing the 28x28 pixel images), one or more hidden layers, and an output layer of 10 neurons (one for each digit).",https://github.com/Ibadullah-Kahttana/MNIST-Deep-Neural-Network-Numpy,5,0,0,0,0,1,1,0,3.0,0,0,0,0,0,2.0,4246.333688604305,6.639175257731959,28192.15356145539
372381137,rc4du,python-clean-architecture-study,Estudo sobre clean architecture com python,https://github.com/rc4du/python-clean-architecture-study,42,1,1,0,0,1,54,3,2.333333333333333,1,1,1,1,4,5.388888888888889,28.27947350512309,0.4382757160534938,41.83965950041053
267261793,cloudblue,django-cqrs,"django-cqrs is an Django application, that implements CQRS data synchronization between several Django micro-services",https://github.com/cloudblue/django-cqrs,919,126,126,26,7,6,129,5,3.744186046511628,0,0,0,1,1,16.13953488372093,132.40106048330102,1.1360301931522827,456.6310733556383
960996894,ThiagoSantos21,Python-Clean-Arch-,Estudos de clean architecture usando a linguagem python,https://github.com/ThiagoSantos21/Python-Clean-Arch-,19,0,0,0,0,1,10,4,0.2,0,0,0,1,1,0.7,0.4754887502163469,0.05,0.2377443751081734
815178648,motiedivya,dTodo,Microservice Architecture Todo App. ,https://github.com/motiedivya/dTodo,6,0,0,0,0,1,3,2,3.333333333333333,0,0,0,0,0,6.666666666666667,1.5849625007211563,0.1666666666666666,0.7924812503605781
936421582,maxplush,flask-on-docker,"A containerized Flask web app integrating PostgreSQL, Gunicorn, and Nginx, following Instagram’s tech stack. Built with a structured microservices architecture for scalability. Includes an image upload feature.",https://github.com/maxplush/flask-on-docker,2173,0,0,0,0,1,3,4,2.333333333333333,0,1,0,0,1,3.6666666666666665,3.1699250014423126,0.3333333333333333,1.5849625007211563
870059507,koishidasiki,reconstruction-model-using-Autoencoder-by-pytorch,This is a reconstruction model(using Autoencoder) by pytorch 。The main encoder architecture uses the first 13 layers of the VGG16，and the decoder is reverse.,https://github.com/koishidasiki/reconstruction-model-using-Autoencoder-by-pytorch,4,1,1,0,0,1,1,0,16.0,0,0,0,0,0,25.0,377.85689473700273,6.82258064516129,2577.9591366734217
150745887,skokec,DAU-ConvNet-cifar10-example,Example for CIFAR-10 dataset with simple 3-layer DAU-ConvNet architecture (based on basic tensorflow tutorial),https://github.com/skokec/DAU-ConvNet-cifar10-example,14,0,0,0,0,1,5,0,10.2,0,0,0,0,0,10.6,199.61572719732771,3.303081232492997,782.4022741957303
882497244,contracamilo,python-mongo-cl-arch,practice with python and mongoDB an small project with clean architecture,https://github.com/contracamilo/python-mongo-cl-arch,14,0,0,0,0,1,13,2,2.0,1,1,0,1,3,4.846153846153846,13.571409756513672,0.182051282051282,24.83342542346988
476210152,dongju93,FastAPI-Microservices,"Building a Microservice Architecture using Redis Event Streams, FastAPI, and React",https://github.com/dongju93/FastAPI-Microservices,36,0,0,0,0,1,4,1,4.25,0,0,0,0,0,3.0,11.816165626622604,0.625,11.221804688852169
470864708,VladimirBobrovnikov,Evraz_training_project,Demo project on using a clean architecture,https://github.com/VladimirBobrovnikov/Evraz_training_project,41,0,0,1,0,1,24,6,2.9166666666666665,0,1,0,1,2,7.541666666666667,19.00803156455409,0.3763888888888889,63.9019776713816
466141577,Flaiers,fastapi-clean-architecture,Clean FastAPI architecture,https://github.com/Flaiers/fastapi-clean-architecture,415,110,110,14,1,3,43,4,3.0232558139534884,1,1,0,0,2,2.441860465116279,2.604876099890956,0.1732558139534883,3.420522352643457
429598957,zarexalvindaria,microservice-security,"Applied STRIDE to threat model a microservice env.–defining the security architecture and attack surfaces; hardened the app’s Docker environment using Docker-bench, created an RKE cluster, and hardened a Kubernetes cluster using Grype and Trivy. Also implemented runtime monitoring using Grafana to visualize runtime security alerts via Sysdig Falco.",https://github.com/zarexalvindaria/microservice-security,7613,1,1,1,0,1,24,6,3.2916666666666665,0,1,0,0,1,3.7916666666666665,14.975141293692324,0.5253472222222223,36.81445754932641
485426075,foggy-rustaceans,security-hub,"a security door camera system. A camera attached to a door captures an image of a visitor who wants to open the door and a PIN pad is used to input a password and trigger an attempted entrance event. Facial recognition is performed on the image and if the visitor matches a face with permission to open the door at that particular time, the door is opened. Possible extensions to the door sensors include a microphone for voice command recognition (e.g. recognizing “lock” or “open”) and a thermographic camera for body temperature detection (to prevent sick people from entering the building). Another possible extension includes using carbon monoxide and fire detectors, as well as an LED screen, to display a warning for carbon monoxide and fire detection at the front door.  We plan to use a hub architecture that utilizes proof-carrying actuation similar to that found in [Soumya Basu’s trustless IoT paper](http://www.soumyabasu.com/assets/pdf/basu-hotedge20.pdf) [1]. Soumya’s work shows a lot of promise for adding an extra layer of security to IoT systems while allowing for high throughput and horizontal scalability. We think this is especially applicable for secure resource allocation systems such as doors with different access levels.  Our solution makes use of a variety of cloud resources to solve the problem. We host our system on an Azure IoT Hub, and simulated devices stream images to Azure Blob storage. When a user enters a PIN, it sends a message to our IoT Hub which triggers a service to look through the most recent footage capture by the camera in the Blob and performs facial recognition to check if an authorized user appeared on camera. If so, it sends a message to a simulated edge device to unlock the door and provide access.",https://github.com/foggy-rustaceans/security-hub,4029,2,2,0,0,1,9,2,7.444444444444445,0,0,0,0,0,9.11111111111111,98.82963710602615,2.005970064793594,361.3285715625639
886257529,wwwshwww,es-cqrs-sandbox,,https://github.com/wwwshwww/es-cqrs-sandbox,27,0,0,0,0,1,10,8,2.9,1,0,0,1,2,4.8,6.091767875292166,0.2,12.183535750584332
166728320,nevtum,road-to-clean-architecture,"Example project which gets refactored into the ""Clean Architecture"" pattern",https://github.com/nevtum/road-to-clean-architecture,26,0,0,1,0,1,1,0,3.0,0,0,0,0,0,19.0,249.1233050614779,9.264705882352942,2308.054149834281
823622486,4lm,yacape,yacape - Yet Another Clean Architecture Python Example,https://github.com/4lm/yacape,15,0,0,0,0,1,22,4,1.5909090909090908,1,1,0,1,3,3.090909090909091,2.684484092089165,0.2272727272727272,2.639029546634619
4810334,seanbermejo,eventregistration,cssec: source code programming unit : event registration,https://github.com/seanbermejo/eventregistration,142,1,1,1,0,1,17,2,1.8823529411764703,0,0,0,0,0,1.7058823529411764,8.627882534014722,0.4029411764705882,9.62338455684452
683331828,Qaisar256,Deep-ocular,"The improved AlexNet architecture with attention and dense layers offers enhanced feature extraction, task adaptability, interpretability, and potential accuracy benefits compared to other transfer learning architectures, making it particularly suited for tasks like retinograph classification.",https://github.com/Qaisar256/Deep-ocular,601,1,1,0,0,1,6,0,6.0,0,0,0,0,0,2.5,47.90156749095217,1.22979797979798,103.47760960585038
107532623,htudu,Machine-Learning,The LSTM network is the starting point. What you are really interested in is how to use the LSTM to address sequence prediction problems. The way that the LSTM network is used as layers in sophisticated network architectures. The way that you will get good at applying LSTMs is by knowing about the different useful LSTM networks and how to use them.,https://github.com/htudu/Machine-Learning,0,0,0,0,0,0,1,0,1.0,0,0,0,0,0,0.0,4.754887502163469,0.5,2.3774437510817346
432467946,dnan-v,TOOLS_installerrt,"Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",https://github.com/dnan-v/TOOLS_installerrt,6,0,0,0,0,1,3,0,2.6666666666666665,0,0,0,0,0,0.0,165.0,0.7333333333333334,363.0
887276062,serivt,pymediator,"Lightweight implementation of the Mediator pattern in Python, optimized for CQRS, designed to integrate with clean architectures and event-driven systems.",https://github.com/serivt/pymediator,27,1,1,0,0,1,10,1,2.6,0,0,0,0,0,8.7,19.311638421592264,0.6728571428571428,32.68174731276173
269948726,janluak,aws-serverless-wrapper,a wrapper for separating business and infrastructure code after hexagonal pattern (https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)),https://github.com/janluak/aws-serverless-wrapper,205,0,0,0,1,1,25,4,7.8,0,0,1,0,1,16.6,124.48847897509204,1.263117126148705,295.36471124857786
148955267,benMcChesney,ProjectHandshake,Using open-source tech to solve networking at events. ,https://github.com/benMcChesney/ProjectHandshake,786,0,0,0,26,1,16,2,5.875,0,0,0,0,0,11.25,165.61320085761082,2.324471786437247,719.858235915747
949383810,SandunDeSilva,Django-with-Docker-MySQL---Microservices-Architecture,"A microservices-based Django application containerized with Docker, using MySQL as the database. This project demonstrates how to structure a Django application with two separate apps (app1 and app2), each running on different ports (8000 & 8001).",https://github.com/SandunDeSilva/Django-with-Docker-MySQL---Microservices-Architecture,10,0,0,0,0,1,24,3,1.5,0,0,0,0,0,0.5833333333333334,0.1981203125901445,0.0208333333333333,0.0990601562950722
335469282,rcmendes,fancy_todo_list,A Fancy Todo List to practice Clean Architecture with Python 3,https://github.com/rcmendes/fancy_todo_list,10,1,1,0,1,1,28,4,2.071428571428572,1,1,1,1,4,5.035714285714286,7.281485075338245,0.369047619047619,12.747190441951362
504803245,yffenim,serverless_disboard_scraper,serverless backend using microservices architecture for discord server search,https://github.com/yffenim/serverless_disboard_scraper,31,0,0,0,0,1,5,2,5.6,0,0,0,0,0,1.8,9.056842503028856,0.7,7.630376252379816
755417222,Brunocds,cleanarch,Repository for clean architecture study based on this YT video course: https://www.youtube.com/playlist?list=PLAgbpJQADBGK0opZ8ZuDX3zDjQck_QKMy,https://github.com/Brunocds/cleanarch,28,0,0,0,0,1,28,4,1.3928571428571428,1,1,1,1,4,3.571428571428572,13.323828563925932,0.2023809523809523,11.14578003972517
884889972,Abbelini513,MICROSERVICE_ARCHITECTURE,This project implements a microservice architecture for real-time monitoring of a machine learning model. It uses Docker and RabbitMQ to create a distributed system that assesses the model's performance in real time.,https://github.com/Abbelini513/MICROSERVICE_ARCHITECTURE,2323,0,0,0,0,1,4,2,5.25,0,0,0,0,0,2.75,33.38035508827119,1.40625,86.3240416797988
799989363,IgorTerriaga,CleanArchitecture,,https://github.com/IgorTerriaga/CleanArchitecture,26,0,0,0,0,1,24,4,1.1666666666666667,1,1,1,1,4,2.5,3.714788305126573,0.1458333333333333,2.296867850585122
346607853,bhhe,Farm-Data-Statistics-API,"Farm data API implemented with containerized microservice architecture using Python, Docker and Azure.",https://github.com/bhhe/Farm-Data-Statistics-API,323,0,0,0,0,1,9,3,6.333333333333333,0,0,0,0,0,6.0,128.3109524289541,1.9172665233130348,563.0979411395786
925509583,royvainavi,docker-microservice-assignment,A simple microservice architecture using Docker to process JSON input and calculate sums from CSV data.,https://github.com/royvainavi/docker-microservice-assignment,4,0,0,0,0,1,2,1,3.0,0,0,0,0,0,8.0,95.77267454328134,2.7205882352941178,269.9263290444731
698195468,korbanitskiy,fcc-microservices,"Education  project for FreeCodeCamp course  ""Microservice Architecture""",https://github.com/korbanitskiy/fcc-microservices,15224,1,1,0,0,1,27,5,2.740740740740741,0,1,1,1,3,5.111111111111111,11.828143248249974,0.3402777777777778,15.90274780689258
573654586,rcb123,video-mp3-converter,Video to MP3 Converter based on a microservice architecture utilizing Docker and Kubernetes,https://github.com/rcb123/video-mp3-converter,13689,0,0,0,0,2,14,4,3.071428571428572,0,0,0,1,1,2.7857142857142856,15.138974074573635,0.7148962148962149,38.38830272659734
215489983,ihor-nahuliak,django-domain-driven-design,django domain driven design example,https://github.com/ihor-nahuliak/django-domain-driven-design,74,0,0,0,5,1,22,4,1.5909090909090908,1,0,0,0,1,1.7727272727272727,3.108441185723217,0.2386363636363636,2.611705252247536
691352787,gwolfmann,dei0,django utilization with clean architecture model. I use postgresql,https://github.com/gwolfmann/dei0,22,0,0,0,0,1,19,2,1.4736842105263157,1,0,0,0,1,6.315789473684211,15.717833066052854,0.1052631578947368,23.32649236212331
376989864,CharlesTenorio,expired_products,Backend with Python FastApi and Clean architecture and Neo4j,https://github.com/CharlesTenorio/expired_products,5,0,0,0,0,1,3,1,0.6666666666666666,0,0,0,0,0,3.333333333333333,3.1699250014423126,0.3333333333333333,1.5849625007211563
336524786,cleopatra-itn,GeoWINE,"Source code for the paper ""GeoWINE: Geolocation based Wiki, Image, News and Events Retrieval""",https://github.com/cleopatra-itn/GeoWINE,13094,11,11,3,0,1,20,3,6.3,0,0,1,0,1,13.05,147.28368520658438,2.7135156146763286,764.0324754252165
866547834,samaragarofalo,clean-architecture,,https://github.com/samaragarofalo/clean-architecture,15,0,0,0,0,1,10,4,1.6,1,0,0,1,2,1.8,0.0,0.0,0.0
661216966,Serg6669999,math_game,clean architecture ,https://github.com/Serg6669999/math_game,457,0,0,1,0,1,18,5,3.555555555555556,0,0,0,0,0,11.0,46.54197251267326,1.143874643874644,205.63385286518965
183492842,mshindi,nairobi-tech-week-19,"Repo for Nairobi Tech Week presentation - ""Moving from a monolithic architecture to a microservices architecture""",https://github.com/mshindi/nairobi-tech-week-19,1188,0,0,1,0,1,2,2,3.0,0,0,0,0,0,11.0,13.931568569324174,0.5,6.965784284662087
912726215,bsantanna,cleanarch-ioc-pypackage,"This project provides a clean architecture scaffolding for a FastAPI-based application with PostgreSQL, Redis, Docker Compose, and includes dependency injection, unit testing, integration testing, and pre-commit hooks for code quality.",https://github.com/bsantanna/cleanarch-ioc-pypackage,70,0,0,0,0,1,43,5,1.5348837209302326,1,1,1,1,4,2.116279069767442,11.923390622584146,0.133121916842847,16.031270743560665
461515074,zehpatricio,hexagonal_architecture,Hexagonal Architecture with Python,https://github.com/zehpatricio/hexagonal_architecture,53,1,1,1,0,1,12,3,2.9166666666666665,1,1,1,1,4,2.583333333333333,0.0,0.0,0.0
792968256,SamuraiiCode,fastapi-clean-arquitecture,how to implement fastapi with clean architecture using python and mongo,https://github.com/SamuraiiCode/fastapi-clean-arquitecture,13,0,0,0,0,1,6,3,0.8333333333333334,0,1,0,0,1,0.5,0.0,0.0,0.0
132844545,srp98,Image-Classification-with-Deep-CNN,A Deep Convolutional Neural Network with drop out layer architecture to decrease over-fitting and to increase accuracy.,https://github.com/srp98/Image-Classification-with-Deep-CNN,17,2,2,1,0,0,2,0,3.5,0,0,0,0,0,9.5,439.7997603169148,4.598484848484848,2033.8449575160728
745751350,wgryc,emerging-trajectories,"Open source framework for using LLMs to forecast political, economic, and social events.",https://github.com/wgryc/emerging-trajectories,5031,71,71,6,0,3,31,2,6.225806451612903,0,0,0,0,0,26.35483870967742,484.158492766258,2.3638959605171754,3099.982703841942
8659098,artirix,logcabin,"logcabin is a program for aggregating and processing events from a diverse range of sources and formats, and outputting to the file system, database or a search engine.",https://github.com/artirix/logcabin,97,15,15,5,2,10,52,2,3.692307692307693,0,0,0,0,0,11.557692307692308,52.00950018367757,1.1869204927802213,225.33463299851093
617351971,Endy02,microservice,Python microservice architecture,https://github.com/Endy02/microservice,20,0,0,0,0,1,43,6,2.4651162790697674,1,0,0,0,1,3.2790697674418605,6.634594041430378,0.2864341085271318,12.180519768494245
708726064,securitsa,betwise-line-provider,"Go-to source for real-time, up-to-the-minute information on a wide array of events, all tailored to help you make smarter bets.",https://github.com/securitsa/betwise-line-provider,52,1,1,0,0,1,46,4,3.5,1,1,1,1,4,3.717391304347826,11.09857990150474,0.3714975845410628,38.97964706835789
707151395,jordiarellano1996,data_monitoring_use_case,"This code snippet exemplifies the implementation of ""enterprise business rules"" and ""application business rules"" within the context of Clean Architecture. The structure adheres to the principles of Clean Architecture, with the corresponding logic developed on top of these distinct layers.",https://github.com/jordiarellano1996/data_monitoring_use_case,5,0,0,0,0,1,7,1,2.2857142857142856,0,0,0,0,0,3.7142857142857135,0.0,0.0,0.0
937539316,MaverickScripts,BRUHMA-AI,"BRUHMA-AI is an AI-powered assistant designed to provide intelligent, responsive, and context-aware answers using advanced natural language processing (NLP) techniques. Built within a Jupyter Notebook, this project serves as a foundation for interactive AI-driven assistance in various domains.",https://github.com/MaverickScripts/BRUHMA-AI,11,0,0,0,0,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
844164277,Princeigwe,kafka-EDA-demo,A demo repo for articles on Event-driven Architectures. [https://princeigwe.medium.com/building-event-driven-architectures-with-kafka-django-and-microservices-part-1-2b85501f5040 || https://princeigwe.medium.com/building-event-driven-architectures-with-kafka-django-and-microservices-part-2-fa9382309e28],https://github.com/Princeigwe/kafka-EDA-demo,31,1,1,0,0,1,38,4,1.605263157894737,1,0,0,0,1,1.5263157894736843,0.8759003293459022,0.0921052631578947,0.4379501646729511
931643588,drayerh,DexScreenerMemeCoinTradingSignalBot,"A professional-grade Python implementation for a DEX screener bot with professsional grade architecture, security layers, smart money analysis, database optimization and a professional alert system. The bot focuses on quality signals over quantity, with multiple verification layers to avoid scam tokens.",https://github.com/drayerh/DexScreenerMemeCoinTradingSignalBot,9,3,3,0,0,1,1,0,9.0,0,0,0,0,0,31.0,196.73137065497968,3.5,688.5597972924289
793766054,YerlanSh,Clean-Architecture,,https://github.com/YerlanSh/Clean-Architecture,177,0,0,0,0,1,145,6,2.7379310344827585,1,1,1,1,4,8.83448275862069,43.34593359322255,0.4267504374829463,100.21109212100926
401870104,francoposa,domain-driven-design-service-examples,,https://github.com/francoposa/domain-driven-design-service-examples,139,1,1,0,0,0,34,8,2.3823529411764706,1,1,1,1,4,2.3529411764705883,1.0471915443933837,0.1078431372549019,0.6265369486672799
370040985,peterpodgorski,python_event_sourcing_cqrs,,https://github.com/peterpodgorski/python_event_sourcing_cqrs,16,14,14,1,0,1,7,0,7.0,0,0,0,0,0,16.857142857142858,41.14202049696285,0.5092165898617511,43.126991260337554
620537365,godwynnn,bida_backend,a touring and events backend source code,https://github.com/godwynnn/bida_backend,83,0,0,0,0,1,56,2,2.375,0,0,0,0,0,3.482142857142857,12.203487195484362,0.2501190476190476,51.75760279710328
487214578,netologist,python-service-scaffold,Clean Architecture Python Service Scaffold,https://github.com/netologist/python-service-scaffold,246,0,0,0,0,1,38,4,2.3947368421052637,1,1,1,1,4,2.0789473684210527,1.123842265266882,0.1184210526315789,0.7265234353219534
867773745,vin0x,brewETL-pipeline,"This project is a complete data pipeline for breweries data using a medallion architecture (bronze, silver, and gold layers). The pipeline is containerized using Docker for consistent environment setup and deployment, and it utilizes technologies such as pandas, sqlite3, and Apache Airflow to manage data processing and scheduling.",https://github.com/vin0x/brewETL-pipeline,483,0,0,0,0,1,5,4,4.0,0,0,0,0,0,1.6,6.137291214297528,0.3333333333333333,3.468645607148764
666817198,alireza0sfr,Django-DRF-Clean-Architecture-Base,,https://github.com/alireza0sfr/Django-DRF-Clean-Architecture-Base,262,14,14,2,0,2,119,6,2.655462184873949,1,1,1,1,4,5.050420168067227,13.542441231307777,0.2621956485005109,27.19495415542181
967611253,AboodH-2,ETL-Microservices-Retail,A comprehensive retail sales data processing system with ETL pipeline and microservices architecture,https://github.com/AboodH-2/ETL-Microservices-Retail,31,0,0,0,0,1,8,3,5.5,0,0,0,0,0,8.75,49.84475203519116,1.0375,116.6181087648301
808793301,ThiagoSchumann,html-table-to-json,"Effortlessly convert HTML tables to JSON with this Python-based tool. Utilizes pandas and BeautifulSoup for efficient and structured conversion, following Clean Architecture and SOLID principles.",https://github.com/ThiagoSchumann/html-table-to-json,9,1,1,0,0,1,9,2,1.6666666666666667,0,1,0,0,1,1.4444444444444444,1.723308333814104,0.1111111111111111,1.723308333814104
298526153,MelomaneQuizz,POC-Microservice-Api-gateway,Proof of concept for microservice architecture,https://github.com/MelomaneQuizz/POC-Microservice-Api-gateway,1,0,0,0,0,0,3,2,2.0,0,0,1,0,1,0.3333333333333333,0.0,0.0,0.0
146917604,droneCIDETEC,TRyTA,source code for TRyTA event.,https://github.com/droneCIDETEC/TRyTA,11,0,0,0,0,0,7,2,4.0,0,0,0,0,0,6.857142857142857,75.95908082060744,2.1761904761904765,359.00889899418604
654493765,liviaerxin,fastapi-celery-postgresql,A demo event-driven architecture microservices using FastAPI Celery and SQL,https://github.com/liviaerxin/fastapi-celery-postgresql,414,1,1,2,0,1,8,4,3.75,0,0,0,0,0,4.125,8.03372114193392,0.1375,4.795232685160352
256778052,Mr-istov,mikrod-labs,Docker/kubernetes for microservices,https://github.com/Mr-istov/mikrod-labs,39,0,0,0,0,1,2,2,3.5,0,0,0,0,0,1.5,2.3774437510817346,0.25,1.1887218755408673
922953693,amaralfelipe1522,ddd-class,Repositório criado pra armazenar o código criado na aula de DDD (Domain Driven Design) do MBA USP,https://github.com/amaralfelipe1522/ddd-class,9,0,0,0,0,1,5,2,4.0,1,0,0,1,2,10.0,37.654137516586594,0.9571428571428572,113.09835255091362
642260946,divyanshigupta9,Smart-Attendance-System,"The OpenCV-based smart attendance system is a computer vision solution that utilizes the OpenCV library, an open-source computer vision and machine learning software library, to automate the process of taking attendance in various settings such as classrooms, workplaces, or events.",https://github.com/divyanshigupta9/Smart-Attendance-System,1667,0,0,0,0,1,2,0,7.5,0,0,0,0,0,27.5,644.4540504081484,5.132183908045977,5805.737549742799
218847753,HerlanAssis,django-clean-architecture-helper,,https://github.com/HerlanAssis/django-clean-architecture-helper,39,10,10,2,1,1,19,4,1.3157894736842106,0,0,0,0,0,6.105263157894737,2.6339924254224285,0.1842105263157894,1.7251481865092917
39531961,jaredthecoder,taz,Data mining for Aussie (OSSEE - Open Source Social Event Engine),https://github.com/jaredthecoder/taz,2816,0,0,0,2,1,5,3,0.8,0,0,0,0,0,1.0,5.705865002596163,0.3,8.558797503894244
932987174,shaktiwadekar9,scalable-simple-llm-chatbot,Scalable Simple LLM Chatbot with Microservices Architecture and Docker Containerization,https://github.com/shaktiwadekar9/scalable-simple-llm-chatbot,4,0,0,0,0,1,2,1,3.0,0,0,0,0,0,2.5,2.3774437510817346,0.25,1.1887218755408673
170398219,rklyne,hexagonal-django,A sketch of a hexagonal architecture in Django,https://github.com/rklyne/hexagonal-django,79,16,16,2,4,2,51,3,2.176470588235294,1,1,1,1,4,3.901960784313725,3.5289823299880902,0.1686274509803921,5.947858260145519
668025628,Talismar,ifrn_software-process_clean-architecture,,https://github.com/Talismar/ifrn_software-process_clean-architecture,45,0,0,0,0,1,22,4,1.4545454545454546,1,1,1,1,4,1.9090909090909087,0.432262500196679,0.0454545454545454,0.2161312500983395
938995723,ahmedosamaft,distributed-reservation-system,"A scalable, fault-tolerant microservices-based system for managing reservations. It ensures high availability, consistency, and resilience using an event-driven architecture.",https://github.com/ahmedosamaft/distributed-reservation-system,8,0,0,0,0,1,7,1,2.571428571428572,0,0,0,1,1,3.4285714285714284,6.566273217273362,0.4285714285714285,7.811600896411413
792419202,aws-educate-tw,aws-educate-tpet-backend,"A fully serverless email delivery system designed with a microservices architecture. This system leverages cloud-native technologies to handle email delivery, processing, and management efficiently.",https://github.com/aws-educate-tw/aws-educate-tpet-backend,6088,5,5,2,5,0,92,4,4.336956521739131,0,0,0,0,0,10.532608695652174,42.53345980654417,1.2121163258270706,193.3049267186256
834533551,Ad12y,Kafka-Streaming-DAB-CICD,"This project demonstrates a data pipeline architecture using Kafka, Delta Lake, and Databricks, employing a multi-layered approach (Bronze, Silver, Gold) to streamline data ingestion, processing, and analysis.",https://github.com/Ad12y/Kafka-Streaming-DAB-CICD,31,1,1,0,0,1,9,3,0.8888888888888888,0,0,0,0,0,0.2222222222222222,1.0566416671474377,0.1111111111111111,0.5283208335737188
562638336,aleksey-korolev,signup-director,"Signup Director is an open source planner for your next event - let attendee sign up or express interest, manage reservation lists and more.",https://github.com/aleksey-korolev/signup-director,34,1,1,0,6,2,17,2,1.3529411764705883,0,0,0,0,0,0.5294117647058824,0.8390977944994357,0.088235294117647,0.4195488972497178
561604254,MariaMurarescu,Project4,Operate a dockerized Python Flask web application based on a microservices architecture. Operationalize a Kubernetes cluster with a Kubernetes Declarative Manifests file. Perform and maintain CD/CI.,https://github.com/MariaMurarescu/Project4,3057,0,0,0,0,1,3,3,2.333333333333333,0,0,0,0,0,4.0,17.26871868465843,0.6666666666666666,34.53743736931686
932468841,SALIPE,nerdlend-lending-system,"Nerdland is a simple lending system for store management, using microservices architecture.",https://github.com/SALIPE/nerdlend-lending-system,254,0,0,0,0,1,103,4,2.1359223300970878,0,0,0,1,1,4.203883495145631,7.527150061957951,0.2930748862787697,15.138969386172894
866635130,mikaslima,BLOCS,Blocking Location and Obstruction Cataloguing System: An open-source and user-friendly Python algorithm for detecting and tracking atmospheric blockings and subtropical ridge obstruction events,https://github.com/mikaslima/BLOCS,13143,1,1,0,0,1,10,2,5.4,0,0,0,0,0,9.9,2114.434257326837,8.634197953757184,35456.64542435813
607289088,Arkemix30,fastapi-boilerplate,A well structured codebase written with FastAPI trying to follow the Clean Architecture principles.,https://github.com/Arkemix30/fastapi-boilerplate,29,0,0,0,0,1,34,3,3.117647058823529,1,1,1,1,4,3.6176470588235294,1.810306082754786,0.1617647058823529,1.3208323692967818
966644296,Andrew-Marfo,-Lakehouse-Architecture-for-E-Commerce-Transactions,"A lakehouse architecture for an e-commerce platform which will ingest raw transactional data stored in Amazon s3, clean and duplicate it using Delta Lake, and expose it for downstream analytics through Amazon Athena",https://github.com/Andrew-Marfo/-Lakehouse-Architecture-for-E-Commerce-Transactions,4347,0,0,0,0,1,12,3,3.6666666666666665,0,0,0,0,0,6.25,28.737592169935255,0.75,59.24692176377763
967070469,moughtma,Multi_Layer_Perceptron,First attempt to create a Multi-Layer Neural Network using numpy to help understand architecture and backpropagation. Using the same case study as original Perceptron project to analyse the Four Signals of SRE.,https://github.com/moughtma/Multi_Layer_Perceptron,14,0,0,0,0,1,6,0,2.5,0,0,0,0,0,6.666666666666667,556.5614891023973,3.187036345531491,3083.286733277256
432124366,NevarMovin,FCS-applications,Source code for CsiNet and CRNet using Fully Connected Layer-Shared feedback architecture. ,https://github.com/NevarMovin/FCS-applications,20,6,6,0,0,1,8,1,13.25,0,0,0,0,0,8.5,472.2274282207138,4.689753320683113,2381.0464744995425
543360782,aferron,LeNetOnCIFAR-10," Using LeNet Architecture with variations on learning rate, activation function, loss function, kernel size, and number of convolution layers",https://github.com/aferron/LeNetOnCIFAR-10,627,0,0,0,0,1,2,0,7.0,0,0,0,0,0,34.5,212.57820003461552,3.5333333333333337,1047.5433301667315
770498846,Sarmad426,FastAPI,Python API development with Fast API and SQL Model ORM. Microservices Backend architecture.,https://github.com/Sarmad426/FastAPI,713,1,1,0,0,2,41,6,3.2195121951219514,0,0,0,0,0,6.073170731707317,27.595057779162197,0.7512329658277732,60.00511987665847
878112033,Tarantinum,UserManagmentApplication,"User Management Application: This Python-based app manages user data with features like registration, login, and profile management. It uses a layered architecture and SQLite for database management, ensuring efficient data handling and a clear user interface.",https://github.com/Tarantinum/UserManagmentApplication,23,0,0,0,0,1,26,2,2.3076923076923075,0,0,0,0,0,5.384615384615385,6.646948327484318,0.1578947368421052,12.8192914682586
204341948,thunlp,HMEAE,"Source code for EMNLP-IJCNLP 2019 paper ""HMEAE: Hierarchical Modular Event Argument Extraction"".",https://github.com/thunlp/HMEAE,46,86,86,21,1,8,5,1,4.2,0,0,0,0,0,50.8,1259.9580076719508,4.338705518308407,10131.612771138794
915840005,costanonato,desafio-picpay-ddd-clean-architecture-tdd,"Neste vídeo, vamos descomplicar Clean Architecture, Domain-Driven Design (DDD) e Test-Driven Development (TDD) na prática, resolvendo um desafio para uma vaga de backend no PicPay. Você também vai aprender a aplicar conceitos como Example Mapping para entender requisitos, modelar domínios, e usar princípios SOLID e Design Patterns.",https://github.com/costanonato/desafio-picpay-ddd-clean-architecture-tdd,6,0,0,0,0,1,7,1,2.571428571428572,0,0,0,0,0,14.571428571428571,50.93944717025947,0.9309523809523808,57.10295339791424
870196616,sajidsarkar,Orchestrating-ETL-Processes-with-Airflow-Using-a-Medallion-Architecture-of-ADLS-Gen2-Containers,"Leveraging Airflow to orchestrate ETL process. Ingesting stock data from Yahoo API source, using python script to transform semi-structure JSON data, and following a medallion architecture by leveraging  Azure Data Lake Storage Gen2 as storage layers.",https://github.com/sajidsarkar/Orchestrating-ETL-Processes-with-Airflow-Using-a-Medallion-Architecture-of-ADLS-Gen2-Containers,27,0,0,0,0,1,6,3,4.0,0,0,0,0,0,9.0,12.331570830049015,0.6666666666666666,23.93344171795999
778133421,varunpandey2106,MicroCab,A cab booking backend following microservices architectural patterns,https://github.com/varunpandey2106/MicroCab,52,0,0,0,0,1,56,3,4.285714285714286,0,0,0,0,0,6.035714285714286,32.59316626013753,0.507809714795009,61.02147618672195
612429714,devfernandorodrigues,python-clean-architecture-fastapi,,https://github.com/devfernandorodrigues/python-clean-architecture-fastapi,77,0,0,0,1,1,17,3,2.0,1,1,0,1,3,7.176470588235294,33.915344047652056,0.3338235294117647,26.557503938481773
844222245,sidj5,weather-app-ms,This is the repository for the TU Ilmenau Research Project for SS2024. This contains a weather app code using microservice based architecture.,https://github.com/sidj5/weather-app-ms,36,0,0,0,0,1,7,2,1.2857142857142858,0,0,0,0,0,3.142857142857143,22.813054216017264,0.7368421052631579,63.649160585198025
893318188,rohungowda,HybridFacialNet,"HybridFacialNet: A novel transformer-based architecture combining Vision Transformers and CNNs for enhanced spatial and global attention. Built from scratch in Python, the project includes transformer architecture, convolutional blocks, multi-attention head blocks, ArcFace layers, and custom performance metrics like ArcFace loss ",https://github.com/rohungowda/HybridFacialNet,544,0,0,0,0,1,14,0,3.7142857142857135,0,0,0,0,0,4.357142857142857,117.83192805920451,2.824749954650165,572.7969056348892
135875500,ataks,cqrs,,https://github.com/ataks/cqrs,2521,0,0,0,0,1,7,3,1.0,1,0,0,0,1,4.285714285714286,13.395053470657777,0.0816326530612244,7.654316268947299
23293048,cosmoz,url_shortener_service,"URL shortener service is the new ""Hello, world!"" in the IoT/microservice/era world",https://github.com/cosmoz/url_shortener_service,14,0,0,0,11,1,2,1,3.5,0,0,0,0,0,5.5,19.026873902505137,1.0,38.05374780501028
632182248,MathyouMB,django-ddd-service-template,This is an example Django project that follows the principles of Domain-Driven Design (DDD),https://github.com/MathyouMB/django-ddd-service-template,12,5,5,0,0,1,32,4,1.8125,1,1,1,1,4,1.90625,0.4457707033278252,0.046875,0.2228853516639126
976650362,marcoloco23,Mentor,"Mentor is an AI-powered conversational agent with persistent memory, LLM integration, and a Streamlit chat UI. Designed for expert users, it features clean, production-ready Python code and modular architecture for easy extension.",https://github.com/marcoloco23/Mentor,1646,2,2,0,7,1,13,3,5.076923076923077,0,0,1,0,1,7.3076923076923075,56.83617482336172,1.2932314062748844,310.5351346861373
859192259,jsiguenzac,FastApi_Hexagonal_Architecture,El objetivo de esta tarea es que crear una base para un proyecto backend en Python utilizando la arquitectura Hexagonal y aplicando CQRS (Command Query Responsibility Segregation).,https://github.com/jsiguenzac/FastApi_Hexagonal_Architecture,11,1,1,0,0,1,18,4,2.888888888888889,1,1,1,1,4,3.888888888888889,6.113711911966849,0.3444444444444444,9.386577607925725
817043394,cesarmerjan,ModularMonolith,Modular Monolith,https://github.com/cesarmerjan/ModularMonolith,48,0,0,0,0,1,74,4,1.891891891891892,1,1,1,0,3,2.3378378378378377,1.777444010878498,0.0608108108108108,3.375208491925735
23436575,pcah,python-clean-architecture,A Python toolkit for applications driven by The Clean Architecture,https://github.com/pcah/python-clean-architecture,1187,489,489,47,31,17,117,5,2.8034188034188032,1,1,1,0,3,15.974358974358974,94.0244227178634,0.9079647118898202,343.14565936122807
177523927,iisalazar,artemis_auth_service,Authorization service for Artemis' microservice architecture.,https://github.com/iisalazar/artemis_auth_service,26,0,0,0,0,1,13,1,2.769230769230769,0,0,0,0,0,6.846153846153846,28.17281249508565,0.5121457489878543,52.88351865269564
890935280,AntonBliznuk,TaskForge,"TaskForge - project built on a microservice architecture with Django REST Framework. The platform enables to create groups, assign tasks, track progress. It features JWT authentication, Redis caching, PostgreSQL for data storage, and Cloudinary for image management, showcasing a scalable and modern application design.",https://github.com/AntonBliznuk/TaskForge,1391,2,2,0,0,1,69,6,2.0869565217391304,0,0,0,0,0,4.579710144927536,12.944062858176649,0.1798265571557497,20.935028062943683
944962199,aletuan,fraud-detection-system,Detecting fraud trace in flood of transaction via event-driven architecture with various microservice orchestration.,https://github.com/aletuan/fraud-detection-system,204,0,0,0,0,1,39,6,4.794871794871795,1,1,1,0,3,20.666666666666668,187.3654885237609,1.8130948859410525,608.5224955599397
570851949,Gpzim98,DjangoFlaskCleanArchitecture,Repositorio do curso de Django + Flask + Clean Architecture,https://github.com/Gpzim98/DjangoFlaskCleanArchitecture,306,13,13,2,0,2,34,4,2.4411764705882355,1,1,1,1,4,5.705882352941177,7.1682618426218525,0.3,8.419748173289475
874029144,albertalexandrov,clean-architecture-sqlalchemy-details,,https://github.com/albertalexandrov/clean-architecture-sqlalchemy-details,3,0,0,0,0,1,13,1,2.0,1,0,1,1,3,2.0,0.0,0.0,0.0
131974900,raiich,ddd-wiki-example,Domain Driven Design simple example + CQRS (Wiki application),https://github.com/raiich/ddd-wiki-example,32,2,2,0,0,1,23,4,2.0,1,1,0,1,3,10.173913043478262,27.7476713885142,0.5583160800552104,112.23051524736884
456632221,mashrikt,grpc-microservices,A proof of concept on using grpc in modern microservice architecture,https://github.com/mashrikt/grpc-microservices,34,0,0,0,0,1,8,2,3.0,0,0,0,0,0,3.5,0.5943609377704336,0.0625,0.2971804688852168
232730211,valentinafeve,nisi-django,Django API implemented in python. PostgreSQL as data layer. All responses in json. Models and architecture described in .,https://github.com/valentinafeve/nisi-django,23,1,1,0,0,1,29,2,2.1724137931034484,0,0,0,0,0,1.5862068965517242,4.494581466934686,0.1921182266009852,10.68584067467259
953206659,yuru-sha,python-cli-ddd,Python CLI application using DDD and Clean Architecture,https://github.com/yuru-sha/python-cli-ddd,19,0,0,0,0,1,33,5,2.4545454545454546,1,1,1,1,4,3.606060606060606,7.155754958928278,0.3490620490620491,7.624391837890089
894470354,BoazAK,task-management,"Un projet de gestion des tâches avec une architecture microservices, utilisant FastAPI, MongoDB et axé sur la sécurité des API.",https://github.com/BoazAK/task-management,7,0,0,0,0,1,3,2,2.0,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
563757733,febus982,bootstrap-python-fastapi,A python service built using Clean Architecture and SOLID principles,https://github.com/febus982/bootstrap-python-fastapi,3492,48,48,3,4,1,98,5,3.459183673469388,0,0,1,0,1,4.3979591836734695,20.019866489305656,0.4293340053342329,38.78355704205016
362728643,doguz2509,robotframework-log-to-file,"Allow store background log events into other sources, such file, sqlite, etc.",https://github.com/doguz2509/robotframework-log-to-file,24,0,0,0,0,1,7,2,4.714285714285714,0,0,0,0,0,11.857142857142858,77.51462251352488,1.2142857142857142,508.2992406147808
591432127,omars44,fast-meerkat,[WIP] An Opinionated Clean Architecture Python with FastAPI,https://github.com/omars44/fast-meerkat,199,0,0,0,2,1,65,6,2.1384615384615384,1,1,1,1,4,2.6615384615384614,2.6880161671869285,0.1269230769230769,3.0039257066005005
530836874,danthb,microservices-flask,This is a review of some architecture topics,https://github.com/danthb/microservices-flask,35,0,0,0,0,1,8,2,3.0,1,0,1,0,2,7.625,2.533082813311301,0.1875,2.235902344426084
662132625,mbsantiago,soundevent,An open-source package providing standardized tools for sound event analysis and data management.,https://github.com/mbsantiago/soundevent,11954,19,19,1,1,3,196,4,4.678571428571429,0,0,0,0,0,15.301020408163266,149.8646064195709,1.3002670262408331,590.9633640056779
512738221,tcmlabs,hexagonal-architecture-python-spark,Hexagonal (ports and adapters) architecture applied to Spark and Python data engineering project,https://github.com/tcmlabs/hexagonal-architecture-python-spark,48,33,33,6,0,8,17,5,3.294117647058824,1,1,1,1,4,3.647058823529412,2.325344517941697,0.1176470588235294,1.1626722589708485
625954806,amulet1989,Microservices-architecture-using-Docker-for-Image-classification-with-CNN,This project develops a solution that can automatically classify images into over 1000 different categories using a Convolutional Neural Network (CNN) implemented in Tensorflow. Our solution consists of a Web UI and a Python Flask API that serves the CNN. The Web UI allows users to upload an image and receive the predicted class for that image.,https://github.com/amulet1989/Microservices-architecture-using-Docker-for-Image-classification-with-CNN,854,4,4,0,0,1,17,2,2.411764705882353,0,0,1,0,1,3.5294117647058822,20.84072493637417,0.5823013415892673,51.52792723924571
621530670,merelles,tanuki-key-guardian-hexagona-cqrs,🔑🦝 KMS web service for secure key exchange and isolation of all cryptographic operations. Using DDD & CQRS.,https://github.com/merelles/tanuki-key-guardian-hexagona-cqrs,205,0,0,0,0,0,131,7,4.213740458015267,1,1,1,1,4,4.877862595419847,7.575410475664178,0.2039290525370453,18.885452486700093
45334131,fchauvel,MAD,Microservice Architectures Dynamics,https://github.com/fchauvel/MAD,381,2,2,1,1,1,66,2,3.5454545454545454,0,0,0,0,0,24.78787878787879,96.45521775680126,1.4617982860693504,410.0363453808339
972972552,gscoimbra,api-com-flask,Criar uma API com Flask usando separação Clean Architecture.,https://github.com/gscoimbra/api-com-flask,34,0,0,0,0,1,13,2,2.1538461538461537,1,1,1,1,4,3.1538461538461537,10.52627801344902,0.2051282051282051,7.483770276595799
791019284,inteli-city,mss_formularios,Microservice backend for Formularios project with Python and AWS Serverless architecture.,https://github.com/inteli-city/mss_formularios,378,0,0,0,0,2,139,6,3.647482014388489,1,0,0,1,2,17.115107913669064,130.96150897918557,0.6328142536892669,267.9148025320944
815901075,marwenkouidhi,python-clean-architecture,,https://github.com/marwenkouidhi/python-clean-architecture,20,0,0,0,0,1,19,2,1.2105263157894737,1,1,1,1,4,2.3684210526315788,8.514077732666863,0.150375939849624,7.2063162743431715
529322720,htschvl,BrotherBand-Ophiuca-,A Python version of the original BrotherBand made using Clean Architecture and OOP and SOLID. A bit more snake-like.,https://github.com/htschvl/BrotherBand-Ophiuca-,8318,0,0,0,0,1,36,3,2.4166666666666665,1,0,0,0,1,3.4166666666666665,11.410002471387353,0.5347222222222222,27.30667303872641
909880116,mehdidhammou,distributed-video-compressor,A scalable video compression tool demonstrating the necessity of Event-Driven Architecture (EDA) for loose coupling in microservice architectures.,https://github.com/mehdidhammou/distributed-video-compressor,577,1,1,0,0,1,5,4,6.6,0,0,0,0,0,9.8,57.88147359108704,2.125,269.8974072933588
806713316,klfajardo,PyEventGen,"PyEventGen is an open-source tool designed to generate fictitious events for testing and evaluating Security Information and Event Management (SIEM) systems. Utilizing MongoDB as a database, PyEventGen allows CRUD operations on users & servers, generating a variety of simulated event types that mimic interaction in enterprise network environments.",https://github.com/klfajardo/PyEventGen,101,1,1,0,7,1,7,0,4.0,0,0,0,0,0,21.0,99.1748424234543,1.1861117605798457,295.1942510266213
89270905,MarchettaPietro,techstack_mysql_klein_adbapi,Dummy application using mysql twisted klein and adbapi in clean architecture style,https://github.com/MarchettaPietro/techstack_mysql_klein_adbapi,5,0,0,0,0,0,17,2,1.2352941176470589,1,1,1,0,3,5.117647058823529,6.012720918228107,0.267379679144385,13.34812968278366
437850425,tucker-weed,api-access-anomaly-detection,A deep neural network with a simple but powerful architecture consisting mainly of dense layers with relu activation. Achieves 99.5% - 100% accuracy in predicting whether API access activity is anomalous or normal.,https://github.com/tucker-weed/api-access-anomaly-detection,4,0,0,0,0,1,2,0,3.5,0,0,0,0,0,23.0,397.55364426061567,5.777255639097744,2269.427320990486
412144067,K-Hacks,HackOtberFest2021,This repo is used to teach beginner students about git and open source projects.,https://github.com/K-Hacks/HackOtberFest2021,1265,0,0,51,1,1,110,3,1.5272727272727271,0,0,0,0,0,6.490909090909091,147.40316899767552,2.680477780902853,936.333098230688
305813872,eduardolujan,hexagonal_architecture_django,,https://github.com/eduardolujan/hexagonal_architecture_django,2374,4,4,1,1,2,358,7,2.410614525139665,1,1,1,1,4,2.815642458100559,3.1365599083244744,0.1410596268302479,5.174772921306968
355972593,amirali175,Microservices-, les microservices sont une technique de développement logiciel — une variante du style architectural de l'architecture orientée services,https://github.com/amirali175/Microservices-,1439,0,0,0,0,1,30,5,0.2333333333333333,1,0,0,0,1,2.033333333333333,38.34433256957672,0.8628362607126048,148.56855252513677
914238775,ambarltd,event-sourcing-python,,https://github.com/ambarltd/event-sourcing-python,121,13,13,0,0,2,48,5,4.5,1,0,0,0,1,7.020833333333333,13.371208951921362,0.41875,26.21747698495915
590332942,hosseini-ali,clean-architecture,,https://github.com/hosseini-ali/clean-architecture,26,0,0,0,0,1,33,3,3.333333333333333,1,1,0,1,3,5.757575757575758,11.23220911639221,0.3390397481306572,18.28966189023049
904145684,rshahri,astronomy-info-extractor,"A Streamlit-based web app for extracting and analyzing astronomical information from publicly available data sources. Features include fetching celestial event details, generating star charts, and calculating moon phases. Built with Python for astronomy enthusiasts. 🌌",https://github.com/rshahri/astronomy-info-extractor,5,0,0,0,0,1,1,0,6.0,0,0,0,0,0,18.0,140.0,5.227272727272728,731.8181818181819
501826199,viswas-vuppala,simple-vote-app,Practicing Hexagonal Architecture by creating a simple vote tracking app,https://github.com/viswas-vuppala/simple-vote-app,26,0,0,0,0,1,12,2,2.0,1,0,1,1,3,2.583333333333333,3.334962500721156,0.2583333333333333,3.3613534379146643
291576418,bobbydams,flask-api-example,An example Flask application implementing Domain Driven Design principles,https://github.com/bobbydams/flask-api-example,28,0,0,0,0,1,36,4,2.361111111111111,1,0,1,1,3,4.722222222222222,8.042246417645815,0.2152777777777778,8.050179889310117
505191190,teodorcvijovic,shop_management_system,Distributed Flask application with microservice architecture where services are running in virtual containers on a Docker Swarm cluster.,https://github.com/teodorcvijovic/shop_management_system,85,0,0,0,0,1,23,1,8.304347826086957,0,0,0,0,0,8.0,266.7417237734798,3.2602366602859774,2188.670536025119
926689666,whynotnghiavu,clean-architecture,,https://github.com/whynotnghiavu/clean-architecture,36,1,1,0,0,1,30,5,1.4,1,1,1,1,4,3.3,8.623268258684872,0.2166666666666666,5.613624387321832
292152148,dingelsz,micro,Messing around with a microservice architecture,https://github.com/dingelsz/micro,18,0,0,0,0,1,2,1,1.5,0,0,0,0,0,7.5,92.48408825627212,2.264705882352941,306.799125457841
968194909,NandiniSrivastava,Microservices-Architecture-using-Docker-Swarm,,https://github.com/NandiniSrivastava/Microservices-Architecture-using-Docker-Swarm,7,0,0,0,0,1,2,1,2.5,0,0,0,0,0,2.5,4.754887502163469,0.5,2.3774437510817346
748836909,victord03,CQRS_minature,This exercise aims to create a miniature CQRS data read / write pattern. ,https://github.com/victord03/CQRS_minature,25,1,1,0,0,1,6,1,2.0,0,0,0,0,0,7.5,14.551312905646236,0.5,12.279130047436366
583265950,Hashim-Hassan,Object_detection_with_nms,Build an architecture in TF 2.0+ which combines two different object detection models with an NMS layer.,https://github.com/Hashim-Hassan/Object_detection_with_nms,74,0,0,0,0,1,2,0,3.5,0,0,0,0,0,5.0,162.1651702758677,2.090909090909091,678.1452575172649
880226951,Swapno963,Event-Driven-Architecture,"CreateD a simple Microservices example with Python Django and Python Flask, The apps will use Python Pika to send events to the other apps and everything will seem to work as a Monolithic app but is actually a Microservices app.",https://github.com/Swapno963/Event-Driven-Architecture,14999,0,0,0,0,1,1498,13,5.70894526034713,1,0,1,0,2,39.127759197324416,391.9492993047326,2.8311187753241254,3468.6591320040066
885538631,amhoba,e-commerce-order-tracking-and-performance-dashboard,"E-commerce analytics dashboard with real-time order tracking, inventory management, and performance monitoring using microservices architecture and ELK stack.",https://github.com/amhoba/e-commerce-order-tracking-and-performance-dashboard,3107,0,0,0,0,1,12,5,4.166666666666667,0,0,1,1,2,5.583333333333333,42.25045884310605,0.7652116402116401,153.18760779582718
564585989,jonathandieu,audi-oh,"Application running on distributed system / microservice architecture that converts videos into mp3 files. Built with Python, Kubernetes, Docker, MongoDB.",https://github.com/jonathandieu/audi-oh,25,0,0,0,2,1,2,4,7.0,0,0,0,1,1,4.5,46.72720264787944,1.6153846153846154,150.9648085546874
513603777,tiaonazario,clean-architecture-python,Base structure of a server made in Python with clean architecture.,https://github.com/tiaonazario/clean-architecture-python,36,0,0,0,0,1,15,3,1.5333333333333334,1,1,0,1,3,3.466666666666667,13.66315833669873,0.4476190476190476,22.430011493826715
677274115,reganto,tehran,Django clean architecture template,https://github.com/reganto/tehran,13,0,0,0,0,1,58,5,1.2241379310344829,1,0,0,0,1,0.8275862068965517,0.2459424570084553,0.0258620689655172,0.1229712285042276
836484013,sasanchezramirez,hexagonal-architecture-fastapi-back,,https://github.com/sasanchezramirez/hexagonal-architecture-fastapi-back,54,0,0,0,0,1,46,5,2.6739130434782608,1,1,0,1,3,4.782608695652174,20.862520781656062,0.4367753623188406,68.84535130829134
839079978,joaoflauzino,event-sourcing,,https://github.com/joaoflauzino/event-sourcing,75,0,0,0,0,1,7,2,1.7142857142857142,0,0,0,0,0,2.4285714285714284,25.42663929539838,0.9505494505494504,87.57537407142074
124891513,minhtuan221,Microservices-connector,"Inter-Service communication framework, support for microservice architecture and distributed system",https://github.com/minhtuan221/Microservices-connector,148,17,17,2,2,3,36,3,3.888888888888889,0,0,0,0,0,17.22222222222222,129.69122783882688,1.7420933570512127,959.0354303843524
756032172,Stefen-Taime,Real-Time-Extraction-Transformation-and-Exposure-Architecture-for-Rail-Data," we are thrilled to announce our new PoC project aimed at providing a complete real-time extraction, transformation, and exposure architecture for the new provincial transportation systems. ",https://github.com/Stefen-Taime/Real-Time-Extraction-Transformation-and-Exposure-Architecture-for-Rail-Data,90,0,0,0,0,1,4,2,6.5,0,0,0,0,0,12.25,32.87535727075304,1.2840909090909092,54.83500446440042
865810105,hz-b,bact-twin-architecture,Architecture of the digital twin and associated middle layer,https://github.com/hz-b/bact-twin-architecture,47,0,0,0,0,2,19,3,1.8421052631578947,0,0,1,0,1,3.421052631578948,10.58203421189272,0.3007518796992481,35.46393834820706
859171436,therehmanujjan,ZiaMart,"Zia Online Mart is a microservices-based eCommerce APIs designed for seamless shopping experiences. This project demonstrates a fully scalable system architecture using independent microservices for handling users, products, orders, inventory, and notifications.",https://github.com/therehmanujjan/ZiaMart,350,2,2,0,0,1,49,2,3.857142857142857,0,0,0,0,0,3.183673469387755,11.120008790161858,0.4339893100097181,23.08278469799883
231130634,Mendes11,django_events_sourcing,Library that dispatches events based on Django's model Create/Update/Delete operations. Using Nameko Events Dispatcher,https://github.com/Mendes11/django_events_sourcing,59,7,7,2,3,1,19,3,2.1052631578947367,0,0,0,0,0,4.684210526315789,17.448574606955873,0.4792663476874004,38.879470597973445
449097560,michelclemer,backend-python,Clean Architecture Python ,https://github.com/michelclemer/backend-python,21,0,0,0,0,1,15,3,1.5333333333333334,1,1,0,1,3,3.466666666666667,13.66315833669873,0.4476190476190476,22.430011493826715
957064410,flippay-cd,microservice-starter-fastapi,This is intended to speed up the process of creating new python micro-services by generating a boiler-plate using clean architecture,https://github.com/flippay-cd/microservice-starter-fastapi,110,0,0,0,0,0,43,4,2.6511627906976742,1,1,1,1,4,2.9069767441860463,7.813541679246222,0.2221383267894895,19.285998162787767
850686199,smile-rus1,clean-architecture-fastapi,,https://github.com/smile-rus1/clean-architecture-fastapi,120,0,0,0,1,1,150,7,2.0,1,1,1,1,4,2.8666666666666667,3.7223179867917535,0.1304823232323232,4.759730661464692
371215287,CGCL-codes,PDAS,"PDAS (Progressive Differentiable Architecture Search) is a novel network pruning algorithm, which aims to automatically find an appropriate layer width for each layer to reduce network redundancy.",https://github.com/CGCL-codes/PDAS,105,2,2,2,0,2,18,0,9.77777777777778,0,0,0,0,0,41.5,1668.1914046688355,7.390194946268021,14164.705827238531
926057937,Winne004,python_event_sourcing_kata,,https://github.com/Winne004/python_event_sourcing_kata,21,0,0,0,0,1,10,2,3.1,0,0,0,1,1,8.4,32.86260112508801,1.2091666666666667,127.14893064311306
850841209,dingo-actual,om,An LLM architecture utilizing a recurrent structure and multi-layer memory,https://github.com/dingo-actual/om,1104,12,12,0,2,1,31,4,3.870967741935484,0,0,0,0,0,20.06451612903226,525.8658515405032,4.594533640205929,6675.543973151327
921632040,AkuhaPhd,RealTimeWeatherPipeline,"A scalable data pipeline that ingests real-time weather data from multiple sources, processes it, and stores it in a data warehouse. Use the data to train a machine learning model to predict extreme weather events (e.g., hurricanes, floods, or heatwaves). The pipeline should include data validation, transformation, and visualization components.",https://github.com/AkuhaPhd/RealTimeWeatherPipeline,9,0,0,0,0,1,2,2,3.0,0,0,0,0,0,20.0,18.2035639291566,0.875,15.591394822408317
371453265,HarmanDotpy,Named-Entity-Recognition-in-Pytorch,"Named Entity Recognition system, entirely in PyTorch based on a BiLSTM architecture. Includes an analysis and comparison of different architectures and embedding schemes. Includes support for Character Embeddings, CRF layer (developed from scratch), Layer Normalization, Glove embeddings",https://github.com/HarmanDotpy/Named-Entity-Recognition-in-Pytorch,8620,1,1,1,0,1,10,2,11.6,0,0,0,0,0,23.4,901.8912399568286,4.577818224283474,6852.306230395006
611364450,has-abi,fastapi-ddd,Python Domain Driven Design example using FastAPI,https://github.com/has-abi/fastapi-ddd,88,3,3,0,0,1,28,3,2.4642857142857144,1,1,0,1,3,5.178571428571429,22.623049700560244,0.3016456582633053,29.08934682009118
964186293,youssefGha98,dune-query-service,A modular Python client to query and export data from Dune Analytics using typed parameters and clean OOP architecture.,https://github.com/youssefGha98/dune-query-service,2,1,1,0,0,1,2,0,5.0,0,0,0,0,0,20.5,107.9515931033874,1.45,313.0596199998235
954141534,adarshkr357,advanced-ats-software,"An advanced Applicant Tracking System (ATS) integrating OCR-based resume parsing, candidate analytics, and scalable microservices architecture to streamline recruitment and talent acquisition processes.",https://github.com/adarshkr357/advanced-ats-software,12,0,0,0,0,1,7,3,2.2857142857142856,1,0,0,0,1,13.714285714285714,97.5253234342588,1.1758241758241756,623.6413316167725
723938705,pandula12,microservices,A simple microservice and gateway architecture made using Flask,https://github.com/pandula12/microservices,14,0,0,0,0,1,19,1,1.0526315789473684,0,0,0,0,0,4.631578947368421,103.40006000062358,1.2607560568086884,403.8438358565761
727211210,munuhee,shipping-service,RESTful API-based shipping service module tailored for a microservices-based e-commerce architecture. ,https://github.com/munuhee/shipping-service,13,3,3,0,0,1,7,2,2.571428571428572,1,0,1,0,2,5.571428571428571,2.0378089294986297,0.2142857142857142,1.0189044647493148
825157845,cris-millan,polygons,"fast-api, clean architecture, postgresql",https://github.com/cris-millan/polygons,42,0,0,0,0,1,18,3,3.1666666666666665,1,1,1,1,4,5.444444444444445,16.737468358974184,0.5601851851851851,62.90110476178899
970601475,nthtson,user-service,User Service – E-Commerce Microservice Architecture,https://github.com/nthtson/user-service,67,0,0,0,0,1,36,3,3.055555555555556,1,1,1,1,4,3.9166666666666665,7.086801333535592,0.3323688271604939,10.887944468943966
610803874,haseeb-kp,video-to-mp3-converter-microservice-FastAPI,"This project is a video to MP3 converter implemented using a microservice architecture and distributed systems using Fastapi, Kubernetes, RabbitMQ, MongoDB, and PSQL",https://github.com/haseeb-kp/video-to-mp3-converter-microservice-FastAPI,22,0,0,0,0,1,19,5,4.157894736842105,0,0,0,1,1,2.5789473684210527,8.73672282579671,0.4989035087719299,14.850937374219813
730005291,SantiagoAjala0204,Secure-API-Software-Security,"This repository contains a secure API architecture. The following layers were implemented in the Api: Rate-Limiting, Authentication, Audit Log, and Access Control.",https://github.com/SantiagoAjala0204/Secure-API-Software-Security,2200,0,0,0,0,1,1,1,17.0,0,0,0,0,0,58.0,570.0,5.555555555555555,3166.6666666666665
948784097,jabriboy,hexagonalArchitecture,,https://github.com/jabriboy/hexagonalArchitecture,24,0,0,0,0,1,13,2,1.2307692307692308,1,1,0,1,3,10.692307692307692,14.718933034568902,0.4679487179487179,22.26411870995111
532442915,michaellisitsa,clean-architecture-textbook-codealong,Follow along Sebastian Buczyński - Implementing the Clean Architecture End to End example,https://github.com/michaellisitsa/clean-architecture-textbook-codealong,36,0,0,0,0,1,26,4,3.0384615384615383,1,1,0,1,3,4.153846153846154,15.38132487072426,0.4415954415954415,78.69677167540978
156921041,aint,octopus,🐙 Microservice Architecture Visualization Tool for visualizing and analysing microservice dependency graph.,https://github.com/aint/octopus,79,20,20,2,0,3,2,1,4.0,0,0,0,0,0,26.5,134.24757468445762,2.357894736842105,315.71834317929034
708008224,alex-au-922,PyConHK2023-Clean-Architecture,"This is the code repository for all the frontend, backend and CI/CD code used for deployment",https://github.com/alex-au-922/PyConHK2023-Clean-Architecture,1299,0,0,0,0,1,81,7,3.432098765432099,1,1,1,1,4,6.049382716049383,24.18190260357033,0.5856052812071331,83.66287269513712
281920968,ushatirumalasetty,clean_architecture,,https://github.com/ushatirumalasetty/clean_architecture,8,0,0,0,0,1,35,4,0.1714285714285714,1,1,1,1,4,0.2857142857142857,0.0,0.0,0.0
688976453,SSleimann,todo-app,Todo App using clean architecture,https://github.com/SSleimann/todo-app,146,0,0,0,0,1,95,5,3.168421052631579,1,1,1,1,4,5.378947368421053,31.197295000088115,0.4331594870557719,71.36084787090437
962732218,alhad-khade,load_csv_to_RDS,"This repo describes a data pipeline for a CSV file data to be automatically loaded to AWS RDS MySQL database. The CSV file can originate from a producer external to the company or can be a source internal to the company. This pipeline utilizes the ""Event notification"" feature of S3 bucket to trigger a Lambda function.",https://github.com/alhad-khade/load_csv_to_RDS,41,0,0,0,0,1,1,0,5.0,0,0,0,0,0,10.0,0.0,0.0,0.0
897185040,yeboahd24,cqrs,CQRS,https://github.com/yeboahd24/cqrs,16,0,0,0,0,1,18,2,1.8333333333333333,0,0,0,0,0,2.111111111111111,2.251629167387823,0.1,1.6428070838381428
916605937,veho617,Digit-Classifier,"Softmax Neural Network that classifies digits 0-9, 96% test accuracy. the architecture is 3 layers: 25, 15 and 10 neurons and relu, relu and softmax activation functions respectively. Uses 60000 samples to train and test. ",https://github.com/veho617/Digit-Classifier,3,0,0,0,0,1,1,0,8.0,0,0,0,0,0,0.0,12.0,0.6666666666666666,8.0
504591749,mf-andres,rabbitmq_cqrs_poc,,https://github.com/mf-andres/rabbitmq_cqrs_poc,9825,1,1,1,0,1,55,4,1.3636363636363635,1,1,0,1,3,1.6,1.0007387601697415,0.0545454545454545,0.6413673346696611
87874254,sourabhvora,HyperFace-with-SqueezeNet,"Two multitasking CNNs for simultaneous face detection, landmarks estimation and visibility, pose estimation and gender recognition.  hyperface.py concatenates feature maps from initial, mid and final layers of the network and then branches out to different heads.  multiout.py branches from the final layer of the network to different heads. DataGen2.py is the Data Generator used for reading multiple labels from json files. It is a modified version of Keras's default Data Generator.  The idea is based on the following paper -  [1] R. Ranjan, V. M. Patel, and R. Chellappa. Hyperface: A deep multitask learning framework for face detection, landmark localization, pose estimation, and gender recognition. CoRR, abs/1603.01249, 2016.  The implementation is slightly different. The original HyperFace architecture is built on top of AlexNet while the implementation here uses another architecture called SqueezeNet.",https://github.com/sourabhvora/HyperFace-with-SqueezeNet,246,57,57,15,4,2,3,0,4.0,0,0,0,0,0,49.66666666666666,1413.308686689218,3.4226190476190474,14511.651693683933
480282295,RewCrew,pet_project_private_library,Pet_project based on clean architecture,https://github.com/RewCrew/pet_project_private_library,139,0,0,0,0,1,70,4,2.7,0,1,1,1,3,3.914285714285714,22.20287160618228,0.2745021645021645,76.55394155943615
528757588,mg-takumi-miyake,clean-architecture-like-fastapi,,https://github.com/mg-takumi-miyake/clean-architecture-like-fastapi,17,0,0,1,0,0,35,3,1.5714285714285714,1,1,0,1,3,2.8857142857142857,0.0,0.0,0.0
149301631,OliverRichter,TreeConnect,"This repository contains a simple Keras implementation of the TreeConnect architecture presented in the corresponding paper ""TreeConnect: A Sparse Alternative to Fully Connected Layers"" published at the International Conference on Tools with Artificial Inteligence 2018. The code allows to reproduce the results presented on CIFAR10 using a CNN feature extractor (we refer to the paper for details).",https://github.com/OliverRichter/TreeConnect,4,5,5,2,0,2,1,0,11.0,0,0,0,0,0,6.0,216.33097149259217,3.260869565217391,705.4270809541049
533202114,mohdhussain10,Distributed-ecommerce,Built small e-commerce application using microservice architecture. ,https://github.com/mohdhussain10/Distributed-ecommerce,30,0,0,0,0,1,6,1,3.1666666666666665,0,0,0,0,0,9.333333333333334,66.00585874953286,1.4601449275362317,222.5172025845816
676880190,ttpss930141011,yuwen-yorozuya-linebot,"A LineBot implemented using LangChain, featuring conversation isolation and memory, and implemented using clean architecture for practice.",https://github.com/ttpss930141011/yuwen-yorozuya-linebot,2564,6,6,1,0,1,91,6,3.2857142857142856,1,1,1,1,4,4.626373626373627,10.687878902155802,0.3572954822954822,11.566072587997231
879202602,melodyasper,pycider,Aggregate Composition for Python. A domain driven design architecture.,https://github.com/melodyasper/pycider,109,1,1,0,0,1,21,4,2.619047619047619,0,0,0,0,0,14.285714285714286,63.56929228385839,0.9318101253585124,293.57242592697145
266308184,HarshitPatel25,MNIST-DIGIT-CLASSIFICATION,Placed 2 convolutional layers (32 & 64 units) & 1 dense layer (1024 units) in the architecture. Used window size = 5 and used Max Pooling as well.,https://github.com/HarshitPatel25/MNIST-DIGIT-CLASSIFICATION,43,0,0,0,0,1,5,1,6.2,0,0,0,0,0,1.8,34.49467252263952,1.3,57.833776659251455
614410779,jvpereirarocha,clean-architecture-python,Architectural Patterns studies with practical projects built in Python,https://github.com/jvpereirarocha/clean-architecture-python,5,0,0,0,0,1,13,3,1.7692307692307692,1,0,1,1,3,2.769230769230769,4.855984588087596,0.2769230769230769,3.991566621016801
751685048,Paola-CansecoPenagos,crud_products,"small implementation of the hexagonal architecture in a crud of products made in python, flask and mongoDB",https://github.com/Paola-CansecoPenagos/crud_products,8,0,0,0,0,1,7,2,2.571428571428572,1,0,0,1,2,6.571428571428571,1.3585392863324195,0.1428571428571428,0.6792696431662099
881449661,nakhoacool,python-api,Python with MySQL and AWS Lambda following clean architecture,https://github.com/nakhoacool/python-api,70,0,0,0,0,1,34,5,2.794117647058824,1,1,0,1,3,4.352941176470588,21.17285163908588,0.446078431372549,30.92754138549604
267382236,Bodhiswatta,ICTNet,"ICTNet: a novel network for semantic segmentation with the underlying architecture of a fully convolutional network, infused with feature re-calibrated Dense blocks at each layer.",https://github.com/Bodhiswatta/ICTNet,18,10,10,0,2,1,11,3,6.727272727272728,0,0,0,0,0,17.636363636363637,846.4375506755063,5.211336622489064,7217.386131849751
241553238,rameezk,python-event-sourcing,Event sourcing in Python,https://github.com/rameezk/python-event-sourcing,19,0,0,0,0,1,10,1,3.5,0,0,0,0,0,5.4,7.804216360136381,0.3399999999999999,16.923262013505195
213145482,Dvinespark,cleanArchitecture,Implementation of Clean Architecture With Python,https://github.com/Dvinespark/cleanArchitecture,7,0,0,0,0,1,4,1,0.75,0,0,0,0,0,2.0,4.671614017871911,0.25,2.3358070089359555
365157278,mariogarcia,stocky,proof of concept of basic event-sourcing with Python,https://github.com/mariogarcia/stocky,21,0,0,0,0,2,11,3,2.4545454545454546,0,0,0,0,0,2.5454545454545454,1.4483244153931067,0.1666666666666666,1.7795840690089906
401698791,jesuschm,tasca,Command line sample project using Python and MongoDB - no frameworks - just Hexagonal architecture.,https://github.com/jesuschm/tasca,347,0,0,0,0,1,41,5,1.4390243902439024,1,1,0,1,3,2.707317073170732,5.46360263648078,0.1652618364418938,11.51705486487265
13256086,Nordstrom,cloud-log-poller,A command-line daemon for polling cloud log sources and sending collected log events to a transport such as Splunk.,https://github.com/Nordstrom/cloud-log-poller,21,2,2,0,1,6,8,1,3.875,0,0,0,0,0,7.875,43.57187320813446,1.1875,130.2111641951335
721197102,fabianfalon,flask-ddd-template,🐍 Example of a Python & Flask application using Domain-Driven Design,https://github.com/fabianfalon/flask-ddd-template,77,3,3,1,1,1,42,5,2.952380952380953,1,1,1,1,4,5.095238095238095,4.461365718204667,0.2412698412698412,3.714954472082122
314697524,MohsenDehghankar,clean_architecture_codegen,Python Code Generator For Flutter Projects based on Clean Architecture,https://github.com/MohsenDehghankar/clean_architecture_codegen,11,2,2,0,4,1,1,0,2.0,0,0,0,0,0,58.0,3613.586787557624,8.066666666666666,29149.600086298167
101487734,Rydra,melange,A messaging library for an easy inter-communication in distributed and microservices architectures,https://github.com/Rydra/melange,1610,4,4,4,1,2,89,4,3.7191011235955056,0,0,0,1,1,8.460674157303371,18.33199764197497,0.4435425746956993,62.570507954093415
908622761,naxoxhide,flask-hexagonal-architecture-example,,https://github.com/naxoxhide/flask-hexagonal-architecture-example,5,0,0,0,0,1,11,2,3.8181818181818175,1,0,0,1,2,5.545454545454546,15.662974869404168,0.3708133971291866,22.18101109719939
760281034,HussainAhmad05,Smart_HPA,Smart HPA is a resource-efficient horizontal pod auto-scaler for microservice architectures.,https://github.com/HussainAhmad05/Smart_HPA,14309,2,2,1,1,1,27,7,9.037037037037036,0,1,0,0,1,15.962962962962964,510.4815750257317,4.513785420945256,5164.053430368615
400704115,PJ64,event_sourcing_kinesis,This example demonstrates how to use Amazon Kinesis Data Streams in an event sourcing architecture. ,https://github.com/PJ64/event_sourcing_kinesis,9853,0,0,0,0,1,449,8,5.601336302895323,1,0,0,0,1,41.94432071269488,535.9300405724229,2.972926784447037,5898.67119070561
659464881,cameronj-lw,integration-security-pricing-clean-arch,clean architecture version of security pricing,https://github.com/cameronj-lw/integration-security-pricing-clean-arch,245,0,0,0,0,1,34,4,8.588235294117647,1,1,1,1,4,44.02941176470589,229.4781906577689,2.655865282963209,1445.3297395258155
348835117,joscelino,Clean_architecture,Clean Architecture model in Python,https://github.com/joscelino/Clean_architecture,17,0,0,0,0,1,10,3,1.6,1,0,0,1,2,1.8,0.0,0.0,0.0
175182434,muyani,Income-Service,Flask microservice as part of the road to adapting the microservices architecture,https://github.com/muyani/Income-Service,11,1,1,0,0,1,2,1,3.5,0,0,0,0,0,68.5,42.0,0.8076923076923077,67.84615384615385
219518660,esakik,leonardo-giordani,An example of clean architecture.,https://github.com/esakik/leonardo-giordani,20,14,14,5,0,1,34,2,1.3235294117647058,1,1,1,0,3,6.323529411764706,42.35669035611777,0.4687089475988906,55.10048986733576
857555155,JhonSoto99,shopping_cart_fast_api_clean_architecture,,https://github.com/JhonSoto99/shopping_cart_fast_api_clean_architecture,83,0,0,0,0,1,51,4,3.686274509803922,1,1,1,1,4,6.352941176470588,13.45987391569457,0.6088511162040574,61.33364634578368
276065782,pquochuy,dcase2020-seld,"Source code of the DCASE 2020 SELD submission ""Audio Event Detection and Localization with Multitask Regression Network""",https://github.com/pquochuy/dcase2020-seld,46,16,16,2,0,2,19,1,4.631578947368421,0,0,0,0,0,21.894736842105264,1012.8062723532224,4.86888552388605,8338.471375961322
139344990,jcraftsman,wallet_kata_cqrs_python,,https://github.com/jcraftsman/wallet_kata_cqrs_python,3,0,0,0,0,1,15,2,1.0666666666666669,1,0,0,1,2,1.8666666666666667,1.5509775004326938,0.1666666666666666,1.392481250360578
543012418,BorArt22,project-7-message-passing,Seventh project in Udacity nanodegree program in Data Engineer for AI Applications from Bosch. In this project proof of concept (POC) application is refactored into a microservice architecture using message passing techniques.,https://github.com/BorArt22/project-7-message-passing,854,1,1,0,1,1,46,4,4.326086956521739,0,0,0,0,0,3.5434782608695654,5.876833844195633,0.370807453416149,9.480991199336565
452887220,datastaxdevs,workshop-realtime-data-pipelines,"You will inspect and run a sample architecture making use of Apache Pulsar™ and Pulsar Functions for real-time, event-streaming-based data ingestion, cleaning and processing.",https://github.com/datastaxdevs/workshop-realtime-data-pipelines,10717,3,3,5,0,1,14,2,3.4285714285714284,0,0,0,0,0,5.428571428571429,141.87192230849607,2.657717282717283,696.4444587970072
451608660,tenable,access-undenied-aws,"Access Undenied parses AWS AccessDenied CloudTrail events, explains the reasons for them, and offers actionable remediation steps. Open-sourced by Ermetic.",https://github.com/tenable/access-undenied-aws,1570,262,262,11,6,6,71,6,9.056338028169014,0,0,0,0,0,39.08450704225352,351.68209508431386,2.7440553637294376,2733.405441508033
303911190,MadhavanPillai,python_microservices,simple app to demonstate microservoce architecture,https://github.com/MadhavanPillai/python_microservices,12,0,0,0,0,1,10,1,1.5,0,0,0,0,0,2.4,24.75422070563718,0.415,33.74402797605495
583987281,lucasjunior24,clean-architecture-in-python,,https://github.com/lucasjunior24/clean-architecture-in-python,11,0,0,0,1,1,13,3,1.4615384615384617,1,0,0,1,2,1.7692307692307692,1.3846153846153846,0.0769230769230769,1.3846153846153846
193508513,tchuan,aws-serverless-event-fork-pipeline,"This is a serverless framework version of AWS Event Fork Pipelines (https://github.com/aws-samples/aws-serverless-event-fork-pipelines). The original pipelines are based on SAM which are only available in us region, I converted the backup pipeline to serverless framework based so it can be deployed directly from source code.",https://github.com/tchuan/aws-serverless-event-fork-pipeline,513,0,0,0,12,0,3,1,2.333333333333333,0,0,0,0,0,1.3333333333333333,5.169925001442312,0.3333333333333333,5.169925001442312
706588275,guibos,fastapi-ddd-example,Implementation example of Driven Domain Design (DDD) with FastApi.,https://github.com/guibos/fastapi-ddd-example,42,0,0,0,0,1,54,6,2.2222222222222223,1,1,0,1,3,2.555555555555556,12.042751382327303,0.1541144527986633,15.107257224354358
857917596,garima24112000,Sentiment-Analysis,"Built a deep learning model for sentiment classification in the movie review domain. The architecture included a word embedding layer to represent text data, an LSTM layer for sequence processing, and a classification layer for predicting sentiment. The model effectively classified reviews as positive or negative based on textual input.",https://github.com/garima24112000/Sentiment-Analysis,3214,0,0,0,0,1,4,2,5.0,0,0,0,0,0,16.75,245.6549008093249,3.438446346280448,1180.0725700231294
349903746,shashwatkoliwad,python-microservices-intro,An intro to microservice architecture with python and RabbitMQ,https://github.com/shashwatkoliwad/python-microservices-intro,7,0,0,0,0,1,20,2,2.35,0,0,0,0,0,1.45,1.9958451431320068,0.1375,1.2591394822408315
461467937,1ZimingYuan,Sleep,"Many classical methods have been used in automatic sleep stage classification but few methods explore deep learning. Meanwhile, most deep learning methods require extensive expertise and suffer from a mass of handcrafted steps which are timeconsuming. In this paper, we propose an efficient convolutional neural network, Sle-CNN, for five-sleep-stage classification. We attach each kernel in the first layers with a learnable coefficient to enhance the learning ability and flexibility of the kernel. Then, we make full use of the genetic algorithm’s heuristic search and the advantage of no need for the gradient to search for the sleep stage classification architecture. We verify the convergence of Sle-CNN and compare the performance of traditional convolutional neural networks before and after using the learnable coefficient. Meanwhile, we compare the performance between the Sle-CNN generated through genetic algorithm and the traditional convolutional neural networks. The experiments demonstrate that the convergence of Sle-CNN is faster than the normal convolutional neural networks and the Sle-CNN generated by genetic algorithm outperforms the traditional handcrafted counterparts too. Our research suggests that deep learning has a great potential on electroencephalogram signal processing especially with the intensification of neural architecture search. Meanwhile, neural architecture search can exert greater power in practical engineering applications. We conduct the Sle-CNN with the Python library, Pytorch, and the code and models will be publicly available.",https://github.com/1ZimingYuan/Sleep,28,2,2,0,0,1,8,1,4.875,0,0,0,0,0,57.375,1155.6091593152237,5.88588266389028,11325.605804488425
645775999,Kwasako,CloudComputingProject,"10alytics cloud computing data pipeline project solution using AWS lambda, AWS IAM, AWS S3, AWS Lambda was used to create lambda function, AWS IAM was used to create a role that provide access to AWS S3 bucket and AWS Event Bridge, finally AWS S3 was used to create a bucket inside which the source & destination folders were created. ",https://github.com/Kwasako/CloudComputingProject,225,0,0,0,0,1,1,0,6.0,0,0,0,0,0,1.0,13.931568569324174,0.5,6.965784284662087
750549966,evaristofm,books-fastapi,"Criando uma simples api de livros com conceitos de programação de nivel inicial até o avançado como TDD, Clean code, Clean architecture",https://github.com/evaristofm/books-fastapi,36,0,0,0,0,1,24,3,3.8333333333333335,0,0,0,0,0,7.083333333333333,56.25657602375633,0.7519141737891738,81.39861195800314
699309787,DEbydeepak,Azure_Data_Pipeline_3_layered_archi.,Built 3 layered Architecture (Bronze -> Silver -> Gold),https://github.com/DEbydeepak/Azure_Data_Pipeline_3_layered_archi.,685,0,0,0,0,0,9,2,2.0,0,0,0,0,0,0.3333333333333333,12.6580561503457,0.2901234567901234,13.095918638832291
543210029,ShahriyarR,hexagonal-flask-blog-tutorial,Official Flask Blog tutorial from documentation completely rewritten with Hexagonal Architecture,https://github.com/ShahriyarR/hexagonal-flask-blog-tutorial,221,37,37,8,0,1,54,7,2.2777777777777777,1,1,0,1,3,7.351851851851852,23.364971792208312,0.3817591873147428,33.65906152512388
406914481,Enforcer,implementing-the-clean-architecture,,https://github.com/Enforcer/implementing-the-clean-architecture,2462,54,54,3,1,4,175,5,3.434285714285714,1,1,1,1,4,3.891428571428572,7.883322090552522,0.2593519992048922,21.282222024089744
676660209,salmanbarani,flask-starter,"flask-starter is a versatile Python application that serves as a strong foundation for building various products and services. It embodies the principles of Domain-Driven Design (DDD), Test-Driven Development (TDD), and Event-Driven Architecture (EDA), making it a robust and scalable solution for a wide range of use cases.",https://github.com/salmanbarani/flask-starter,54,0,0,0,0,1,26,6,2.4615384615384617,1,0,0,1,2,7.076923076923077,31.54194738447501,0.5478021978021977,75.16525378959999
108009367,subhashb,clean-transfer,Clean Architecture Example with a Account-to-Account-Transfer Usecase,https://github.com/subhashb/clean-transfer,4,8,8,1,0,2,5,1,2.8,1,0,0,0,1,8.2,8.027793097483524,0.4,9.719761551337925
931185640,jtouley,snowflake-excel-streamlit,"Snowflake Excel to Iceberg Bronze Layer is a lightweight, scalable solution for ingesting Excel files into Snowflake Iceberg tables with a Streamlit-based UI. Designed for fast, schema-flexible ingestion, it eliminates complex DAG architecture while preserving metadata and JSON structure for downstream processing.",https://github.com/jtouley/snowflake-excel-streamlit,4347,1,1,0,2,1,13,2,3.3076923076923075,0,0,0,0,0,7.3076923076923075,18.722351728376854,0.8923576423576424,44.62046480818602
683582437,ivan-buda,MachineLearning_for_BodyMassIndex,"This repository contains an implementation of a simple neural network for predicting Body Mass Index (BMI) based on height and weight values. The neural network architecture consists of an input layer with 2 neurons, a hidden layer with 128 neurons, and an output layer with 1 neuron.",https://github.com/ivan-buda/MachineLearning_for_BodyMassIndex,11,0,0,0,0,1,1,0,2.0,0,0,0,0,0,7.0,349.403623592787,3.972972972972973,1388.1711531929643
961494397,digitalrehman,react-fastapi-mongodb-authentication-microservices-architecture-,react fastapi mongodb authentication  microservices architecture crud operation ,https://github.com/digitalrehman/react-fastapi-mongodb-authentication-microservices-architecture-,8,0,0,0,0,1,17,3,1.8235294117647056,1,1,1,0,3,1.8235294117647056,2.703404390805673,0.1176470588235294,1.883900357316016
555681897,yzjiao,RolePred,"Source code for EMNLP findings paper ""Open-Vocabulary Argument Role Prediction for Event Extraction""",https://github.com/yzjiao/RolePred,17,19,19,2,1,1,2,1,8.5,0,0,0,0,0,49.5,1328.495444234195,7.779617616934107,10335.987650861647
881161696,Hamz1221,EventManager-Discord-Bot,Source code for EventManager Discord bot that dynamically manages pingable roles for created events within a Discord server,https://github.com/Hamz1221/EventManager-Discord-Bot,7,0,0,0,0,1,1,0,5.0,0,0,0,0,0,22.0,248.15640006923095,3.2,794.1004802215392
881650490,omaxfernandes,clean-arch,This project is a Task Manager application developed using **Clean Architecture** principles.,https://github.com/omaxfernandes/clean-arch,31,0,0,0,0,1,45,4,2.6444444444444444,1,1,1,1,4,3.1333333333333333,4.130428263473535,0.1496913580246913,7.9974914023705725
370668437,sagnikmitra,streamlit-event,Find all the Event-related source code here | Regarding MLSA Streamlit Event,https://github.com/sagnikmitra/streamlit-event,3797,0,0,1,0,1,2,0,6.0,0,0,0,0,0,5.5,45.396993759735615,0.6136363636363636,32.47566733638005
689941084,duressa-feyissa,fastapi-clean-architecture-todo-app,,https://github.com/duressa-feyissa/fastapi-clean-architecture-todo-app,59,2,2,0,0,1,46,4,3.239130434782609,1,1,1,1,4,4.565217391304348,3.305085086710384,0.0978260869565217,4.448033204551421
44869163,chmeldax,microservice_example,Example of microservice to show various aspects of microservice-based architecture,https://github.com/chmeldax/microservice_example,208,2,2,0,0,1,14,2,3.4285714285714284,0,0,0,0,0,4.714285714285714,16.651254588240374,0.3357142857142857,16.699525667427658
937523309,sigirace,clean_architecture,clean_architecture,https://github.com/sigirace/clean_architecture,65,0,0,0,0,1,20,3,4.05,1,1,1,1,4,4.3,12.303339526462231,0.480952380952381,24.90199360614573
186324035,eliostvs,python-clean-architecture-example,Example of Clean Architecture using Python,https://github.com/eliostvs/python-clean-architecture-example,156,2,2,0,0,0,14,2,3.4285714285714284,0,0,0,0,0,5.142857142857143,23.059200027281783,0.5824175824175823,31.70646128781229
595394518,cesarmerjan,clean_architecture_with_python,A simplified example of applying clean architecture with python.,https://github.com/cesarmerjan/clean_architecture_with_python,122,2,2,0,0,1,14,2,3.4285714285714284,0,0,0,0,0,6.214285714285714,2.9474758933207434,0.1785714285714285,2.438023660946086
634338361,fsalom,django-clean-architecture,,https://github.com/fsalom/django-clean-architecture,137,1,1,0,0,1,36,6,1.7222222222222223,1,1,1,1,4,2.6666666666666665,1.6997076391693386,0.1180555555555555,1.6556809030381954
818876217,kwon-evan,rentomatic,"Clean Architectures in Python, 파이썬 클린 아키텍쳐",https://github.com/kwon-evan/rentomatic,12,0,0,0,0,1,16,2,1.375,1,1,0,0,2,2.5625,16.723872355129714,0.2908653846153846,18.880151549925525
274511410,MDRCS,architecture-patterns,"Building Architecture For Event-driven, CQRS,SOLID, DDD, TDD, BDD Microservices. ",https://github.com/MDRCS/architecture-patterns,9043,12,12,7,4,2,39,3,3.435897435897436,1,0,0,1,2,8.256410256410257,30.5690024130014,0.6799323111242617,70.01356292226579
715765279,nico-i,photo-ops,"An automation pipeline following a microservice architecture to crop, caption, hashtagify and post photos to social media.",https://github.com/nico-i/photo-ops,7649,1,1,0,5,1,43,7,3.488372093023256,1,1,0,1,3,3.0930232558139537,18.4876638687684,0.4027484143763214,106.18973088207083
897295155,rodrigofrbr,P2P-StreamingMusic,"An implementation of Peer-2-Peer architecture using transport TCP/IP layer interface, aka socket.",https://github.com/rodrigofrbr/P2P-StreamingMusic,12,0,0,0,0,1,7,2,2.571428571428572,1,1,0,0,2,10.0,40.16166773763431,0.8472614342179561,122.15579034863671
855248772,Chiragbachani1608,ParallelX,Multi-threaded File Processing System with Microservices Architecture,https://github.com/Chiragbachani1608/ParallelX,421,0,0,0,0,1,2,0,3.0,0,0,0,0,0,6.0,59.61802464081183,2.2142857142857144,185.5713576918149
466217290,kjduy,HexagonalArchitectureVideoGames,,https://github.com/kjduy/HexagonalArchitectureVideoGames,106,0,0,0,0,1,93,6,1.870967741935484,1,1,1,1,4,3.548387096774193,8.692142973748439,0.1767804387965678,11.747503189180517
582362435,umjoshua,system-design-python,Microservice Architecture and System Design with Python & Kubernetes,https://github.com/umjoshua/system-design-python,87,1,1,0,0,1,14,5,3.2142857142857144,0,0,0,1,1,2.642857142857143,14.58902764497198,0.7148962148962149,37.56338308219487
899119591,radikaledward1,django-ninja-rest-api,"Easy Rest API using Django and Django Ninja Framework, Includes Clean Architecture structuring the folder easy and not complexity",https://github.com/radikaledward1/django-ninja-rest-api,7,0,0,0,0,1,11,2,1.0909090909090908,1,1,0,0,2,0.5454545454545454,0.432262500196679,0.0454545454545454,0.2161312500983395
897962045,beantoan,hexa-demo,Product CRUD API with Hexagonal Architecture,https://github.com/beantoan/hexa-demo,25,0,0,0,0,1,38,6,1.4210526315789471,1,1,1,1,4,3.1052631578947367,8.465238376510221,0.2824162679425837,16.71293963932901
172003740,shimakaze-git,django-clean-architecture,Django sample code like Clean Architecture,https://github.com/shimakaze-git/django-clean-architecture,11,12,12,5,0,0,23,3,1.7391304347826086,0,0,0,0,0,3.608695652173913,0.4134684784489973,0.0434782608695652,0.2067342392244986
105341645,scottslowe,flask-web-svc,A simple but flexible Flask web service used to demonstrate microservices architectures,https://github.com/scottslowe/flask-web-svc,56,16,16,5,1,2,1,2,6.0,0,0,0,0,0,5.0,84.0,1.0,84.0
657849671,rikuto125,restaurant_clean_architecture,,https://github.com/rikuto125/restaurant_clean_architecture,17,1,1,0,0,1,16,3,1.5625,1,1,0,1,3,1.6875,0.2971804688852168,0.03125,0.1485902344426084
590505566,tvasiliev,microservices-example,Example of application with microservices async architecture.,https://github.com/tvasiliev/microservices-example,703,0,0,0,0,2,41,5,2.5853658536585367,0,1,0,1,2,3.1463414634146343,10.140152442261714,0.2198656769176387,21.08603105992189
5819249,mhausenblas,shodan,An event-sourcing-based RDF datastore and processor ,https://github.com/mhausenblas/shodan,116,4,4,2,0,1,1,1,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
47514665,dbgannon,eventstreams,This is the source code for the post on azure stream analytics with sciml,https://github.com/dbgannon/eventstreams,6,0,0,0,0,1,2,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
912573321,Ramonrune,clean-architecture,,https://github.com/Ramonrune/clean-architecture,30,0,0,0,0,1,45,4,2.6444444444444444,1,1,1,1,4,3.1333333333333333,4.130428263473535,0.1496913580246913,7.9974914023705725
97621671,davidpettersson,viktigt-sources,Patching of broken Common Alerting Protocol event sources in Sweden.,https://github.com/davidpettersson/viktigt-sources,25,0,0,0,0,1,4,1,7.25,0,0,0,0,0,246.5,5076.097258095093,6.575788634658664,78863.23449404459
136955334,TimUnderhay,addWindowsSources,Bulk add Windows WinRM event sources to NetWitness Log Collectors,https://github.com/TimUnderhay/addWindowsSources,8,0,0,0,0,1,1,0,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
71211470,Dineshs91,django-cqrs,A demo application to show how cqrs can be implemented in Django,https://github.com/Dineshs91/django-cqrs,53,22,22,9,2,3,27,3,1.6296296296296295,0,0,0,0,0,1.4074074074074074,0.7966583334935904,0.0617283950617283,0.4724032408208692
816435434,marioliveira-mb,CleanArchitecture-Python,,https://github.com/marioliveira-mb/CleanArchitecture-Python,29,0,0,0,0,1,64,4,1.375,1,1,1,1,4,2.5,4.549189526528807,0.1484375,3.66232281391355
239581589,brmed,events_manager,Event Sourcing python implementation.,https://github.com/brmed/events_manager,34,0,0,0,0,5,52,4,2.3076923076923075,1,1,0,1,3,4.365384615384615,4.677974728055886,0.1923076923076923,6.580767445234883
823351891,joelgarciajr84,clean-architecture-with-python,,https://github.com/joelgarciajr84/clean-architecture-with-python,16,0,0,0,0,1,23,4,1.1304347826086956,1,1,1,1,4,1.826086956521739,3.2331653229870927,0.0869565217391304,1.6818000527978942
263789455,mariobittencourt,event-sourcing-python,,https://github.com/mariobittencourt/event-sourcing-python,65,6,6,0,3,1,66,5,2.1666666666666665,1,1,1,1,4,4.106060606060606,8.184128322634777,0.2629476584022038,11.267780958617855
52634855,willow,cqrs-es,,https://github.com/willow/cqrs-es,0,0,0,0,0,2,2,1,0.0,0,0,0,0,0,0.5,0.0,0.0,0.0
661687085,Ash1VT,food-delivery-backend,Backend for a Food Delivery service with a lot of features based on Microservice Architecture,https://github.com/Ash1VT/food-delivery-backend,1678,1,1,0,6,0,414,8,3.864734299516908,1,1,1,1,4,6.210144927536232,11.618022196544745,0.2372474591045054,18.345239815967805
143385131,mathurarchana77,StackedAutoEncoder,"Autoencoder is a network that learns to encode itself. The neural network is trained to copy its input at the output layer. In this code, the two autoencoder layers are stacked together and the overall architecture is build to perform classification.  ",https://github.com/mathurarchana77/StackedAutoEncoder,200,1,1,1,0,1,1,0,11.0,0,0,0,0,0,93.0,2490.0112303278274,6.2377622377622375,15532.098024142811
477243545,suyog-dahal,watchitSCP,This application actively monitors the fileSystem event and moves the file remotely to the destination folder from the source folder present locallly using SCP client,https://github.com/suyog-dahal/watchitSCP,1,0,0,0,0,1,1,0,7.0,0,0,0,0,0,5.0,33.68825906469125,0.6666666666666666,22.458839376460837
200662089,jessielaf,modad,Modular monolith assembler,https://github.com/jessielaf/modad,25,1,1,0,1,1,8,1,3.25,0,0,0,0,0,7.125,2.3443609377704338,0.1875,1.1721804688852169
347763342,je-l,cqrs-search,,https://github.com/je-l/cqrs-search,7,0,0,0,0,1,5,1,4.6,0,0,0,0,0,5.0,13.856842503028858,0.7,29.989173756274063
621490081,daneschoen,fastapi_auth0,FastAPI auth0 authentication layer for Microservices architecture,https://github.com/daneschoen/fastapi_auth0,1121,0,0,0,0,1,11,2,4.545454545454546,0,1,0,0,1,15.181818181818182,94.67101671776858,1.3149350649350648,840.932352574567
332403700,saurabhbhise16,PodChangeNotifier,This project will help you share files and text with convenience. It uses distributed architecture and lots of microservices to accompalish tasks and ,https://github.com/saurabhbhise16/PodChangeNotifier,8,0,0,0,0,0,1,1,2.0,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
894804216,bykof,hexagonal-ddd-in-python,This repository explains the hexagonal domain driven design approach in the Python language,https://github.com/bykof/hexagonal-ddd-in-python,23,0,0,0,0,1,1,0,0.0,0,0,0,0,0,1.0,4.754887502163469,0.5,2.3774437510817346
214697632,wallacesilva,pycleanarch,A simple Python Framework to work with Clean Architecture for Web,https://github.com/wallacesilva/pycleanarch,6,0,0,0,0,1,2,1,1.5,0,0,0,0,0,0.0,0.0,0.0,0.0
818875195,tasnint,javascript_api,Basic javascript API project based on microservices architecture,https://github.com/tasnint/javascript_api,434,0,0,0,0,1,4,8,3.5,0,0,0,0,0,2.75,11.816165626622604,0.625,11.221804688852169
974396171,everthefullstack,python-clean-arch,Projeto Python voltado para o estudo da Clean Architecture,https://github.com/everthefullstack/python-clean-arch,51,0,0,0,0,1,62,3,2.306451612903226,1,1,1,1,4,1.9838709677419355,2.803833595368758,0.1425219941348973,3.939319020683428
183929030,alexfowler,calc,TDD code example from Leonardo Giordani's Clean Architectures in Python,https://github.com/alexfowler/calc,26,0,0,0,0,1,10,1,1.2,0,0,0,0,0,6.0,35.902666659861566,0.5230769230769231,43.47157477608032
861232463,pks20iitk,Microservice-Architecture-and-System-Design-with-Python-Kubernetes,This repo is for Microservice architect  which contains detailed system design and end to end deployment using Kubernetes,https://github.com/pks20iitk/Microservice-Architecture-and-System-Design-with-Python-Kubernetes,19,0,0,0,0,1,14,3,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
129893663,coderwassananmol,neuralnet,"Generating text using a pre-trained multi-layered neural network architecture using TensorFlow, Keras and textgenrnn.",https://github.com/coderwassananmol/neuralnet,7006,1,1,0,2,2,1,2,1.0,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
732593890,ofgirichardsonb,photovote,A simple Python FastAPI application demonstrating Event-Driven Architecture and Domain-Driven Design,https://github.com/ofgirichardsonb/photovote,270,0,0,0,0,1,45,2,2.8222222222222224,1,0,0,0,1,4.022222222222222,5.565544960346613,0.1646198830409356,15.173899556313229
239000231,quirkles,docker-cqrs,,https://github.com/quirkles/docker-cqrs,17,0,0,0,1,1,13,2,2.3846153846153846,0,0,0,0,0,7.846153846153846,25.07741202295536,0.8732282210543082,72.11451423088036
894523991,anibalpires4,Impact-of-Max-Pooling-on-CNN-Performance,Exploring the impact of max-pooling layers on the performance of Convolutional Neural Networks for image classification. Includes comparisons of architectures with and without max-pooling.,https://github.com/anibalpires4/Impact-of-Max-Pooling-on-CNN-Performance,9,0,0,0,0,1,1,0,10.0,0,0,0,0,0,19.0,252.21970596792264,4.173076923076923,1052.532234519985
545999320,anjalibarnwal31,Test-Fest,Hacktoberfest is an annual worldwide event held during the month of October. The event encourages open source developers to contribute to repositories through pull requests (PR). GitHub hosts many open source repositories that contribute to Microsoft Learn content.,https://github.com/anjalibarnwal31/Test-Fest,7,0,0,85,0,0,4,0,2.25,0,0,0,0,0,3.25,130.80013843598417,2.505952380952381,717.1663231897138
17041238,gear11,pypelogs,Generator-based framework for piping log data (and other discrete event sources) from inputs to outputs,https://github.com/gear11/pypelogs,356,0,0,0,0,1,43,2,3.488372093023256,0,0,0,0,0,14.883720930232558,101.61055457819911,2.203518460301582,523.7611287851724
869047130,YiouTang,ERP_Xception,"Paper ""Classification of EEG event-related potential Related open source code for recognition based on multichannel recalibration",https://github.com/YiouTang/ERP_Xception,1788,0,0,0,0,1,21,2,12.904761904761903,1,0,0,0,1,11.047619047619047,403.2452053804224,2.700074499151785,2328.9183397247584
937699146,IRomanchuk06,football_app,"Python desktop app for managing player databases with PyQt5 GUI, SQLite, and XML import/export. Features CRUD, search, and pagination. Built with layered architecture, tested with pytest.",https://github.com/IRomanchuk06/football_app,195,0,0,0,0,1,24,2,2.75,1,1,1,1,4,19.041666666666668,174.21519352684552,1.257259363187534,407.56102780605534
196137426,ihch,TodoList_CleanArchitecture,,https://github.com/ihch/TodoList_CleanArchitecture,15,1,1,0,10,0,33,5,1.121212121212121,1,1,1,1,4,3.0,1.9459791780756512,0.0909090909090909,1.2079861800124765
139158343,stytim,LFW_Siamese_Pytorch,"This project uses the ​Labeled Faces in the Wild​ (LFW) dataset​, and the goal is to train variants of deep architectures to learn when a pair of images of faces is the same ​person​ or not. It is a pytorch implementation of Siamese network with 19 layers.",https://github.com/stytim/LFW_Siamese_Pytorch,61,19,19,7,1,0,2,0,11.5,0,0,0,0,0,41.0,1283.9264338144903,8.416602167182663,10795.930797571327
417911890,MohsinAslam186,Colour_Detection_using_Pandas_and_OpenCV,"In this Python project with source code, we learned about colors and how we can extract color RGB values and the color name of a pixel. We learned how to handle events like double-clicking on the window and saw how to read CSV files with pandas and perform operations on data. This is used in numerous image editing and drawing apps.",https://github.com/MohsinAslam186/Colour_Detection_using_Pandas_and_OpenCV,210,0,0,0,0,1,1,0,3.0,0,0,0,0,0,5.0,305.72817064368866,3.5,1070.0485972529102
974403007,Rivenception,gym_cqrs,CSC 545 final project,https://github.com/Rivenception/gym_cqrs,879,0,0,0,0,1,5,1,5.0,0,0,0,0,0,6.6,92.22855123455896,2.526315789473684,293.7891303229434
283582517,gerbless,clean-architecture-example-project,esquelo para propuesta de proyecto python aplicando clen architecture,https://github.com/gerbless/clean-architecture-example-project,74,0,0,0,3,1,29,3,3.3793103448275863,1,1,1,1,4,4.241379310344827,5.590686285213955,0.1922413793103448,5.5354030237396525
554060835,THU-KEG,MAVEN-ERE,"Source code and dataset for EMNLP 2022 paper ""MAVEN-ERE: A Unified Large-scale Dataset for Event Coreference, Temporal, Causal, and Subevent Relation Extraction"".",https://github.com/THU-KEG/MAVEN-ERE,119,83,83,9,5,7,34,2,8.764705882352942,0,0,0,0,0,41.38235294117647,870.5332975565692,6.771361785472106,7109.183534708467
495477203,DanaAkp,recipes_project,Project with architecture microservices. Recipe generator for registered users for week/month etc,https://github.com/DanaAkp/recipes_project,59,0,0,0,0,1,44,4,2.9545454545454546,1,0,1,0,2,3.840909090909091,6.793623479713357,0.1837704778881249,11.299588956620006
705766313,discoroveryx,py_clean_architecture,,https://github.com/discoroveryx/py_clean_architecture,3,0,0,0,0,1,1,0,3.0,0,0,0,0,0,38.0,2.0,0.5,1.0
957306312,Mostafa-Abedi,PM4-Pub-Sub,This milestone required the implementation of a cloud-based election system built on a microservices architecture using Google Cloud Pub/Sub.,https://github.com/Mostafa-Abedi/PM4-Pub-Sub,7,0,0,0,0,1,3,2,7.333333333333333,0,0,0,0,0,4.0,86.01173393178601,1.68,177.5462840072007
241060561,tikalk,delta-architecture,"A data pipeline that captures data changes in Microservices Applications, streams it to a Data Lake and processes it to maintain an up to date replicated table",https://github.com/tikalk/delta-architecture,15,0,0,0,1,13,6,3,3.1666666666666665,0,0,0,0,0,3.5,12.547368752524047,0.3888888888888889,29.27719375588945
98790455,joseparnaurosello,ddd-python-django-hexagonal-architecture,,https://github.com/joseparnaurosello/ddd-python-django-hexagonal-architecture,6,2,2,0,0,0,22,2,1.4545454545454546,1,0,0,1,2,2.5454545454545454,1.7479153416630269,0.1136363636363636,2.31483267148711
765753093,Eugene-ivz,microservices_architecture_flask_example,"Learning project about microservices architecture with flask, rabbitmq, mongodb, postgresql, jwt, nginx",https://github.com/Eugene-ivz/microservices_architecture_flask_example,2743,0,0,0,0,1,30,4,3.433333333333333,0,0,0,0,0,4.1,17.16555966488208,0.3930629827688651,25.159792040691805
632320545,PrathamBhatTech,MicroService-Communication-with-RabbitMQ-in-Docker,"Creating a robust microservices architecture entails structuring various components that interact and exchange data through RabbitMQ, a reliable messaging system, fostering efficient communication and cooperation among elements to achieve flexibility, maintainability, and responsive scalability in the overall system design.",https://github.com/PrathamBhatTech/MicroService-Communication-with-RabbitMQ-in-Docker,378,2,2,3,0,1,5,2,3.2,0,0,0,0,0,2.6,1.901955000865388,0.2,0.9509775004326938
281888119,Aya010,clean_architecture_test,,https://github.com/Aya010/clean_architecture_test,34,0,0,0,0,1,33,2,2.090909090909091,1,0,0,0,1,6.424242424242424,20.583359658208725,0.4928515928515927,28.139223649213918
937895227,Grissukkie,cqrs-project,,https://github.com/Grissukkie/cqrs-project,9,0,0,0,0,1,6,2,3.6666666666666665,1,0,0,0,1,3.6666666666666665,0.5,0.1666666666666666,0.5
873885275,czheng181920,SoftwareArchitectureMicroservices,,https://github.com/czheng181920/SoftwareArchitectureMicroservices,49,0,0,0,0,1,12,2,2.1666666666666665,0,0,0,0,0,31.666666666666668,150.96584771072935,1.0747222222222224,577.619773487322
123479772,rachit-ranjan16,mnister,Handwritten Digit Recognition through Deep Learning following Microservice Architecture,https://github.com/rachit-ranjan16/mnister,55,0,0,1,0,1,17,2,1.9411764705882355,0,0,0,0,0,1.588235294117647,13.26826487547602,0.4227941176470588,63.02064269957062
823931085,Rojas-Andres,fastapi-hexagonal-architecture,,https://github.com/Rojas-Andres/fastapi-hexagonal-architecture,37,2,2,0,0,1,29,4,2.103448275862069,1,0,1,1,3,1.827586206896552,2.0511167602279934,0.1379310344827586,2.6280622091583017
325495921,massa423,clean-architecture-fastapi,Simple CRUD RESTful API with FastAPI and Clean Architecture,https://github.com/massa423/clean-architecture-fastapi,220,7,7,4,2,1,29,4,3.724137931034482,1,1,1,0,3,5.413793103448276,12.007888904416554,0.2776769509981851,23.79092099806449
325476264,ftnext,rentomatic,clean architecture practice based on https://github.com/pycabook/rentomatic,https://github.com/ftnext/rentomatic,59,4,4,1,1,1,37,2,1.3243243243243243,1,1,1,0,3,5.891891891891892,39.17038251824769,0.4307055194151968,50.756891784405305
683486566,MichaelSchaapDev,VellumVault,"VellumVault is a Library Management System built with Python and Django, following Domain-Driven and Test-Driven Design principles. Manage users, books, loans, and more with RESTful APIs.",https://github.com/MichaelSchaapDev/VellumVault,63,0,0,0,5,1,66,5,0.8636363636363636,1,1,1,1,4,2.106060606060606,12.383175822802128,0.3059478715728715,30.500762994274943
169579121,Salehbigdeli,Clean-Arc,I'm trying to learn about software architecture with clean architecture in python book.,https://github.com/Salehbigdeli/Clean-Arc,31,1,1,0,0,0,11,1,1.9090909090909087,0,0,0,0,0,3.909090909090909,27.22650962724904,0.5746753246753247,38.89619963424064
907515370,Ashraf-Alkafury,SystemEventLogger,"A Python tool that fetches and analyzes Windows Event Logs from various sources, filters them by time range, and exports results to CSV. It also monitors CPU and memory usage in real-time. Built with Tkinter, the tool provides a user-friendly interface for IT professionals to analyze events and track system performance.",https://github.com/Ashraf-Alkafury/SystemEventLogger,10317,0,0,0,0,1,1,1,9.0,0,0,0,0,0,17.0,126.65973476959635,4.8,607.9667268940625
790719239,Asylbek2023,django-clean-architecture,,https://github.com/Asylbek2023/django-clean-architecture,177,0,0,0,0,1,145,6,2.7379310344827585,1,1,1,1,4,8.83448275862069,43.34593359322255,0.4267504374829463,100.21109212100926
836705342,alexmllo,microservices-mp3,App that converts video files to mp3 files using a microservice architecture,https://github.com/alexmllo/microservices-mp3,9227,0,0,0,0,1,14,3,3.071428571428572,0,0,0,1,1,2.7857142857142856,15.138974074573635,0.7148962148962149,38.38830272659734
585528173,kozanakyel,Flask-blog-tutroial-with-Hexagonal-Architecture,For the Flask web app compose Hexagonal application template for next projects.,https://github.com/kozanakyel/Flask-blog-tutroial-with-Hexagonal-Architecture,305,2,2,0,0,1,23,3,3.782608695652174,0,0,1,0,1,7.086956521739131,13.230561326207509,0.4855072463768116,17.21852424578578
263055628,jakobhviid,ServiceAbstractionLayer,Service Abstraction Layer (SAL) is an ontology that helps create a layer of abstraction between services. It is most often deployed in a micro-service architecture.,https://github.com/jakobhviid/ServiceAbstractionLayer,220,1,1,0,0,3,1,2,2.0,1,0,0,0,1,18.0,118.59257041502654,1.5,177.8888556225398
849568216,meghiaws,django-rabbitmq-microservice,A demo app for microservice architecture,https://github.com/meghiaws/django-rabbitmq-microservice,27,0,0,0,0,1,43,4,1.558139534883721,0,0,0,0,0,0.7906976744186046,1.1637000004025058,0.0930232558139534,0.9425424421623444
854176637,VictorAlexandre1986,Flask-Clean-Architecture-,,https://github.com/VictorAlexandre1986/Flask-Clean-Architecture-,81,0,0,0,0,1,42,2,2.238095238095238,1,1,1,1,4,5.833333333333333,3.810067388715415,0.2142857142857142,5.242691026349096
812518448,jonathon-m,merge-ical,A python utility that will merge multiple ical sources into one based on event name and start time. Used to display a shared calendar without having to maintain one.,https://github.com/jonathon-m/merge-ical,10,0,0,0,0,1,1,0,3.0,0,0,0,0,0,10.0,15.509775004326936,1.0,15.509775004326936
156584564,1024inc,tipsy,Exercise on clean architecture,https://github.com/1024inc/tipsy,46,0,0,0,1,4,50,2,2.16,0,0,0,1,1,7.24,13.39346159625925,0.2833850129198966,28.893513437461777
726363497,warui09,water_billing,This is the back end of a water billing system implemented in Python. The architecture follows Domain Driven Design and Test Driven Design.,https://github.com/warui09/water_billing,10,0,0,0,0,1,6,2,3.0,0,0,0,0,0,3.6666666666666665,4.96240625180289,0.4166666666666667,3.773684376262024
50051381,hargup,source_code_ktj,"Repository for the problems of the event ""Source Code"" at Kshitij 2016",https://github.com/hargup/source_code_ktj,10,0,0,0,0,1,6,1,0.1666666666666666,0,0,0,0,0,2.833333333333333,97.21776090323068,2.638888888888889,579.1276101070845
286991157,CombainerA19,WhatToCelebrateToday,Post daily events from various sources to subreddit,https://github.com/CombainerA19/WhatToCelebrateToday,6,0,0,0,0,1,3,1,6.333333333333333,0,0,0,0,0,28.666666666666668,395.7841214212583,3.6868742368742367,2261.896126883839
814130109,GKA2003,AI-fault-prediction-model,"Development and evaluation of a deep learning model designed to predict credit card defaults. Leveraging a sequential neural network architecture with multiple dense layers, the model undergoes a detailed evaluation process including hyperparameter tuning and performance assessment using accuracy and F1 scores.",https://github.com/GKA2003/AI-fault-prediction-model,1707,0,0,0,0,1,3,0,4.666666666666667,0,0,0,0,0,2.333333333333333,12.67970000576925,0.3809523809523809,14.491085720879145
902038899,chauthuhuong,Clean-architecture,SIU - LTPT - BT2,https://github.com/chauthuhuong/Clean-architecture,20,0,0,0,0,1,24,1,3.125,1,1,1,1,4,3.875,0.6981203125901446,0.1041666666666666,0.765726822961739
926252434,FrankSkep,todo-api,basic to-do list api built with fastapi and mysql using a layered architecture.,https://github.com/FrankSkep/todo-api,9,0,0,0,0,1,18,2,2.7777777777777777,1,0,1,1,3,4.555555555555555,12.366409044328169,0.1121399176954732,6.390929734845584
762593814,ryo-tomizawa,introduction-domain-driven-design,,https://github.com/ryo-tomizawa/introduction-domain-driven-design,144,0,0,0,0,1,1872,5,2.5106837606837606,1,1,0,1,3,4.033119658119658,11.139284417031,0.4958309030764281,24.442039171061868
645136866,priyanshmathur,Fault-Tracing-in-MicroService-Architecture-using-Jaeger,This is a microservice architecture consisting of two services: Admin and User. The services are built using Flask and PostgreSQL and are integrated with a distributed tracing system to enable effective monitoring and troubleshooting,https://github.com/priyanshmathur/Fault-Tracing-in-MicroService-Architecture-using-Jaeger,2511,0,0,0,0,0,2,3,5.0,0,0,0,0,0,4.0,4.754887502163469,0.5,2.3774437510817346
615332488,matinone,microservices_python,"Microservices architecture using Python, Kubernetes, RabbitMQ, MongoDB and MySQL.",https://github.com/matinone/microservices_python,183,1,1,1,0,1,11,2,3.363636363636364,0,0,0,1,1,3.4545454545454546,19.08414072490807,0.7027972027972028,42.03378805638448
316143568,mareenafernandes,Speed-Typing-Test,"Problem Statement: In this Python project, I have built an exciting project through which one can check and even improve their typing speed. For a graphical UI, I used the pygame library which is utilized for working with illustrations. Like-  This project requires some knowledge on topics like Python, and some python libraries pygame, etc. Python - Python is easy to learn and work on with the language. It is an elevated level, broadly useful programming and profoundly intruded on language. Pygame - Pygame library is an open-source module for the Python programming language explicitly proposed to assist you with making games and other mixed media applications. Based on the profoundly versatile SDL (Simple DirectMedia Layer) improvement library, pygame can stumble into numerous stages and working frameworks. Functionalities supported by this project:  The draw_text() technique for Game class is a helper function work that will draw the content on the screen. The get_sentence() technique will open up the file and return an irregular sentence from the rundown. We split the entire string with a newline character. The show_results() technique is where we calculate the speed of the user’s typing. The time begins when the user clicks on the input box and when the user hits the return key ""Enter"" at that point we play out the distinction and calculate time in seconds. The run() method-This is the primary strategy for our group that will deal with all the events/occasions. We call the reset_game() strategy at the beginning of this technique which resets all the variables. The reset_game() method resets all variables so we can begin testing our typing speed again. Software Requirement:  Programming language – Python. Operating System – Windows/Linux. Hardware Requirement: Nothing specific.  Code Requirements:  background.jpg icon.png type-speed-open.png sentences.txt",https://github.com/mareenafernandes/Speed-Typing-Test,265,0,0,0,0,1,1,0,5.0,0,0,0,0,0,35.0,731.0075190728995,5.909090909090909,4319.58988543077
575130704,azizdogru,Microservice-Architecture-for-Phonebook-Web-Application-Python-Flask-with-MySQL-using-Kubernetes.,Phonebook Microservice Web Application aims to create a web application with MySQL Database using Docker and Kubernetes to give learners the understanding of Microservice architecture. ,https://github.com/azizdogru/Microservice-Architecture-for-Phonebook-Web-Application-Python-Flask-with-MySQL-using-Kubernetes.,235,0,0,0,0,1,2,3,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
863229711,carlosCACB333,fastapi-hexagonal,template para arquitectura hexagonal y CQRS,https://github.com/carlosCACB333/fastapi-hexagonal,12,1,1,0,0,1,23,3,3.739130434782609,1,1,1,1,4,4.478260869565218,2.245041154296047,0.1956521739130435,1.7682679245281303
856275707,apexkv,apexmq,"ApexMQ - An open-source, developer-friendly library for integrating RabbitMQ with Django applications, designed to simplify message-based microservice architectures. ApexMQ offers intuitive decorators, signal-based model integration, and seamless message handling for robust, scalable systems.",https://github.com/apexkv/apexmq,118,2,2,0,0,1,17,2,4.823529411764706,0,0,0,0,0,12.117647058823527,34.074963140897104,0.9330065359477124,102.50651939463472
585653319,vklap,py_ddd_framework,Python Domain-Driven Design Framework,https://github.com/vklap/py_ddd_framework,32,32,32,2,0,1,40,3,2.95,1,0,0,1,2,10.2,20.054032512583525,0.4644909688013136,39.484453221499805
113916473,GMadorell,mastermind_api,"An api to manage mastermind games, written in python using flask, cqrs and ddd principles.",https://github.com/GMadorell/mastermind_api,32,0,0,0,0,1,89,6,2.134831460674157,1,1,0,1,3,2.820224719101124,4.20442120542902,0.1675762439807383,3.904071300991344
140831868,gungunseptian,clean_architecture,clean arcitecture example,https://github.com/gungunseptian/clean_architecture,60,0,0,0,0,1,29,4,1.3103448275862069,1,1,0,0,2,4.655172413793103,11.963127068795094,0.2626436781609195,9.961702298994034
916060257,Atharv-Nanaware,MedalionWorks,"This project implements a scalable Data Warehouse solution using the Medallion Architecture (Bronze, Silver, Gold layers) on AWS Redshift. It integrates Python for data generation, dbt for transformations, and AWS services for seamless data ingestion, transformation, and analytics.",https://github.com/Atharv-Nanaware/MedalionWorks,2733,0,0,0,0,1,7,4,3.142857142857143,1,0,0,0,1,4.714285714285714,14.58824141869523,0.6857142857142857,23.092733481419263
475176363,ganeshnikumbh,cqrs-poc-get,,https://github.com/ganeshnikumbh/cqrs-poc-get,4,0,0,0,0,1,3,3,4.333333333333333,0,0,1,0,1,2.6666666666666665,7.169925001442313,0.5555555555555555,4.251629167387823
210639936,Keda87,quart-clean-architecture,Todo API implemented on Quart using clean architecture,https://github.com/Keda87/quart-clean-architecture,86,7,7,0,1,1,18,3,1.6111111111111112,0,0,0,0,0,2.2777777777777777,0.861654166907052,0.0555555555555555,0.861654166907052
278328499,koualsky,jumping-duck,Very simple example of clean architecture principles,https://github.com/koualsky/jumping-duck,21,0,0,0,0,1,4,1,1.0,0,0,0,0,0,8.5,37.97903272929857,0.9338235294117648,119.62183722933948
445531674,nevalainen,NHL-odds-data,"Project to collect different data (odds, game events, predictions) of NHL games from different sources",https://github.com/nevalainen/NHL-odds-data,7,0,0,0,0,1,3,0,4.666666666666667,0,0,0,0,0,9.666666666666666,112.84269058608008,2.5215686274509803,488.55192572824575
305102083,Biswasahu7,CNN_VGG_Architectures,"The VGG network architecture was introduced by Simonyan and Zisserman in their 2014 paper, Very Deep Convolutional Networks for Large Scale Image Recognition. This network is characterized by its simplicity, using only 3×3 convolutional layers stacked on top of each other in increasing depth.",https://github.com/Biswasahu7/CNN_VGG_Architectures,8,0,0,0,0,1,1,0,15.0,0,0,0,0,0,0.0,15.509775004326936,1.0,15.509775004326936
570904076,VitalyDubovets,clean-architecture-template,,https://github.com/VitalyDubovets/clean-architecture-template,131,2,2,0,0,2,76,5,2.3157894736842106,1,1,1,1,4,2.4473684210526314,5.623458046192105,0.245790612895876,11.33967865602363
846045778,TheDankMatter,Task-Manager,Task Manager using Microservices and containerized architecture,https://github.com/TheDankMatter/Task-Manager,2,0,0,0,0,1,10,4,0.9,1,1,1,0,3,1.9,10.958797503894242,0.2,10.483308753677894
109406967,subnil,Web-Scraping-of-Earth-Quick-Data-Set,"Tools Use: Python, Source: Jigsaw Academy's Data Science Course  Using python to query data from web to access from https://earthquake.usgs.gov ). This portal has a public API that I used to access data for all seismic events for a given duration of time.  Web API.",https://github.com/subnil/Web-Scraping-of-Earth-Quick-Data-Set,3,2,2,0,0,0,1,0,2.0,0,0,0,0,0,0.0,4.754887502163469,0.5,2.3774437510817346
196653454,stivenramireza,event-sourcing,Simple Event Sourcing example for scalable applications.,https://github.com/stivenramireza/event-sourcing,6,0,0,0,0,0,2,0,1.5,0,0,0,0,0,18.0,90.65097889475824,0.5,45.32548944737911
71129071,Oscar-Garcia,django-hexarch-example,Django Hexagonal Architecture Example,https://github.com/Oscar-Garcia/django-hexarch-example,391,16,16,2,0,2,14,3,1.7142857142857142,0,0,0,0,0,1.1428571428571428,2.156391072149728,0.1607142857142857,2.186036607812502
769144036,Bruna557,ddd-cargo-app,"Implementation of the Cargo Shipping System described in ""Domain Driven Design - Tackling Complexity in the Heart of Software"" chapter 7",https://github.com/Bruna557/ddd-cargo-app,92,1,1,0,0,1,61,4,3.295081967213114,1,1,1,1,4,7.819672131147541,40.35013438791534,0.2579852907321919,44.84145762905039
482009534,knucklesuganda,event_sourcing,,https://github.com/knucklesuganda/event_sourcing,3,0,0,0,0,1,4,0,1.25,0,0,0,0,0,5.75,10.262746012021982,0.8333333333333333,11.423710059465662
347686687,ropacz,python-clean-architecture,,https://github.com/ropacz/python-clean-architecture,14,0,0,0,0,1,14,3,1.6428571428571428,1,0,0,1,2,3.7142857142857135,14.639098217891496,0.4795918367346939,24.032155171957196
883111358,mircq,python-api-template,A Clean Architecture API template in Python,https://github.com/mircq/python-api-template,157,0,0,0,0,1,180,5,2.455555555555556,1,1,1,1,4,1.95,2.5923531166584546,0.0844444444444444,5.036482568575067
734266762,HattoriHamzo,clean-kedex,Clean-kedex tries to be an elegantly designed Pokédex project that adheres to the principles of clean code and embraces a hexagonal architecture.,https://github.com/HattoriHamzo/clean-kedex,219,0,0,0,0,1,69,7,1.7681159420289856,1,1,1,1,4,1.289855072463768,3.074078504497475,0.0942028985507246,2.7473878655557136
63320871,invertedpoint,radiality,Framework for microservices with reactive architecture,https://github.com/invertedpoint/radiality,139,1,1,1,5,3,31,4,2.870967741935484,0,0,0,0,0,6.258064516129032,12.50632889148244,0.5878136200716846,31.096008396964503
789817776,krishshah17,inventory-management-system-using-MicroSerices-Architecture-and-RabbitMQ,inventory management system implemented using MicroServices Architecture and RabbitMQ,https://github.com/krishshah17/inventory-management-system-using-MicroSerices-Architecture-and-RabbitMQ,10638,0,0,0,0,1,1117,8,8.33661593554163,1,0,1,1,3,53.183527305282006,634.4386916239647,3.921748776704504,6318.847177109819
3486952,lateefj,cltpy_chat,Example of event sourcing for better error handling,https://github.com/lateefj/cltpy_chat,104,4,4,0,0,1,7,5,4.142857142857143,0,0,0,0,0,11.714285714285714,28.95502729974592,0.9662698412698412,54.59946903392603
864193311,parthsalvi17,laughing-octo-palm-tree,Microservice Architecture using GraphQL + Postgresql + Flask + Docker + Kubernetes + gitlab,https://github.com/parthsalvi17/laughing-octo-palm-tree,20,0,0,0,0,1,9,5,3.6666666666666665,0,0,0,0,0,1.6666666666666667,1.5849625007211563,0.1666666666666666,0.7924812503605781
570235466,Valss22,fastapi-microservices,FastAPI microservices architecture for Aviata test task.,https://github.com/Valss22/fastapi-microservices,58,0,0,0,0,2,9,5,2.0,0,0,1,0,1,3.0,18.09759052468876,0.369281045751634,49.8715101328764
922523976,imansadati,django_base_microservice,"This repository is  demonstrates a Django microservices architecture (boilerplate) using Docker, Nginx, and PostgreSQL.",https://github.com/imansadati/django_base_microservice,15,0,0,0,0,1,14,5,2.0,1,1,0,0,2,0.2857142857142857,4.107841071737639,0.2619047619047618,2.625349107297391
490401163,DanduIulianAlexandru,Admin-Apartment-Building,A small python which use layered architecture.,https://github.com/DanduIulianAlexandru/Admin-Apartment-Building,24,0,0,0,0,1,16,5,2.0625,1,1,0,0,2,22.8125,372.7240844014049,1.5558216707183552,1429.616246280885
944449739,esakrissa,modern-isoner,"Modern implementation of ISONER (Information System on Internet Messenger) framework using microservices architecture with Python, FastAPI, Supabase, Redis, and GCP Pub/Sub.",https://github.com/esakrissa/modern-isoner,656,0,0,0,0,1,10,5,9.2,0,0,1,0,1,21.6,87.55639873177579,1.9185283251231524,235.26334590002267
771167485,kaandurmus23,Library-App,Library App With Domain Driven Design,https://github.com/kaandurmus23/Library-App,33,0,0,0,0,1,23,5,2.260869565217391,1,0,0,1,2,6.304347826086956,9.481823945646656,0.4239130434782608,21.565600390661785
379585325,burakdonmez,twitter_scraper,Simple Twitter API wrapper with clean(ish) architecture. Tried to get convenient norms and apply them with django.,https://github.com/burakdonmez/twitter_scraper,54,0,0,0,0,1,55,5,2.5454545454545454,0,0,0,1,1,5.0,14.912305560208983,0.4115268065268066,45.14678643745625
635136197,kline7,Confluent-Kafka,"Kafka is an Open-Source distributed event streaming platform that is high-throughput, low-latency, scalable, fault-tolerant and durable.",https://github.com/kline7/Confluent-Kafka,2,0,0,0,0,1,2,5,1.0,0,0,0,0,0,9.0,27.764662506490406,1.25,34.89699375973561
704044159,michael-bang,eda_ntfy,A sample source plugin for Event Driven Ansible,https://github.com/michael-bang/eda_ntfy,11,0,0,0,0,1,1,5,7.0,0,0,0,0,0,6.0,100.07820003461548,1.0,100.07820003461548
906145934,Temda,fastapi-clean-architecture-design,"Implementing a Clean Architecture in Python using FastAPI Framework with MySQL ORM integration, focusing on modular, testable, and maintainable code structure for scalable applications.",https://github.com/Temda/fastapi-clean-architecture-design,5,0,0,0,0,1,6,5,3.333333333333333,1,1,0,1,3,4.166666666666667,1.5566416671474377,0.25,1.0283208335737186
364989150,LuisNataan,python-ms-solution,Python project using microservice architecture for training purposes only.,https://github.com/LuisNataan/python-ms-solution,11,0,0,0,0,1,8,5,2.375,0,0,0,0,0,5.75,1.7830828133113008,0.1875,0.8915414066556504
632139910,Bailey-W,cfp-map-microservices,A microservice architecture approach to create a website which displays upcoming conferences on a map.,https://github.com/Bailey-W/cfp-map-microservices,34,0,0,0,4,1,2,5,2.5,0,0,0,0,0,4.0,44.377443751081735,1.0576923076923077,69.03487572169472
699871515,AlieksieievYurii,microservice-showcase,This is a showcase pet project where I learn and implement microservice architecture   ,https://github.com/AlieksieievYurii/microservice-showcase,45,0,0,0,0,1,12,5,3.25,0,0,0,1,1,3.25,18.16213642033591,0.834045584045584,45.68259380621052
123996536,OpenSourceCornell,Spring_2018_WICC_OSC,The Git Workshop for the Spring 2018 WICC and Open Source Cornell Introduction to Open Source event.,https://github.com/OpenSourceCornell/Spring_2018_WICC_OSC,51,1,1,21,67,6,106,5,1.8679245283018868,0,0,0,0,0,3.0283018867924527,9.811895460133318,0.5435171746492501,12.233470599449369
629340963,vrushank41,CC-Microservice-communication-with-RabbitMQ,Building and deploying a microservices architecture where multiple components communicate with each other using RabbitMQ,https://github.com/vrushank41/CC-Microservice-communication-with-RabbitMQ,50,0,0,0,0,1,5,5,4.6,0,0,0,0,0,2.0,13.043156216893692,0.8,11.174510609744928
908560091,ju-c-lopes,hexagonal-architecture-django,testando e treinando arquitetura hexagonal com python e django,https://github.com/ju-c-lopes/hexagonal-architecture-django,92,0,0,0,0,1,54,5,1.9074074074074077,1,1,1,1,4,3.759259259259259,13.81547380041925,0.193618373275236,8.84684793800229
354422011,ettoreaquino,pyddd,Domain Driven Design scaffolding for a Python back-end running on Falcon framework,https://github.com/ettoreaquino/pyddd,3,0,0,0,0,0,6,5,0.8333333333333334,1,1,0,0,2,1.5,0.7924812503605781,0.0833333333333333,0.3962406251802891
599984542,wojciechignasiak,microservice_aggregation_pattern_architecture,"This is an example of the implementation of the microservice aggregation pattern architecture in a simple to-do application, without UI and any extra features.",https://github.com/wojciechignasiak/microservice_aggregation_pattern_architecture,63,1,1,0,0,1,71,5,2.267605633802817,1,0,0,0,1,1.323943661971831,1.939108093898217,0.0804524114383269,1.0390350488780336
745052907,paulocalaes,clean_architecture,,https://github.com/paulocalaes/clean_architecture,294,0,0,0,0,1,29,5,2.206896551724138,1,1,0,1,3,3.103448275862069,4.125506112949368,0.1896551724137931,4.687885848135778
901403804,RReddy23,OpenAi-Microservices,"Microservices Architecture using Python , FastAPI & docker for integrating Azure Open AI with ",https://github.com/RReddy23/OpenAi-Microservices,4,0,0,0,0,1,4,5,2.5,0,0,0,0,0,4.0,15.56744228386784,0.5625,35.02674513870264
517137499,Dasacav3,example-hexagonal-architecture-python,,https://github.com/Dasacav3/example-hexagonal-architecture-python,8,1,1,0,0,1,13,5,2.4615384615384617,1,1,0,1,3,4.769230769230769,3.635743269730031,0.1487179487179487,2.3045228849149413
860203355,oscargicast,clean_architecture_python,,https://github.com/oscargicast/clean_architecture_python,3,1,1,0,0,1,4,5,1.5,0,0,0,0,0,14.5,62.77353641551564,1.8796791443850267,184.21586350468
435810144,nmine,clean-architecture-django,,https://github.com/nmine/clean-architecture-django,20,0,0,0,0,1,22,5,1.818181818181818,1,1,1,1,4,2.363636363636364,1.7968571275004022,0.0909090909090909,0.8984285637502011
289476058,fernando24164,ddd-auction-house,Domain Driven Design example with Python,https://github.com/fernando24164/ddd-auction-house,14,0,0,1,0,1,33,5,2.272727272727273,1,1,1,1,4,4.424242424242424,11.447796034342137,0.6476584022038568,26.933672315611243
888644381,gma-training,transaction-event-sourcing,Working through a banking kata,https://github.com/gma-training/transaction-event-sourcing,11,0,0,0,0,1,5,5,1.2,0,0,0,0,0,5.2,27.62346001038465,0.7,45.23910001730775
355638599,jeantardelli,architecture-patterns-with-python,"This repository contains code from the guide Architecture Patterns with Python, Enabling Test-Driven Development, Domain-Driven Design, and Event-Driven Microservices.",https://github.com/jeantardelli/architecture-patterns-with-python,98,1,1,0,0,1,39,5,3.1794871794871797,1,0,0,1,2,7.461538461538462,22.374492921538675,0.5662712903424978,51.36805335623699
975104628,Anaguirv,clean_architecture,https://www.cosmicpython.com/,https://github.com/Anaguirv/clean_architecture,12445,0,0,0,0,1,1610,14,6.437267080745341,1,1,1,1,4,42.07307213930349,536.5959736937334,3.321092201707417,5281.820278430659
638661836,ridwanray,django-microservice-auth-app,Authetication service for a microservice architecture,https://github.com/ridwanray/django-microservice-auth-app,616,3,3,1,0,2,54,5,3.2962962962962963,1,0,0,0,1,6.87037037037037,29.26552651073951,0.4071800045849753,45.155370848702965
833014302,cmayo,django_clean_architecture,,https://github.com/cmayo/django_clean_architecture,28,0,0,0,0,1,75,6,1.8266666666666669,1,1,1,1,4,2.4133333333333336,3.479416449896872,0.1885714285714285,4.218754171511862
708196917,zobayer1,FastAPI-Hexagonal-Architecture,This is a FastAPI demo application implementing the Hexagonal Architecture,https://github.com/zobayer1/FastAPI-Hexagonal-Architecture,13,5,5,0,0,1,12,5,1.5,0,1,0,1,2,1.75,1.1887218755408673,0.125,0.5943609377704336
593758071,aashayamballi,django_clean_architecture,,https://github.com/aashayamballi/django_clean_architecture,8,0,0,0,0,1,25,5,1.6,1,1,0,1,3,1.28,0.3803910001730775,0.04,0.1901955000865387
131432694,Enforcer,pybuses,"Pythonic, flexible implementation of Command Bus (CQRS) & Event Bus",https://github.com/Enforcer/pybuses,34,28,28,0,1,3,15,5,2.533333333333333,0,0,0,0,0,3.4,2.181937063546704,0.2,1.8649445634024724
248234472,lelinho,SQLStreamify,"SQLStreamify is a simple and flexible middleware, with microservice-based architecture, capable of providing real-time data streams obtained by converting queries into continuous queries, without all the CEP tool complexity and with the possibility of execution without changes in legacy systems databases.",https://github.com/lelinho/SQLStreamify,7112,1,1,0,0,0,6,5,6.166666666666667,0,0,0,0,0,11.0,88.37652956478165,1.7724684629096394,234.20664411647329
516060017,SeaSkyThe,microservices-products-list-app,This is my first app built using the microservices architecture.,https://github.com/SeaSkyThe/microservices-products-list-app,326,0,0,0,0,1,22,5,2.5,0,0,1,0,1,1.4090909090909092,1.598273425476212,0.1022727272727272,1.0366066315334044
967993678,tomerorg,devops-clean-library,Devops service implementing SQLAlchemy and Django architecture,https://github.com/tomerorg/devops-clean-library,3,0,0,0,0,0,3,5,0.3333333333333333,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
319061004,BasicWolf,hexagonal-architecture-django,Experiments with Django and Hexagonal Architecture,https://github.com/BasicWolf/hexagonal-architecture-django,461,116,116,28,2,3,45,7,3.977777777777778,1,1,1,1,4,4.311111111111111,7.755939291424648,0.182716049382716,8.899845639591101
891274464,giovanibs,dynamic-stock-allocation,"This project is a Stock Allocation System, designed as a personal learning venture to dive into advanced software engineering concepts such as Domain-Driven Design (DDD), Event-Driven Architecture (EDA), and Test-Driven Development (TDD).",https://github.com/giovanibs/dynamic-stock-allocation,231,0,0,0,0,1,43,5,3.9069767441860463,1,0,0,1,2,17.186046511627907,71.69418468964852,0.8394562380180496,140.23750026413254
507988281,Nadyan,python-backend-model,simple python backend following PEP8 style guide and clean architecture - Work in progress,https://github.com/Nadyan/python-backend-model,18,0,0,0,0,1,13,5,1.7692307692307692,1,0,0,0,1,4.153846153846154,15.765182696190845,0.5164835164835165,25.88078249287698
85479297,geeknam,esser,Event Sourcing Serverlessly,https://github.com/geeknam/esser,520,28,28,3,4,2,41,6,1.951219512195122,0,0,1,1,2,5.2926829268292686,5.301775683745662,0.2939337085678549,8.936947581924548
297197943,javier01123,python_clean_architecture,,https://github.com/javier01123/python_clean_architecture,38,1,1,0,0,1,24,5,1.875,1,0,0,1,2,3.260869565217391,2.598888587426841,0.1956521739130435,2.2887872285900928
341957885,rahungria,clean_arquitecture_auth,Auth rest-api microservice following clean architecture principles for Learning purposes,https://github.com/rahungria/clean_arquitecture_auth,10,1,1,0,0,1,32,5,1.625,1,1,1,1,4,2.375,0.2110902344426084,0.03125,0.1055451172213042
32628495,bmosc,Mindtree_TechFest_2015,Source code for Mindtree Tech Fest Event on 24th Mar 2015 ,https://github.com/bmosc/Mindtree_TechFest_2015,144,0,0,0,0,4,8,5,0.875,0,0,0,0,0,8.125,81.14920446536027,2.0972222222222223,195.7244922132623
912008131,temirlan-k,quiz-app,Backend app with microservice architecture for Quiz Application,https://github.com/temirlan-k/quiz-app,226,0,0,0,0,1,54,5,4.796296296296297,1,1,1,1,4,6.111111111111111,17.275163506807747,0.5158801905963928,43.38586962060746
806314955,Kamran151199,fastapi-clean-architecture,,https://github.com/Kamran151199/fastapi-clean-architecture,88,1,1,0,0,2,54,6,2.462962962962963,1,1,0,1,3,3.425925925925926,5.245370229124166,0.1902116402116402,6.045740619606662
728951834,gabriel-abn,learnify-api,A fictional online courses platform developed in Python with Flask and Pytest using Clean Architecture and TDD concepts.,https://github.com/gabriel-abn/learnify-api,108,1,1,0,0,1,80,7,2.925,1,1,0,1,3,5.6625,15.11244917140758,0.246640625,25.717556968051856
188146144,michel-rodrigues,issue-management-system,Série de publicações sobre Domain-Driven Design do site io.made.com,https://github.com/michel-rodrigues/issue-management-system,28,0,0,0,0,1,24,5,0.0416666666666666,1,1,0,1,3,0.0,0.0,0.0,0.0
814595173,Mohammad-Moiz,Fast-API-Practice,A Microservices Architecture based Python Framework for Web Applications.,https://github.com/Mohammad-Moiz/Fast-API-Practice,6,0,0,1,0,1,13,5,2.8461538461538463,0,0,0,0,0,3.230769230769231,7.699595192696008,0.3846153846153846,9.814979808080624
297966704,gionut,FundamentalsOfProgramming,"projects using Python and programming techniques such as modular programming, layered architectured, principles of monofunctionality, testing, low-coupling and high-cohesion",https://github.com/gionut/FundamentalsOfProgramming,151,1,1,0,0,1,104,5,1.9807692307692308,1,0,0,1,2,24.70192307692308,348.48252561227514,1.933954000561805,1715.8736043738304
946866331,alexgarabt,neural_network,"Implementation from scratch of neural network/MLP (Multilayer Perceptron) architecture, that allows flexible definition  of layers and neurons ",https://github.com/alexgarabt/neural_network,3228,0,0,0,0,1,3,5,3.6666666666666665,0,0,0,0,0,18.666666666666668,364.6680034326944,3.0843621399176957,2241.8893717949254
833425510,ThiagoSchumann,notion-integration,This project demonstrates a Notion API integration using Flask and follows the port/adapter (hexagonal) architecture.,https://github.com/ThiagoSchumann/notion-integration,9,0,0,0,0,1,8,5,2.0,1,1,1,1,4,3.0,4.344360937770434,0.2083333333333333,4.672180468885217
789834601,appvia,terraform-aws-notifications,Module used to forward events from an sns source to one or more destinatsions,https://github.com/appvia/terraform-aws-notifications,1375,0,0,0,7,5,13,5,5.923076923076923,0,0,0,0,0,16.153846153846153,117.7519770983626,1.3175756132412482,385.3920055649396
968396514,Joshh99,bookstore-ms,"Microservices on EKS with Kafka & Circuit Breaker. Features containerization, fault tolerance, & event-driven architecture. Tech: AWS EKS, Docker, K8s, Kafka, Resilience4j. Demonstrates cloud-native distributed systems.",https://github.com/Joshh99/bookstore-ms,36,0,0,0,0,1,10,5,7.5,0,0,0,0,0,19.1,165.499120053446,3.382328079431866,968.8153882425452
927104363,sujalmandalia,Profile-application,This is demo application for practicing event sourcing,https://github.com/sujalmandalia/Profile-application,10,0,0,0,0,1,7,5,2.0,1,1,0,0,2,7.857142857142857,15.364125003090672,0.1298701298701298,13.967386366446064
910678161,virtualelephant,Project-SignalWave,"Project SIgnalWave is a modern, cloud-native application designed to demonstrate the implementation of microservices architectures within a Kubernetes cluster.",https://github.com/virtualelephant/Project-SignalWave,2510,5,5,0,0,1,13,5,6.769230769230769,0,0,0,0,0,14.923076923076923,101.92396850747966,2.92834291214858,399.50439189006
794103457,johannesvm,convolution-left-side-rare-events,Source code for generating results from the paper A Fast and Accurate Numerical Method for the Left Tail of Sums of Independent Random Variables ,https://github.com/johannesvm/convolution-left-side-rare-events,340,0,0,0,0,1,4,5,4.75,0,0,0,0,0,27.25,2658.272298022105,7.7669467787114845,23245.215980198194
526060559,lucianogomes02,login-api,API de Cadastro de Autenticação de Usuário para estudo do Flask e Domain-Driven Design.,https://github.com/lucianogomes02/login-api,28,0,0,0,0,1,18,5,1.2222222222222223,0,0,0,0,0,3.5,7.808564307162241,0.0833333333333333,11.712846460743362
208785652,rcaborges,microservices-antipatterns,algorithm for detecting anti-patterns in microservices architectures,https://github.com/rcaborges/microservices-antipatterns,14,1,1,0,0,2,2,5,9.0,0,0,0,0,0,25.0,483.9078397581124,5.673624288425048,3139.227217621138
334511644,Ejiro-Edwin,Microservices-App-django-flask-rabbitMQ-Docker,A Microservices Cart-based application built with Django and Flask with Event-Driven Architecture with RabbitMQ and containerized with Dockers,https://github.com/Ejiro-Edwin/Microservices-App-django-flask-rabbitMQ-Docker,15,1,1,0,0,1,21,5,2.333333333333333,0,0,0,0,0,1.238095238095238,0.9056928575549466,0.0952380952380952,0.4528464287774733
305449206,abhi-72,kong-django-microservices,Micro-services architecture,https://github.com/abhi-72/kong-django-microservices,9,0,0,0,0,1,28,5,1.6785714285714286,0,0,1,0,1,0.7142857142857143,0.3396348215831049,0.0357142857142857,0.1698174107915524
534812658,marselbeqiri,publishing_platform,Publishing Platform built on Event Sourcing and CQRS. Django Starter Boilerplate.,https://github.com/marselbeqiri/publishing_platform,80,0,0,0,0,2,84,5,2.6785714285714284,1,0,1,0,2,4.416666666666667,5.078529301644554,0.2164742499563928,6.335715422526381
123387200,UTKARSHPRAJAPTI,Web-Scraping-of-Earth-Quick-Data-Set_by_Jigsaw_Academy,"Tools Use: Python, Source: Jigsaw Academy's Data Science Course Using python and topic is T02. get from:- earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2016-10-01&endtime=2016-10-02 ). ",https://github.com/UTKARSHPRAJAPTI/Web-Scraping-of-Earth-Quick-Data-Set_by_Jigsaw_Academy,4,0,0,0,0,0,2,5,5.0,0,0,0,0,0,2.0,40.38721875540868,1.0,40.38721875540868
602744486,KarolBautrel,Starlite-cqrs-car-service,,https://github.com/KarolBautrel/Starlite-cqrs-car-service,25,0,0,0,0,1,17,5,4.0,0,1,1,0,2,6.411764705882353,14.673440265417396,0.5854341736694678,36.95152080263685
865977168,AndreAppolariFilho,e-commerce-microservice-flask,"Simple project to practise microservice architecture, by building a small set of functionalities for e-commerce",https://github.com/AndreAppolariFilho/e-commerce-microservice-flask,12,0,0,0,0,1,3,5,8.0,0,0,0,0,0,16.666666666666668,153.2185942085936,2.344226579520697,373.1748342620402
884345558,anthoHerrera,todo_list_hex_arch,dummy project todo list with hexagonal architecture,https://github.com/anthoHerrera/todo_list_hex_arch,10,0,0,0,0,1,7,5,2.7142857142857144,1,1,0,1,3,5.857142857142857,8.194200001648358,0.2142857142857142,12.291300002472536
644238007,jupyter-naas,naas-python,Python SDK for managing cloud-native applications and infrastructure through Naas services. Built using hexagonal (ports and adapters) architecture.,https://github.com/jupyter-naas/naas-python,480,4,4,1,6,1,56,6,4.946428571428571,1,0,1,0,2,13.839285714285714,44.72019503748883,0.680486399565347,150.85591431053777
742796075,devalentineomonya,Health-Care-Management-System-Python-FastAPI,"A modern healthcare platform enabling secure patient data management, intelligent appointment scheduling, and medical record tracking. Built with FastAPI microservices architecture, featuring JWT authentication, Redis caching, and RabbitMQ messaging. Designed for clinics/hospitals needing HIPAA-compliant solutions with real-time notification.",https://github.com/devalentineomonya/Health-Care-Management-System-Python-FastAPI,34,3,3,1,0,1,28,5,6.642857142857143,1,0,1,0,2,11.535714285714286,88.3966909784539,1.572714815868448,342.2204631770487
329077718,clintonmdev,BackendWS-Recipe,Backend REST API app with login system using token based authentication method. Filtering feature using query input. Images files management. Dockerized application. Test included . Microservices architecture,https://github.com/clintonmdev/BackendWS-Recipe,65,1,1,0,0,1,38,5,2.6052631578947367,1,0,0,0,1,4.473684210526316,1.2899881581224706,0.1228070175438596,1.0069648028023792
547203203,FelisCatusKR,fastapi-todo-clean-architecture,FastAPI를 이용해 clean architecture를 활용하여 Todo API를 구현해보는 프로젝트입니다.,https://github.com/FelisCatusKR/fastapi-todo-clean-architecture,13,0,0,0,0,1,10,5,3.1,0,0,0,0,0,5.7,3.628421251514428,0.3,4.817143127055295
946193740,aepel,python-clean-architecture-poc,python-clean-architecture,https://github.com/aepel/python-clean-architecture-poc,1,0,0,0,0,1,3,5,1.6666666666666667,0,0,1,0,1,1.0,0.0,0.0,0.0
753327144,Prince-John,PSD-discrete-event-simulator,Open Source Finite Event Simulator for mixed mode pulse shape discriminator ASICS,https://github.com/Prince-John/PSD-discrete-event-simulator,169,0,0,0,1,1,20,5,3.7,0,0,0,0,0,8.6,29.185355616997636,1.358639971139971,69.48961392209921
861285303,lee-b,gundb,"Globally UNstoppable DataBase: always locally writeable, multi-master, with conflict-free globally replicated event sourcing",https://github.com/lee-b/gundb,297,0,0,0,0,1,16,5,4.9375,0,0,0,0,0,14.9375,132.25569268102447,1.428283279220779,668.0914097725346
881488749,BhavdeepSinghGoraya,ACIT-3855-Microservices-Architecture,,https://github.com/BhavdeepSinghGoraya/ACIT-3855-Microservices-Architecture,7933,1,1,0,0,1,11,5,7.909090909090909,0,0,0,0,0,6.818181818181818,120.09289404376642,2.173215673215673,529.8791804605377
974291627,serhanylmz,financial_analysis_agent,"Financial Analysis System combining RAG architecture with LlamaIndex and Langchain to process financial data from multiple sources, perform analytics, and generate comprehensive reports. Features microservices architecture, asynchronous data processing, and interactive visualizations.",https://github.com/serhanylmz/financial_analysis_agent,572,0,0,0,0,1,31,5,9.935483870967742,0,0,0,1,1,39.354838709677416,485.3395305650482,4.441198808795935,4123.145776178375
627159320,AustinOQ,CPUVisualSim,Simulates and visualizes a toy architecture that is deliberately suseptible to speculative execution attacks. This is by no means based on modern current systems but is meant to simplify away most details for clean visuals and key ideas.  ,https://github.com/AustinOQ/CPUVisualSim,28,2,2,1,1,1,7,5,0.7142857142857143,0,0,0,0,0,9.857142857142858,480.34473649101295,1.3978605935127677,3094.9741547107383
833186644,OzodbekPyDev,mcs-accounting,"MCS Accounting is a robust accounting system built using modern Python web development frameworks and design principles. The project leverages FastAPI for the web framework, SQLAlchemy for database interaction, Alembic for migrations, and follows Domain-Driven Design (DDD) and Clean Architecture (CA) principles for a well-organized codebase.",https://github.com/OzodbekPyDev/mcs-accounting,64,0,0,0,0,1,132,6,4.78030303030303,1,1,1,1,4,4.068181818181818,6.685848710207437,0.2952651515151515,13.83937995714701
794835199,sai-kireeti,CNN-Implementation-for-MNIST-Digit-Recognition,"In this project, we aim to build a Convolutional Neural Network (CNN) from scratch to classify handwritten digits using the MNIST dataset. We will implement the network architecture, including convolutional layers with ReLU activation, max pooling, and fully connected layers followed by a softmax activation function.",https://github.com/sai-kireeti/CNN-Implementation-for-MNIST-Digit-Recognition,2,0,0,0,0,1,1,5,7.0,0,0,0,0,0,5.0,39.86313713864836,1.7142857142857142,68.33680652339717
625250848,ebysofyan,funfeed_python-hexagonal-architecture,Sample hexagonal architecture implementation in python 🐍,https://github.com/ebysofyan/funfeed_python-hexagonal-architecture,7,1,1,0,0,1,16,5,0.6875,1,1,1,1,4,0.8125,0.5943609377704336,0.0625,0.2971804688852168
809441112,zeeshanasim78,online_mart_using_kafka,"This project is an Online Mart  with API , Kafka Using Event-Driven Microservices Architecture",https://github.com/zeeshanasim78/online_mart_using_kafka,97,0,0,0,0,1,11,5,2.5454545454545454,0,0,0,0,0,3.0,9.434813505374448,0.0909090909090909,4.717406752687224
928840288,Cashmoney-web,forex-news-scanner,A forex news scanner is a tool that monitors news sources and economic calendars for events that may impact currency prices.,https://github.com/Cashmoney-web/forex-news-scanner,3,0,0,0,0,1,3,5,2.0,0,0,0,0,0,1.6666666666666667,1.5849625007211563,0.1666666666666666,0.7924812503605781
505736931,nhhiep21,tms-backend,"Task Management System (TMS) - FastAPI, Domain Driven Design & Clean Architecture",https://github.com/nhhiep21/tms-backend,57,2,2,0,0,1,102,5,2.9019607843137254,1,1,1,1,4,2.9607843137254903,2.9463515657989747,0.1469421101774043,2.591442409541029
454227118,jvcanavarro,MongORM,Studying pymongo ORM (mongo-engine) by implementing adapter and model layers  in a simple architecture,https://github.com/jvcanavarro/MongORM,10,0,0,0,0,1,4,5,3.0,0,0,0,0,0,5.0,2.3774437510817346,0.25,1.1887218755408673
784883123,jrggementiza,clean-architecture-spike,,https://github.com/jrggementiza/clean-architecture-spike,21,0,0,0,0,1,32,5,2.53125,1,1,0,1,3,7.28125,38.82931618406191,0.8367035742035741,62.01174891684585
927120195,bbelderbos,cqrs-design-pattern,Implementing CQRS (and Unit of Work) on a FastAPI / SQLModel app,https://github.com/bbelderbos/cqrs-design-pattern,26,1,1,0,3,1,2,5,4.0,0,0,0,0,0,14.5,121.25375518772869,1.25,178.0031890305113
672426931,shyam192,Retinal-blood-vessel-segmentation-,"Blood vessel segmentation of fundus images,using cnn architecures like satircasenet architecture consists of upampling and downsampling layers with concatnating layers.Datasets used for this model training are STARE,DRIVE,chase_Db1.",https://github.com/shyam192/Retinal-blood-vessel-segmentation-,7462,0,0,1,0,1,7,5,6.571428571428571,0,0,0,0,0,5.0,78.2583815813663,2.5409363745498195,279.437218900454
425789594,samuelmaudo,connected-developers,Proof of concept of a Python REST API with domain-driven design and hexagonal architecture.,https://github.com/samuelmaudo/connected-developers,85,0,0,0,0,2,84,5,2.0595238095238093,1,1,1,1,4,5.428571428571429,15.192726770996238,0.2977290764790765,28.237253404439475
789538048,ThomasMTurner,SpamClassifier,Minimal Python library to build layer-wise deep feed forward neural networks. Built using this a specifically optimised architecture for email spam classification.,https://github.com/ThomasMTurner/SpamClassifier,8,0,0,0,0,1,2,5,1.5,0,0,0,0,0,24.0,439.1317176799596,3.953125,3471.8851429071806
962702753,penathecreative,stock-tracker-api,"Dummy stock tracker backend built with FastAPI + SQLAlchemy to showcase API integration, database modeling, and clean backend architecture. Ready for customization.",https://github.com/penathecreative/stock-tracker-api,10545,0,0,0,0,1,1221,9,12.530712530712533,1,0,1,0,2,66.08271908271908,760.5644107956322,3.7855241717092536,7557.553246404142
764739430,arpanraj,Enhanced-Epoch-Performance-With-Depth-Layers,optimize training performance through incorporation of depth layers between hidden layers in neural networks. This approach aims to enhance the efficacy of each training epoch by introducing additional layers to the network architecture.,https://github.com/arpanraj/Enhanced-Epoch-Performance-With-Depth-Layers,292,0,0,0,0,1,3,5,2.0,0,0,0,0,0,1.0,972.326651549878,4.475467289719626,6871.474101843412
631233496,claudiosw,python-clean-architecture-example,"This project is a Python Clean Architecture example that uses Flask, SQLAlchemy and PostgreSQL",https://github.com/claudiosw/python-clean-architecture-example,3016,78,78,14,0,1,87,6,2.218390804597701,1,1,1,1,4,3.022988505747126,8.793019282109613,0.2026297457331939,7.952819904692698
802770866,johnfaria,python-ddd-typed,Tactical Domain-Driven Design experiments using python new features.,https://github.com/johnfaria/python-ddd-typed,113,1,1,0,0,1,54,5,2.611111111111111,1,1,0,1,3,5.537037037037037,10.727111454275663,0.2993558776167471,12.438703519475654
791348118,pesfahanian,django_cqrs,CQRS Pattern for Django using Database Replication,https://github.com/pesfahanian/django_cqrs,12,0,0,0,0,1,31,5,1.7741935483870968,1,0,1,0,2,1.4193548387096775,7.452710038416431,0.2674731182795699,18.172580801525637
891019537,raceychan,anywise,"A modern type-based messaging framework in python, designed for the ease of architecture evolvement.",https://github.com/raceychan/anywise,1659,3,3,0,0,1,38,5,4.052631578947368,0,0,0,0,0,13.13157894736842,34.989825580254966,0.7815708886916317,81.52005800771899
482021893,AdamMisiak,Micro_warehouse,"Application created to practice microservices architecture. Orders can be created, updated or allocated using docs requests. Implemented simulation of AWS SQS service using Localstack. Created with FastAPI framework.",https://github.com/AdamMisiak/Micro_warehouse,175,0,0,0,0,1,33,5,2.4545454545454546,1,0,0,0,1,5.727272727272728,33.05821908224123,0.4425324675324675,49.74153728473888
689064208,Hanjianlee,fastapi-boilerplate,Creating a boilerplate based on clean code architecture for FastAPI ,https://github.com/Hanjianlee/fastapi-boilerplate,76,1,1,0,0,1,19,5,2.210526315789474,1,1,1,0,3,1.2105263157894737,1.3916496617711112,0.131578947368421,0.7747721993066082
179557659,mokamoto12,clean-architecture-practice,,https://github.com/mokamoto12/clean-architecture-practice,12,0,0,0,0,1,20,5,2.4,1,1,1,0,3,4.5,2.5132331253245206,0.175,2.3943609377704336
785095963,SBerik,Converter.io,Microservice architecture,https://github.com/SBerik/Converter.io,44,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
932773908,hpphpro,litestar-cqrs-example,,https://github.com/hpphpro/litestar-cqrs-example,368,8,8,0,0,1,98,6,4.448979591836735,1,1,1,0,3,8.081632653061224,33.312255786583755,0.6348598018742716,154.35246304223415
942531702,tanzhongyan,Yorkshire-Crypto-Exchange,"Yorkshire Crypto Exchange is an Enterprise Solution Design (ESD) course project focused on microservices architecture. It is a modular, scalable, and containerized cryptocurrency exchange system using Flask, Next.js, PostgreSQL, RabbitMQ, and Docker.",https://github.com/tanzhongyan/Yorkshire-Crypto-Exchange,2496,0,0,0,1,1,35,6,5.228571428571429,1,0,1,1,3,30.88571428571429,192.38576614833124,2.053839787458741,1500.1394705215707
859526906,Adelkazzaz,Re_Implementing_ResNet,Implementing ResNet152V2 from scratch involves building the architecture layer by layer,https://github.com/Adelkazzaz/Re_Implementing_ResNet,138,1,1,0,0,1,1,5,6.0,0,0,0,0,0,5.0,41.51317942364757,1.5,62.26976913547136
310839730,vineeths96,Compressed-Transformers,"In this repository, we explore model compression for transformer architectures via quantization. We specifically explore quantization aware training of the linear layers and demonstrate the performance for 8 bits, 4 bits, 2 bits and 1 bit (binary) quantization.",https://github.com/vineeths96/Compressed-Transformers,1063,24,24,2,0,2,13,5,5.6923076923076925,1,0,0,0,1,20.76923076923077,275.32962137297164,4.808968887916257,1804.8536546976477
974350439,sriram1544,Face-Anti_Spoofing-System,"A face anti-spoofing system that employs a webcam, an Anaconda prompt, CNN, and the Haar Cascade algorithm has a layered and integrated system architecture",https://github.com/sriram1544/Face-Anti_Spoofing-System,2891,0,0,0,0,1,1,5,5.0,0,0,0,0,0,0.0,191.1567381049613,5.357142857142857,1024.0539541337214
375407891,jangjichang,python-clean-architecture,,https://github.com/jangjichang/python-clean-architecture,47,0,0,1,0,1,23,5,1.826086956521739,1,1,1,0,3,5.695652173913044,35.05289274753464,0.465101061509379,39.00171272113008
956654287,OscarEscamilla,Microservices-Architecture-Veterinary,,https://github.com/OscarEscamilla/Microservices-Architecture-Veterinary,11,0,0,0,0,1,13,5,1.2307692307692308,0,0,0,0,0,0.2307692307692307,3.4321557416009094,0.1153846153846153,3.249275453056161
535310439,MahikaJaguste,remote-file-system,A remote file system service (RFS) using a three layered network architecture.,https://github.com/MahikaJaguste/remote-file-system,162,0,0,0,0,2,6,5,1.3333333333333333,0,0,0,0,0,9.166666666666666,187.28965869327365,3.2855978260869567,747.4228502360376
20540111,ethanrowe,docker-xtream-profundity,A deeply stupid docker image for playing with microservice architecture.  It's twelf-faq-tour!,https://github.com/ethanrowe/docker-xtream-profundity,140,0,0,0,0,0,1,5,6.0,0,0,0,0,0,12.0,90.76048999263462,3.0,272.28146997790384
532565779,Harleydog1020,DerbyRunner,"This is an open source python project that attempts to provide a GUI interface to tables and reports to facilitate managing and scoring Scouting events like Klondike Derby. The intention is that it be simple and straight forward so that non-technical types can have some hope at downloading, installing and running it with little or no help from a highly skilled programmer. How close to that goal it can get will remain to be seen. Some time has been invested. Here some of the accomplishments to date:      A Table style editor at a basic level and tables of data for:     Units: like Troops, Crews, Packs, Ships, etc.     Squads: like Patrols, Dens, Teams     Places: Stations with activities; Waypoints, landmarks but no activities; courses, which are an ordered collection of places     People: adults, youths, and their assignements     A map function has been added as well as a calendar     the beginnings of custom, field level editors for dropdowns and dates in the table editor  All of these are stored in a single file for each ""Event"", using h5 file format so that they can all be kept together",https://github.com/Harleydog1020/DerbyRunner,263,0,0,0,0,1,7,5,5.0,0,0,0,0,0,38.42857142857143,380.1698919376464,2.8668965916156925,2637.556675192091
570553683,aarbatskov,clean_architecture,,https://github.com/aarbatskov/clean_architecture,11,10,10,3,0,1,11,5,1.4545454545454546,0,1,0,1,2,1.2727272727272727,0.0,0.0,0.0
922726644,ahashim01,doctor-appointment-modular-monolith,,https://github.com/ahashim01/doctor-appointment-modular-monolith,39,0,0,0,0,1,78,5,1.8974358974358971,1,1,0,1,3,2.1794871794871797,3.4021984078594314,0.1105413105413105,2.9780726893692067
302671805,ddd-tw,strategy-to-tactical-workshop,This is a Domain-Driven Design Workshop for DDD strategy to tactical modeling workshop. The project is a business scenario of travel ticket booking like SkyScanner.,https://github.com/ddd-tw/strategy-to-tactical-workshop,13,0,0,0,0,8,18,5,1.8333333333333333,1,0,0,0,1,2.611111111111111,6.158564963192272,0.2777777777777778,7.834169983759604
726197874,gopalcb,saas-microservices-infra-isolation,"The primary focus of this project is creating an architecture for a multi-tenant based SaaS system where needed resources for each tenant are isolated from each other and multiple microservices are responsible for different tasks. To achieve this goal, preventing cross-tenant access is the key point that has been considered in this project.",https://github.com/gopalcb/saas-microservices-infra-isolation,575,0,0,0,0,1,19,5,2.631578947368421,0,0,0,0,0,4.473684210526316,10.006612811718783,0.3859649122807017,13.422575357443051
518511984,CrvcMaestro1,hexagonal-architecture-python,Flask + Hexagonal Architecture,https://github.com/CrvcMaestro1/hexagonal-architecture-python,2893,1,1,0,0,1,34,5,2.735294117647059,1,0,0,1,2,4.117647058823529,14.813125322349292,0.2190730837789661,12.438774247174848
315458352,DashankaNadeeshanDeSilva,Multipath_Wavelet_Neural_Networks,The Neural network architecture consists of a parallel multi-path wavelets followed by fully connected layers.,https://github.com/DashankaNadeeshanDeSilva/Multipath_Wavelet_Neural_Networks,11339,1,1,0,0,1,1,5,5.0,0,0,0,0,0,22.0,1030.8059638934087,6.8478260869565215,7058.779970139646
236003022,LeviBorodenko,dgcnn,"Clean & Documented TF2  implementation of ""An end-to-end deep learning architecture for graph classification"" (M. Zhang et al., 2018).",https://github.com/LeviBorodenko/dgcnn,230,24,24,3,0,3,9,5,2.888888888888889,0,0,0,0,0,7.0,59.21159215714724,1.7915404040404042,268.4326727056386
744030847,vinod-kha,mp4-to-mp3-python-microservices,This project demonstrates the converting mp4 videos to mp3 in a microservices architecture.,https://github.com/vinod-kha/mp4-to-mp3-python-microservices,3247,1,1,4,0,1,14,5,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
642183969,Nadia145,quiz-app-final-proyect,"Design and implementation of a quiz application, using a microservice architecture and various AWS services.",https://github.com/Nadia145/quiz-app-final-proyect,576,0,0,1,0,1,6,5,2.333333333333333,0,0,0,0,0,5.5,45.05452480083671,0.7011494252873564,91.40933382338206
670984815,robinshi007,python_clean_arch,Clean architecture for python,https://github.com/robinshi007/python_clean_arch,47,0,0,0,0,1,30,5,3.966666666666667,1,1,1,1,4,6.0,25.072998165054734,0.5343137254901962,93.07195044107038
809690308,initcron,github-poller,Poll GitHub for changes and inform Argo Event Source,https://github.com/initcron/github-poller,7,0,0,1,0,1,1,5,3.0,0,0,0,0,0,8.0,15.509775004326936,1.0,15.509775004326936
372258812,SrinathMurali96,Django-Microservices-Order-Management-System,Implementing Microservices Architecture to  Order Management System using Django REST framework with multiple services deployed in multiple servers with higher availability and zero downtime,https://github.com/SrinathMurali96/Django-Microservices-Order-Management-System,26,1,1,0,0,1,36,5,1.3611111111111112,0,1,1,0,2,0.3055555555555556,3.566165626622602,0.0833333333333333,1.783082813311301
737205994,ayush-garg341,clean-architecture,Example snippets and explanation of concepts from uncle bob book.,https://github.com/ayush-garg341/clean-architecture,20,0,0,0,0,1,19,5,1.0526315789473684,0,0,0,0,0,21.789473684210527,29.423725080855696,1.4026315789473685,77.2174792390051
779813588,Sina-NB,Gallery-Microservice,A Simple Gallery app implemented with microservice architecture.,https://github.com/Sina-NB/Gallery-Microservice,254,0,0,0,0,1,34,5,1.8529411764705883,1,0,1,0,2,1.1470588235294117,1.453725819616679,0.1102941176470588,0.8805199160876501
134188511,jcrosen,dvent,"Simple, immutable, functional models for domain driven design with event sourcing",https://github.com/jcrosen/dvent,32,4,4,1,2,3,11,5,2.5454545454545454,0,0,0,0,0,20.272727272727277,105.9231806063548,1.3837594696969695,414.0520722190918
946307587,mawdesign,lyricSanctuary,"lyricSanctuary: A web application for managing and organizing song lyrics with detailed musical and contextual information, built with Python, CouchDB, and a hexagonal architecture.",https://github.com/mawdesign/lyricSanctuary,174,0,0,0,1,1,6,5,2.333333333333333,1,1,0,1,3,8.0,2.7924812503605785,0.1944444444444444,1.7295739585136225
314253396,edwolf1313,microservice_cloud_project,microservice for cloud based architecture,https://github.com/edwolf1313/microservice_cloud_project,39,1,1,0,0,1,19,5,3.1052631578947367,0,0,0,0,0,3.684210526315789,6.436360904360197,0.1842105263157894,9.404284119584322
84394938,rchatter,Shooting_Mosquitoes_Eventually,"Shoot insects with a laser, post detection with a camera, with open-source tools.",https://github.com/rchatter/Shooting_Mosquitoes_Eventually,186,1,1,0,0,2,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
883953646,anthoHerrera,hexagonal_architecture,Dummy project to practice hexagonal architecture,https://github.com/anthoHerrera/hexagonal_architecture,11,0,0,0,0,1,7,5,1.2857142857142858,0,1,0,1,2,2.571428571428572,0.6792696431662099,0.0714285714285714,0.3396348215831049
779630092,chebolunaveen,docker-compose,docker-compose manages the multi containers and easy way to run and deploy microservice architecture in local .,https://github.com/chebolunaveen/docker-compose,6,0,0,0,0,1,1,5,3.0,0,0,0,0,0,5.0,13.931568569324174,1.3333333333333333,18.575424759098897
830009999,Chhotukumar29,FastAPI_CQRS,,https://github.com/Chhotukumar29/FastAPI_CQRS,5,0,0,0,0,1,1,5,7.0,0,0,0,0,0,17.0,4.754887502163469,0.5,2.3774437510817346
821456186,eesa1980,python-clean-architecture-api,,https://github.com/eesa1980/python-clean-architecture-api,12,0,0,0,0,1,47,5,2.3191489361702127,1,1,1,1,4,2.723404255319149,1.1302349697749012,0.1081560283687943,1.568370141469423
831178693,MohamedAmhal,WbSiteAIGEEKS,"This repository contains the source code for the AI GEEKS Club website, developed from scratch. The site will feature information about the club, upcoming events, resources, a blog, and a contact form. Technologies used include HTML, CSS... ",https://github.com/MohamedAmhal/WbSiteAIGEEKS,6,0,0,0,0,1,14,5,1.2142857142857142,0,0,0,0,0,0.2857142857142857,0.6792696431662099,0.0714285714285714,0.3396348215831049
695400752,aarjav-7,source-sprint-aarjav,This is the demo repo for Source Sprint event,https://github.com/aarjav-7/source-sprint-aarjav,3,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,20.89735285398626,4.5,94.03808784293815
795829398,Kondrahin,cqrs,,https://github.com/Kondrahin/cqrs,6,0,0,0,0,1,15,5,3.8666666666666663,0,0,1,0,1,2.8,0.0,0.0,0.0
441890675,lautmat,trainingdemo-secaws,Repository containing all the artifacts needed for the demos. IMPLEMENT SECURITY IN MICROSERVICE ARCHITECTURE ON AWS.,https://github.com/lautmat/trainingdemo-secaws,6553,1,1,0,0,1,19,5,4.473684210526316,0,0,0,0,0,4.684210526315789,44.03278090694205,1.275400038557933,67.20772980759314
967631765,mbrickerd,sensor-clustering-microservices,"A real-time machine failure prediction system that uses sensor data streams to detect anomalies and prevent costly equipment breakdowns in industrial environments. The microservices architecture processes continuous sensor readings, automatically identifies emerging failure patterns, and alerts operators before critical failures occur.",https://github.com/mbrickerd/sensor-clustering-microservices,791,0,0,0,0,1,60,5,3.3666666666666667,1,1,1,0,3,6.866666666666666,45.36021545283902,0.730527060791356,293.2452832087685
767000188,lucasxedes,Clean-Architecture,Clean Architecture Python,https://github.com/lucasxedes/Clean-Architecture,17,0,0,0,0,1,25,5,1.12,1,1,1,1,4,2.24,5.529037582694059,0.18,4.581781534119997
214157866,di-unipi-socc,microMiner,A tool for automatically generate a microTosca specification of a microservice-based architecture,https://github.com/di-unipi-socc/microMiner,806,9,9,3,0,5,57,6,2.6842105263157894,1,0,0,0,1,11.842105263157896,116.5873350435021,0.7021826709046803,447.1747574472309
130850566,Yuting-Gao,CRNN_Mxnet,MXnet version of CRNN for scene text recognition with CNN+2-layer BLSTM+CTC architecture.,https://github.com/Yuting-Gao/CRNN_Mxnet,417,19,19,8,1,2,7,5,7.571428571428571,0,0,0,0,0,21.571428571428573,644.2639718539597,5.970047784579633,4953.88577767126
653646436,daveshap,KB_microservice,"KB (knowledge base) microservice powered by GPT4. For chatbots, cognitive architectures, and autonomous agents",https://github.com/daveshap/KB_microservice,16,74,74,33,1,7,2,5,6.0,0,0,0,0,0,14.0,132.9050384011917,3.0844155844155843,618.2807289415649
534620008,moser,event-sourcing-python-sqla,,https://github.com/moser/event-sourcing-python-sqla,32,0,0,0,0,1,16,5,5.875,0,0,0,0,0,31.0,104.61852549813182,1.8776963716108448,425.7081618100525
585796521,saeedkdev,VideoToMp3,Video To Mp3 Converter with Microservices Architecture,https://github.com/saeedkdev/VideoToMp3,12,0,0,0,0,1,11,5,3.090909090909091,0,0,0,1,1,2.909090909090909,16.71394514314237,0.8465909090909091,40.66399472565929
835357246,KavyaManjunath2024,Python-Microservices," I developed a DevOps project deploying a Python microservices app on Kubernetes, which converts video to audio. This project highlights my skills in microservices architecture, containerization with Docker, and Kubernetes orchestration for scalable and efficient deployment.",https://github.com/KavyaManjunath2024/Python-Microservices,3212,0,0,0,0,1,14,5,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
665878075,milicaj00,SOA-III-Projekat,Project for Software oriented architecture exam. Include microservices for monitoring and visualization data. Implemented Edge X Platform ,https://github.com/milicaj00/SOA-III-Projekat,569,0,0,1,0,1,5,5,6.0,0,0,0,0,0,3.4,41.67248250995196,0.6857142857142857,44.79712286851653
315191204,danielfsousa,ecommerce-clean-architecture,"Example application code for the ""Architecture Patterns with Python"" book",https://github.com/danielfsousa/ecommerce-clean-architecture,43,1,1,0,0,2,13,5,3.692307692307693,1,1,0,1,3,10.76923076923077,44.09040223700236,1.2825091575091574,133.2508612163943
505924488,bekha-io,python-clean-architecture,A simple Todo application based on the Clean Architecture principles,https://github.com/bekha-io/python-clean-architecture,3,1,1,0,0,1,18,5,1.2222222222222223,1,1,0,0,2,5.111111111111111,6.482892142331044,0.3703703703703704,29.736388806542585
224548975,DanteSivo,VAX-DisplayProject-2.0,"The program code for a Raspberry Pi 3.0 with a 720p Touchscreen that will show the ongoing and upcoming events for a lounge using Google Calendar API. This lounge is the VAX Workshop and Movie Theatre space on Engineering House at RIT in Rochester, NY. This program is open source and I encourage others to view and make edits.",https://github.com/DanteSivo/VAX-DisplayProject-2.0,58,0,0,0,0,1,6,5,4.666666666666667,0,0,0,0,0,16.333333333333332,489.1239530158675,3.49905416168857,2593.539390347197
692966714,ehernandep,microservices_project_architecture,,https://github.com/ehernandep/microservices_project_architecture,96,0,0,0,0,1,12,5,2.5,0,0,1,0,1,2.583333333333333,1.3962406251802892,0.2083333333333333,2.1981203125901447
896564198,Azure-bit,Microservices4471,Repository for a stock viewing application built with a microservices architecture and AWS (university group project),https://github.com/Azure-bit/Microservices4471,1954,0,0,1,0,1,142,5,12.007042253521126,0,0,0,0,0,65.99295774647888,728.9333451190282,4.361064907982548,6614.38494007239
906055488,juanpj17,shopping-cart,"This is a simple API for a shopping cart made with FastApi, alembic, JWT, hexagonal architecture and pytest",https://github.com/juanpj17/shopping-cart,174,2,2,0,0,1,198,6,3.47979797979798,1,1,1,1,4,4.292929292929293,18.665413242224165,0.307247211852475,31.436059759849677
293344337,arodrigueze0215,virtual-wallet-DDD-practices,"  katas to TDD, Clean Architecture, DDD Practices ",https://github.com/arodrigueze0215/virtual-wallet-DDD-practices,49,1,1,0,0,1,54,5,2.351851851851852,1,0,0,1,2,5.425925925925926,6.294704381104013,0.1376262626262626,8.26882254345002
428907147,yansfil,devall-class-clean-architecture,클린 아키텍처 + 테스트 코드를 적용해서 간단한 서버 프로젝트를 만들어봅니다,https://github.com/yansfil/devall-class-clean-architecture,14,5,5,2,1,1,15,5,2.8666666666666667,1,1,1,1,4,4.066666666666666,3.225605199016944,0.4,2.766457281989699
857491169,eli-11b,api-gateway-example-nginx,Microservices Architecture Pattern ,https://github.com/eli-11b/api-gateway-example-nginx,946,0,0,0,0,1,7,5,1.8571428571428568,0,0,0,0,0,3.2857142857142856,8.476956632519626,0.3214285714285714,9.577291325900216
459456506,myeclipse,MUSIED,MUSIED: A Benchmark for Event Detection from Multi-Source Heterogeneous Informal Texts,https://github.com/myeclipse/MUSIED,13071,10,10,0,0,1,31,5,4.903225806451613,0,0,0,0,0,12.580645161290322,251.0576958481972,2.782809296196756,1643.425733786434
840106052,ChandraSekharKatipalli,e-CommerceDataPipeline,"Created a Data Engineering pipeline for a small e-Commerce data using Azure. Implemented Medallion architecture where three storage accounts named Bronze, Sliver and Gold are created to stored raw data, meaningful data and business ready data.  The transition between layers is done through ADF, Azure DataBricks using DBT, Snapshots and Datamarts.",https://github.com/ChandraSekharKatipalli/e-CommerceDataPipeline,7274,0,0,0,0,1,634,9,7.988958990536277,1,0,1,0,2,0.0,0.0,0.0,0.0
418878860,Akshay314,aws-sqs-event-redrive-lambda,This repository contains the Lambda function to redrive sqs events from source to destination queue while controlling maxRetry per event.,https://github.com/Akshay314/aws-sqs-event-redrive-lambda,4,1,1,0,0,1,1,5,2.0,0,0,0,0,0,10.0,155.11451069865606,3.3,511.877885305565
196099326,vit0r,clean-architecture-api-restplus-flask,Book sample app for try to be clean arch in python,https://github.com/vit0r/clean-architecture-api-restplus-flask,61,5,5,0,0,0,42,5,1.6666666666666667,1,1,0,1,3,5.309523809523809,17.493046476775742,0.3712522045855378,26.781488282833774
176605056,tdcosim,SolarPV-DER-simulation-tool,"Allows user to run dynamics simulations for solar photovoltaic distributed energy resource connected to a stiff voltage source or to an external program. It allows modifying DER parameters, introducing external disturbance events, and visualizing the simulation results. The PV-DER (inverter) is modeled using dynamic phasor concept.",https://github.com/tdcosim/SolarPV-DER-simulation-tool,3280,39,39,6,2,6,38,5,8.710526315789474,0,0,0,0,0,50.71052631578947,5179.319568330643,4.828545031411593,42146.93829948433
229357450,sdaves,microthings,Microservices and Microfrontends with 100% Pure Python and Domain Driven Design. Serverless Bottle.py for your stateless processes and a Preact client UI packaged as WebComponents using transcrypt.,https://github.com/sdaves/microthings,9341,3,3,0,1,1,25,5,7.12,1,1,1,0,3,58.52,797.0199938914938,1.584309991693528,8386.975619759829
360003180,VictorOliveiraPy,clean_architecture_python,Back-end  project,https://github.com/VictorOliveiraPy/clean_architecture_python,13,0,0,0,0,1,14,5,1.5,1,0,0,1,2,1.5714285714285714,1.2857142857142858,0.0714285714285714,1.2857142857142858
793984702,epanizon,LastLayersAnalysis,Analysis of functionality of last layers in transformers architecture,https://github.com/epanizon/LastLayersAnalysis,10,0,0,0,0,1,10,5,5.6,0,0,0,0,0,10.8,101.89538977747692,2.616549594196653,582.8468328454442
849831406,arctikant,fastapi-modular-monolith-starter-kit,Template for FastAPI RESTful application built on Modular Monolith and Layered Architecture principles,https://github.com/arctikant/fastapi-modular-monolith-starter-kit,122,14,14,3,0,1,148,7,3.3175675675675675,1,1,1,1,4,5.912162162162162,27.29221048368557,0.4387791665976062,64.00305260240829
864726327,AsmitaJha,microservices-architecture-in-django,-This repository includes 2 models order and product. ,https://github.com/AsmitaJha/microservices-architecture-in-django,24,0,0,0,0,1,36,5,1.6388888888888888,0,0,0,0,0,0.6944444444444444,0.3962406251802891,0.0416666666666666,0.1981203125901445
182487023,das-raj,sticky-notes-dockerized,"A django website containerized in docker with 2 layer architecture, application layer and data layer. ",https://github.com/das-raj/sticky-notes-dockerized,1501,0,0,0,1,0,15,5,2.533333333333333,0,0,0,0,0,1.3333333333333333,2.318397953523025,0.1,1.1591989767615123
689960280,VictorAlexandre1986,Forum-Flask,Forum feito em clean architecture,https://github.com/VictorAlexandre1986/Forum-Flask,161,1,1,0,0,1,74,5,2.810810810810811,0,1,1,1,3,5.067567567567568,4.209931279765911,0.1367438867438867,10.0252232930335
455416658,JH7770,layered_architecture,Flask Backend layered architecture pattern,https://github.com/JH7770/layered_architecture,17,1,1,0,0,1,13,5,1.3846153846153846,0,1,0,0,1,2.3076923076923075,2.3861192314349133,0.1538461538461538,2.3861192314349133
745216414,felipmartins,fast-api-clean-architecture,,https://github.com/felipmartins/fast-api-clean-architecture,10,1,1,0,0,1,8,5,0.375,1,0,1,1,3,0.25,0.0,0.0,0.0
869753100,VivekNarula7,ANN_MNIST_from_scratch,"This project implements Artificial Neural Networks (ANNs) from scratch to classify handwritten digits using a subset of the MNIST dataset. It explores different architectures, including single and multi-hidden layer networks, and compares the performance of various activation functions (ReLU and Sigmoid). ",https://github.com/VivekNarula7/ANN_MNIST_from_scratch,8548,0,0,0,0,1,5,5,4.2,1,0,0,0,1,11.2,366.5450348294642,3.5468922510734004,2495.3338529870557
40820086,kleopatra999,recurrence,Multi-platform open source recurring event reminder.,https://github.com/kleopatra999/recurrence,220,0,0,0,0,2,5,5,2.6,0,0,0,0,0,20.2,276.7359361292304,2.603333333333333,1797.462113954045
703125209,akash18tripathi,AutoDP-Automated-Data-Preprocessing-and-ML-Platform,"This is our Flask-based, Microservices Architecture platform that brings automation to data preprocessing and machine learning, simplifying your data science journey.",https://github.com/akash18tripathi/AutoDP-Automated-Data-Preprocessing-and-ML-Platform,700,4,4,3,0,1,9,5,8.666666666666666,0,0,0,0,0,12.88888888888889,333.6436592838936,1.7649172703080562,839.9980341774221
253821695,jwhitt3r,SIEMEz,A open-source Django Security Incident and Event Management System,https://github.com/jwhitt3r/SIEMEz,995,5,5,1,0,2,41,5,2.268292682926829,0,0,1,0,1,3.024390243902439,4.951969633892589,0.1544715447154471,20.972019368294795
298732777,imadtyx,Microservice-Architecture-and-Programming,This repository contains the practicals performed as a part of the course IT707 Microservice Architecture and Programming taken at the university.,https://github.com/imadtyx/Microservice-Architecture-and-Programming,1642,0,0,0,0,1,7,5,3.2857142857142856,0,0,1,0,1,3.857142857142857,26.937013788977424,1.1071428571428572,56.766264102058535
194294927,prasanthtummala,Handwritten-Digit-Recognition,Here I will use a neural Network to predict handwritten numbers from an image. I will use 1 hidden layer in the architecture of the network with 25 activation units and find the trainning accuracy of my model.,https://github.com/prasanthtummala/Handwritten-Digit-Recognition,14593,0,0,0,0,0,291,9,6.546391752577319,1,0,1,0,2,51.381443298969074,756.6561862961577,4.086547445368254,8554.942847986715
523306072,Aonu78,fastapi-clean-architecture-with-authentication-local-database,,https://github.com/Aonu78/fastapi-clean-architecture-with-authentication-local-database,31,1,1,0,0,1,14,5,3.2857142857142856,0,0,0,0,0,3.0,5.865672534197411,0.3571428571428571,7.829958248483125
900354620,BeloveDeveloper,FastTalk-Ai,Fastapi + Vue clean architecture project,https://github.com/BeloveDeveloper/FastTalk-Ai,208,0,0,0,1,1,99,7,3.191919191919192,1,1,1,1,4,3.060606060606061,2.2921225452681657,0.0803030303030303,2.171475552531807
634204552,ravitejadoredla,Breakingdown-Monoliths,Convert a monolith architecture based docker-compose application into a microservices based architecture. We added LCM & GCD functions along with arthematic operations.,https://github.com/ravitejadoredla/Breakingdown-Monoliths,64,0,0,0,0,1,8,5,2.375,0,0,0,0,0,5.125,28.140236928500915,1.0625,36.0510507038992
771780274,stevensdotb,todo-list-clean-architecture,TODO cli tool applying Clean Architecture,https://github.com/stevensdotb/todo-list-clean-architecture,47,1,1,0,0,1,25,5,2.52,1,1,1,1,4,5.04,2.720530738733794,0.14,1.8246509883443691
891461346,vietdoo,hotel-data-integrations-system,"Modern hotel data system using SOLID principles with multi-layer architecture for fetching, normalizing, merging and serving data via API.",https://github.com/vietdoo/hotel-data-integrations-system,21,1,1,0,0,1,37,5,2.918918918918919,1,1,1,0,3,14.0,36.82197449286544,0.7202714100740417,163.55359888007496
182385573,XinyaoTian,microWebApp,A web UI module based on microservice architecture,https://github.com/XinyaoTian/microWebApp,28,0,0,0,0,0,6,5,3.333333333333333,0,0,0,0,0,3.333333333333333,54.58803494713231,1.0782828282828285,114.95161016641488
881806908,sakku116,fastapi-clean-arch-boilerplate,A FastAPI boilerplate implementing Clean Architecture,https://github.com/sakku116/fastapi-clean-arch-boilerplate,36,0,0,1,0,1,25,5,2.2,1,0,1,0,2,3.4,31.651749828660417,0.7695735465600534,165.05778238234237
928266025,arturboyun,LearnCA,This project was created to learn clean architecture.,https://github.com/arturboyun/LearnCA,12,0,0,0,0,1,24,5,1.625,1,1,0,1,3,4.458333333333333,3.343168720067652,0.2311507936507936,4.582145547335255
453824788,Torwalt,pyhex,Python fastAPI service with hexagonal architecture,https://github.com/Torwalt/pyhex,43,1,1,0,0,1,34,5,2.3823529411764706,1,0,0,1,2,3.882352941176471,7.337424637833978,0.1271008403361344,4.523106338589957
425349660,Oltho,todo-clean-architecture-sample,,https://github.com/Oltho/todo-clean-architecture-sample,42,0,0,0,0,1,26,5,2.076923076923077,1,1,0,0,2,4.423076923076923,7.967774996698673,0.391025641025641,9.200181405989657
253357778,servian,aws-redshift-smart-pause-and-resume,"Open source application to automatically resume and pause Redshift using AWS Lambda, CloudWatch Metrics and Events, Forecast and Step Functions.",https://github.com/servian/aws-redshift-smart-pause-and-resume,610,4,4,3,2,7,23,5,2.5217391304347827,0,0,0,0,0,8.26086956521739,42.59949753313819,0.8907773386034256,183.2220585519294
276172999,voh83,CQRS-Booking-kata,Small room reservation app,https://github.com/voh83/CQRS-Booking-kata,37,0,0,0,0,1,12,5,2.583333333333333,0,0,0,1,1,8.666666666666666,70.04124508206995,0.8634259259259259,171.81786065417813
944562058,Cleosazelda,MVC_Cleosa,Tugas Day 1: MVC and Clean Architecture,https://github.com/Cleosazelda/MVC_Cleosa,14985,0,0,0,0,1,1148,9,12.818815331010454,1,0,1,0,2,67.6951219512195,772.9025254509681,4.0035433624686485,7427.921472563285
196051475,hadarco,E.R-Master-MicroServices,project for 'Introduction to Software Architecture' course,https://github.com/hadarco/E.R-Master-MicroServices,4064,0,0,0,0,0,1,5,1.0,0,1,0,0,1,8.0,717.27359081999,4.2105263157894735,3020.0993297683785
433259266,PortoCode,microservice-architecture,Application of a tourism agency with microservices architecture,https://github.com/PortoCode/microservice-architecture,24,0,0,0,0,1,5,5,5.8,0,0,0,0,0,37.0,298.90075710508097,1.274074074074074,615.0494569203978
240283900,kohyar,microservices,Sample microservices architecture using flask and sql alchemy,https://github.com/kohyar/microservices,27,0,0,0,0,0,12,5,3.25,0,0,0,0,0,6.333333333333333,28.25686234306519,0.5555555555555555,51.71468058653295
811536658,TemporalLabsLLC-SOL,NestedRefinementArchitecture-,"The Nested Refinement Architecture (NRA) is a multi-layered framework designed to progressively gather and refine detailed information about individuals, roles, departments, industries, and organizations. This repository contains master guides for each layer, providing a structured approach to data collection and analysis.",https://github.com/TemporalLabsLLC-SOL/NestedRefinementArchitecture-,107,0,0,0,0,1,1,5,3.0,0,0,0,0,0,10.0,51.80615605397529,2.0,103.6123121079506
705372827,HigorGrigorio,olympus,This repository is intended for a shared base python domain for domain-driven design projects,https://github.com/HigorGrigorio/olympus,85,2,2,0,0,1,15,5,2.466666666666667,1,0,0,0,1,35.6,246.9602549746716,1.5626620139581255,2406.252844327079
520442034,anhassan,AWS-ETL-Architecture-End-to-End-Layered-ETL-Solution-Using-RDS-and-Glue,An End to End Layered ETL Structure Migrating data from RDS to S3(multiple layers) using Glue,https://github.com/anhassan/AWS-ETL-Architecture-End-to-End-Layered-ETL-Solution-Using-RDS-and-Glue,8,0,0,0,0,1,5,5,6.0,0,0,0,0,0,5.6,28.271006215122,1.071590909090909,40.233458010348
918538384,ambient-innovation,django-queuebie,Simple implementation of a synchronous CQRS (Command Query Responsibility Segregation) pattern,https://github.com/ambient-innovation/django-queuebie,39,1,1,0,7,3,45,5,2.8666666666666667,0,0,1,0,1,5.545454545454546,33.52229774296076,0.4343160915171785,66.69666677479648
646296868,Bruno-Fioreze,python-clean-architecture-hotel,,https://github.com/Bruno-Fioreze/python-clean-architecture-hotel,6,0,0,0,0,1,10,5,1.5,1,1,0,0,2,3.3,1.160964047443681,0.1,1.160964047443681
803313283,movassaghi6,fastapi-clean-mongo,"clean architecture based project of fastapi and mongodb as the database.   Python, FastAPI, Dependency Injection,MongoDB, Clean-Architecture, Poetry ",https://github.com/movassaghi6/fastapi-clean-mongo,250,3,3,0,0,1,23,5,4.695652173913044,1,0,1,0,2,5.0,19.133596384733224,0.5590468071286486,39.76070241129285
155267137,rcgale,pickledonion,"Python pickle disk caching which encourages configuration on the outer layers of an ""onion"" architecture",https://github.com/rcgale/pickledonion,36,0,0,0,2,1,7,5,2.7142857142857144,0,0,0,0,0,13.857142857142858,108.67679950649278,1.3315145502645502,536.7755630424207
199529345,iconation,BattleBombRoyale_SummerEvent2019,Open source of the Battle Bomb Royale - Summer Event Lottery,https://github.com/iconation/BattleBombRoyale_SummerEvent2019,80,0,0,0,0,2,3,5,2.333333333333333,0,0,0,0,0,0.0,50.93831680559904,1.962962962962963,112.6123121079506
369664298,cadasmeq,automatized-content-publisher,This is a sample project which Im trying to create a content-publisher which allows to update somekind of picture or video to differents social networks at the same time. I considerated use hexagonal architecture and selenium to build this publisher.,https://github.com/cadasmeq/automatized-content-publisher,2,0,0,0,0,0,7,5,1.0,0,0,1,0,1,1.7142857142857142,0.6792696431662099,0.0714285714285714,0.3396348215831049
539159330,darshcloud,CMPE_281_Project1_Filebox,"Filebox a cost-effective, highly available, and scalable web app on AWS using a microservices architecture. Users can globally upload/download files, with admins empowered to delete uploads",https://github.com/darshcloud/CMPE_281_Project1_Filebox,267,1,1,0,0,1,37,5,2.108108108108108,0,0,0,0,0,2.189189189189189,13.3984836132967,0.1970247558482852,27.43742615595505
718991963,DrZuse,slotmachine_microservices,"Slot machine DEMO game. It is built with Python, JS, Docker, Oracle Database, RabbitMQ, and Tornado web framework. A microservices architecture orchestrates every spin.",https://github.com/DrZuse/slotmachine_microservices,38,0,0,1,0,1,3,5,4.0,0,0,0,0,0,14.0,35.964311284600974,1.4102564102564104,99.18292388004905
134693047,samuelcolvin,nosht,"Open Source Event Ticketing Platform, deployed at ",https://github.com/samuelcolvin/nosht,3158,29,29,2,53,2,66,5,8.56060606060606,0,0,1,0,1,45.75757575757576,614.945263899499,2.7313890771086435,2323.032334847412
830028775,waltervos,hexagonal-todos,"An exercise in Ports and Adapters architecture, driven by TDD style tests",https://github.com/waltervos/hexagonal-todos,21,0,0,1,0,1,13,5,1.7692307692307692,0,0,0,1,1,6.384615384615385,9.543754500680356,0.3076923076923077,7.157996481775092
711074266,kolabdull,password-generator,Allows users generate passwords. Demo for Microsoft Learn Student Ambassador event on open-source after HacktoberFest,https://github.com/kolabdull/password-generator,8,0,0,1,1,1,1,5,3.0,0,0,0,0,0,17.0,280.0,4.153846153846154,1163.076923076923
708927033,vcjuliocesar,python-cash-machine-oop,"oop,clean code,clean architecture",https://github.com/vcjuliocesar/python-cash-machine-oop,16,0,0,0,0,1,19,5,1.5263157894736843,1,1,1,0,3,4.368421052631579,11.12292105713804,0.6662679425837321,51.16027765222943
750399435,PFund-Software-Ltd,pfeed,Data Engine for Manual/Algo Trading: Download/Stream -> Clean -> Store. Supports Data Lakehouse Architecture. Clean Once and Forget.,https://github.com/PFund-Software-Ltd/pfeed,3770,23,23,5,0,0,133,5,6.18796992481203,0,0,1,0,1,13.729323308270676,86.23666250446499,1.54106657298686,399.7008577472752
965591464,sriram1909,ais-microservices,An AIS model that runs on a microservice based architecture.,https://github.com/sriram1909/ais-microservices,14774,0,0,0,0,1,5,5,6.0,1,0,0,0,1,10.0,131.03361030115937,2.8083512544802867,450.83876407220777
651885845,xoxoist,dockerize_mysql,":dolphin: CQRS, Load Balancing TCP, Dockerize MySQL Replication",https://github.com/xoxoist/dockerize_mysql,42,0,0,0,0,1,1,5,3.0,0,0,0,0,0,36.0,15.509775004326936,1.0,15.509775004326936
741240224,huderlem,maize-event,Source code for the old Pokémon Maize Event Giveaway website,https://github.com/huderlem/maize-event,34,2,2,1,0,1,5,5,2.4,0,0,0,0,0,2.0,317.74679392541486,1.7363636363636363,2592.4412595000704
250180578,Dhruvvvx17,RideShare,"Rideshare is a microservice application to create/book a cab. The core technologies include flask for creating the API's in a RESTful architecture, MongoDB as the database and AWS as the cloud platform.",https://github.com/Dhruvvvx17/RideShare,1232,1,1,0,4,1,6,5,3.5,0,0,0,0,0,26.0,134.20332721653196,1.4190379403794038,508.1151544686873
762378865,itay601,Finance_app,"microservices architecture with React, fastAPI ,mysql and Dockers.",https://github.com/itay601/Finance_app,1811,1,1,1,0,1,24,5,3.0,1,0,0,0,1,3.7083333333333335,38.33899198793913,0.4624149659863946,131.0694602298711
250757532,Akashdesarda,ResNet-builder,Build a Customized ResNet architecture with n desired depth or layers. Based on ResNet v2. ,https://github.com/Akashdesarda/ResNet-builder,6076,5,5,7,1,2,8,5,4.125,1,0,0,0,1,6.75,66.15900853222429,1.5294719827586207,410.7768270436836
566277013,tshrv,flask-rabbitmq-basics,"Two microservices, where data processing relies on message passing / event-driven architecture",https://github.com/tshrv/flask-rabbitmq-basics,8,0,0,0,0,1,4,5,4.5,0,0,0,0,0,4.5,1.1887218755408673,0.125,0.5943609377704336
222663864,E3-JSI,eLENS-miner-system,"The microservice architecture for processing, analysing and searching through the environmental legal documents",https://github.com/E3-JSI/eLENS-miner-system,592,1,1,3,18,6,79,5,3.316455696202532,0,0,1,0,1,8.632911392405063,76.7652513914295,1.452559658207594,304.54474890844773
957228433,shrey1605,VToMP3,Video file to MP3 file conversion system using microservice architecture in Python,https://github.com/shrey1605/VToMP3,11,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
806748592,benjaminchang7,SentimentMLP,"Implementing MLP-based classifiers for sentiment analysis using PyTorch to explore multi-layer perceptron architectures, activation functions, and hyper-parameter tuning.",https://github.com/benjaminchang7/SentimentMLP,78,0,0,0,0,1,3,5,8.666666666666666,0,0,0,0,0,18.33333333333333,502.7387096210143,6.429347826086956,4894.37384632066
539698165,andy-takker,example-web-service,Simple FastAPI web service with clean architecture and test,https://github.com/andy-takker/example-web-service,483,8,8,1,0,2,105,7,3.238095238095238,1,1,1,1,4,4.238095238095238,14.579750086516436,0.2338438187516528,16.841952339031415
109333860,yiqiao-yin,recurrentshop-rnn-reference,"Ability to easily iterate over different neural network architectures is key to doing machine learning research. While deep learning libraries like Keras makes it very easy to prototype new layers and models, writing custom recurrent neural networks is harder than it needs to be in almost all popular deep learning libraries available today. One key missing feature in these libraries is reusable RNN cells. Most libraries provide layers (such as LSTM, GRU etc), which can only be used as is, and not be easily embedded in a bigger RNN. Writing the RNN logic itself can be tiresome at times. For example in Keras, information about the states (shape and initial value) are provided by writing two seperate functions, get_initial_states and reset_states (for stateful version). There are many architectures whose implementation is not trivial using modern deep learning libraries, such as:",https://github.com/yiqiao-yin/recurrentshop-rnn-reference,131,3,3,0,0,1,18,5,5.555555555555555,0,0,0,0,0,27.11111111111111,483.4105749173498,2.8325830564784056,4213.434867823407
656823157,Mgobeaalcoba,clean_code,Tips for a clean code and SOLID architecture,https://github.com/Mgobeaalcoba/clean_code,74,3,3,0,0,1,2,5,1.0,0,0,0,0,0,11.5,28.529325012980813,1.5,85.58797503894243
495897342,Tksuthar,fastapi-layered-architecture,,https://github.com/Tksuthar/fastapi-layered-architecture,6,0,0,0,0,1,18,5,1.6666666666666667,1,1,0,0,2,2.333333333333333,0.6666666666666666,0.037037037037037,0.4444444444444444
248818154,kirkylesich,vk_poster,Service designed in microservice architecture that create random bullshit and post it in vk.,https://github.com/kirkylesich/vk_poster,1617,0,0,0,0,0,10,5,2.5,0,0,0,0,0,4.6,19.282692401182956,0.4095238095238095,57.2165110620624
680902455,syedkashifaliquadri,Microservices-with-gRPC-Python-Kafka-PostgreSQL,This repository provides a practical example of buildin a microservices architecture using gRPC with Python and Apache Kafka for asynchronous communication between services. The combination of gRPC and Kafka offers a powerful solution for developing scalable and decoupled microservices that can handle various functionalities independently.,https://github.com/syedkashifaliquadri/Microservices-with-gRPC-Python-Kafka-PostgreSQL,11,0,0,0,0,1,8,5,2.875,0,0,0,0,0,7.25,9.941165626622604,0.4642857142857143,7.145300893938877
72115263,wcomartin,cqrs-feature-template,,https://github.com/wcomartin/cqrs-feature-template,5,0,0,0,0,1,11,5,2.363636363636364,1,0,0,0,1,1.9090909090909087,2.2745045462412614,0.1818181818181818,1.8422420460445823
192406166,James-Moore,noisecompliance,Open-Horizon compatible microservices architecture for user definable noise compliance policies,https://github.com/James-Moore/noisecompliance,52,0,0,0,0,0,45,5,3.577777777777778,0,0,0,0,0,8.488888888888889,32.486710917044014,0.6508589850695115,95.5048395777074
478364504,hrypasato,learning-microservices,Projects using microservices architecture,https://github.com/hrypasato/learning-microservices,57,0,0,0,0,1,32,5,2.25,0,0,0,0,0,3.71875,19.972951761314384,0.365438988095238,36.32979229533131
265369644,DipenChawla,devops-microservices-kubernetes,Building a microservice architecture of an ML service using Docker and Kubernetes. Part of Udacity's Cloud DevOps Engineer Nanodegree Program.,https://github.com/DipenChawla/devops-microservices-kubernetes,1925,1,1,0,2,1,1,5,6.0,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
380510724,gustafvh,CIFAR-Image-Classifier-From-Scratch,CIFAR10 Multi-Layer Image Classifier From Scratch in Python where everything from the cost function to the backpropagation algorithm is implented by hand and without support libraries to fully understand the neural network architecture,https://github.com/gustafvh/CIFAR-Image-Classifier-From-Scratch,86,0,0,0,0,1,1,5,5.0,0,0,0,0,0,57.0,4733.71859503265,9.618705035971225,45532.242888911176
660778764,roycekeung,VISSIM_SERVERS,"Vissim distributed computing microservices architecture, distributed across multiple on-premises and AWS EC2 instances, reducing computational time and easing horizontal scaling",https://github.com/roycekeung/VISSIM_SERVERS,7232,0,0,0,0,1,42,5,6.404761904761905,0,0,0,0,0,22.666666666666668,330.0165253430537,1.7147932955523362,1825.4936495254055
321881129,Pattrickps,Automated-Email-Generation-Using-Deep-Learning,This Github repo contains the code for the Case Study - Automated Email Generation Using Deep Learning which makes use of Sequence to Sequence Encoder-Decoder Architecture. I have also added Attention layer to the Seq2Seq model and improved the model's predictions,https://github.com/Pattrickps/Automated-Email-Generation-Using-Deep-Learning,3349,0,0,0,0,1,3,5,3.0,0,0,0,0,0,3.6666666666666665,6.754887502163469,0.5,5.96240625180289
131564971,sharathadavanne,seld-net,"Sound event localization, detection, and tracking of multiple overlapping and moving sources in 2D spherical space using convolutional recurrent neural network",https://github.com/sharathadavanne/seld-net,2717,356,356,66,14,15,8,5,4.875,0,0,0,0,0,23.0,1095.2628516116288,4.774496845424145,9757.408227857237
673142535,rzamoramx,python_hex_skeleton,skeleton for hexagonal architecture,https://github.com/rzamoramx/python_hex_skeleton,32,0,0,0,0,1,77,5,2.5974025974025974,1,1,1,1,4,3.688311688311688,12.125161772330475,0.3230102040816326,38.00379014569729
960103407,minhb5d,petshop-clean-architecture,,https://github.com/minhb5d/petshop-clean-architecture,5,0,0,0,0,1,17,5,2.0,1,1,1,1,4,3.4705882352941178,0.4561698530684394,0.088235294117647,0.3163202206518667
228523681,SleepingTurtle,rentomatic,Working on example project using clean architechtures https://www.thedigitalcatonline.com/blog/2016/11/14/clean-architectures-in-python-a-step-by-step-example/,https://github.com/SleepingTurtle/rentomatic,1,0,0,0,0,1,2,5,1.0,1,0,0,0,1,8.0,116.59154388306176,0.5555555555555556,129.5461598700686
428732985,mikepatrick,ddd-di,Exploration of using dependency injection with FastAPI application featuring domain driven design,https://github.com/mikepatrick/ddd-di,4,0,0,0,0,1,8,5,1.625,1,0,0,1,2,3.5,1.9914460711655215,0.125,0.9957230355827608
169184834,kain-jy,python-clean-architecture,,https://github.com/kain-jy/python-clean-architecture,4,1,1,0,0,1,12,5,1.75,0,1,1,0,2,5.666666666666667,11.659508320887952,0.2722222222222222,7.179150926961412
206306959,ehealthz-lab,microservice-chatbot-python-template,Template to add new microservices in the microservice chatbot architecture for Python developers.,https://github.com/ehealthz-lab/microservice-chatbot-python-template,23,1,1,1,7,1,11,5,5.090909090909091,0,0,0,0,0,13.909090909090908,164.99691508299335,1.9644276094276092,782.500055040095
738929979,Deyvidas,clean_architecture_in_python,Learning how to apply clean architecture in Python.,https://github.com/Deyvidas/clean_architecture_in_python,149,1,1,0,0,1,37,5,4.405405405405405,1,0,0,0,1,7.162162162162162,48.71431511723101,0.7490071437897524,121.97215060930152
342618163,sisi100,clean-architecture-cdk-template,,https://github.com/sisi100/clean-architecture-cdk-template,9882,1,1,0,5,1,24,5,1.7916666666666667,1,1,1,1,4,2.625,0.7786023363119852,0.0416666666666666,0.3893011681559926
763148965,syedsahmed101,DataWrangling-Using-Hexagonal-Architecture,,https://github.com/syedsahmed101/DataWrangling-Using-Hexagonal-Architecture,12,0,0,0,0,1,11,5,2.0,1,1,0,1,3,6.545454545454546,14.908681918415583,0.4346590909090909,42.99218192532685
573914854,BigSave24,microservice-message-passing-app,Refactor monolithic application to use a microservice architecture.,https://github.com/BigSave24/microservice-message-passing-app,212,0,0,0,0,1,9,5,4.888888888888889,0,0,1,0,1,6.333333333333333,10.512775129167856,0.5952380952380953,20.95637924625835
958636523,dobidobdobz,Test_Task_Sync,"Syncs two folders,  program runs a loop and copies the contents of the source folder to to replica. and logs the event in a text file. I have filled the source folder with random content to be synced!",https://github.com/dobidobdobz/Test_Task_Sync,133,0,0,0,0,1,1,5,4.0,0,0,0,0,0,0.0,0.0,0.0,0.0
824310084,likeinlife,cqrs_mediator,Python CQRS pattern implementation,https://github.com/likeinlife/cqrs_mediator,86,2,2,0,0,1,55,5,2.890909090909091,1,0,1,0,2,1.945454545454545,0.8584687469903356,0.0727272727272727,0.4292343734951678
298952431,y-tomimoto,CleanArchitecture,,https://github.com/y-tomimoto/CleanArchitecture,65,6,6,0,0,1,154,5,1.7597402597402598,1,0,1,0,2,2.623376623376624,1.125871204832074,0.0909090909090909,1.125871204832074
411066310,paulrayner,ddd_code_samples_python,Sample code for domain-driven design (DDD) in Python workshop exercises.,https://github.com/paulrayner/ddd_code_samples_python,21,0,0,0,0,2,12,5,2.75,0,0,0,0,0,4.416666666666667,11.798873103109306,0.7277777777777779,35.20219194372079
745874746,taydinadnan,k8s-microservice-phonebook,Phonebook Microservice Web Application aims to create a web application with MySQL Database using Docker and Kubernetes to give the understanding of Microservice architecture.,https://github.com/taydinadnan/k8s-microservice-phonebook,7,0,0,0,0,1,2,5,3.0,0,0,0,0,0,16.0,229.24980643862077,1.880434782608696,712.6753832138519
259852693,Ngiong,CS453-SPOFPROOF,SPOF-PROOF is a chaotic testing tool to detect Single-Point-of-Failure in Microservice architecture,https://github.com/Ngiong/CS453-SPOFPROOF,84,0,0,0,0,2,11,5,4.2727272727272725,0,0,0,0,0,16.727272727272727,172.55891791944063,2.097097347097347,623.3929220565324
98356963,fcclaplata,cinema-microservices,Cinema franchise application with a microservice oriented architecture,https://github.com/fcclaplata/cinema-microservices,23,0,0,0,0,3,30,5,2.2333333333333334,0,0,0,0,0,2.7666666666666666,6.620641823539319,0.1166666666666666,3.568817161841775
141737490,bmort,redis_event_sourcing,Quick test of some ideas for use of Redis with Event Sourcing,https://github.com/bmort/redis_event_sourcing,31,0,0,0,0,1,10,5,2.3,0,0,0,0,0,14.3,83.03785181789215,1.2294377247466493,261.7198025305564
861152931,harshini1708,TradePulse--RealTime-Microservices-for-E-Commerce,"TradePulse: Real-Time Microservices for E-Commerce is a scalable, distributed architecture with three core services: Product, Order, and User Service. Each microservice is containerized using Docker and orchestrated with Kubernetes. Built for fault tolerance and high availability, TradePulse ensures seamless, real-time e-commerce interactions.",https://github.com/harshini1708/TradePulse--RealTime-Microservices-for-E-Commerce,2,0,0,0,0,1,3,5,1.0,0,0,0,0,0,1.0,4.754887502163469,0.5,2.3774437510817346
181561025,inadarei,temple-building-microservice,In-class exercise in building event sourcing microservice,https://github.com/inadarei/temple-building-microservice,301,0,0,1,0,1,4,5,5.0,0,0,0,0,0,6.25,13.645952231368478,0.4375,16.165898882554945
808395921,Roshan102003,Video-to-Audio-Python-Microservices-App-on-Kubernetes,Converting mp4 videos to mp3 in a microservices architecture.,https://github.com/Roshan102003/Video-to-Audio-Python-Microservices-App-on-Kubernetes,3217,0,0,0,0,1,14,5,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
174552380,JohnDing1995,Game-Shop-Microservices,Rewrite Game-Shop project with microservices architecture,https://github.com/JohnDing1995/Game-Shop-Microservices,15,0,0,0,0,1,13,5,3.0,0,0,0,0,0,3.692307692307693,5.937563187296073,0.3791208791208791,8.44448724456127
976953157,ShivaTejaV,ecommerce-microservices,"End-to-end eCommerce platform demonstrating microservice architecture with Django REST APIs and Angular UI, container-ready and AWS-compatible.",https://github.com/ShivaTejaV/ecommerce-microservices,4,0,0,0,0,1,6,5,1.6666666666666667,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
891598041,ING3-IA-2k25,architecture-microservices,,https://github.com/ING3-IA-2k25/architecture-microservices,585,0,0,0,0,0,13,5,4.307692307692308,0,1,1,0,2,7.846153846153846,40.44848510140692,0.9613442113442112,86.27546616167163
755967137,kevin-greenan,generated-microservice,A microservice architecture generated entirely by ChatGPT,https://github.com/kevin-greenan/generated-microservice,12,0,0,0,0,1,3,5,3.333333333333333,0,0,0,0,0,12.666666666666666,9.324722817012365,0.6666666666666666,6.597301487578984
605633795,Konfuzian,event-sourcing-demo,,https://github.com/Konfuzian/event-sourcing-demo,12,0,0,0,0,1,4,5,1.75,0,0,0,0,0,9.5,18.50977500432694,1.0,49.58571563527648
494873049,collinmutembei,spotify,Learning Domain Driven Design with Microservices based on Spotify,https://github.com/collinmutembei/spotify,109,0,0,0,0,1,68,5,3.0,0,0,0,1,1,3.588235294117647,2.310836030302604,0.2058823529411764,1.611587868219741
684401471,julifmontoya,drf-modular-monolithic-jwt,,https://github.com/julifmontoya/drf-modular-monolithic-jwt,20,0,0,0,0,1,28,5,2.4642857142857144,1,0,0,0,1,2.6785714285714284,1.8526536778902576,0.1607142857142857,1.990784704560072
864474904,Renok,python-event-sourcing-bank,,https://github.com/Renok/python-event-sourcing-bank,25,0,0,0,0,1,19,5,1.5789473684210529,1,1,0,1,3,5.2631578947368425,16.981926812213892,0.2894736842105263,23.467720564662027
289687118,sihcpro,async-python-cqrs-pattern,Sihc Library: CQRS pattern with async python,https://github.com/sihcpro/async-python-cqrs-pattern,161,2,2,0,1,1,116,5,3.181034482758621,1,0,0,0,1,4.931034482758621,17.430211046218634,0.5610643595762564,57.77344697066835
866278220,xTUR30x,Clean-Architecture,All my guide and exercises about Software Architecture and good programming practices.,https://github.com/xTUR30x/Clean-Architecture,196,0,0,0,0,1,98,6,1.4081632653061225,1,1,0,0,2,10.979591836734691,12.180224242856896,0.5839208410636983,30.77186408813129
200147002,yoophi,sample-users-api,Clean Architecture 기반의 Flask API Sample,https://github.com/yoophi/sample-users-api,19,0,0,0,0,1,43,5,1.4883720930232558,1,1,1,1,4,3.255813953488372,4.64736158859497,0.1063122923588039,2.982002128668907
209967303,lexygon,hexagonal-architecture,,https://github.com/lexygon/hexagonal-architecture,365,0,0,0,0,1,7,5,1.1428571428571428,0,0,0,0,0,12.285714285714286,2.985336121998037,0.1071428571428571,2.239002091498528
136651106,ikanor,event-sourcing-python,"A Simple, Idiomatic, Event-Sourcing Pattern in Python",https://github.com/ikanor/event-sourcing-python,12,0,0,0,0,0,10,5,2.3,0,0,0,0,0,5.0,10.606171361001769,0.58,11.815193860569073
69814467,birdsoup,EventApp,Source and documents for a web app that provides services to find events and get relevant information for them including weather forecasts and directions,https://github.com/birdsoup/EventApp,1206,0,0,0,0,1,14,5,1.7142857142857142,0,0,0,0,0,2.0,1.0189044647493148,0.1071428571428571,0.5094522323746574
845256232,simonmacor,hexagonal-dependencies-tracker,Python Hexagonal Architecture Compliance Checker,https://github.com/simonmacor/hexagonal-dependencies-tracker,16,0,0,0,0,1,4,5,2.25,0,0,0,0,0,7.25,16.424812503605782,0.625,22.698496879867804
332422995,heykarimoff,todo-app,ToDo app written in Layered architecture,https://github.com/heykarimoff/todo-app,1,2,2,0,0,2,3,5,2.0,0,0,0,0,0,9.333333333333334,31.337215116252608,0.3333333333333333,31.337215116252608
116891944,patrickporto,kant,A CQRS and Event Sourcing for Python,https://github.com/patrickporto/kant,413,34,34,6,9,3,33,5,2.878787878787879,0,0,0,0,0,13.393939393939394,95.63469810020382,0.7971665734584394,219.3808385127484
115895412,knowark,clean-architecture-python,Clean Architecture con Python - Pycon Colombia 2018,https://github.com/knowark/clean-architecture-python,1560,25,25,9,9,1,59,5,2.440677966101695,1,1,1,1,4,6.711864406779661,35.574920526976946,0.3832756519132174,42.55480278835032
473811711,joaopaulo-bertoncini,clean-architecture-python,Clean Architecture Python,https://github.com/joaopaulo-bertoncini/clean-architecture-python,42,0,0,0,0,2,78,5,2.7051282051282053,1,1,1,1,4,5.82051282051282,34.75098722034173,0.532703478857325,61.67318175635784
306084552,Rapator-Tech-Academy,tlask_todo_mini_app,Mini clean architecture app with flask,https://github.com/Rapator-Tech-Academy/tlask_todo_mini_app,12,0,0,0,0,1,11,5,2.636363636363636,0,0,0,0,0,2.5454545454545454,1.8422420460445823,0.1363636363636363,1.6261107959462429
662078542,HoseinMaghoul,Kafka,Python  Kafka Microservice Architecture For Beginners,https://github.com/HoseinMaghoul/Kafka,5,0,0,0,0,1,4,5,4.25,0,0,0,0,0,0.25,13.00488750216347,0.75,11.816165626622604
698149009,Manyaj123,Container_project,We developed this microservices architecture using kubernetes and other tools. ,https://github.com/Manyaj123/Container_project,5,0,0,0,0,1,4,5,6.75,0,0,0,1,1,6.25,40.97046476325187,1.752136752136752,118.97506973130238
287993253,jamestrew,receipt-tracker,A small receipt tracking program for learning TDD and Clean Architecture,https://github.com/jamestrew/receipt-tracker,628,0,0,0,0,1,25,5,2.48,1,1,0,0,2,9.2,50.69361666933103,0.5163979924580164,52.92554915751784
964578525,MathieuSanders,LiftOCR,"A modular, open-source OCR framework designed for clean architecture, easy expansion, and document OCR.",https://github.com/MathieuSanders/LiftOCR,332,0,0,0,6,1,19,5,1.8421052631578947,1,0,0,0,1,4.368421052631579,14.379639681620445,0.5306447938026885,20.633509223319614
770241552,dalikewara,ayapingping-py,AyaPingPing (Py) generates standard project structure to build applications in Python that follow Clean Architecture and Feature-Driven Design concept,https://github.com/dalikewara/ayapingping-py,89,1,1,0,0,1,15,5,1.4666666666666666,1,0,0,1,2,4.266666666666667,8.81134184421786,0.3633333333333333,12.951548550223809
92076508,josefdlange,sequin,Sequin: Simple Event Sourcing Framework for Python,https://github.com/josefdlange/sequin,10,0,0,0,1,2,5,5,0.4,0,0,0,0,0,0.6,0.0,0.0,0.0
192974078,psd314,rentomatic,clean architecture example from Clean Architecture in Python by Leonardo Giordani,https://github.com/psd314/rentomatic,23,0,0,0,0,0,22,5,1.681818181818182,1,1,1,0,3,2.590909090909091,14.6880722167922,0.3251748251748251,15.78612853865535
478636292,neeejm,blogs-micro-test,Test microservice architecture ,https://github.com/neeejm/blogs-micro-test,458,0,0,0,0,1,5,5,4.0,0,0,0,1,1,6.6,18.710387721138147,0.7272727272727273,26.48171422396469
908753266,nasserso,movie-ticket-clean-arch,Project to learn new technologies and architecture,https://github.com/nasserso/movie-ticket-clean-arch,7,0,0,0,0,1,14,5,2.142857142857143,1,1,1,1,4,11.357142857142858,22.096531498697573,0.3863636363636363,20.114534026628945
41365202,pyeventsourcing,eventsourcing,A library for event sourcing in Python.,https://github.com/pyeventsourcing/eventsourcing,10648,1540,1540,134,4,37,198,5,6.055555555555555,0,0,0,0,0,20.51515151515152,90.9834318408137,1.011135546147687,687.571346451875
949061129,stickystyle,calender_sync,"A Python script that synchronizes calendar events from a source calendar to a destination calendar, normalizing event titles in the process.",https://github.com/stickystyle/calender_sync,121,0,0,0,0,1,2,5,12.5,0,0,0,0,0,104.5,1641.7151772247084,7.100943396226415,11686.636427049032
818470057,Anyel-ec,DjangoRest-Docker-SocialMedia,"This Django project is an application for managing users, posts, and categories, utilizing Django's own ORM and a layered architecture.",https://github.com/Anyel-ec/DjangoRest-Docker-SocialMedia,3048,0,0,0,0,1,67,5,2.1194029850746268,1,1,1,1,4,4.522388059701493,5.311839236243236,0.1913161465400271,7.505420863833647
526303585,dee0512,TLA,Author's PyTorch implementation of Temporally Layered Architecture for OpenAI gym tasks,https://github.com/dee0512/TLA,9,0,0,0,0,1,6,5,5.333333333333333,0,0,0,0,0,22.33333333333333,427.85089083218014,5.478869047619047,3195.6384391142424
499520348,macieyng,cqrs-workshop,,https://github.com/macieyng/cqrs-workshop,5,0,0,0,0,1,7,5,2.142857142857143,0,0,0,0,0,5.571428571428571,4.754887502163469,0.2857142857142857,6.453061610078993
75593330,eirenik0,rentomatic,example of clean architecture with Python,https://github.com/eirenik0/rentomatic,25,0,0,0,0,1,21,5,1.0476190476190477,1,1,0,0,2,2.380952380952381,9.226117841847945,0.1714285714285714,8.945078207600202
350821620,RobertaBtt,PythonCleanArchitecture,Helps in controlling an object that moves in an area.,https://github.com/RobertaBtt/PythonCleanArchitecture,932,0,0,0,0,1,14,5,1.7142857142857142,1,0,0,0,1,9.642857142857142,65.05779884370641,0.868718455123985,155.80445714503725
789874405,estevaofon,clean-arch-book-library,Clean Architecture Book library example,https://github.com/estevaofon/clean-arch-book-library,7,0,0,0,0,1,8,5,2.375,1,0,0,0,1,3.125,1.1887218755408673,0.125,0.5943609377704336
837200819,Nistha632,UVM-LAYERED-TB-ARCHITECTURE,SKELETON FOR UVM TB,https://github.com/Nistha632/UVM-LAYERED-TB-ARCHITECTURE,5,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,8587.742049050743,4.3752808988764045,37573.78375168943
357672809,titouanfreville,py-clean-arch,Repository to propose clean archi oriented code architecture for python around a simple library project.,https://github.com/titouanfreville/py-clean-arch,35,1,1,0,0,2,15,5,0.9333333333333332,0,1,1,0,2,0.7333333333333333,0.3169925001442312,0.0333333333333333,0.1584962500721156
529894842,felipebastosweb,python-clean-architecture-skeleton,Clean Architecture Application in Python,https://github.com/felipebastosweb/python-clean-architecture-skeleton,4,0,0,0,0,1,41,5,0.024390243902439,1,1,1,1,4,0.0,0.115972865906426,0.0121951219512195,0.057986432953213
874226381,QuocAnh189,Sentiment_Analysis_EventHub,"This project implements a Sentiment Analysis model using a neural network architecture built with Keras. The model classifies text into binary sentiment categories (positive or negative) by leveraging word embeddings and Gated Recurrent Units (GRU) layers. Additionally, the project includes a simple Flask web application to provide a real-time sent",https://github.com/QuocAnh189/Sentiment_Analysis_EventHub,4920,0,0,0,0,1,5,5,7.2,0,0,0,0,0,5.2,27.05502985978628,1.085714285714286,34.44058761195503
194078678,iscas-microservice-team,microWebApp,A web UI module based on microservice architecture.,https://github.com/iscas-microservice-team/microWebApp,21,1,1,0,0,0,6,5,3.333333333333333,0,0,0,0,0,3.333333333333333,54.58803494713231,1.0782828282828285,114.95161016641488
732185062,serivt,cookiecutter-django-hexagonal-architecture,"Powered by Cookiecutter, inspired by Cookiecutter Django, Cookiecutter Django Hexagonal Architecture is a framework for quickly driving production-ready Django projects using hexagonal architecture.",https://github.com/serivt/cookiecutter-django-hexagonal-architecture,16,0,0,0,0,1,18,7,1.3333333333333333,1,1,0,1,3,1.9411764705882355,7.446718158284982,0.2973856209150327,15.272947720292276
802444415,Awmirhm,PatientManagement,This project is a patient and staff management project that I used three-layer architecture (MVC).,https://github.com/Awmirhm/PatientManagement,8736,0,0,0,0,1,735,8,7.1034013605442174,1,0,1,0,2,11.2,62.3361086332971,0.7152553639135474,172.0520909125647
892286669,tanimomor,fastapi-ddd-oop-clean-architecture,,https://github.com/tanimomor/fastapi-ddd-oop-clean-architecture,43,0,0,0,0,1,37,5,2.8378378378378377,1,0,1,1,3,3.702702702702703,2.842458054355973,0.081081081081081,3.5782978920329187
474629448,Avutzhan,python-shopping-card,Python Microservices - Event-Driven Architecture with RabbitMQ,https://github.com/Avutzhan/python-shopping-card,20,0,0,0,0,1,23,5,2.347826086956522,0,0,0,0,0,1.565217391304348,1.5287832765424638,0.0978260869565217,0.9915367779884738
469265624,melmi,urlshortner,An attempt to bring clean architecture into the python (and django) world!,https://github.com/melmi/urlshortner,126,3,3,0,0,1,31,5,2.032258064516129,1,1,0,1,3,2.3870967741935485,0.6812714670568951,0.064516129032258,0.5278879992451703
722746708,r2rstep,modular-monolith,,https://github.com/r2rstep/modular-monolith,162,0,0,1,22,1,173,6,2.745664739884393,1,1,1,1,4,3.057803468208093,3.5261417000420967,0.1315312252068457,4.536774429161904
31820807,happeninghq,happening,Open Source Event/Community management,https://github.com/happeninghq/happening,8999,2,2,1,69,1,170,6,3.994117647058824,0,0,0,0,0,9.105882352941176,75.63006631560732,0.9951977728044588,296.01051490477187
749513310,felipegenef,WhiteLabel-MS-Python,"WhiteLabel For Nodejs Projects With Python and Flask , Clean and Modular Architecture and Unit Tests",https://github.com/felipegenef/WhiteLabel-MS-Python,11,0,0,0,0,1,16,5,1.8125,0,1,1,0,2,2.5625,3.1640996443785587,0.21875,2.3716183940179807
966769174,Baptiste-Ferrand,hexagonal-api,This project is just a training for testing the hexagonal architecture ,https://github.com/Baptiste-Ferrand/hexagonal-api,85,0,0,0,0,1,30,5,4.7,1,1,1,1,4,5.366666666666666,4.4827451199922566,0.2666666666666666,4.688607353886669
804733453,AnhCaooo,electric-application,Electric application architecture ,https://github.com/AnhCaooo/electric-application,809,1,1,0,1,1,1,5,7.0,0,0,0,0,0,0.0,274.01923055728344,1.4615384615384617,400.489644660645
883271732,ivan-borovets,fastapi-clean-example,"Framework-agnostic backend example using FastAPI. Implements Clean Architecture and CQRS with DDD-inspired patterns, featuring DIP (low coupling), DI (no globals), hierarchical RBAC with permissions, and session-based authentication (cookies)",https://github.com/ivan-borovets/fastapi-clean-example,1284,130,130,10,0,2,174,6,3.5804597701149423,1,1,0,1,3,3.603448275862069,13.469168802820931,0.3972416233192096,45.71151735039231
958189269,Omdeepb69,sentiment-canvas,"Visualize the sentiment evolution of a specific topic (e.g., a product, brand, or event) over time by analyzing text data from sources like Twitter or news headlines.",https://github.com/Omdeepb69/sentiment-canvas,41,0,0,0,1,1,11,5,3.8181818181818175,0,0,0,0,0,20.545454545454547,288.11015011975974,2.7026829395587395,2049.5119634835974
975060073,tokyralisera,fast-api-rh,A simple FastAPI Python RESTful API for a training in microservices architecture,https://github.com/tokyralisera/fast-api-rh,70,0,0,1,0,1,20,6,4.75,1,1,0,0,2,9.2,73.87383484998583,0.4989389920424403,189.88480655818785
605217253,numanshaikh25,clown-management-system,"A system based on microservices architecture using Flask, PostgreSQL, SqlAlchemy, Marshmallow, Docker and Docker Compose",https://github.com/numanshaikh25/clown-management-system,11,0,0,0,0,1,9,5,3.555555555555556,0,0,1,0,1,12.0,86.94561607915719,0.5696649029982362,167.43429878208974
965655892,bofeof,architecture-sprint-2,"architecture practice: microservices (db, sharding, replication, cache, api gateway)",https://github.com/bofeof/architecture-sprint-2,44,0,0,0,0,1,4,5,17.0,0,0,0,0,0,22.0,15.509775004326936,1.0,15.509775004326936
139531045,IslaMurtazaev,PayDevs,Project based on Clean Architecture principles,https://github.com/IslaMurtazaev/PayDevs,1187,1,1,2,0,0,64,5,2.59375,0,0,0,0,0,23.03125,57.983245465429846,0.5616663918289639,164.48903082555125
887319498,hcsalmi,ft_transcendence,"Hive Helsinki school final project. Keywords: Microservices, Docker, Databases, Networking, Algorithms, Application architecture, Python, JavaScript, HTML",https://github.com/hcsalmi/ft_transcendence,839,0,0,0,0,1,46,6,4.282608695652174,0,0,1,0,1,19.608695652173918,401.4020126536303,2.5129140885446377,3273.075989365301
588671310,aboudzein,ava,"Open-source Discord bot that uses OpenAI API & NLP. Can perform various tasks like answering questions, scheduling events & more. Built with Python and Discord API. Easy to customize and contributions are welcome.",https://github.com/aboudzein/ava,9,5,5,0,0,1,8,5,2.125,0,1,0,0,1,1.125,2.3358070089359555,0.125,1.1679035044679775
577849440,akshanshgusain,hexagonal_architecture_fastapi,Hexagonal Architecture implementation in Python,https://github.com/akshanshgusain/hexagonal_architecture_fastapi,154,6,6,0,0,1,28,6,1.8214285714285716,1,1,1,1,4,2.2857142857142856,0.3571428571428571,0.0535714285714285,0.5357142857142857
768264971,yashbhaskar,facial_emotion_recognition,"The model used for facial emotion recognition typically involves a Convolutional Neural Network (CNN) architecture due to its effectiveness in capturing spatial features from images. CNNs consist of layers such as convolutional layers for feature extraction, pooling layers for downsampling, and fully connected layers for classification.",https://github.com/yashbhaskar/facial_emotion_recognition,2675,0,0,0,0,1,1,5,4.0,0,0,0,0,0,0.0,77.70923408096293,3.111111111111111,241.762061585218
810888580,MotoIlyuha,FlaskCleanArchitectureExample,"Этот проект представляет собой пример чистой архитектуры на Python, в котором используются Flask, SQLAlchemy и PostgreSQL.",https://github.com/MotoIlyuha/FlaskCleanArchitectureExample,39,0,0,0,0,1,41,5,1.3414634146341464,1,1,1,1,4,2.6341463414634148,4.930019349269216,0.1504065040650406,2.7910974147877465
935525461,AliKHaliliT,BResNet16-2Plus1DD,Bottleneck ResNet16 3D Network using Conv2Plus1D layers with Enhanced Architecture,https://github.com/AliKHaliliT/BResNet16-2Plus1DD,95,0,0,0,0,1,34,5,1.4411764705882353,0,0,0,0,0,4.764705882352941,44.02337271487795,1.029487077850008,234.75484519258976
745203891,JohanFire,Microservices-Web-App,"Development of a Microservices Architecture App with React, Django and Flask. ",https://github.com/JohanFire/Microservices-Web-App,226,0,0,0,0,1,16,5,1.625,0,0,0,0,0,1.0625,0.2971804688852168,0.03125,0.1485902344426084
646127220,okidijimmy200,Domain-Driven-Design-In-microservice,Here we use Domain Driven Design to decompose a sports betting application into three microservices,https://github.com/okidijimmy200/Domain-Driven-Design-In-microservice,33,0,0,0,0,1,77,5,2.5454545454545454,1,0,1,1,3,5.51948051948052,17.961077143599937,0.363165045632578,22.09472283660998
372762271,BorjaArroyo,docker_webinar,Example microservice architecture created to cover the Docker webinar of the COVIDX EU H2020 program,https://github.com/BorjaArroyo/docker_webinar,13,2,2,0,0,1,3,5,4.666666666666667,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
485131621,younes-mirinezhad,PySide6_CleanArchitecture,"Sample of PySide6 Clean Architecture (Qt, QML, Python, PySide6)",https://github.com/younes-mirinezhad/PySide6_CleanArchitecture,35,15,15,2,0,1,8,5,3.875,0,0,0,0,0,10.625,54.39173696331724,1.4702380952380951,132.6811255329697
565465237,joliveira-git,python_flask,Python with Flask - API REST using Clean Architecture,https://github.com/joliveira-git/python_flask,93,1,1,0,0,1,81,5,2.580246913580247,1,1,1,1,4,5.024691358024692,21.23582282937026,0.4076456807938289,33.10434611840119
610490153,kaiqueBellmont,clean_architecture_fastapi,,https://github.com/kaiqueBellmont/clean_architecture_fastapi,31,0,0,0,0,1,36,5,2.888888888888889,1,1,0,1,3,3.8333333333333335,0.1320802083934297,0.0138888888888888,0.0660401041967148
860144815,xgabrielmorales,,E-commerce platform that demonstrates a simplified microservices architecture.,https://github.com/xgabrielmorales/None,345,0,0,0,0,1,124,6,2.806451612903226,1,1,1,0,3,3.870967741935484,17.40668605805967,0.3493960795534677,42.94867548173397
681286487,roshanidaulkar,indian-cuisine-deploy-5039,"The Indian Cuisine Analysis and Recommendation System project is a comprehensive initiative designed to deliver data-driven culinary insights and personalized recipe recommendations within the domain of Indian cuisine. This project combines various AWS services to achieve its objectives, making it an efficient and scalable solution.",https://github.com/roshanidaulkar/indian-cuisine-deploy-5039,83,0,0,0,0,1,2,5,9.5,0,0,0,0,0,17.5,852.6274246962768,4.032608695652174,5055.287743740771
879753523,Drago-03,Event-Processing,This system allows you to:  Process events in real-time from multiple sources Handle different types of events differently Maintain statistics and track user behaviors Provide both WebSocket and REST API interfaces Scale horizontally for high throughput,https://github.com/Drago-03/Event-Processing,27,2,2,0,2,1,8,5,0.875,0,0,0,0,0,0.875,8.788544330585093,0.3333333333333333,23.436118214893582
485781178,benjamin-02,k8s-phonebook-microservices,Phonebook Microservice Web Application aims to create a web application with MySQL Database using Docker and Kubernetes to showcase the understanding of Microservice architecture.,https://github.com/benjamin-02/k8s-phonebook-microservices,227,0,0,0,0,1,4,5,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
143448934,lgiordani,gaudi,A helper library for Clean Architectures in Python,https://github.com/lgiordani/gaudi,27,12,12,1,2,2,12,5,1.0833333333333333,0,0,0,0,0,11.166666666666666,60.19681338348969,0.5833333333333334,106.59172170926382
240437664,0xstupig,flaskd,"Boilerplate template for Python Flask back end application that apply Domain Driven Design principal using Flask-SQLAlchemy, Marshmallow and Celery.",https://github.com/0xstupig/flaskd,49,3,3,0,9,1,70,5,3.642857142857143,1,1,0,0,2,6.9,28.219754962546546,0.6622441501853266,114.48433191668758
840828406,jval7,hexagonal-arch,HExagona architecture,https://github.com/jval7/hexagonal-arch,175,0,0,10,4,1,13,5,2.0,1,0,1,1,3,2.8461538461538463,0.8853673080251491,0.1153846153846153,0.4426836540125745
313983737,IDEA-Research-Group,conformancechecking4spark,"CC4Spark enables to generate XES event logs from distributed data sources, and solve conformance checking alignment problems in distributed environments.",https://github.com/IDEA-Research-Group/conformancechecking4spark,88,0,0,0,0,3,19,5,2.263157894736842,0,0,0,0,0,4.157894736842105,41.45634360756301,0.806786703601108,304.20109916766074
775069214,Paola-CansecoPenagos,TaskMaster_backend,Backend with hexagonal architecture designed for a task management application,https://github.com/Paola-CansecoPenagos/TaskMaster_backend,71,0,0,0,0,1,40,5,2.7,1,1,1,1,4,3.85,16.100963341303625,0.5515350877192983,36.95945332178355
464092744,prabal01pathak,multi_backend,"Multiple backends for one application , As microservices architecture. Over Engineering the things",https://github.com/prabal01pathak/multi_backend,1049,0,0,1,0,1,17,8,1.2941176470588236,0,0,1,0,1,0.4705882352941176,0.8390977944994357,0.088235294117647,0.4195488972497178
742922933,Cyphle,kata-clean-architecture,,https://github.com/Cyphle/kata-clean-architecture,25,0,0,0,0,1,26,5,1.1923076923076923,1,1,0,0,2,6.1923076923076925,34.602906433717365,0.35,33.820647591998835
926227337,som10qa,virtualbox-microservices-lab,"Deploying a microservices architecture using VirtualBox VMs, NAT networking, and lightweight services.",https://github.com/som10qa/virtualbox-microservices-lab,3,0,0,0,0,1,4,5,1.25,0,0,0,0,0,1.5,4.754887502163469,0.5,2.3774437510817346
729798556,Rupak167,vehicle_counter_clean_architecture_api,,https://github.com/Rupak167/vehicle_counter_clean_architecture_api,27,0,0,0,0,1,29,5,1.6206896551724137,1,0,1,0,2,1.4482758620689655,2.8346419049030893,0.1436781609195402,2.498266473794005
952206656,Gerard-007,estate_gatepass_layered-architecture,,https://github.com/Gerard-007/estate_gatepass_layered-architecture,22,0,0,0,0,1,13,5,3.615384615384616,1,1,1,1,4,6.384615384615385,28.46650367971908,0.715897435897436,79.83572562816966
678015009,NickNaskida,OrderService-DDD,An event-driven FastAPI Order Service powered by Domain-Driven Design for seamless order management,https://github.com/NickNaskida/OrderService-DDD,127,3,3,0,0,1,43,5,3.116279069767442,1,0,1,1,3,5.953488372093023,18.042782652652303,0.4387542042520803,45.669777475793055
269068089,ryoutoku,django-rest-clean-architecture,django rest frameworkをベースとしたクリーンアーキテクチャのサンプル実装,https://github.com/ryoutoku/django-rest-clean-architecture,21,7,7,2,1,1,22,5,1.681818181818182,0,0,0,0,0,1.9545454545454544,0.9211210230222912,0.0681818181818181,0.8130553979731214
558112071,gustavovalle23,django-clean-architecture-approach,Django Clean Architecture Approach,https://github.com/gustavovalle23/django-clean-architecture-approach,252,15,15,2,0,2,54,5,1.8148148148148149,1,1,0,1,3,3.425925925925926,8.259134446240905,0.2273694501955371,20.767464642938176
201626400,smituparmar,Models,AlexNet is 8 layer architecture with 5 layer of CNN. Here I created replica of that architecture in keras.,https://github.com/smituparmar/Models,1546,0,0,0,0,1,1,5,3.0,0,0,0,0,0,0.0,3.0,1.0,3.0
945721366,esakrissa,microservices-deployment,"A modern microservices architecture with FastAPI, Telegram Bot, and Message Broker deployed on GCP.",https://github.com/esakrissa/microservices-deployment,152,0,0,0,0,1,15,5,3.6,0,0,0,0,0,7.933333333333334,58.23426384892393,0.9777777777777776,287.44197636820263
574239592,Uemerson,python-ddd-course,Python Domain Driven Design (DDD),https://github.com/Uemerson/python-ddd-course,50,0,0,0,0,1,43,5,1.9534883720930232,1,1,1,1,4,3.116279069767442,4.872664190123476,0.1896243291592128,7.341843262191533
942695320,kallemickelborg,WisdmTimelineGenerator,"Agentic generator for Timelines, Events, and Perspectives using sources fetched from GNews API",https://github.com/kallemickelborg/WisdmTimelineGenerator,23,1,1,0,0,1,6,5,7.666666666666667,0,0,0,0,0,61.333333333333336,578.7573509993409,3.780103995621237,4666.216304653899
722664064,Leoozito,clean-architecture,Implementação de Clean Arc em sistema de API em Django,https://github.com/Leoozito/clean-architecture,36,1,1,0,0,1,39,5,1.9743589743589745,1,1,0,1,3,2.9743589743589745,3.1453407820614987,0.1615384615384615,2.967665781728656
338779016,tbleicher,clean-architecture-python,A Python GraphQL API organised along Clean Architecture principles.,https://github.com/tbleicher/clean-architecture-python,572,1,1,0,0,3,56,6,2.517857142857143,1,1,1,1,4,7.5,24.47772149819164,0.4213431866944069,45.48369056811738
644902038,heluio,be-task-ca,Backend engineering task - clean architecture,https://github.com/heluio/be-task-ca,29,0,0,17,0,0,20,5,3.15,0,0,0,0,0,2.35,5.1600557688892215,0.3125,8.69417729641752
780230661,bolanebyla,python-demo-hexagonal-architecture,Демо проект с использованием гексагональной архитектуры,https://github.com/bolanebyla/python-demo-hexagonal-architecture,35,0,0,0,0,1,43,6,1.7674418604651163,1,1,1,1,4,1.302325581395349,0.6283616281082296,0.0581395348837209,0.4945270350346606
615542211,cwwp671,e-commerce-platform,"An e-commerce platform microservices architecture, including inventory, order management, product catalog, recommendation, shipping, and user management services, with Kubernetes deployment configurations.",https://github.com/cwwp671/e-commerce-platform,11,0,0,0,0,1,12,5,2.1666666666666665,0,0,0,0,0,17.0,177.01467155274466,1.6101835664335666,267.6787143037937
889105641,Guilherme-Henrique-Leite,customer-management,"A Python project to streamline customer data management with a powerful, layered architecture. Easily process, organize, and visualize customer info.",https://github.com/Guilherme-Henrique-Leite/customer-management,398,1,1,0,0,1,44,5,2.5454545454545454,1,0,0,0,1,3.7954545454545454,56.2541662196013,0.8681203742494066,287.9627293388129
55873235,mauricioabreu,cqrs-tutorial,Learning CQRS through http://cqrs.nu/tutorial/cs/01-design,https://github.com/mauricioabreu/cqrs-tutorial,3,1,1,0,0,2,4,5,1.0,0,0,0,0,0,3.75,6.31654857462961,0.125,3.158274287314805
321920245,bobbydams,fast-api-example,An example of Fast API and Domain Driven Design,https://github.com/bobbydams/fast-api-example,43,0,0,0,2,1,36,5,2.1666666666666665,1,0,1,1,3,4.361111111111111,6.373912857293025,0.2152777777777778,7.216013109133723
71058770,lukaszb,cq,,https://github.com/lukaszb/cq,81,4,4,1,7,3,61,5,2.80327868852459,0,0,0,0,0,7.229508196721311,27.78935705101855,0.6736252854134648,56.46916340693634
563871559,williamskosasi,Wielview,An open-source computer forensics tool that can display summary as the result of Windows Event Log analysis based on the chosen function(s). Feel free to contact me through my socials and tell me what do you think about this tool.,https://github.com/williamskosasi/Wielview,43,11,11,0,0,1,1,5,6.0,0,0,0,0,0,625.0,24578.805404181763,10.16,249720.66290648672
635051465,PedroHPAlmeida,python-clean-architecture,,https://github.com/PedroHPAlmeida/python-clean-architecture,40,0,0,0,0,1,57,5,2.473684210526316,1,1,1,1,4,5.56140350877193,27.95720208209757,0.5655909392751498,53.68446368837763
704692667,vivienzhou2014,video-to-mp3,Microservice Architecture and System Design with Python & Kubernetes ,https://github.com/vivienzhou2014/video-to-mp3,3,0,0,0,0,1,1,5,2.0,0,0,0,0,0,2.0,2.0,0.5,1.0
877843319,LahcenEzzara,composedemo,Lab: Setting up a Multi-Container Architecture with Docker Compose,https://github.com/LahcenEzzara/composedemo,4,0,0,0,0,1,1,5,3.0,0,0,0,0,0,5.0,13.931568569324174,1.3333333333333333,18.575424759098897
975841670,intikhab-h-bhat,fastapi-structure,fastapi with layered architecture,https://github.com/intikhab-h-bhat/fastapi-structure,9,0,0,0,0,1,13,5,1.8461538461538465,1,1,1,0,3,1.8461538461538465,0.8930492672643701,0.0769230769230769,0.8930492672643701
742640423,Gerardo-rios,JokesApp,An app for Clean Architecture and TDD practice,https://github.com/Gerardo-rios/JokesApp,149,0,0,0,0,1,69,6,1.5507246376811594,1,1,1,1,4,1.420289855072464,1.2718665669772904,0.07487922705314,0.8014337194500021
783480572,UilSiqueira,Microservices,This repository contains an example of microservices architecture.,https://github.com/UilSiqueira/Microservices,2357,0,0,0,0,1,13,5,3.3846153846153846,0,0,0,1,1,2.923076923076923,16.30351054184853,0.7698882314266929,41.34124909018176
568677615,NathanDrake007,Audio-Converter,Mp4 to Mp3 converter using microservices architecture with python,https://github.com/NathanDrake007/Audio-Converter,48,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
683327434,themani-dev,GCP_DE_trio,Three Layer Architecture for ETL for batch data,https://github.com/themani-dev/GCP_DE_trio,2,0,0,0,0,1,2,5,3.0,0,0,0,0,0,3.5,10.44867642699313,0.375,7.836507320244847
393046801,FedericaCoppa,Neural-Network-Project-QUATERNION-SELD-TCN,Implementation of the SELD-TCN architecture in the Quaternion domain in order to detect and localize 3D sound events.  In particular the focus has gone into the implementation of the whole TCN block and the Batch Normalization layer.,https://github.com/FedericaCoppa/Neural-Network-Project-QUATERNION-SELD-TCN,137,2,2,0,0,1,24,5,8.125,0,0,0,0,0,51.333333333333336,1874.347455658905,7.764269127464602,27381.464341049923
175497854,wmhass,Clean-Architecture-Module-Generator,,https://github.com/wmhass/Clean-Architecture-Module-Generator,91,1,1,1,1,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
719523323,Souvik-1997,flask-microservice,Microservice Architecture with HMVC,https://github.com/Souvik-1997/flask-microservice,8,0,0,0,0,1,42,5,1.3095238095238095,1,1,1,1,4,1.619047619047619,0.4528464287774733,0.0476190476190476,0.2264232143887366
822440508,yashashvini15,News-Summerizer-,"News Summarizer using Python This repository contains a Python-based News Summarizer application. The News Summarizer fetches news articles from various sources, processes them using natural language processing techniques, and generates concise summaries to provide users with quick insights into current events.  ",https://github.com/yashashvini15/News-Summerizer-,4,0,0,0,0,1,1,5,4.0,0,0,0,0,0,5.0,12.0,2.0,24.0
610052269,jc-rosier,pydoca,Domain-Oriented Clean Architecture python library.,https://github.com/jc-rosier/pydoca,23,16,16,1,0,1,38,5,3.8157894736842106,1,1,0,0,2,8.131578947368421,16.433949198691266,0.5442339823918771,25.35408004451925
476699344,malwazan,SAM-Microservice-Boilerplate,Microservice Architecture Boilerplate from SAM,https://github.com/malwazan/SAM-Microservice-Boilerplate,10,0,0,0,0,1,6,5,2.6666666666666665,0,0,1,0,1,1.1666666666666667,0.0,0.0,0.0
751902197,yousef-soliman,bookshops,Clean architecture for FastAPI app,https://github.com/yousef-soliman/bookshops,43,0,0,0,0,1,30,5,3.933333333333333,0,0,0,0,0,5.0,26.871600681292797,0.4815373563218391,55.1093634689008
663497626,Manu-Abuya,microservices-docker-kubernetes,Microservices architecture with Docker and Kubernetes for scalable and containerized application deployment.,https://github.com/Manu-Abuya/microservices-docker-kubernetes,16,0,0,0,0,1,1,5,5.0,0,0,0,0,0,7.0,4.754887502163469,0.5,2.3774437510817346
833655555,Ayushi-P11,Multimodal,"This multimodal architecture processes images through ResNet and text through BERT, fuses their embeddings  using a Transformer Encoder to learn cross-modal relationships, and classifies sentiment via a fully connected  layer and SoftMax.",https://github.com/Ayushi-P11/Multimodal,568,0,0,0,0,1,13,5,3.3076923076923075,0,0,0,0,0,8.0,57.6469454150794,1.4025887573964495,253.57169927957244
647226970,dawid-bobowski,mp3converter,Microservice Architecture and System Design with Python & Kubernetes,https://github.com/dawid-bobowski/mp3converter,1301,0,0,0,0,1,14,5,2.9285714285714284,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
925063250,Faryalaurooj,Aero-Net,This introduces Aero-Net model architecture with convolutional layers integrated with transformer encoders to capture both local and global contextual information Multi-scale attention module processes features at multiple scales  and feature fusion module concatenates multi-scale features and a cascading network for precise classification .,https://github.com/Faryalaurooj/Aero-Net,27,0,0,0,0,1,6,5,4.333333333333333,0,0,0,0,0,7.0,41.01667000205562,1.593939393939394,155.23565034968874
5451396,samuell,dddscript,Domain Driven Design inspired approach to python scripting,https://github.com/samuell/dddscript,100,0,0,0,0,2,5,5,1.0,0,0,0,0,0,2.2,4.0529325012980815,0.3,3.5774437510817343
929700924,shaifimran,CS4067-Assgt-EventBooking-i221024-Shaif-i221068-Awab-repo,Online Event Booking Platform using a microservices architecture,https://github.com/shaifimran/CS4067-Assgt-EventBooking-i221024-Shaif-i221068-Awab-repo,204,0,0,1,0,1,4,8,7.25,0,0,0,0,0,10.666666666666666,78.53927634538455,2.21875,214.79262306450065
671447329,atumm-ra,fast-meerkat,An opinionated Clean Architecture in Python (FastAPI + Beanie ODM) [WIP],https://github.com/atumm-ra/fast-meerkat,207,0,0,0,0,0,11,5,3.4545454545454546,0,0,1,0,1,1.818181818181818,2.131031233968283,0.1363636363636363,1.0655156169841415
257593089,slimovich,Realworld-fastapi-gino-template,Real world Fast-API application template using gino(Async ORM) based on hexagonal architecture,https://github.com/slimovich/Realworld-fastapi-gino-template,289,93,93,15,5,4,35,5,1.7714285714285714,1,0,1,1,3,3.0285714285714285,5.712161699126076,0.0857142857142857,2.856080849563038
716974976,harshitbansal1602,tts-go-grpc,Text-to-Speech with go and python with grpc microservice architecture    ,https://github.com/harshitbansal1602/tts-go-grpc,2002,0,0,0,0,1,5,5,4.6,0,0,1,0,1,7.0,13.003274155288665,0.5,17.60295623206761
791913770,ozennou,crud-master-py,"CRUD Master: Dive into tech proficiency with a CRUP API project. Employing Flask, SQLAlchemy ORM, Docker, RabbitMQ, PostgreSQL, it's a journey in microservices architecture.",https://github.com/ozennou/crud-master-py,923,3,3,0,0,1,10,5,3.3,0,0,0,0,0,5.8,44.48626795861976,1.1614285714285717,138.87056320145268
677003518,Bdata0,call_quality_rate,The app for analyzing Call Quality Rate (CQR) of call transcripts based on audio recordings.,https://github.com/Bdata0/call_quality_rate,24,1,1,0,0,1,15,5,1.6666666666666667,1,0,0,0,1,4.466666666666667,3.6529325012980816,0.3,2.860451250937503
697138959,opencodes,clean-architecture,clean-architecture,https://github.com/opencodes/clean-architecture,6,0,0,0,0,1,8,5,0.625,0,0,0,0,0,3.75,2.533082813311301,0.1875,2.235902344426084
173217534,pechyonkin,clean-architectures,,https://github.com/pechyonkin/clean-architectures,19,0,0,0,0,0,13,5,1.3076923076923077,0,0,0,0,0,5.538461538461538,35.926538150810806,0.6423076923076922,49.262960748291576
334703684,wesleyspeixoto,test-indiana-technologies-clean-architecture,,https://github.com/wesleyspeixoto/test-indiana-technologies-clean-architecture,15,0,0,0,0,1,42,5,2.6666666666666665,1,1,1,0,3,8.761904761904763,49.47458651777839,0.617391304347826,46.89331122952607
672340089,Henry-Shelton,ChIPseq_CNN,"ChIP-seq CNN binary peak classifier built in TensorFlow using an inception layer architecture. Binary classification of various methylation signals by a neural network, trained off trinary input data vectors (ChIP-seq, RefSeq, human labels). ",https://github.com/Henry-Shelton/ChIPseq_CNN,5551,2,2,0,0,2,17,5,4.647058823529412,0,0,0,0,0,15.176470588235292,651.8977321656022,3.193167120507367,7625.241069896473
622661328,smartleohu,PythonWithDDD,this project is for the 2nd formation Python and Domain Driven Design,https://github.com/smartleohu/PythonWithDDD,202,1,1,0,0,1,91,5,1.5164835164835164,1,1,0,0,2,3.21978021978022,7.741583839092663,0.2296164619694032,7.391917314151999
346165184,bryanyi,blog-microservice,In progress...A blog built upon a microservice architecture,https://github.com/bryanyi/blog-microservice,7858,0,0,0,0,1,20,5,2.25,0,0,0,0,0,1.1,0.7132331253245203,0.075,0.3566165626622601
29083535,johnnncodes,ddd-python-django,An attempt to implement DDD and hexagonal architecture in Python using Django framework w/o replacing Django's core components.,https://github.com/johnnncodes/ddd-python-django,140,125,125,16,0,6,54,5,1.5925925925925926,0,0,0,0,0,2.833333333333333,2.36624552454416,0.0925925925925925,2.5980180619463265
877650110,ehtisham-sadiq,E_Commerce_System,"A modular FastAPI-based e-commerce system for managing authentication, sellers, buyers, car inventory, sales, and stock with a clean, scalable architecture.",https://github.com/ehtisham-sadiq/E_Commerce_System,65,0,0,0,0,1,53,5,1.6226415094339623,1,0,1,0,2,2.018867924528302,8.638176742510586,0.1788777260475373,25.45842590476658
761071675,MothScientist,microservices-demo,An example of the simplest microservice architecture in Python,https://github.com/MothScientist/microservices-demo,21,0,0,0,0,1,4,5,6.25,0,0,0,0,0,5.5,45.23485676620157,1.0099206349206349,69.9601127640586
624111463,nikhil-khorwal,python-clean-architecture,,https://github.com/nikhil-khorwal/python-clean-architecture,62,0,0,0,0,1,175,5,4.531428571428571,1,1,1,0,3,5.748571428571428,23.093826899545878,0.4442011830819284,72.73117926279421
834205334,diododias,aws-serverless-python-clean-architecture,"Looking for a real-world, production-ready Clean Architecture implementation? This project is packed with industry best practices and modern software engineering principles, providing a solid foundation for building scalable, maintainable, and testable applications.",https://github.com/diododias/aws-serverless-python-clean-architecture,1082,0,0,0,0,1,192,5,3.0,1,1,0,1,3,2.234375,3.746471866152126,0.107349537037037,5.172694393371806
799210770,pranavgupta2603,KAN-Distillation,"An implementation of the KAN architecture using learnable activation functions for knowledge distillation on the MNIST handwritten digits dataset. The project demonstrates distilling a three-layer teacher KAN model into a more compact two-layer student model, comparing the performance impacts of distillation versus non-distilled models.",https://github.com/pranavgupta2603/KAN-Distillation,2469,0,0,0,0,1,3,5,4.0,0,0,0,0,0,11.0,677.3297435780828,3.921794871794872,4712.554741826666
781092500,tobiasleibrock,machine-learning-atmospheric-blocking,"Repository containing all source code files for the bachelor's thesis ""Machine Learning for the Detection of Atmospheric Blocking Events during European Summer""",https://github.com/tobiasleibrock/machine-learning-atmospheric-blocking,115,1,1,0,0,1,13,5,6.307692307692308,1,0,0,0,1,8.846153846153847,103.9452265471348,1.8575460790314904,513.3281747587046
908559407,mrbrownstone07,ninja-boilerplate,Boilerplate code for django-ninja with clean architecture,https://github.com/mrbrownstone07/ninja-boilerplate,15,0,0,0,0,1,17,5,1.3529411764705883,1,1,0,0,2,2.3529411764705883,16.349821166056582,0.4221453287197231,48.96577410932855
312787198,lukefx,stardust,"A minimalist Python web framework inspired by serverless architectures. Build APIs with a single function, powered by Starlette and Uvicorn. 🌟",https://github.com/lukefx/stardust,94,3,3,0,0,2,19,5,2.210526315789474,0,0,0,0,0,4.473684210526316,27.05717237631606,0.3963317384370016,48.48166913780906
922040912,tsungchih,task-list-refactor-ca,This project is aimed at proceeding refactor of task-list project based on Clean Architecture (CA).,https://github.com/tsungchih/task-list-refactor-ca,40,0,0,0,0,1,21,5,2.142857142857143,1,1,0,1,3,4.904761904761905,6.650510983072704,0.3111111111111111,6.217297664087679
275245809,minbavel,VGG_CIFAR100,Using VGG16 Architecture for Recomputation of the dense layers for performance improvement of DCNN in CIFAR100 Model,https://github.com/minbavel/VGG_CIFAR100,343,0,0,0,0,1,8,5,5.75,0,0,0,0,0,3.875,135.67106807792203,3.119148094020217,872.9762821571323
821858961,jairoCO10,taskhub-clean-architecture,api en python con fastapi la cual implementa principios solid y clean architecture,https://github.com/jairoCO10/taskhub-clean-architecture,8,0,0,0,0,1,19,5,3.421052631578948,1,1,1,1,4,6.421052631578948,3.8377317296126394,0.15,2.316276626077141
187851029,abmazhr,lets_talk,"real-time chat app demonstrating some architectural, testing, readability, clean-code and infrastructural skills as a profile for myself",https://github.com/abmazhr/lets_talk,1206,10,10,4,3,1,78,9,3.576923076923077,1,1,1,1,4,4.346153846153846,11.04902933705042,0.3199938949938949,18.68801468366456
54093486,ankitanand1995,Event-Management-Sytem,A Open Source Event Management System Made Using Django Framework,https://github.com/ankitanand1995/Event-Management-Sytem,1938,1,1,0,0,1,27,5,1.5925925925925926,0,0,0,0,0,0.7037037037037037,0.4633250001602569,0.074074074074074,0.2872180556356841
708795438,mvandermeulen,movie-database,"Example of ""Clean Architecture"" implementation ",https://github.com/mvandermeulen/movie-database,404,0,0,2,0,0,103,7,2.3980582524271843,1,1,1,1,4,2.4757281553398056,0.7532217558553085,0.0682847896440129,0.7319584189045292
329171728,mirayyuce,NAS_updated,A cleaned and simplified copy of Neural Architecture Search ,https://github.com/mirayyuce/NAS_updated,1327,0,0,0,0,1,6,5,8.833333333333334,0,0,0,0,0,39.16666666666666,1192.4545477576928,5.485120187921912,10075.175123312089
422333999,DenisTrukhin,otus_arch_hw1,Microservice architecture: homework 1,https://github.com/DenisTrukhin/otus_arch_hw1,9,0,0,0,0,1,1,5,3.0,0,0,0,0,0,3.0,0.0,0.0,0.0
960557153,lashei8,Multi-layer-perceptron-MLP-regressor-and-hyperparameter-tuning,This study explains some terms in machine learning - Neural Network and then focuses on modeling a noisy sine wave using a multi-layer perceptron (MLP) regressor. Hyperparameter tuning was performed using grid search to determine the optimal neural network architecture. ,https://github.com/lashei8/Multi-layer-perceptron-MLP-regressor-and-hyperparameter-tuning,18,0,0,0,0,1,1,5,4.0,0,0,0,0,0,0.0,39.0,2.4,93.6
694600180,narmatov-asylbek,books-clean-architecture,Simple project,https://github.com/narmatov-asylbek/books-clean-architecture,18,0,0,0,0,1,35,5,2.5142857142857142,0,1,1,0,2,3.6857142857142855,2.262057932214523,0.15,2.2739161464796327
601932367,core-i5,microservice,Django application with microservice architecture and rabbitMQ message broker,https://github.com/core-i5/microservice,314,0,0,0,0,1,51,5,1.8235294117647056,1,1,0,0,2,1.6274509803921569,3.4057125563423027,0.160873440285205,7.764363133048948
937446449,Sardor6628,flutter_clean_architecture,"This repository contains a Python script to generate a Flutter Clean Architecture folder structure automatically. It creates essential directories and files, following best practices for separation of concerns. Good for Flutter developers who want a structured and scalable project setup.",https://github.com/Sardor6628/flutter_clean_architecture,4,1,1,0,0,1,1,5,1.0,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
229069379,andresmaopal,data-lake-staging-engine,"S3 event-based engine to process files (microbatches), transform them (parquet) and sync the source to Glue Data Catalog - (Multicountry support)",https://github.com/andresmaopal/data-lake-staging-engine,1361,6,6,2,0,2,9,5,5.888888888888889,0,0,0,0,0,15.444444444444445,118.6425304349059,2.131998776522103,453.591860114257
280248251,wapiflapi,gqles,A GraphQL and Event Sourcing experiment.,https://github.com/wapiflapi/gqles,236,0,0,0,0,1,16,5,4.1875,0,0,0,0,0,11.4375,82.31748209501555,1.151924603174603,659.6991547771273
387167285,zerlok,otus-ma-k8s-homework,OTUS microservice architecture course kubernetes homework,https://github.com/zerlok/otus-ma-k8s-homework,33,0,0,0,0,1,2,5,3.0,0,0,0,0,0,2.5,2.3774437510817346,0.25,1.1887218755408673
791843326,Vibgang,Microservices-Ecommerce-Application,transition an e-commerce web application into a microservices architecture,https://github.com/Vibgang/Microservices-Ecommerce-Application,7804,0,0,0,0,1,16,5,2.5625,0,0,0,0,0,5.6875,31.71987512855626,0.7866071428571428,173.9403598278327
893116929,dieisonborges,hexagonal-arch-python,Simple Python Example Using Hexagonal Architecture,https://github.com/dieisonborges/hexagonal-arch-python,11,0,0,0,0,1,7,5,1.1428571428571428,1,0,0,1,2,2.0,1.3585392863324195,0.1428571428571428,0.6792696431662099
882035534,barbodjangjoo,store_drf,"An advanced e-commerce platform developed using Django and Django REST Framework (DRF). It includes features like product management, shopping cart, orders, user management, and payments, focusing on clean architecture, scalability, and security.",https://github.com/barbodjangjoo/store_drf,98,1,1,0,0,1,25,5,2.24,0,0,0,0,0,4.88,6.395876059369872,0.2541538461538462,11.035189117801616
919297326,sujalmandalia,Banking-System,This is basic banking system application created with event sourcing,https://github.com/sujalmandalia/Banking-System,25,0,0,0,0,1,9,5,2.6666666666666665,1,1,0,1,3,5.777777777777778,10.392147223664535,0.3333333333333333,11.86599861327458
748507152,engrshishir,Chatbot-Python-Js,"PSTU Dialogue,a user-friendly Chatbot. It's your go-to for quick info on academic programs, admissions, campus details, and events. Handy for students with schedules and resources, plus a reliable source for prospective students. Enhancing communication and accessibility at PSTU",https://github.com/engrshishir/Chatbot-Python-Js,9179,0,0,0,0,1,796,9,8.272613065326633,1,0,1,0,2,48.47738693467337,554.992912899475,3.60515648793403,5665.775614545412
760038784,anteok,task-tracker-clean-architecture,Clean architectrure based implementation of a simple task tracker ,https://github.com/anteok/task-tracker-clean-architecture,27,0,0,0,0,1,20,5,3.55,1,0,1,1,3,9.15,9.67932407459873,0.5,7.00796984116221
167391422,jeremyyang824,cqrs-temp,,https://github.com/jeremyyang824/cqrs-temp,109,0,0,0,0,1,1,5,2.0,0,0,0,0,0,8.0,66.60791492653966,1.8,119.8942468677714
694692743,v-v-d,carts,Layered architecture python example project,https://github.com/v-v-d/carts,1676,47,47,9,3,2,270,8,5.125925925925926,1,1,1,1,4,4.803703703703704,24.61697586171324,0.3917328493980364,60.38686539507206
809339428,Alfred-Noble,Quiz-Game-OOP-,"Overview: The Quiz Game is an interactive Python application that leverages Object-Oriented Programming (OOP) principles to create an engaging and modular trivia experience. Designed to test and enhance your knowledge across various topics, this project showcases clean code architecture, efficient data management, and a user-friendly interface.",https://github.com/Alfred-Noble/Quiz-Game-OOP-,5,1,1,0,0,1,4,5,0.75,0,0,0,0,0,2.75,10.378294855911893,0.375,15.56744228386784
762637991,borjaregueral,Microservices_Images,"Microservices to upload, tag and retrieve images following a MVC architecture",https://github.com/borjaregueral/Microservices_Images,250,0,0,0,0,1,4,5,4.5,0,0,0,0,0,11.0,86.66705958356238,1.4276315789473686,215.6399423284899
934444059,temirlan-k,ollama-app,"Backend app with Clean Architecture, LLM and REST/GraphQL",https://github.com/temirlan-k/ollama-app,200,0,0,0,0,1,48,6,4.083333333333333,1,1,1,1,4,4.666666666666667,10.19678613901364,0.3058449074074074,10.259003555138587
723189390,DarioMejia,People_CRUD_microservices_backend,"A microservices-based backend system for efficient CRUD operations on people records, leveraging FastAPI, MongoDB, and Docker for scalable and maintainable service architecture.",https://github.com/DarioMejia/People_CRUD_microservices_backend,30,0,0,0,0,1,12,5,4.083333333333333,1,1,0,0,2,5.333333333333333,20.38126948907749,0.5194444444444445,61.95310504866572
718641260,TihorSam,IMS_sensorIOT_Rpi,"Infrastructure Management System (IMS) is an IOT system that perform remote sensing and monitoring of buildings, Highrise building, residential area, apartment complexes.  The IoT system uses a 5 layer architecture and employe MQTT protocol for publishing and subscribing building data",https://github.com/TihorSam/IMS_sensorIOT_Rpi,57,0,0,0,0,1,16,5,4.25,0,0,0,0,0,7.625,202.7255166657173,3.058597613686623,1845.0028403730032
627789080,EvansPauliuts,domain-driven-design-with-fastapi,This design architecture patterns domain driven with FastAPI  RESTful,https://github.com/EvansPauliuts/domain-driven-design-with-fastapi,49,0,0,1,0,1,19,5,1.6842105263157894,1,1,0,1,3,2.210526315789474,0.0,0.0,0.0
891113638,ivanpalenciab,Support-Decision-System,"This system is designed to provide decision-making support through the use of machine learning models. It will feature a microservices-based architecture, enabling users to retrain models and customize them for their specific use cases.",https://github.com/ivanpalenciab/Support-Decision-System,7,0,0,0,0,1,8,5,1.25,1,0,1,0,2,1.625,11.696627143896391,0.5208333333333333,27.798242434860533
376871290,elfiyang16,CQRS-DDD--Try,An little project on CQRS+DDD with modelling a bank,https://github.com/elfiyang16/CQRS-DDD--Try,8,0,0,0,0,1,14,5,3.5,0,0,0,0,0,9.428571428571429,19.68492162526288,0.8903596403596404,65.01601918913876
530699507,dmerejkowsky,todolist-django-hexa,Hexagonal architecture with Django,https://github.com/dmerejkowsky/todolist-django-hexa,48,0,0,0,0,2,32,5,1.8125,0,0,0,1,1,4.59375,11.209881138696993,0.3110119047619047,9.49503993131163
349468315,JoshuadeJong,ecommerce-microservice,A small ecommerce store with a microservice architecture using FastAPI and Flask.,https://github.com/JoshuadeJong/ecommerce-microservice,26,1,1,0,0,1,36,5,1.9166666666666667,0,0,1,0,1,4.222222222222222,30.63402326450654,0.5223539745278876,107.74669123921429
575083066,knucklesuganda,py_assimilator,"Python Domain-Driven Design, Event-Based Systems, CRUD patterns",https://github.com/knucklesuganda/py_assimilator,3146,212,212,7,2,6,96,5,3.59375,1,1,0,0,2,7.96875,18.257393105187784,0.5992501277657528,50.2767406913541
262664688,lohanigaurav,FaceRecognition,"Face_Recognition Project Background: Mass shooting is a bigger concern in the US and current security systems are not equipped to provide presence of criminals in the premises. If security officers can identify and notify presence of suspected criminals in premises, a preventive plan or measures can be taken by authorities to take strategic and operational actions. The whole idea is to reduce the response time so that the action can be taken quickly  Project Scope: Create a computer vision system using AWS services to detect wanted/person of interest and weapon with the help of cctv camera.  Services used: S3, Amazon Rekognition, Amazon Sagemaker, IAM  Wanted Person Detection: Use Case: Any person who enters the building and crosses any cctv camera their faces are compared against the collection of wanted persons database and if more than 98% facial similarity is found, the image will be highlighted.  Future Improvements The current implementation is an MVP and all the code is written in Sagemaker. To improve security and architecture flexibility for future implementation, an layer of Lambda function will be implemented. A server-client architecture with Edge computing can be used to ensure every CCTV can act independently, to wanted criminals.",https://github.com/lohanigaurav/FaceRecognition,2,2,2,0,0,1,1,5,1.0,0,0,0,0,0,13.0,265.6821216470764,1.5,398.5231824706146
582892693,LJlkdskdjflsa,Recorder-Clean-Architecture,,https://github.com/LJlkdskdjflsa/Recorder-Clean-Architecture,29,0,0,0,0,1,36,5,2.888888888888889,1,1,0,1,3,3.8333333333333335,0.1320802083934297,0.0138888888888888,0.0660401041967148
442640728,DaviiErazo,template-python-clean-architecture,,https://github.com/DaviiErazo/template-python-clean-architecture,2,0,0,0,0,1,17,5,0.0,1,1,1,1,4,0.0588235294117647,0.2796992648331452,0.0294117647058823,0.1398496324165726
472432084,alensuljkanovic,silvera,Silvera is an tool for acceleration of development of microservice architectures https://alensuljkanovic.github.io/silvera/,https://github.com/alensuljkanovic/silvera,5707,10,10,3,0,1,48,7,2.9166666666666665,1,0,1,0,2,22.3125,174.10160599551193,1.2476929961359782,949.1664911960952
833839741,lesmesl,hexagonal-api,"API RESTful con FastAPI y SQLite, con autenticación y autorización (JWT), y pruebas unitarias (pytest). Implementada con Arquitectura Hexagonal, Vertical Slice y Screaming Architecture",https://github.com/lesmesl/hexagonal-api,224,2,2,0,0,2,38,5,3.6052631578947367,1,1,0,1,3,5.657894736842105,27.648463407280712,0.4067982456140351,44.400103493423366
848056085,gbrayhan,flask-ddd,"This Flask application demonstrates Clean Architecture principles using Python, integrating Domain-Driven Design (DDD), Docker, SQL databases, and an ORM. It exemplifies a robust, scalable, and maintainable design ideal for complex applications.",https://github.com/gbrayhan/flask-ddd,29,1,1,0,0,1,13,5,1.4615384615384617,1,1,0,1,3,3.8461538461538463,1.0972817312684928,0.1153846153846153,0.5486408656342464
867593312,wasiqbarat,CloudComputing_Project1,Deploying a Flask API with Cloud Services + Microservice Architecture,https://github.com/wasiqbarat/CloudComputing_Project1,495,0,0,0,0,1,12,5,4.583333333333333,0,1,0,0,1,8.416666666666666,9.695725724555748,0.375,13.650005377945975
482003526,adroaldof,python-clean-architecture,Practice repo to follow the Architecture Patterns with Python,https://github.com/adroaldof/python-clean-architecture,135,0,0,0,0,1,27,5,2.555555555555556,1,0,0,1,2,4.407407407407407,15.239266098370056,0.5140550807217473,39.58297397626124
907269263,SaaaRoO,Flask_Book_managementAPi,This project provides a Flask-based RESTful API for managing books and borrowing records. It is designed using clean architecture principles and implements the repository pattern for better separation of concerns and maintainability.,https://github.com/SaaaRoO/Flask_Book_managementAPi,28,1,1,0,0,1,14,5,2.2857142857142856,1,1,1,1,4,4.428571428571429,14.585429513857534,0.6818181818181819,37.25624276099813
722136722,RevoU-FSSE-2,Week-21-muhammad-avicena,Build a simple back-end API with Hexagonal Architecture using Flask-Python-SQLAlchemy,https://github.com/RevoU-FSSE-2/Week-21-muhammad-avicena,133,0,0,1,0,2,28,5,3.107142857142857,1,0,0,1,2,3.321428571428572,4.647962138472577,0.1938775510204081,13.948061323815072
925735980,arcxteam,na0ris-node,Naoris Protocol is the world's first Decentralized Security Layer designed for system and data reliability across Web2 & Web3 architecture,https://github.com/arcxteam/na0ris-node,65,9,9,2,2,1,1,5,10.0,0,0,0,0,0,97.0,1314.5840150821732,8.11214953271028,10664.102103657257
582807211,SamWarden,user_service,An example of a simple CRUD Web API using FastAPI,https://github.com/SamWarden/user_service,568,256,256,16,17,2,156,6,3.7884615384615374,1,1,1,1,4,3.769230769230769,12.25793106175524,0.306021446733521,23.523831358586133
553074131,jvalduvieco,scuti,A small CQS inspired framework with many things.,https://github.com/jvalduvieco/scuti,873,5,5,1,0,2,239,7,3.3347280334728038,1,1,1,1,4,4.03765690376569,8.390416091521915,0.300679708015043,25.856468058237667
503966699,overshard,analytics,A self-hostable analytics service with a straightforward API to collect events from any source.,https://github.com/overshard/analytics,1465,1,1,1,6,2,43,5,2.488372093023256,0,0,0,0,0,3.86046511627907,47.14142590366328,0.5851696875394256,290.4499911952996
732285411,tinshade,mizu-media_formatter,"Managing a media conversion platform with Kubernetes, Docker, K9S and Python in a Microservices Architecture.",https://github.com/tinshade/mizu-media_formatter,381,0,0,0,0,1,8,5,2.75,0,0,0,1,1,3.375,17.391565702636665,0.7788461538461539,43.45096717933866
409763919,ratnadeepb,MiCo,A tool to build an arbitrary microservice architecture. This has now moved to https://github.com/MSrvComm,https://github.com/ratnadeepb/MiCo,397,0,0,0,0,1,6,5,3.6666666666666665,0,0,0,0,0,5.666666666666667,85.1119762557319,2.458333333333333,432.8851589552794
721795330,eltonjncorreia,clean-architecture-ddd-and-tdd,,https://github.com/eltonjncorreia/clean-architecture-ddd-and-tdd,10,0,0,0,0,1,14,5,1.9285714285714288,1,1,0,1,3,2.642857142857143,4.686402891031201,0.2142857142857142,4.686402891031201
915398910,ShubhamDalvi1999,Azure-DevOps-CI-CD-Pipeline-for-Cloud-Native-Microservices,This enterprise-grade microservices application demonstrates a modern cloud-native architecture integrated with Azure DevOps CI/CD practices. The project showcases end-to-end implementation of a scalable e-commerce platform using industry-standard technologies and best practices.,https://github.com/ShubhamDalvi1999/Azure-DevOps-CI-CD-Pipeline-for-Cloud-Native-Microservices,9839,0,0,0,0,1,11,6,6.181818181818182,0,1,0,0,1,24.90909090909091,32.19954427146146,1.0795454545454546,105.228810734727
773843133,SpadavecchiaAdrian,clean_architecture,"Implementation of the book ""Clean Architectures in python - Leonardo Fiordani"" with FastAPI, Pydantic",https://github.com/SpadavecchiaAdrian/clean_architecture,8,0,0,0,0,1,14,5,1.0,1,1,0,0,2,2.357142857142857,20.41369181424128,0.2241379310344828,23.000612055132954
912605140,bhaskarnn9,microservices-python,Microservice Architecture and System Design with Python & Kubernetes,https://github.com/bhaskarnn9/microservices-python,361,0,0,0,0,1,11,5,2.909090909090909,0,0,0,1,1,2.8181818181818183,17.004294592780983,0.7674825174825176,37.47988292903285
944727727,saif-ashraf99,Scalable-E-Commerce-with-Microservices,"Scalable e-commerce platform using microservices architecture and Docker. The platform will handle various aspects of an online store, such as product catalog management, user authentication, shopping cart, payment processing, and order management.",https://github.com/saif-ashraf99/Scalable-E-Commerce-with-Microservices,34,0,0,0,0,1,95,5,1.6105263157894736,0,0,0,0,0,1.2105263157894737,1.8101781585172083,0.1185463659147869,1.7672723877635208
593917228,ArJSarmiento,FAST-API-Serverless-Framework,FastAPI deployed in AWS with Serverless Framework implementing Domain Driven Design and Clean Architecture,https://github.com/ArJSarmiento/FAST-API-Serverless-Framework,191,0,0,1,0,2,43,5,2.511627906976744,1,1,0,0,2,5.906976744186046,9.640166200925393,0.3284053156146179,14.407492435401798
10397248,partriv,Squashmusic,The source code for Musicbar.fm (http://musicbar.fm). Great event aggregator and concert calendar. ,https://github.com/partriv/Squashmusic,352,4,4,0,0,1,33,5,1.5454545454545454,0,0,0,0,0,6.787878787878788,73.01105140977337,0.5486291486291486,398.25308436041945
496486890,zakharb,OpenWEC,Open source Windows Event Collector,https://github.com/zakharb/OpenWEC,1052,10,10,0,0,2,17,5,4.411764705882353,1,0,1,0,2,23.58823529411765,248.35646590567805,1.963645207547647,2362.8594423372424
374905898,jaehyeon-kim,clean-architectures,,https://github.com/jaehyeon-kim/clean-architectures,35,0,0,0,0,2,26,5,1.807692307692308,1,1,1,0,3,6.923076923076923,45.16569063625313,0.5748970928736814,61.99269219737116
661441201,sgelias,cvb23-clean-architecture,,https://github.com/sgelias/cvb23-clean-architecture,113,1,1,0,0,1,42,6,2.2142857142857144,1,1,1,1,4,2.6904761904761907,5.911916345332783,0.2869047619047619,9.517702795936769
944068421,enricostara,eventure,"A powerful event-driven framework for simulations, games, and complex systems with comprehensive event sourcing, querying, and analysis capabilities.",https://github.com/enricostara/eventure,284,72,72,1,0,2,12,5,3.583333333333333,0,0,0,0,0,41.75,604.4304026258793,2.9341886629459157,2502.1498076702906
818184008,linusromlandArchives,DockAlert,"A lightweight, open-source tool for monitoring Docker container events and sending real-time notifications via Telegram.",https://github.com/linusromlandArchives/DockAlert,41,0,0,0,0,2,9,5,3.111111111111111,0,0,0,0,0,8.777777777777779,51.88473480071398,1.5446581196581195,122.22540048670402
763744578,agbleze,software-architecture_with_python,This repo contains code for developing and maintaining clean software archotecture in python,https://github.com/agbleze/software-architecture_with_python,17,0,0,0,0,1,1,5,3.0,0,0,0,0,0,5.0,0.0,0.0,0.0
804431019,ashvn24,User-service-microservice,A simple user management project build on microservice architecture using Django REST and RabbitMQ,https://github.com/ashvn24/User-service-microservice,22,0,0,0,0,1,18,5,2.1666666666666665,0,0,0,0,0,2.111111111111111,3.3790131138609127,0.1666666666666666,4.187984948168503
818517047,antonioThomaz1903,ddd-clima,"Sistema de coleta e monitoramento de dados climáticos usando Domain Driven Design, Services Oriented Architecture e a OpenWeatherMap api.",https://github.com/antonioThomaz1903/ddd-clima,54,0,0,0,0,1,17,5,3.0,1,1,1,0,3,3.4705882352941178,8.783582886666407,0.4705882352941176,29.37715387256287
819499959,Apoll011,ApiServer,"A lightweight, flexible framework designed for building RESTful services with minimal overhead. It implements a blueprint-based architecture similar to Flask, allowing developers to organize routes modularly with optional prefixes. ",https://github.com/Apoll011/ApiServer,34,1,1,0,0,1,2,5,4.5,0,0,0,0,0,24.0,156.2836009688685,2.275,711.0903844083517
163621683,Arbeit-Studio,liasis,A Pythonic Clean Architecture Framework,https://github.com/Arbeit-Studio/liasis,118,6,6,1,7,0,44,5,1.181818181818182,1,1,1,1,4,3.090909090909091,4.105881672713821,0.1775568181818181,5.9470507429961295
241068051,jossefaz,dwg-transformer-microservice,back end application (based on microservices architecture) for converting dwg file to some common format based on LibreDWG library from GNU project,https://github.com/jossefaz/dwg-transformer-microservice,11008,5,5,0,1,1,11,5,3.363636363636364,0,0,0,0,0,45.81818181818182,1646.0391145822955,2.533610755441741,33844.44224474874
969846640,AnkitJodhani,s3CostOptimization,Clean up & Delete your abandoned AWS S3 Buckets with  event driven architecture..  save bunch of dollars  💰 ,https://github.com/AnkitJodhani/s3CostOptimization,1306,1,1,1,0,1,3,5,3.6666666666666665,0,0,0,0,0,11.0,142.00228726215553,1.6573643410852712,591.5950523821936
962151189,colmeabhi,lectureResourcesMicroservicesAWS,Resources for college lecture on microservices architecture hands on - AWS.,https://github.com/colmeabhi/lectureResourcesMicroservicesAWS,9,3,3,1,0,1,2,5,3.0,0,0,0,0,0,1.0,0.0,0.0,0.0
789126434,1owkeyme,fastapi-clean-architecture-example,Python Clean Architecture Example built with FastAPI / Pydantic / SQLAlchemy,https://github.com/1owkeyme/fastapi-clean-architecture-example,526,5,5,0,0,1,124,8,2.7661290322580645,1,1,1,1,4,4.645161290322581,3.24126570718905,0.1467631159163417,4.494760702720164
896236753,TheBarzani,aware-microservices,Scalable and Versionable Microservices Architecture Based on Modern Technologies,https://github.com/TheBarzani/aware-microservices,800,3,3,2,0,1,31,5,2.870967741935484,0,0,0,0,0,7.903225806451613,60.40190077779738,0.6494589689426966,178.02482640499483
974181583,arfa79,ASR-Translator-as-Microservice,In this project we have to implement an ASR system plus a text translator in microservice architecture,https://github.com/arfa79/ASR-Translator-as-Microservice,616,0,0,0,0,1,39,5,5.410256410256411,0,0,0,0,0,15.58974358974359,166.20895665766088,1.9788122960921863,1142.4816740792178
787382063,lbq8942,TNPP,"The source code for paper ""Modelling Event Sequence Data by Type-Wise  Neural Point Process""",https://github.com/lbq8942/TNPP,71,0,0,0,0,1,22,5,4.363636363636363,1,0,0,0,1,13.863636363636363,224.790528318006,3.0023195187830463,1576.247572920056
967990262,tomerorg,microservice-robust-storage,Microservice service implementing NumPy architecture,https://github.com/tomerorg/microservice-robust-storage,3,0,0,0,0,0,3,5,0.3333333333333333,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
794276510,itz-Amethyst,channel_subscriber,🐍A Django-based Channel Subscription System with a layered Onion Architecture 🧅 and a collection of robust design patterns🗺️,https://github.com/itz-Amethyst/channel_subscriber,86,1,1,0,0,1,95,5,2.357894736842105,1,0,1,1,3,2.6210526315789475,3.8954608158648,0.2242690058479532,4.665140293211999
269776980,theotheroracle,bot-sync,"Sync state events from a source room, to slave rooms in matrix . ",https://github.com/theotheroracle/bot-sync,42,0,0,0,0,1,1,5,4.0,0,0,0,0,0,4.0,0.0,0.0,0.0
613348388,BenTalese,clean_architecture_python,,https://github.com/BenTalese/clean_architecture_python,207,0,0,0,0,1,45,5,3.355555555555556,1,1,0,1,3,6.644444444444445,11.353196448640144,0.2993894993894994,42.2694269081736
343070673,praveenchopra,ProgressiveSpinalNet,ProgressiveSpinalNet architecture for FC layers,https://github.com/praveenchopra/ProgressiveSpinalNet,27,4,4,1,0,1,9,5,10.666666666666666,0,0,0,0,0,14.666666666666666,584.2651194889062,7.154978555905761,4205.07263891827
751950716,asifrahaman13,clean-architecture,This is a demonstration of clean architecture which should be followed for industry standard code. Tried to create this from different blogs and other resources.,https://github.com/asifrahaman13/clean-architecture,7,0,0,0,0,1,6,5,2.833333333333333,1,1,1,1,4,5.333333333333333,6.5,0.2777777777777777,5.833333333333333
954320500,tarunsingh15,DeepLearning_Disaster-Events-from-Twitter-Stream,"A NLP based model to identify and predict disaster events from a public social media source, Twitter, in this case.",https://github.com/tarunsingh15/DeepLearning_Disaster-Events-from-Twitter-Stream,840,0,0,0,0,1,1,5,16.0,0,0,0,0,0,21.0,72.0,2.727272727272727,196.36363636363637
592095045,marcosvs98,hexagonal-architecture-with-python,Applying pattern Ports and Adapters with Python Fastapi.,https://github.com/marcosvs98/hexagonal-architecture-with-python,87,14,14,0,0,1,63,5,2.3015873015873014,1,1,1,1,4,3.3015873015873014,3.990993157484696,0.1772486772486772,8.38120450984823
667074301,soulcodex,fastapi-ddd-atlantica-workshop,Domain Driven Design on FastAPI by Python Coruña - Workshop,https://github.com/soulcodex/fastapi-ddd-atlantica-workshop,222,8,8,0,0,1,51,5,4.196078431372549,1,1,1,1,4,7.176470588235294,19.700905362828543,0.5410519763460939,176.12157177001205
823452024,quan-vu,MicroKit,A simple kit for building microservices based on the Event Sourcing and CQRS patterns using the Kafka message broker.,https://github.com/quan-vu/MicroKit,36,0,0,0,0,1,3,5,1.0,0,0,0,0,0,4.0,8.422064766172813,0.1666666666666666,4.211032383086407
908522280,Rwwwrl,_cqrs-via-redis-streams,,https://github.com/Rwwwrl/_cqrs-via-redis-streams,302,0,0,1,0,1,7,5,3.571428571428572,0,0,0,0,0,7.0,18.44751020300298,0.576530612244898,49.23229688628138
398115140,HalbardHobby,micro-blog,📖 Simple blog 📖 application made with a 🔬 microservice 🔬 architecture.,https://github.com/HalbardHobby/micro-blog,406,0,0,0,0,1,8,5,2.5,0,0,0,1,1,2.875,8.435055448869857,0.25,5.186888662205362
576216175,jakeinrock,Optimization-of-kuberenetes-resources,REST API application created with microservices architecture that provides the ability for users to convert a video file into mp3 file. Services are containerized with use of Docker and orchestrated by Kubernetes.,https://github.com/jakeinrock/Optimization-of-kuberenetes-resources,569,0,0,0,0,1,21,6,2.952380952380953,0,0,0,1,1,2.8095238095238093,11.904035098158982,0.5956450956450956,27.85643396161893
930823346,20481A5450,ModeraAI,"ModeraAI is a scalable content moderation system designed to process text and image content using AI services. It follows a microservices architecture, implements caching, and supports high throughput.",https://github.com/20481A5450/ModeraAI,277,0,0,0,0,1,15,5,5.266666666666667,1,0,1,0,2,6.2,37.15207532571371,0.4859788359788359,64.09356259300384
874965160,CybLX,LLM_transformer_EEL,"This project leverages a Transformer architecture for text generation, focusing on decoder layers. It aims to produce coherent, contextually relevant text. Explore the code and documentation for insights on implementation and enhancements.",https://github.com/CybLX/LLM_transformer_EEL,34,0,0,0,0,1,14,6,5.357142857142857,0,0,0,0,0,19.214285714285715,299.72905792663624,4.394295128457069,2966.3596152160308
100958211,fyndiq,eventsourcing_helpers,Python library for practicing the event sourcing pattern using DDD,https://github.com/fyndiq/eventsourcing_helpers,479,11,11,1,3,25,58,7,3.4482758620689653,0,0,0,0,0,10.586206896551724,27.150901583788105,0.6638470686905351,46.48513894888097
793505192,oliverngola,codeflix-catalog-admin,"API em Python usando Django, Pytest, Docker, RabbitMQ, TDD, Clean Architecture, Design Patterns e SOLID principles",https://github.com/oliverngola/codeflix-catalog-admin,196,0,0,0,0,2,205,6,2.960975609756097,1,1,0,1,3,7.595121951219512,26.788076864499143,0.416976770954641,46.789475545258966
705548104,armyost,hexagonalSample,This is python Sample with Hexagonal Architecture,https://github.com/armyost/hexagonalSample,77,0,0,0,0,1,35,5,1.8857142857142857,1,1,0,1,3,4.0,6.299896167693122,0.2346938775510204,10.734701113145707
921471008,chriswith8,cqrs-python,,https://github.com/chriswith8/cqrs-python,106,0,0,0,0,1,12,5,0.4166666666666667,0,0,0,0,0,0.25,0.3962406251802891,0.0416666666666666,0.1981203125901445
388637048,nikhilpenmetsa,lambda-activemq-integration,Lambda event source mapping to an AWS ActiveMQ queue,https://github.com/nikhilpenmetsa/lambda-activemq-integration,7,0,0,0,0,1,1,5,2.0,0,0,0,0,0,2.0,0.0,0.0,0.0
379141920,antipooh,apimate,Collection utils for create clean architecture REST API application with FastAPI,https://github.com/antipooh/apimate,39,0,0,0,0,1,24,5,4.375,0,0,0,0,0,19.95833333333333,78.65560956489931,1.3207005571588906,140.24179179163764
343334152,douwevandermeij,fractal,Fractal is a scaffolding toolkit for building SOLID logic for your Python applications.,https://github.com/douwevandermeij/fractal,231,16,16,2,0,1,119,5,3.4453781512605044,1,1,0,1,3,5.697478991596639,6.238661111652015,0.2229133758766664,5.9264201682276525
337414789,code-wizard91,CryptoSignal,"A Crypto Market Python Application based on a Microservice architecture. Uses Docker, MYSQL and has been tested with Kubernetes. Application produces Signals which analyse positive and negative movements in Market Prices. The Markets allow the use of their API's for ingesting and analysing market data",https://github.com/code-wizard91/CryptoSignal,207,1,1,1,0,1,9,5,7.666666666666667,0,0,0,0,0,96.88888888888889,2206.155757686994,5.2419010825191386,30865.13822496562
7134851,inversion,organise-recordings,Organise recordings (eg. from a digital voice recorder) by linking them to calendar events from an ical source.,https://github.com/inversion/organise-recordings,124,0,0,0,1,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
738534434,EvansPauliuts,clean-architecture-django,This clean architecture Django,https://github.com/EvansPauliuts/clean-architecture-django,10,0,0,0,0,1,32,5,1.6875,1,1,1,0,3,3.59375,11.135901191284583,0.2301339285714285,18.20972623317945
165888252,rash-me-not,TIMIT-phoneme-recognition-with-Recurrent-Neural-Nets,"In this project, we are experimenting with the Recurrent Neural networks on TIMIT Data Corpus using a variety of architectures in order to predict the phonemes. We are training the model on minibatches of data (as per the specified batch size in the model), and padding every batch with series of zeros to match the longest time step in the sequence. We are using K Fold cross validation to generalize the performance of the dataset against each fold independently. In this lab we could not experiment beyond 2 and 3 fold models due to hardware and computational issues. Each recurrent neural network is preceded with a masking layer, followed by recursive layers like LSTM , GRU or CuDNNLSTM and ended with a Dense softmax layer output for every phoneme",https://github.com/rash-me-not/TIMIT-phoneme-recognition-with-Recurrent-Neural-Nets,55,1,1,2,0,0,13,5,4.538461538461538,0,0,0,0,0,15.0,156.54016335639585,2.7867363217476333,714.3402956376334
336365599,dlski,python-mediator,Python mediator bus micro-framework for CQRS and Event Sourcing,https://github.com/dlski/python-mediator,96,39,39,2,1,2,57,5,3.087719298245614,0,0,0,0,0,9.912280701754383,19.577031311485182,0.4616903779055482,27.719514945367077
798147815,mv-kan,keywords-counter,python fastapi + redis + microservice architecture pet project ,https://github.com/mv-kan/keywords-counter,51,0,0,0,0,1,3,5,4.0,0,0,0,0,0,8.0,35.794628076461684,1.6222222222222225,74.48343821110716
537004452,yuki528,microservices-with-Docker-Flask-and-React,Microservices architecture provides a means of breaking apart large applications into small services that interact and communicate with each other,https://github.com/yuki528/microservices-with-Docker-Flask-and-React,0,0,0,0,0,1,3,5,1.0,0,1,0,0,1,1.6666666666666667,1.5849625007211563,0.1666666666666666,0.7924812503605781
401992762,nokia,contract-test-framework,A python test framework to simplify testing in the microservice architecture. ,https://github.com/nokia/contract-test-framework,114,3,3,1,4,3,23,5,3.565217391304348,0,0,0,0,0,7.391304347826087,17.44164312149688,0.6185770750988142,27.72155960921994
198869805,peter-featherstone,event-sourcing,Playground for learning Event Sourcing,https://github.com/peter-featherstone/event-sourcing,173,0,0,0,0,0,37,5,2.081081081081081,1,0,1,0,2,4.72972972972973,37.96504691665783,0.1793899162320215,29.56594710764852
956245366,HolikovOleksandr,clean_architecture_fast_api,,https://github.com/HolikovOleksandr/clean_architecture_fast_api,4,0,0,0,0,1,9,5,2.4444444444444446,1,0,0,0,1,1.3333333333333333,1.5479520632582415,0.1481481481481481,2.0639360843443217
947019859,NawmNujhat,Scalable-Microservices-Saga-E-commerce-System,A scalable microservices system architecture implemented using Flask Api and Redis (Ongoing academic project),https://github.com/NawmNujhat/Scalable-Microservices-Saga-E-commerce-System,1306,0,0,0,0,1,5,5,5.4,0,0,0,0,0,16.4,76.68812251687505,2.85,285.6309574517815
854209815,Nathan-Yinka,Microservice-Library-Api,"Dual-service RESTful APIs for managing library operations. Features: Frontend API for user interactions, Backend API for administration, RabbitMQ for syncing services, Docker support for deployment, and health checks. Ideal for demonstrating microservices architecture.",https://github.com/Nathan-Yinka/Microservice-Library-Api,73,0,0,0,0,1,45,5,2.511111111111111,0,0,1,0,1,3.688888888888889,3.0693052539761303,0.237037037037037,5.63131710273428
503881514,DanielZanad,python-backend-clean-archi,Repositório de estudos focado em clean architecture e a criação de back end com python,https://github.com/DanielZanad/python-backend-clean-archi,57,1,1,0,0,1,75,5,2.56,1,1,1,1,4,5.786666666666667,35.511482961362475,0.5473449513449514,63.8253371527157
778721202,opielapatryk,FastApi_Menu_API,Restaurant Menu Rest API made with FastApi | Clean Architecture,https://github.com/opielapatryk/FastApi_Menu_API,138,0,0,0,0,1,25,5,1.96,1,1,0,0,2,6.48,29.668748754099006,0.4842363433667781,56.40189548066715
653340329,janderteodoro,cli-clean-architecture,,https://github.com/janderteodoro/cli-clean-architecture,1334,6,6,0,0,1,4,5,4.25,0,0,1,0,1,4.0,23.079762743474745,1.125,34.61964411521211
846668233,onlythompson,fastapi-microservice-template,"This template provides a robust starting point for building scalable, maintainable, and efficient microservices using FastAPI, adhering to Clean Architecture principles and Domain-Driven Design (DDD).",https://github.com/onlythompson/fastapi-microservice-template,28,3,3,1,0,1,1,5,2.0,0,0,0,0,0,2.0,15.509775004326936,1.0,15.509775004326936
568150035,henriwoodcock,micro-auth-service,A micro auth-service which could be used in a microservices architecture.,https://github.com/henriwoodcock/micro-auth-service,18,0,0,0,0,1,17,5,2.3529411764705883,0,0,0,0,0,3.411764705882353,14.433742207688356,0.615546218487395,30.92867884738679
929529294,RodriguesGabrielTi,kanastra-billing-server,"Este projeto foi desenvolvido para automatizar o processamento de arquivos CSV, a geração de boletos bancários e o envio de e-mails, utilizando arquitetura baseada em DDD (Domain-Driven Design).",https://github.com/RodriguesGabrielTi/kanastra-billing-server,102,0,0,0,1,1,66,5,2.0,1,1,1,1,4,2.772727272727273,2.426845998087805,0.1174242424242424,2.473363174456535
810764491,agvxov,neural_network_from_scratch,fully-connected/backtracking NN using numpy and a 'class Layer' with no 'class Neuron' software architecture,https://github.com/agvxov/neural_network_from_scratch,52,0,0,0,0,1,1,5,5.0,0,0,0,0,0,34.0,924.3807175453042,5.013333333333334,4634.228663960458
800582206,itsfarhan,keda-rabbitmq-autoscaling,"This project demonstrates how to autoscale RabbitMQ consumer applications using Kubernetes-based Event-Driven Autoscaler (KEDA). KEDA allows you to dynamically scale your application based on metrics from various event sources, such as RabbitMQ queue length.",https://github.com/itsfarhan/keda-rabbitmq-autoscaling,8,0,0,0,0,1,2,5,1.5,0,0,0,0,0,0.0,2.3774437510817346,0.25,1.1887218755408673
956173090,SyntaxArc,FastAPI-ArchiPy-Boilerplate,A simple FastAPI boilerplate using ArchiPy's clean architecture principles.,https://github.com/SyntaxArc/FastAPI-ArchiPy-Boilerplate,93,1,1,2,0,1,33,6,2.272727272727273,1,0,1,1,3,2.303030303030303,7.367597373368976,0.2027417027417027,15.661272284837777
971052105,M0narc,billing-system,"A robust billing system built using modern Python technologies with a clean architecture approach (DDD + CQRS). This project is designed to be modular, scalable, and production-ready.",https://github.com/M0narc/billing-system,23,0,0,0,0,1,14,5,2.857142857142857,1,1,1,1,4,2.0,0.5539205358688192,0.1071428571428571,0.3841031250772668
834121576,PacktPublishing,Clean-Architecture-with-Python,"Clean Architecture with Python, Published by Packt",https://github.com/PacktPublishing/Clean-Architecture-with-Python,324,20,20,7,1,3,384,6,4.3515625,1,1,1,1,4,14.190104166666666,64.90717464778761,0.9964466241834634,180.51281330045572
826680038,Karmanya03,VSoC-MANAGER,"A Custom LIVE LEADERBOARD Bot for the Open Source event - Vinyasa Summer of Code, DSATM",https://github.com/Karmanya03/VSoC-MANAGER,19,0,0,0,0,1,1,5,9.0,0,0,0,0,0,90.0,1129.5824387613634,9.707792207792208,10965.751597066484
418454974,Flaiers,django-clean-architecture,Clean Django architecture,https://github.com/Flaiers/django-clean-architecture,59,4,4,0,0,1,27,5,2.0,1,0,1,0,2,0.3333333333333333,1.5660819450053436,0.0962962962962963,0.869206389193377
758102655,georgianapetricele,Movie-Rental-Application,Python CRUD application with a menu-driven console-based user interface that uses Layered Architecture and PyUnit Testing.,https://github.com/georgianapetricele/Movie-Rental-Application,35,0,0,0,0,1,13,5,1.9230769230769231,1,1,0,0,2,19.07692307692308,95.02583517396916,0.8397222932106654,325.51151957214245
703322116,cafadev,turbobus,TurboBus is an opinionated implementation of Command Responsibility Segregation pattern in python.,https://github.com/cafadev/turbobus,92,2,2,0,0,1,25,5,2.68,0,0,0,0,0,5.08,15.646165667493896,0.5847496947496947,27.81786278593536
421259626,silassansil,simple-order-eventsourcing-cqrs-app,,https://github.com/silassansil/simple-order-eventsourcing-cqrs-app,13,0,0,0,0,1,24,5,1.75,0,0,0,0,0,2.0416666666666665,2.120577207899212,0.1875,1.6252764264238506
98213809,Rydra,simpleCQRS-py,,https://github.com/Rydra/simpleCQRS-py,3,0,0,0,0,2,9,5,0.6666666666666666,0,0,0,0,0,8.555555555555555,18.54349714217328,0.5,19.87683047550661
908578918,barkhayot,clean-architecture-python,,https://github.com/barkhayot/clean-architecture-python,2,0,0,0,0,1,1,5,0.0,0,0,0,0,0,11.0,0.0,0.0,0.0
149637862,akhal3d96,YaaS,[Under construction] API endpoint that can download and encode YouTube videos with different qualities and formats in a microservices architecture.,https://github.com/akhal3d96/YaaS,3,0,0,0,0,1,4,5,4.25,0,0,0,0,0,10.75,78.42503738972039,2.0700000000000003,364.3895048373452
586169122,tanny-pm,Rent-o-Matic,Clean architectures sample in Python,https://github.com/tanny-pm/Rent-o-Matic,41,1,1,0,0,1,24,5,1.9583333333333333,1,1,1,0,3,3.083333333333333,15.11349109149549,0.276580459770115,16.440134409053893
816095074,izagood,fastapi-ddd,FastAPI Domain Driven Design Example,https://github.com/izagood/fastapi-ddd,67,2,2,1,0,2,35,5,2.628571428571429,1,1,1,1,4,4.228571428571429,8.771751074148376,0.3004761904761904,22.17028476122776
97695978,volgoweb,DDD_sandbox,Sandbox for diving into Domain Driven Design,https://github.com/volgoweb/DDD_sandbox,203,0,0,0,0,1,107,5,0.9345794392523364,1,1,1,1,4,3.364485981308411,0.7496801970511071,0.0467289719626168,0.5734839069569878
957725288,vijayagopalsb,Med-Noise-Cleanse,"The Medical Image Denoising using Denoising Autoencoders in TensorFlow and Hexagonal Architecture project enhances medical image quality by removing noise using a Denoising Autoencoder (DAE) built with TensorFlow. Designed using Hexagonal Architecture (Ports & Adapters), it ensures modularity, scalability, and flexibility.",https://github.com/vijayagopalsb/Med-Noise-Cleanse,15204,0,0,0,0,1,21,5,4.047619047619048,1,0,0,1,2,2.4761904761904763,6.87512861904098,0.3571428571428571,8.777161318520065
505837961,SamoraMachel,Ecommerce-Microservice,This is an ecommerce application created in with a microservice architecture,https://github.com/SamoraMachel/Ecommerce-Microservice,32,0,0,2,0,1,9,5,1.7777777777777777,0,0,1,0,1,1.4444444444444444,4.754887502163469,0.1111111111111111,2.3774437510817346
422819237,simzhij,erikrozendaalk,Java example Domain-Driven-Design Command-Query Responsibility Separation,https://github.com/simzhij/erikrozendaalk,513,0,0,0,0,1,62,5,4.612903225806452,0,0,0,0,0,20.677419354838708,115.7674613639043,1.2404336590444534,487.1254342798941
626015032,oussema-bit,Twitter-bot-Tunisian-version,A twitter bot that mines tweet about political events that happened in tunisia in a given period of time and from given sources. Learn more about this in the README file,https://github.com/oussema-bit/Twitter-bot-Tunisian-version,18,1,1,0,0,1,1,5,5.0,0,0,0,0,0,0.0,947.2752486880946,2.5384615384615383,2404.621785131317
109189712,pgrzesik,python-clean-architecture,,https://github.com/pgrzesik/python-clean-architecture,58,6,6,2,0,2,27,5,1.962962962962963,1,1,1,0,3,7.481481481481482,25.477190703376216,0.4018518518518518,22.80903003061917
4515780,thelinuxkid,ubernear,The Ubernear Open Source Project monitors Facebook event owners for new events and allows geo-spatial searches on events via a RESTful API,https://github.com/thelinuxkid/ubernear,180,3,3,0,0,3,25,5,3.8,0,0,1,0,1,15.28,204.07402407024125,1.6360632284382286,514.55154883684
294601904,purarue,calcurse-load,Hooks/scripts for calcurse. Sources events for calcurse from Google Calendar and todo.txt,https://github.com/purarue/calcurse-load,56,6,6,1,4,1,14,5,5.214285714285714,0,0,0,0,0,10.785714285714286,63.913776402944585,1.4309823796892762,211.79008334698165
782535215,fabianfalon,fastapi-ddd-template,🐍 Example of a Python & FastAPI application using Domain-Driven Design,https://github.com/fabianfalon/fastapi-ddd-template,26,2,2,1,0,1,28,5,3.1785714285714284,1,1,1,1,4,4.678571428571429,1.875349107297391,0.1595238095238095,2.2626745536486954
84238185,ccube-eml,factorizer,"A component of cCube, the cloud microservices architecture for Evolutionary Machine Learning (EML) classification.",https://github.com/ccube-eml/factorizer,267,0,0,0,0,0,9,5,3.2222222222222223,0,0,0,0,0,11.11111111111111,40.362094663597176,0.8492063492063493,232.12372001466767
945929272,Najish-Ali,FullStack-Microservices,"MultiService-Platform is a scalable, containerized application that demonstrates a multi-service architecture with an API Gateway, a user interface (UI), a backend API, and a PostgreSQL database. The project is designed to handle user registration, dynamic schema creation, and CI/CD pipeline automation.",https://github.com/Najish-Ali/FullStack-Microservices,15,0,0,0,0,1,4,5,4.25,0,0,0,0,0,2.75,0.0,0.0,0.0
565473716,felipe-costa-leite,cleanarchpy,Repositório criado para exemplificar uma implementação de Clean Architecture baseado em uma estrutura própria de diretórios.,https://github.com/felipe-costa-leite/cleanarchpy,10,0,0,0,0,1,66,6,0.0,0,0,1,0,1,0.0,0.0,0.0,0.0
122643004,600lyy,url_service,A web application based on microservice architecture using flask,https://github.com/600lyy/url_service,18,0,0,0,5,0,7,5,5.428571428571429,0,0,0,0,0,4.285714285714286,27.04441164432362,0.865079365079365,73.10038756242504
829148185,bodaue,fastapi-clean-architecture,Example of clean architecture,https://github.com/bodaue/fastapi-clean-architecture,538,7,7,2,0,1,65,5,3.0307692307692307,1,1,1,1,4,2.892307692307692,4.923462535441155,0.1975213675213675,13.544480331102864
207074698,n0obcoder,UNet-based-Denoising-Autoencoder-In-PyTorch,Cleaning printed text using Denoising Autoencoder based on UNet architecture in PyTorch,https://github.com/n0obcoder/UNet-based-Denoising-Autoencoder-In-PyTorch,593,32,32,12,1,1,6,5,8.5,0,0,0,0,0,15.5,431.7658649687082,4.325639878718115,3123.793261419614
821111245,OlehDziuba,fastapi-auth-backend,My implementation of the authentication backend on fastapi using SOLID and Clean Architecture ,https://github.com/OlehDziuba/fastapi-auth-backend,42,0,0,0,0,1,43,5,2.86046511627907,1,0,1,1,3,3.8372093023255816,17.563399106531975,0.3169835366591792,46.66313950688429
929503132,JesusD2405,api-pay-beers-simplified,Proyecto en Django Rest Framework con implementación bajo Clean Architecture (Test Mode) personalizada,https://github.com/JesusD2405/api-pay-beers-simplified,41,0,0,0,0,1,30,5,2.2,1,1,0,0,2,3.6666666666666665,3.7359400011538506,0.2523809523809524,8.582921877189225
506015332,pavan-reddy8,Movie-Reviewer-Powered-by-Microservices-Architecture,"Developed a web application using HTML, Bootstrap and three microservices that reviews a searched movie ,constructed containers using Docker for the microservices for independent execution environment increasing the efficiency by 90%",https://github.com/pavan-reddy8/Movie-Reviewer-Powered-by-Microservices-Architecture,640,0,0,0,0,1,6,5,4.833333333333333,0,0,0,0,0,6.0,38.944371168832646,1.777777777777778,163.92361682985535
849217521,SyLaibaUrooj,Greeting-Service-Kata,Clean Architecture - Excercises,https://github.com/SyLaibaUrooj/Greeting-Service-Kata,8,0,0,0,0,1,3,5,0.6666666666666666,0,0,0,0,0,8.0,2.3774437510817346,0.25,1.1887218755408673
89189034,globality-corp,microcosm-eventsource,Event-sourced state machines using microcosm.,https://github.com/globality-corp/microcosm-eventsource,176,5,5,2,3,24,33,5,4.757575757575758,1,0,0,0,1,13.969696969696969,39.77250894009741,0.8057480790814124,114.43221003466356
218948369,python-platonic,platonic-obsolete,Data structures for Clean Architecture applications,https://github.com/python-platonic/platonic-obsolete,74,2,2,0,2,0,42,5,1.9285714285714288,0,0,0,0,0,3.642857142857143,6.534892531732764,0.3214285714285714,7.082464955233756
925580430,KAN19,spring-clean-app,A CLI application help create Spring Boot application following Clean Architecture. ,https://github.com/KAN19/spring-clean-app,27,0,0,0,0,1,30,5,1.1666666666666667,1,0,1,1,3,3.066666666666667,5.094044089125887,0.2069444444444444,9.016665929938672
362767228,dongwooklee96,clean-architecture,,https://github.com/dongwooklee96/clean-architecture,41,0,0,0,0,1,47,5,1.6170212765957446,1,1,1,0,3,3.106382978723404,19.339882654177764,0.3661732963305582,21.075085857098216
15177174,openhatch,in-person-event-handbook,getting your open source project ready for new contributors,https://github.com/openhatch/in-person-event-handbook,101,13,13,9,7,5,1,5,3.0,0,0,0,0,0,0.0,0.0,0.0,0.0
817980407,pnsudhanva,A-web-application-using-microservices,"WebAppWithMicroservices is a robust web application designed to demonstrate the principles of microservices architecture, leveraging Docker for containerization and Flask for rapid web development. This project integrates several modern development practices and technologies to provide a scalable, maintainable, and efficient web application.",https://github.com/pnsudhanva/A-web-application-using-microservices,432,0,0,0,0,1,7,5,3.142857142857143,0,0,0,0,0,4.0,3.348763367664445,0.2142857142857142,1.6743816838322223
169488337,nyaundid,Artificial-intelligence-word-embedding-by-creating-your-own-short-sentences.-,"1.Create    **EXACTLY**20 sentences. The maximum length of each sentence is FIVE (5). Two sample sentences may look like: “Excellent work”, “Good students work very hard”.2.Create word embeddings for the vocabulary (i.e. unique words  ) in your sentences. You can choose one OR more word embedding methods from the embedding layer approach, the CBOW approach, the Skip-Gram approach, or the GloVe approach.Create a WORD document to answer the following questions for EACH of the word embedding method you choose: 1.Describe your embedding approach, architecture, and all the    parameters (i.e. epochs, batches) you used. 2.Describe the dimensionality of your word vectors.  3.List the vocabulary in your training set. 4.Use   the   t-SNE method to reduce your word vectors to 2-dimension and p  lot the 2-D points in a figure   . Each point (vector) in the figure MUST be labeled with the original words in your vocabulary. (NOTE: you may need to adjust your training sentences so words with certain meaning cluster closer together in your t-SNE figure)    5.List the training time to train your word embedding model. ",https://github.com/nyaundid/Artificial-intelligence-word-embedding-by-creating-your-own-short-sentences.-,4,2,2,1,0,0,1,5,9.0,0,0,0,0,0,0.0,0.0,0.0,0.0
748310065,TarcisioPhilips,FastAPI-Clean-Architecture,Work in Progress,https://github.com/TarcisioPhilips/FastAPI-Clean-Architecture,19,0,0,0,0,1,4,5,0.75,0,0,0,0,0,1.0,3.4828921423310435,0.125,1.7414460711655215
686788578,Micz26,Neural-Network-from-Scratch,This project involves building a neural network from scratch to perform image classification on the Fashion MNIST dataset. The neural network is implemented in Python using NumPy and includes a double-layer architecture with sigmoid activation functions.,https://github.com/Micz26/Neural-Network-from-Scratch,3,0,0,0,0,1,1,5,3.0,0,0,0,0,0,22.0,869.3551694979113,4.7368421052631575,4117.998171305895
788574938,HayatiYrtgl,Cell_Classification_CNN," This code trains a CNN in Keras to classify cell images (infected/uninfected). It sets up data generators, defines model architecture with convolutional layers, applies regularization, configures callbacks, and trains the model for binary classification.",https://github.com/HayatiYrtgl/Cell_Classification_CNN,39,0,0,0,0,1,1,5,7.0,0,0,0,0,0,0.0,9.509775004326938,1.0,9.509775004326938
427286322,rahul-shiv,Performance-Characterization-of-Communication-Protocols-in-Microservice-Applications,"Industrial applications are moving towards deployment using the microservice architecture. These microservices heavily rely on the networking stack for communication which, along with the container abstraction layer causes a significant overhead. With increasing core count on modern processors, these microservices are likely to be scheduled on the same host. In this paper, we attempt to analyze and optimize inter-microservice communication on the same host. We characterize three popular communication protocols - REST, gRPC, and Thrift, in terms of their network, memory, CPU utilization, and response time. Our studies showed that Thrift and gRPC are relatively faster than REST and hence, suitable for inter-microservice interactions owing to their speeds and compression. We leverage the shared memory between the microservices on the same host, using Unix Domain Sockets along with appropriate NUMA tuning that achieved an 86.48% reduction in response time.",https://github.com/rahul-shiv/Performance-Characterization-of-Communication-Protocols-in-Microservice-Applications,3867,0,0,1,0,1,46,6,3.9565217391304346,0,0,1,0,1,7.630434782608695,84.68629358654981,1.1192559667795516,284.33982468856675
631587568,abtzpro,SimpleSEIM,"SimpleSEIM: An open-source, modular SEIM (Security Event Information Manager) in python.",https://github.com/abtzpro/SimpleSEIM,5,0,0,0,0,1,1,5,3.0,0,0,0,0,0,7.0,28.529325012980813,1.5,42.793987519471216
712730016,rzamoramx,core_banking_system_es_cqrs,"An experimental core banking system using ES/CQRS architecture built on Dapr, using Python, Java and Go programming languages",https://github.com/rzamoramx/core_banking_system_es_cqrs,236,0,0,0,0,1,56,12,2.4107142857142856,1,1,1,0,3,4.714285714285714,22.276648016893056,0.3374415078898774,39.27692709583003
944585362,nandanatyo,Clean_Architecture_Kadek-Nandana-Tyo,,https://github.com/nandanatyo/Clean_Architecture_Kadek-Nandana-Tyo,6,0,0,0,0,1,15,5,1.6666666666666667,1,1,1,1,4,5.533333333333333,2.123308333814104,0.2,1.061654166907052
932273728,SahaidakYurii,software-architecture-lab1-microservices-basics,"The architecture consists of three microservices: facade-service - accepts POST/GET requests from the client logging-service - stores in memory all the messages it receives and can return them messages-service - while acting as a stub, it returns a static message when addressed",https://github.com/SahaidakYurii/software-architecture-lab1-microservices-basics,1209,0,0,0,0,1,5,5,4.2,0,0,0,0,0,5.2,22.098647506778867,0.8,22.638196255841365
794548907,hichambo,django_event_management,"This Django project streamlines event management. Create, manage, and track registrations for your events with features like ticketing, secure payments, and an intuitive dashboard. Free, open-source, and easy to use!",https://github.com/hichambo/django_event_management,13,1,1,0,0,1,15,5,1.7333333333333334,0,0,0,0,0,2.6666666666666665,4.21894750100962,0.1777777777777777,6.291930001346159
884413352,StartADAM,bluemarz,"Bluemarz is an open-source management layer for AI agents, offering a flexible, scalable, and stateless architecture for deploying and orchestrating multiple AI agents in sessions.",https://github.com/StartADAM/bluemarz,952,20,20,6,0,3,29,5,2.7586206896551726,1,1,1,0,3,14.241379310344827,99.1994753657501,0.8369388898624281,325.0791600513974
779414225,sbhakuni,microservices-web-application,"Utilizing Python microservices, with Flask and Django for backend development, React for the frontend, and RabbitMQ for message brokering, allows for the division of your applications into smaller, communicating segments. This architecture simplifies scaling and maintaining the application.",https://github.com/sbhakuni/microservices-web-application,12,0,0,0,0,1,22,5,2.136363636363636,0,0,0,0,0,1.318181818181818,1.8144046755745515,0.125,1.1446722565825742
220004662,martharotter,es_courses,"Simple event sourcing example demonstrating school, courses and students concepts",https://github.com/martharotter/es_courses,9,5,5,0,0,2,2,5,4.5,0,0,0,0,0,31.0,109.30457239037038,0.5555555555555556,121.44952487818932
272585361,yuqmettal,discounts-microservices,Discounts microservice architecture written in python,https://github.com/yuqmettal/discounts-microservices,3644,10,10,0,29,3,258,8,3.744186046511628,0,0,1,0,1,7.007751937984496,43.946356405261504,0.4899931023756539,71.49343795572295
813019548,1nikitas,fastapi-clean-architecture-backend-with-rbmq,,https://github.com/1nikitas/fastapi-clean-architecture-backend-with-rbmq,81,0,0,0,0,1,43,5,3.0232558139534884,1,1,0,0,2,2.441860465116279,2.604876099890956,0.1732558139534883,3.420522352643457
246728210,HerlanAssis,django-clean-architecture-helper-gql-extension,,https://github.com/HerlanAssis/django-clean-architecture-helper-gql-extension,15,0,0,0,0,0,16,5,2.125,0,0,0,0,0,6.1875,21.60211792062193,0.7734375,80.57063108419392
970737481,zhewei-0130,imagenet_task_b,four-layer CNN architecture for ImageNet-mini classification,https://github.com/zhewei-0130/imagenet_task_b,247,0,0,0,0,1,9,5,7.0,1,0,0,0,1,4.222222222222222,103.19482079125426,2.071773636991028,294.26593320967305
609023710,sepydev,authentication-microservice,"I use clean architecture to create authentication microservice, this microservice uses fastapi, and django orm.",https://github.com/sepydev/authentication-microservice,36,5,5,0,0,1,52,5,1.8461538461538465,1,1,1,1,4,1.6346153846153846,2.266714904151258,0.1442307692307692,3.918016226204236
222664860,SWE-AGGERS,message-broker,Message Broker class used in SocialDice microservice architecture,https://github.com/SWE-AGGERS/message-broker,3,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
241655084,sickOscar,robosnipers,Source code for Robosnipers Deathmatch event. RAGE IN THE CAGE!,https://github.com/sickOscar/robosnipers,2336,5,5,0,1,3,16,5,3.25,0,0,0,0,0,13.1875,171.35900631391297,2.402580068407961,1128.2279861043855
834297398,Toygarmetu,ExpenseSplitter-Dockerized,Simple expenseSplitter web-application with dockerized microservices architecture.,https://github.com/Toygarmetu/ExpenseSplitter-Dockerized,3231,0,0,0,0,1,19,5,3.421052631578948,0,0,0,0,0,3.421052631578948,1.6713098685349197,0.0789473684210526,1.5461812500569334
882172772,ranfysvalle02,DCGAN-smiles,"The DCGAN-smiles project delves into the world of generative adversarial networks (GANs) by exploring the transformation from a basic GAN to a Deep Convolutional GAN (DCGAN). The project highlights the architectural differences between the two, emphasizing the use of convolutional layers for improved image generation. ",https://github.com/ranfysvalle02/DCGAN-smiles,1845,1,1,0,0,1,1,5,9.0,0,0,0,0,0,37.0,2778.895523008055,11.219178082191782,31176.92374443284
502749085,RaulAlvaradoT,das-proyecto-ordinario,Proyecto Ordinario - Microservices Architecture,https://github.com/RaulAlvaradoT/das-proyecto-ordinario,37,1,1,1,0,0,3,5,2.333333333333333,0,0,0,0,0,10.333333333333334,80.83308753677896,1.4166666666666667,297.9729501355774
776432291,AnshulRanjan2004,Microservices-Communication-with-RabbitMQ,"The inventory management system aims to efficiently manage inventory items, track stock levels, and handle orders through a microservices architecture. ",https://github.com/AnshulRanjan2004/Microservices-Communication-with-RabbitMQ,440,1,1,0,0,1,5,5,3.2,0,0,0,0,0,2.2,0.9509775004326938,0.1,0.4754887502163469
946889887,bladhl,flask-img-generator," Microservice built with Flask, following best practices for a structured and scalable architecture.",https://github.com/bladhl/flask-img-generator,5,0,0,0,0,1,10,5,1.7,0,1,1,0,2,1.3,0.4754887502163469,0.05,0.2377443751081734
726940240,manuelinfosec,django-auth-service,Django service designed for user management and authentication within a microservices architecture; powered by Django Rest Framework.,https://github.com/manuelinfosec/django-auth-service,113,1,1,0,0,2,18,5,2.1666666666666665,0,0,0,0,0,2.611111111111111,1.3022968652028395,0.0833333333333333,0.6511484326014199
836582623,SquakR,clean-architecture,,https://github.com/SquakR/clean-architecture,46,0,0,0,0,1,21,5,2.523809523809524,0,1,0,0,1,4.238095238095238,0.0,0.0,0.0
885310894,eneji145,netflix-edu-platform,Educational streaming platform with microservices architecture,https://github.com/eneji145/netflix-edu-platform,11897,1,1,0,0,1,96,6,4.354166666666667,1,1,1,1,4,10.760416666666666,60.046848194237135,1.0605615226128613,223.2452496960924
915332796,tdixon05,ecommerce-microservices-python,"A Python-based e-commerce platform with a microservices architecture. Features User, Product, and Order services, containerized with Docker",https://github.com/tdixon05/ecommerce-microservices-python,11,0,0,0,0,1,7,5,1.8571428571428568,0,0,0,0,0,2.2857142857142856,3.3963482158310496,0.3571428571428571,1.6981741079155248
510688660,CognitiveModeling,HierarchicalGateL0RD,"Source code for our 2022 ICDL paper ""Developing hierarchical anticipations via neural network-based event segmentation""",https://github.com/CognitiveModeling/HierarchicalGateL0RD,6053,3,3,1,0,1,26,5,3.576923076923077,1,0,0,0,1,17.692307692307693,502.049418223134,3.4437056564850264,3595.722553234812
958224850,dVeza,soccer-multiverse,A toy project to experiment with clean architecture patterns in python,https://github.com/dVeza/soccer-multiverse,98,0,0,0,0,1,28,5,3.071428571428572,1,0,1,1,3,8.678571428571429,23.24429520212658,0.8957025117739404,52.467284743993616
84238199,ccube-eml,orchestrator,"A client for cCube, the cloud microservices architecture for Evolutionary Machine Learning (EML) classification.",https://github.com/ccube-eml/orchestrator,13,0,0,0,0,0,15,5,3.2,0,0,0,0,0,11.533333333333331,31.89215741970297,0.4525925925925926,38.16238085642392
501016751,alexnesov,Banking-System-Kata,Following the hexagonal architecture design principles,https://github.com/alexnesov/Banking-System-Kata,34,0,0,0,0,1,20,5,1.25,1,0,1,1,3,3.0,5.443458750793272,0.3483333333333333,8.534812188707937
128572270,Prestonjf,sourcecode,Python coding challenges (tests) for the Science Olympiad event Source Code,https://github.com/Prestonjf/sourcecode,924,2,2,6,0,1,23,5,0.7391304347826086,0,0,0,0,0,21.130434782608692,859.2925998754442,2.566743105896484,5473.592264415134
111308456,dilumb,Python-Discrete-Event-Engine,Python Discrete Event Engine (DES) can be use to build many discrete event simulators. It supports any data type or object and is capable of handling large event lists (use binary search to sort events). See source code for details.,https://github.com/dilumb/Python-Discrete-Event-Engine,11,0,0,0,0,0,1,5,0.0,0,0,0,0,0,27.0,317.79682951958256,7.875,2502.6500324667127
808352084,smdirr,clean_example,clean architecture example,https://github.com/smdirr/clean_example,8,0,0,0,0,1,12,5,0.75,1,1,0,1,3,3.25,6.373520548680207,0.2638888888888889,8.409540263513174
737347905,kayoriccelo,boilerplate_clean_architecture_python,In progress... Em andamento....,https://github.com/kayoriccelo/boilerplate_clean_architecture_python,236,1,1,0,0,1,100,7,1.41,1,1,1,1,4,4.46,11.476186900548717,0.2677880184331797,21.67985389024194
755883292,dane-ukken,audio-extractor,Microservice architecture to extract audio from uploaded video,https://github.com/dane-ukken/audio-extractor,911,1,1,0,0,1,10,5,3.3,0,0,0,1,1,3.1,19.807922684292105,0.954326923076923,51.154783400941525
75582935,jpictor,dskit," This data science ""kit"" was built to help data science teams get started with exploratory data analysis and algorithm development with a product architected with a service or microservice architecture. With such architectures, data is distributed across a number of isolated databases, SQL and non-SQL. This presents a challenge to developing analytics that require complex joins of data across the service databases. This data science toolkit solves this problem by providing programs to dump service databases as JSON row files, and then use those files as a unified Spark SQL data where big-data queries and map/reduce algorithms can be applied.",https://github.com/jpictor/dskit,15,1,1,3,0,0,6,5,2.5,0,0,0,0,0,7.333333333333333,9.049349424320742,0.5833333333333334,9.492144751696772
456660709,joaoanastacio,clean-arch-python,Project created to apply Clean Architecture using Python,https://github.com/joaoanastacio/clean-arch-python,23,0,0,0,0,1,17,5,1.411764705882353,1,1,0,1,3,5.176470588235294,10.145688239027162,0.3676470588235294,13.7956220638292
964760403,leticiaacs-dev,mercurygate_medallion,ETL pipeline using the Medallion architecture to ingest and transform MercuryGate TMS data into Azure Data Lake Storage. Bronze layer stores raw data for traceability; Silver layer cleans and transforms data for analytics and downstream usage.,https://github.com/leticiaacs-dev/mercurygate_medallion,11,0,0,0,0,1,5,5,5.4,0,0,0,0,0,6.8,103.06637013258322,3.1505050505050507,422.5277634570286
624707460,sqe,esddns,Open Source solution to automatically synchronize public WAN IPv4 address with a target DNS A Record when there is a configuration drift due to IPv4 address reassignment events. ,https://github.com/sqe/esddns,3502,2,2,0,6,1,15,6,4.4,0,0,1,0,1,9.8,79.8050108478122,1.3142664092664094,198.92167354000887
575732481,jameskim917,clean-architecture,clean-architecture,https://github.com/jameskim917/clean-architecture,6,1,1,0,0,1,14,5,2.7142857142857144,1,1,1,1,4,4.071428571428571,3.116370748792192,0.3928571428571428,2.794243962768839
572896123,AnjalBam,bookshare-microservices,A Microservices architecture based on django nodejs and rabbitmq,https://github.com/AnjalBam/bookshare-microservices,141,0,0,0,0,1,69,5,2.2028985507246377,1,0,1,0,2,3.652173913043478,12.105953027098842,0.3151483781918565,28.80895580928294
122774904,pdoggi,microflask,"The example project showcasing microservices architecture, Docker, flask, React from https://testdriven.io/.",https://github.com/pdoggi/microflask,10,0,0,0,0,1,10,5,2.1,0,1,1,0,2,3.2,9.350977500432696,0.2,8.875488750216347
420389599,m-chrome,otus-hw-msa-2021,Otus microservice architecture homeworks,https://github.com/m-chrome/otus-hw-msa-2021,33,0,0,0,0,1,19,5,2.736842105263158,0,0,0,0,0,2.263157894736842,1.966995375946068,0.1052631578947368,0.983497687973034
443806836,mathiasfrey,aiobanking,Architecture PoC showing event sourcing for banking use cases,https://github.com/mathiasfrey/aiobanking,1791,1,1,1,0,2,16,5,2.125,0,0,1,0,1,2.125,1.1887218755408673,0.125,0.8915414066556504
458817581,y-p-e,graphql_fastapi_clean_architecture,クリーンアーキテクチャを採用したGraphQL,https://github.com/y-p-e/graphql_fastapi_clean_architecture,10,0,0,0,0,1,9,5,3.888888888888889,1,1,1,0,3,2.6666666666666665,2.113283334294876,0.2222222222222222,1.0566416671474377
606934528,YoshitakaNozawa,clean-architecture-like-fastapi,,https://github.com/YoshitakaNozawa/clean-architecture-like-fastapi,13,1,1,0,0,1,35,5,1.6571428571428573,1,1,1,1,4,2.857142857142857,0.0,0.0,0.0
517769630,ayeo144,example-microservices-proj,Example of micro-services architecture,https://github.com/ayeo144/example-microservices-proj,11,0,0,0,0,1,12,5,2.6666666666666665,0,0,1,0,1,1.9166666666666667,2.812907291846956,0.2333333333333333,4.331453645923478
943390536,O-keita,google_drive_clean_architecture,,https://github.com/O-keita/google_drive_clean_architecture,18,1,1,0,0,1,7,5,2.857142857142857,0,0,0,0,0,2.571428571428572,3.1699250014423126,0.2857142857142857,1.5849625007211563
726072648,Mohamed-Tharwat-El-Sayed,microservices-python-app,Converting mp4 videos to mp3 audio in a microservices architecture  and deploying a Python-based Microservice Application on AWS EKS.        ,https://github.com/Mohamed-Tharwat-El-Sayed/microservices-python-app,4717,1,1,1,0,1,14,5,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
784990647,luderibeiro,django_base,Base template to start Django project with clean architecture.,https://github.com/luderibeiro/django_base,454,2,2,0,0,1,35,5,1.1142857142857143,1,1,1,1,4,1.6571428571428573,3.814069826254361,0.1853741496598639,5.526667524366277
878681139,AsusPrime,microservices-backend,"First microservices architecture with Java, Spring Boot, Python, Docker, Kubernetes, Log4j, python logging for AI backend API",https://github.com/AsusPrime/microservices-backend,1461,0,0,0,0,1,6,8,4.833333333333333,0,1,1,0,2,6.166666666666667,8.039805159587916,0.6666666666666666,7.247323909227338
229485632,amineoucherif,MLP_IrisDataset,"Machine learning is used here in order to classify the iris dataset, based on Multi-Layer-Perceptron architecture.",https://github.com/amineoucherif/MLP_IrisDataset,248,3,3,4,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
511277750,calebanderson526,unique_Token-Code.finder,Code utilizes pancakeswap PairCreated events and bscscan source code api endpoint to accumulate and group token contracts by their source code,https://github.com/calebanderson526/unique_Token-Code.finder,8185,1,1,0,0,1,3,5,5.333333333333333,0,0,0,0,0,17.0,485.10415295186925,3.2235746470000137,1736.5597790680088
859543805,6aligula,App_Chat_Hexagonal_Architecture,"Chat with FastAPI, sqlalchemy, uvicorn, postgres, mongoDB, RabbitMqtt",https://github.com/6aligula/App_Chat_Hexagonal_Architecture,13,0,0,0,0,1,26,5,1.4615384615384617,1,1,0,1,3,3.5,6.910240124678335,0.173076923076923,3.455120062339168
910907051,homepirate,microservices-architecture,,https://github.com/homepirate/microservices-architecture,12,0,0,0,0,1,2,5,16.5,0,0,0,1,1,25.0,22.64894976956403,0.8333333333333333,17.034239925448823
479982630,0xTheProDev,fastapi-clean-example,Clean Architecture Example using FastAPI framework,https://github.com/0xTheProDev/fastapi-clean-example,103,460,460,60,0,5,36,5,2.888888888888889,1,1,0,1,3,3.8333333333333335,0.1320802083934297,0.0138888888888888,0.0660401041967148
944605308,ZoeMohamed,Clean-Architecture,,https://github.com/ZoeMohamed/Clean-Architecture,24,0,0,0,0,1,9,5,1.8888888888888888,1,1,1,0,3,2.4444444444444446,0.5283208335737188,0.0555555555555555,0.2641604167868594
680900826,m0n0x41d,clear_architecture,repsoitory for SkillSmart Clean Architecture course related tasks,https://github.com/m0n0x41d/clear_architecture,35,0,0,0,0,1,41,5,1.4878048780487805,0,0,1,0,1,5.926829268292683,25.0354896847309,0.445060359694506,58.678348981176086
836322139,hirodori,events-architecture,"A simple microservices-oriented application, where communication between them is event-driven using RabbitMQ and AMQP.",https://github.com/hirodori/events-architecture,13,0,0,0,0,1,7,5,3.142857142857143,0,0,0,0,0,5.714285714285714,18.7108006854258,0.8619047619047618,22.09818826165725
819014525,sanowl,TerminatorNet-Advanced-Multi-Branch-Neural-Network-Architecture,"TerminatorNet is a novel neural network architecture designed to enhance feature extraction and reduce model parameters by integrating a slow-fast network mechanism. It uses multiple branches to process data, enabling detailed feature extraction at each layer",https://github.com/sanowl/TerminatorNet-Advanced-Multi-Branch-Neural-Network-Architecture,15,0,0,0,1,1,1,5,5.0,0,0,0,0,0,17.0,101.02330072391148,3.75,378.8373777146681
193977910,Bryan-Rojas,Hexagonal-Architecture-Testing,Repo for testing a hexagonal architecture.,https://github.com/Bryan-Rojas/Hexagonal-Architecture-Testing,2,0,0,0,0,0,1,5,3.0,0,0,0,0,0,25.0,41.51317942364757,1.5,62.26976913547136
943498893,srivigneshs09,Weather-App-Proxy-DAD,This is a Dockerized Weather App that follows the Ambassador Pattern. It fetches real-time weather data from WeatherAPI.com using a Flask-based microservices architecture.,https://github.com/srivigneshs09/Weather-App-Proxy-DAD,8,0,0,0,0,1,4,5,2.25,0,0,0,0,0,1.75,9.343228035743822,0.5,4.671614017871911
275359110,AndreGodinho7,asint,Microservice architecture project with REST,https://github.com/AndreGodinho7/asint,245,0,0,0,0,0,21,5,4.809523809523809,0,0,0,0,0,13.38095238095238,57.72873461488871,1.239101725886623,165.61334384859234
577427190,Anthony2018,EE562_Project, Audio-Visual events (AVEs) aim to segment video streams into frames and localize the corresponding audio source and audio frame. ,https://github.com/Anthony2018/EE562_Project,4868,1,1,0,0,1,7,5,8.857142857142858,0,0,0,0,0,12.714285714285714,283.50551335031514,3.794531596223325,1163.8380213221328
833797357,tanakon8529,micro-banking-services,"Mini Banking API project demonstrating a microservices architecture using Python, Docker, and Redis for scalable and efficient banking operations.",https://github.com/tanakon8529/micro-banking-services,19,1,1,0,0,1,33,5,2.9696969696969697,0,0,0,0,0,3.303030303030303,8.213564190793148,0.3003367003367003,9.640398618042974
975953109,AayushBadola,Anomaly-Detection,"It's designed to ingest data from various sources (like application metrics, sensor readings, event counts), process it efficiently using asyncio, apply statistical anomaly detection algorithms over sliding windows, and trigger configurable actions (like logging or sending webhooks) when anomalies are found.",https://github.com/AayushBadola/Anomaly-Detection,801,0,0,0,0,1,10,5,5.5,0,0,0,0,0,22.9,202.96371836975965,2.859004329004329,1678.1504427388784
41836552,jklemm,python-clean-architecture-generator,"A simple tool to generate python code, based on Uncle Bob's Clean Architecture",https://github.com/jklemm/python-clean-architecture-generator,14,2,2,0,0,0,12,7,0.9166666666666666,1,1,0,0,2,1.1666666666666667,9.54248125036058,0.2111111111111111,5.8091479170272455
414646199,ismairdrs,python-clean-architecture,,https://github.com/ismairdrs/python-clean-architecture,88,4,4,0,0,1,83,5,2.698795180722892,1,1,1,1,4,4.63855421686747,16.982942626877424,0.4576967209497329,29.07179000361024
99587070,Ibrohimbek,Clean-architecture-and-Quickbooks-Online-integration,"This is a test application to checking out ""Clean Architecture from uncle Bob""",https://github.com/Ibrohimbek/Clean-architecture-and-Quickbooks-Online-integration,40,4,4,1,0,2,63,5,1.5714285714285714,1,1,1,1,4,4.253968253968254,17.301115040142587,0.2269119769119769,16.336884859661783
961532617,adrianrbp,python-ddd,Domain Driven Design Iterations,https://github.com/adrianrbp/python-ddd,8,0,0,0,0,1,3,5,0.6666666666666666,0,1,0,0,1,11.0,139.9469219390248,0.5686274509803922,103.74021829000152
914212376,smj1513,FastAPI_with_Clean_Architecture,FastAPI로 배우는 백엔드 프로그래밍 with 클린아키텍처 서적을 공부하며 정리한 코드,https://github.com/smj1513/FastAPI_with_Clean_Architecture,41,0,0,0,0,1,18,5,4.222222222222222,1,1,1,1,4,4.333333333333333,10.987355520636942,0.4978632478632478,22.865984366875647
663960591,hung2xt,debezium-kafka-spark,"Change Data Capture (CDC) refers to sourcing database change events from a source database. While there are commercial solutions available in the market, Debezium is available as an open-source option. In this blog post, I am going to show you how to install the Debezium MySQL Connector on Ubuntu machines using Google VM instances.",https://github.com/hung2xt/debezium-kafka-spark,87,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
520206657,dmerejkowsky,train-reservation-ddd,Trying to use DDD/hexagonal architecture for the Train Reservation kata,https://github.com/dmerejkowsky/train-reservation-ddd,151,0,0,0,0,2,20,5,2.25,1,0,0,1,2,12.6,43.93546799807625,1.2608881578947368,185.7341145401231
952026403,la-vitrine,partner-schemas-tools,"Single source of truth for La Vitrine's data schemas and validation rules. Contains JSON Schema definitions that standardize cultural event data formats for partner integrations, API validation, and documentation generation. Used across our platform to ensure consistent data quality and streamline the partner onboarding process.",https://github.com/la-vitrine/partner-schemas-tools,13017,1,1,1,0,2,3,5,4.666666666666667,0,0,0,0,0,21.33333333333333,315.36821091441084,2.6666666666666665,1239.5271259406218
373439942,AbdullahMu,Data-Streaming-Nanodegree-Project_02-Evaluate-Human-Balance-with-Spark-Streaming,"Design data streaming architecture and API for a real-life application called the Step Trending Electronic Data Interface (STEDI). It is a working application used to assess fall risk for seniors. When a senior takes a test, they are scored using an index which reflects the likelihood of falling, and potentially sustaining an injury in the course of walking. STEDI uses a Redis datastore for risk score and other data. The Data Science team has completed a working graph for population risk at a STEDI clinic. The problem is the data is not populated yet. You will work with Kafka Connect Redis Source events and Business Events to create a Kafka topic containing anonymized risk scores of seniors in the clinic.",https://github.com/AbdullahMu/Data-Streaming-Nanodegree-Project_02-Evaluate-Human-Balance-with-Spark-Streaming,847,3,3,0,0,1,3,5,3.0,0,0,0,0,0,0.0,0.0,0.0,0.0
637566297,KonstantineGk,Handwritten-Digit-Image-Classifier-with-NN," Developed a neural network for binary classification between digits 0 and 8 from the MNIST dataset. The NN architecture consisted of 784x300x1 layers using ReLU and Sigmoid activation functions. Binary Cross-Entropy loss function and Stochastic Gradient Descent with ADAM optimization were employed.  The model was trained on a 10,000 images.",https://github.com/KonstantineGk/Handwritten-Digit-Image-Classifier-with-NN,13,1,1,0,0,1,6,5,2.333333333333333,0,0,0,0,0,3.6666666666666665,269.1389322889977,3.794263209557327,1425.4408612848245
459755758,Nec2005,p03-Kubernetes-Microservice-Phonebook,Microservice Architecture for Phonebook Web Application (Python Flask) with MySQL using Kubernetes.,https://github.com/Nec2005/p03-Kubernetes-Microservice-Phonebook,12,0,0,0,0,1,2,5,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
320532556,kaiyoken3618,HMM-implementation,"Viterbi algorithm is used here.The Viterbi algorithm is a dynamic programming algorithm for finding the most likely sequence of hidden states—called the Viterbi path—that results in a sequence of observed events, especially in the context of Markov information sources and hidden Markov models (HMM).",https://github.com/kaiyoken3618/HMM-implementation,5,1,1,0,0,1,1,5,7.0,0,0,0,0,0,33.0,1807.209373449315,5.703703703703703,10307.786796710909
599660487,skhaz,fastapi-clean-architecture,,https://github.com/skhaz/fastapi-clean-architecture,145,32,32,6,1,2,19,5,3.0526315789473686,1,1,0,1,3,4.2631578947368425,4.942766109486388,0.1842105263157894,3.4187514757958253
704143170,GiuliaMarcela,clean-bmi-calculator,Repository created to group codes from the university's practical class using Python and knowledge of clean architecture.,https://github.com/GiuliaMarcela/clean-bmi-calculator,43,0,0,0,0,1,31,5,1.4516129032258065,1,1,1,1,4,4.870967741935484,24.435473489143195,0.5446908602150536,64.3288359601896
243266907,TikaWorld,Clean-Discord-Bot,Discord Bot for studying Clean Architecture ,https://github.com/TikaWorld/Clean-Discord-Bot,8,0,0,0,0,1,13,5,1.6923076923076923,1,1,1,0,3,3.230769230769231,7.716066857906085,0.0846153846153846,4.337031653072054
681338920,hrishikesh421,indian-cuisine-deploy-5022,"The Indian Cuisine Analysis and Recommendation System project is a comprehensive initiative designed to deliver data-driven culinary insights and personalized recipe recommendations within the domain of Indian cuisine. This project combines various AWS services to achieve its objectives, making it an efficient and scalable solution.",https://github.com/hrishikesh421/indian-cuisine-deploy-5022,1196,0,0,0,0,1,2,5,9.5,0,0,0,0,0,17.5,852.6274246962768,4.032608695652174,5055.287743740771
313259872,robinleruth,Microservices-architecture-test,,https://github.com/robinleruth/Microservices-architecture-test,175,0,0,0,0,1,107,5,3.0186915887850465,1,1,1,1,4,2.654205607476636,8.621740987004157,0.3103882617901309,21.524410066000584
630556937,cloin,cloin.eda,A collection of event-driven ansible source plugins,https://github.com/cloin/cloin.eda,125,16,16,11,3,2,11,5,4.181818181818182,0,0,0,0,0,10.909090909090908,54.01754850700461,1.5701208513708511,188.0417307211792
312005732,maronavenue,aws-event-driven-ms-lab,Event-driven Microservices Architecture with Amazon EventBridge,https://github.com/maronavenue/aws-event-driven-ms-lab,748,0,0,1,0,2,38,5,3.9210526315789473,0,0,0,0,0,2.3157894736842106,0.9473684210526316,0.0526315789473684,0.631578947368421
233670585,pcieslinski,courses_platform,REST API application created with the Clean Architecture approach.,https://github.com/pcieslinski/courses_platform,397,4,4,1,4,1,62,5,3.2580645161290325,1,1,1,1,4,12.838709677419354,67.54834417018843,0.287190272449924,57.22791736378272
406265411,enockm15,flask-ddd-example,An example for Flask Domain Driven Design Skeleton,https://github.com/enockm15/flask-ddd-example,9,0,0,0,0,0,5,5,1.8,0,0,0,0,0,3.4,3.101955000865387,0.2,3.101955000865387
521636440,paulorodriguesxv,twijournal,"TwiJournal is a new social media application. The Project aims to provide an example of Clean Architecture from Uncle Bob, using python",https://github.com/paulorodriguesxv/twijournal,101,2,2,0,0,1,47,5,5.617021276595745,1,1,1,1,4,6.76595744680851,37.50185070886771,0.6184432982305322,84.77030256295689
552636882,antunsz,clean-architecture-python,,https://github.com/antunsz/clean-architecture-python,11,0,0,0,0,1,13,5,1.3076923076923077,1,0,0,1,2,1.2307692307692308,0.0,0.0,0.0
834916135,emikeb,microservices-expedition,"This project demonstrates a microservices architecture with basic and enhanced communication setups. The project is divided into multiple phases, each adding more complexity and features to the project..",https://github.com/emikeb/microservices-expedition,27,1,1,0,0,1,12,5,3.083333333333333,0,1,0,0,1,7.5,49.72201436024127,0.3611111111111111,41.94224160203803
975707694,LuisPecanha,kafka_wiki_opensearch,"This project ingests real-time Wikipedia edit events via Kafka, stores them in **OpenSearch**, and exposes key metrics through a local **Streamlit dashboard**. It’s ideal for learning Kafka pipelines, OpenSearch indexing, and real-time data visualization, all fully open source and offline-ready.",https://github.com/LuisPecanha/kafka_wiki_opensearch,13,0,0,0,0,1,7,5,3.0,0,0,0,0,0,3.7142857142857135,9.45682326683466,0.3857142857142857,9.1836024918406
338636001,jankrloz,balance-calendar-generator,"A python app for computing balance dates of a revolvent credit card, using clean architecture",https://github.com/jankrloz/balance-calendar-generator,22,0,0,0,0,1,27,5,1.7037037037037035,1,1,0,1,3,1.4444444444444444,9.247807169951578,0.3288439955106622,24.62731253847032
801004015,anderrodroj,Bone_Fracture_Classification,"A Keras-based neural network for digit recognition, using a three-layer architecture with ReLU activations.",https://github.com/anderrodroj/Bone_Fracture_Classification,5,0,0,0,0,1,2,5,7.5,0,0,0,0,0,1.5,43.24289523296622,3.333333333333333,288.2859682197748
659833067,yomeronepal,Flask-demo,Dockerise Flask application with DDD and clean architecture,https://github.com/yomeronepal/Flask-demo,1294,0,0,0,0,1,26,6,3.076923076923077,0,0,0,0,0,2.6923076923076925,8.1461779207877,0.3012820512820512,8.145837971146136
578056423,Julius-777,Video-to-MP3-Conveter,"This is a video to mp3 convert built with a Microservice Architecture using Python, Docker, AWS, Kubernetes ",https://github.com/Julius-777/Video-to-MP3-Conveter,51,0,0,0,0,1,14,5,3.2142857142857144,0,0,0,1,1,4.142857142857143,12.312352589932544,0.5879120879120878,29.19269807713451
750917007,GilbertFranchesko,AsyncShopPython,"The online shop on Python, with microservice architecture.",https://github.com/GilbertFranchesko/AsyncShopPython,31,1,1,0,0,1,63,5,3.3015873015873014,0,0,0,1,1,5.39344262295082,21.46696854836962,0.4632305977532593,41.3462117158378
869492166,shenonavy,PythonCleanArchitecture,Python clean architecture with flask,https://github.com/shenonavy/PythonCleanArchitecture,12,0,0,0,0,1,11,5,2.272727272727273,0,1,1,1,3,1.4545454545454546,0.864525000393358,0.0909090909090909,0.432262500196679
786484141,rashtv,koshqon-fastapi-back,KoshQon Project. Backend Application according to CQRS pattern.,https://github.com/rashtv/koshqon-fastapi-back,40,1,1,0,0,1,23,5,2.5217391304347827,0,0,1,0,1,2.608695652173913,1.804920844506416,0.0652173913043478,2.7073812667596244
919623864,devgithvb,python-kafka-microservices,Implementing an Event Sourcing/CQRS microservices with Apache Kafka,https://github.com/devgithvb/python-kafka-microservices,6438,0,0,0,0,1,10,5,5.9,0,0,0,0,0,20.4,128.75913300656012,2.687112010796221,585.6671171144656
860166997,pytexas,event-moderation-py,An open-source audience interaction platform for events,https://github.com/pytexas/event-moderation-py,6,0,0,1,4,4,6,5,1.6666666666666667,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
817093748,gibsonaj-ag59,nimbus,"Nimbus is a microprocess-based backend architecture designed for data ingestion, cleaning, relating, storing, and provisioning from various source devices. ",https://github.com/gibsonaj-ag59/nimbus,124,0,0,0,0,1,37,5,2.108108108108108,1,0,1,0,2,2.2972972972972974,4.905140870132393,0.2078507078507078,10.73589228462219
667697772,NegarNGP,clean_architecture,,https://github.com/NegarNGP/clean_architecture,2,0,0,0,0,1,3,5,1.6666666666666667,0,0,1,0,1,1.0,0.0,0.0,0.0
858262902,quoctruong3105,CFSW-GEN2,Coffee Software New Design - Microservices Architecture,https://github.com/quoctruong3105/CFSW-GEN2,165,3,3,1,0,1,16,5,3.25,0,1,0,1,2,10.8125,59.02239629054871,0.9944329088224436,195.4571749666032
816572694,Siddhartha-19,Video_to_audio_microservices,Developed a Video to Audio converter using python based microservices architecture,https://github.com/Siddhartha-19/Video_to_audio_microservices,1133,0,0,0,0,1,7,5,4.571428571428571,0,0,0,1,1,5.857142857142857,39.12625753332121,1.2142857142857142,68.42740718158596
345229823,yantoledo,python-backend-clean-architecture,Development a python backend  to increase the knowledge about python and clean architecture.,https://github.com/yantoledo/python-backend-clean-architecture,31,0,0,0,0,1,40,5,2.3,1,1,1,1,4,4.375,11.552764598958827,0.3623015873015873,16.792931423509312
678175168,Slimcent,PythonClass1,Python class following clean code and clean architecture.,https://github.com/Slimcent/PythonClass1,13,0,0,0,0,1,8,5,1.125,0,0,0,0,0,3.375,16.449895581297472,0.3229166666666666,15.004066892006025
457064562,mymindwentblvnk,hexagonal-architecture-in-python,"A blueprint for a hexagonal architecture in Python containing a REST API, database connection, Kafka adapter and some business logic.",https://github.com/mymindwentblvnk/hexagonal-architecture-in-python,5,0,0,0,0,1,10,5,1.4,1,0,0,1,2,3.0,5.575488750216347,0.4071428571428571,4.99488723225103
600488548,kozanakyel,Batch-Allocation-Tracker-System-With-Clean-Architecture,"This repository with related to cosmicbook.com that include TDD, DDD, and EDD architecture and practices for python implementation",https://github.com/kozanakyel/Batch-Allocation-Tracker-System-With-Clean-Architecture,64,1,1,0,0,1,30,5,3.566666666666667,1,0,0,1,2,9.333333333333334,31.69195665359692,0.7342857142857143,61.25865200323344
696972764,mglowinski93,EventSourcingTemplate,"Template for ""Event Sourcing"" architectural design pattern.",https://github.com/mglowinski93/EventSourcingTemplate,30,0,0,0,0,1,40,5,2.825,1,1,0,1,3,4.7,10.028327946747742,0.2178030303030303,11.72966809129036
406944541,fredsonchaves07,python-clean-architecture,,https://github.com/fredsonchaves07/python-clean-architecture,28,1,1,0,0,1,37,5,1.0810810810810811,1,1,0,1,3,3.3783783783783785,14.536899249551118,0.4909070561244474,43.896645255655976
517791313,s-raza,currency-converter-api,Currency Converter App using React+FastAPI+Docker+NGINX+Kubernetes implemented using micro-services architecture.,https://github.com/s-raza/currency-converter-api,5630,2,2,1,0,1,37,5,3.27027027027027,1,0,1,0,2,5.648648648648648,23.10405383917748,0.6063560313560313,56.93261171078504
418656886,danilashkerdin,micro-blog,Simple blog based on microservices architecture,https://github.com/danilashkerdin/micro-blog,78,0,0,0,0,1,55,5,1.5272727272727271,0,0,0,0,0,3.145454545454545,73.48910667368419,0.1904039521084975,130.5835798379009
948823083,ErikaAX08,task-app-django-next,App de tareas con Django y NextJS usando Clean Architecture,https://github.com/ErikaAX08/task-app-django-next,228,0,0,0,0,1,20,5,2.0,1,1,1,1,4,3.5,4.645099297165777,0.1469696969696969,7.268274094838022
957644770,YuvrajSingh-mist,SmolWhisper,"Trained a Whisper model a ~30M (whisper tiny.en) architecture I coded from ground up to build a small ASR model, going through the below-mentioned stage from scratch. Trained on GigaSpeech dataset form HuggingFace consisting of 250 hours of clean audio for a total of full 3 epochs",https://github.com/YuvrajSingh-mist/SmolWhisper,94,5,5,0,0,2,7,5,8.857142857142858,0,0,0,0,0,41.71428571428572,674.8260102515513,5.965225180981484,7571.415267590541
893921291,HieuTranV,python-hexagonal-ddd,"A Python-based project demonstrating the principles of Hexagonal Architecture (Ports and Adapters) and Domain-Driven Design (DDD). This repository showcases how to design clean, maintainable, and scalable applications by emphasizing domain logic, decoupling dependencies, and enabling testability.",https://github.com/HieuTranV/python-hexagonal-ddd,11,5,5,1,0,1,31,5,2.419354838709677,0,1,0,1,2,3.419354838709677,1.750472984080336,0.1935483870967742,1.996361895335764
710693090,mmohamm5,Microservices-python-App,Converting mp4 videos to mp3 in a microservices architecture.,https://github.com/mmohamm5/Microservices-python-App,3212,0,0,0,0,1,14,5,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
273531704,jesusce21,cqrs,,https://github.com/jesusce21/cqrs,61,2,2,2,1,1,17,5,0.9411764705882352,0,0,0,0,0,3.941176470588236,4.102255884219463,0.2352941176470588,5.593985296662904
92165253,apeyrard,case-microservice,Simple Flask microservice to test microservice architectures,https://github.com/apeyrard/case-microservice,36,0,0,0,0,2,9,5,2.2222222222222223,0,0,0,0,0,6.444444444444445,18.246203317008813,0.3333333333333333,10.623101658504408
911676290,ruslan-korneev,lets-schedule,open-source API designed for scheduling events,https://github.com/ruslan-korneev/lets-schedule,157,0,0,0,1,1,25,5,3.04,1,0,1,0,2,2.08,1.8455586194967049,0.16,1.4651676193236276
463931170,jerherrerar,microservices-python-rabbitmq,Microservices Python: architecture based in events with RabbitMQ,https://github.com/jerherrerar/microservices-python-rabbitmq,15,0,0,0,0,1,23,5,2.3043478260869565,0,0,0,0,0,1.3478260869565215,1.5287832765424638,0.0978260869565217,0.9915367779884738
621142407,hcy71o,SNAC,Unofficial Pytorch implementation of SNAC: Speaker-normalized affine coupling layer in flow-based architecture for zero-shot multi-speaker text-to-speech,https://github.com/hcy71o/SNAC,14659,57,57,10,1,5,18,5,8.88888888888889,0,0,0,0,0,29.444444444444443,797.4610738474007,5.419937332523227,8488.713164569781
655816102,cesar-augusto-costa,Clean_Architecture_Python,,https://github.com/cesar-augusto-costa/Clean_Architecture_Python,27,0,0,0,0,1,14,5,1.6428571428571428,1,0,0,1,2,3.7142857142857135,14.639098217891496,0.4795918367346939,24.032155171957196
661715644,brainiac-ns,microservice,Python microservice using REST architecture,https://github.com/brainiac-ns/microservice,143,0,0,0,0,1,12,5,2.25,1,0,0,0,1,2.5,10.694293607691096,0.5192307692307693,28.06442550775918
594702343,Gluuz,clean-architecture-with-python,,https://github.com/Gluuz/clean-architecture-with-python,74,0,0,0,0,1,45,5,1.3777777777777778,1,1,1,1,4,3.6,12.907578581463804,0.2440917107583774,15.421475105934103
612682627,Zeztron,microservices-python,"Microservice Architecture and Distributed Systems using Python, Kubernetes, RabbitMQ, MongoDB, mySQL.",https://github.com/Zeztron/microservices-python,11,0,0,0,0,2,8,5,2.5,0,0,0,1,1,3.5,23.57118147982426,1.0679086538461535,63.34911831340648
337015956,erfanmorsali,flask_simple_api,a simple flask_api using clean architecture and flask-restful,https://github.com/erfanmorsali/flask_simple_api,12,2,2,0,0,1,16,5,3.0625,0,0,0,0,0,6.375,4.78340197762261,0.234375,9.202456988003483
925948958,elle184,SaludTechDeLosAlpes-Error404,"El repositorio contiene toda la documentación, diseño y artefactos necesarios del proyecto de Domain Driven Design para SaludTech de los Alpes",https://github.com/elle184/SaludTechDeLosAlpes-Error404,1027,0,0,1,8,1,205,9,1.7414634146341463,1,1,1,1,4,3.024390243902439,1.7001092813068006,0.1089895470383275,1.890033091553768
175340729,Azure-Samples,gaming-nonrealtime-analytics,"This reference architecture represents a simple analytics pipeline that you can build on Azure. It can be leveraged when you won't be tracking data that requires real-time analysis and instead you just plan to do review sessions of the data every now and then (daily, weekly, bi-weekly, monthly). The presentation layer is a dashboard that you will be able to customize at will. You could use this while you are developing your game and in production.",https://github.com/Azure-Samples/gaming-nonrealtime-analytics,18,2,2,0,1,15,1,5,2.0,0,0,0,0,0,0.0,0.0,0.0,0.0
326987410,ParthLa,Classification-using-NN,"Developed a Neural Network Architecture involving CNN, Fully Connected Layer, Max Pooling and Avg Pooling and trained it on MNIST, CIFAR10 to achieve over 90% accuracy",https://github.com/ParthLa/Classification-using-NN,176,0,0,0,0,2,3,5,3.6666666666666665,0,0,0,0,0,32.666666666666664,994.7009523557176,6.235775089605735,7502.153703185559
918871227,krabhishek,nagraj,"Nagraj is a command-line tool that helps you create Python projects following Domain-Driven Design (DDD) and Command Query Responsibility Segregation (CQRS) patterns. Named after the famous Indian comic book superhero, Nagraj (the Snake King), this tool aims to make DDD project setup as powerful and elegant as its namesake.",https://github.com/krabhishek/nagraj,222,0,0,0,0,1,151,12,1.2317880794701987,1,1,1,1,4,3.6026490066225167,17.219859833091256,0.237436690204786,42.16250614261291
277980905,ZackyGameDev,event-hoster-discord-bot,Source code for the Event Hoster Bot for discord,https://github.com/ZackyGameDev/event-hoster-discord-bot,164,4,4,2,0,1,14,5,5.785714285714286,0,0,0,0,0,24.928571428571427,223.79754460981533,3.083850125030249,1359.270941259855
858555601,AngelMerlinO,clean-architecture-api,,https://github.com/AngelMerlinO/clean-architecture-api,9,0,0,0,0,1,9,5,1.2222222222222223,1,1,1,1,4,4.0,1.612197222702993,0.2777777777777778,0.9727652780181634
49334474,sousouindustries,python-es,A Python 3 module to implement Event Sourcing (ES).,https://github.com/sousouindustries/python-es,16,0,0,0,0,2,24,5,2.625,0,0,0,1,1,6.125,12.087523039118963,0.5803571428571428,26.42235995217759
898863290,maulik-0207,django-structurator,"django-structurator is a lightweight CLI tool that helps you create Django projects and apps with a clean, scalable architecture—without boilerplate or repetitive setup.",https://github.com/maulik-0207/django-structurator,153,3,3,0,0,1,10,6,3.2,0,0,1,0,1,12.3,76.68899545432338,1.7290277777777778,298.426130599916
114051489,jklemm,python-clean-architecture,Small implementation of Clean Architecture,https://github.com/jklemm/python-clean-architecture,23,0,0,0,0,0,15,5,1.4666666666666666,0,0,0,0,0,1.2,2.116992500144231,0.1533333333333333,3.398496250072116
729036103,Sanskar-mindinventory,grpc-fastapi-microservice,Microservice Architecture is created using FastAPI and gRPC,https://github.com/Sanskar-mindinventory/grpc-fastapi-microservice,3769,0,0,0,0,1,52,7,2.0576923076923075,1,1,1,0,3,2.673076923076923,4.617919996501868,0.1916666666666666,6.743576392187517
946375932,al-macleod,Project-Auroa,"A cutting-edge machine learning initiative to train a Transformer-based AI model using Ollama's LLaMA 3 embeddings. Designed for NVIDIA GPU acceleration (e.g., RTX 3060), it features a 6-layer, 12-head architecture, a PyQt5 GUI, and a flexible training pipeline for custom datasets.",https://github.com/al-macleod/Project-Auroa,19,0,0,0,0,1,2,5,9.0,0,0,0,0,0,35.0,367.96523044325767,4.988304093567251,1882.593460863336
413001859,jprsurendra,layered_architecture_in_django,How to use n layered architecture in Django,https://github.com/jprsurendra/layered_architecture_in_django,60,0,0,0,0,1,49,5,2.4489795918367347,0,0,0,0,0,14.551020408163266,178.68874804487626,1.009118929818638,1175.6247831967155
203309505,DieAntonie,eventstore-python,CQS/CQRS Event-store implemented in python 3.8,https://github.com/DieAntonie/eventstore-python,1468,3,3,0,5,1,61,5,3.7704918032786887,0,0,0,1,1,8.672131147540984,33.11099125021791,0.5726060271383319,125.90330692720693
946604658,Gricana,todo_bot_microservice,"A bot for performing basic functionality for monitoring and performing daily tasks, built on a microservice architecture",https://github.com/Gricana/todo_bot_microservice,190,0,0,0,0,1,63,5,3.412698412698413,1,1,1,1,4,4.73015873015873,8.35256539026857,0.3242979242979242,15.58188194930906
488081914,YisusYaro,python-ddd-example,Rest api python example using driven domain design and cqrs.,https://github.com/YisusYaro/python-ddd-example,51,0,0,0,0,1,26,5,2.1153846153846154,1,1,1,1,4,3.5,1.0844704259928686,0.0769230769230769,0.5422352129964343
892538322,shrp777,ms-python-micro-services-poc,Architecture Micro Services modèle Python (FastAPI) + Docker (PoC),https://github.com/shrp777/ms-python-micro-services-poc,554,0,0,0,0,1,9,6,3.0,0,1,1,0,2,3.333333333333333,5.614709844115208,0.1111111111111111,2.807354922057604
945534912,Yuyi-hao,technical_assignment_opinium.ai,Technical Assignment (Backend Engineer Intern - March 2025) Business Context Our analytics platform ingests raw event data from multiple sources and needs to transform it into a standardized format before analysis. Your task is to build a simple data transformation pipeline that demonstrates your logical thinking and data processing skills.,https://github.com/Yuyi-hao/technical_assignment_opinium.ai,55,0,0,0,0,1,2,5,4.0,0,0,0,0,0,13.5,70.43606605806568,1.7,121.0738865214318
914478531,Juandoqg,Clean-Architecture-Django,Repositorio creado para el estudio de la arquitectura limpia usando django ,https://github.com/Juandoqg/Clean-Architecture-Django,12,0,0,0,0,1,22,5,1.4545454545454546,1,1,1,1,4,1.181818181818182,0.432262500196679,0.0454545454545454,0.2161312500983395
943875456,BeratAltunn,Object-Oriented-Analysis-And-Design-Project,A domain-driven design implementation of a university course registration system. This project demonstrates clean architecture principles with a focus on business rules and transactional integrity.,https://github.com/BeratAltunn/Object-Oriented-Analysis-And-Design-Project,715,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
905445811,MMMahmoodian,fastapi-clean-architecture,A clean architecture example of fastapi projects,https://github.com/MMMahmoodian/fastapi-clean-architecture,13,2,2,0,0,1,16,5,1.625,1,1,1,0,3,1.1875,2.2818609377704338,0.125,1.9846804688852169
254554662,vousmeevoyez,microservice-django-grpc-tdd,Sample Microservice architecture and test driven development + django + grpc + kong ,https://github.com/vousmeevoyez/microservice-django-grpc-tdd,1443,1,1,0,0,2,114,5,2.956140350877193,1,1,1,1,4,4.333333333333333,8.635232672674293,0.366010674459428,9.697710893237115
918112527,readytowork-org,fast-api-clean-architecture,,https://github.com/readytowork-org/fast-api-clean-architecture,54,0,0,1,0,1,27,5,3.2222222222222223,1,1,1,0,3,2.333333333333333,2.417520247143164,0.1901234567901234,3.1548556996274923
964348257,talhaacet559,TradeAgent,"TradeAgent with microservice architecture for BTC/USDT ticker,receiving data from external websocket and rest api endpoints and create signals.",https://github.com/talhaacet559/TradeAgent,168,0,0,0,0,1,17,5,6.941176470588236,0,0,0,0,0,6.764705882352941,43.778496217184966,1.560890878090367,133.86910481711547
649189230,AtulMishra20,Term-Project-Part-3-Network-Protocol-Implementation,"TalkByte is a stateful, application-layer network protocol that allows a client and a server to communicate in real time. It was created with the goal of allowing interactive, real-time communication using a simple yet effective architecture.",https://github.com/AtulMishra20/Term-Project-Part-3-Network-Protocol-Implementation,485,0,0,0,0,1,2,5,2.0,0,0,0,0,0,0.0,19.598881433921303,0.5,9.799440716960651
883350187,crisprin17,SensibleSleep,SensibleSleep is an open-source Python package that implements a Hierarchical Bayesian model for learning sleep patterns from smartphone screen-on events. ,https://github.com/crisprin17/SensibleSleep,454,0,0,0,1,1,8,5,3.125,0,0,0,0,0,6.375,277.835352903096,3.3040865384615383,1862.3477320464024
473557185,rachelyongies,Cloud-Management-Engineering,An e-commerce web-application in microservices architecture that leverages on various Amazon Web Services resources.  ,https://github.com/rachelyongies/Cloud-Management-Engineering,76,1,1,0,0,1,7,5,6.571428571428571,0,0,0,0,0,17.285714285714285,46.71396467212664,1.3408163265306123,78.89052341615397
938372130,yagoazedias,vest-app,A simple project to test the theory behid the clean architecture,https://github.com/yagoazedias/vest-app,13,0,0,0,0,1,29,5,2.4827586206896552,1,1,0,0,2,5.206896551724138,3.0012523566001343,0.2298850574712643,5.578815258336539
752900359,iza-w,fastapi-bank,"FastAPI with mix of layered architecture and clean (pydantic, sqlalchemy, alembic, asyncpg)",https://github.com/iza-w/fastapi-bank,74,0,0,2,0,1,66,5,3.5303030303030303,1,1,0,1,3,3.742424242424242,15.44976656349702,0.2785513654497611,12.58944258600028
161817477,daxamin,Microservices-Log-Analysis-Monitoring,Lambda Architecture,https://github.com/daxamin/Microservices-Log-Analysis-Monitoring,13203,0,0,0,0,1,3,5,4.333333333333333,0,0,0,0,0,0.0,29.50556526247692,1.462962962962963,109.37260310163298
590804865,SLaibaUrooj,Greeting-Service-Kata,Falcon Clean Architecture - Excercises,https://github.com/SLaibaUrooj/Greeting-Service-Kata,16,0,0,0,0,1,3,5,0.6666666666666666,0,0,0,0,0,8.0,2.3774437510817346,0.25,1.1887218755408673
765258716,wwwshwww,ddd-py,Python Implementation with DDD + Hexagonal Architecture ,https://github.com/wwwshwww/ddd-py,224,1,1,0,0,1,183,8,2.9562841530054644,1,1,0,1,3,4.19672131147541,7.785290370815651,0.304113347582699,18.63154393194003
770088776,MateoVelasquez,book_catalog,Simple book catalog using hexagonal (ports and adapters) architecture.,https://github.com/MateoVelasquez/book_catalog,32,2,2,0,1,1,17,5,2.117647058823529,1,1,1,1,4,3.117647058823529,1.265280882607467,0.088235294117647,0.6326404413037335
115668566,Moronisauner,Minibank-Challenge,Pequeno Sistema Bancário com Event Sourcing e CQRS,https://github.com/Moronisauner/Minibank-Challenge,1052,0,0,0,0,0,47,7,2.106382978723404,1,0,0,0,1,5.0212765957446805,5.335744913212761,0.2354794142028184,11.610752357737155
965773295,AyoubJadouli,Deep-Learning-with-Pretrained-Internal-World-Layers,Deep Learning with Pretrained ’Internal World’ Layers: A Gemma 3-Based Modular Architecture for Wildfire Prediction,https://github.com/AyoubJadouli/Deep-Learning-with-Pretrained-Internal-World-Layers,15,0,0,0,0,1,1,5,15.0,0,0,0,0,0,88.0,2682.199518881848,12.363636363636363,33161.739506175574
779975014,NithinKrishna10,python-microservice,"Python microservices powered by FastAPI & Django, with PostgreSQL & Redis for data storage & caching. Kubernetes & Docker for containerization & Tilt for local development. Efficient, scalable, and modular architecture.",https://github.com/NithinKrishna10/python-microservice,5,0,0,0,0,1,6,5,1.6666666666666667,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
341494828,911AstalusAdrian,TexttableSnake,Simple console Snake game built using layered architecture and the 'texttable' library,https://github.com/911AstalusAdrian/TexttableSnake,11,0,0,0,0,1,7,5,1.0,1,0,0,0,1,16.285714285714285,237.7960975730159,2.057055080096555,2181.810886995612
106580553,jacob-y,django-clean-architecture,example of clean architecture with django,https://github.com/jacob-y/django-clean-architecture,89,113,113,30,1,3,84,5,2.0595238095238093,1,1,0,1,3,5.607142857142857,16.25397757271687,0.3403668713862356,43.22296477442654
669756801,Dzalhaqi,fastapi-orm-cqrs-fitness-management-system,This is fitness club management system prototype. It caters to membership and gym fitness operations,https://github.com/Dzalhaqi/fastapi-orm-cqrs-fitness-management-system,57,0,0,0,0,1,41,5,3.097560975609756,1,0,1,0,2,6.463414634146342,4.848469992653977,0.2024390243902439,3.795036429554593
319983718,DavidPitts1,ClassificationCatTruckCar,"Cleaning wrongly labeled data by ensemble and active learning , then using a provided neural network with constant architecture  in a competition to reach the highest accuracy, In other words exploring the data by dynamic augmentation  and hyper parameter tuning to increase accuracy. ",https://github.com/DavidPitts1/ClassificationCatTruckCar,308,1,1,0,0,1,3,5,7.333333333333333,0,0,0,0,0,16.666666666666668,488.8109223186421,4.636057878435928,2435.1418424227286
219501711,esakik,parrot-backend,"A backend service for the sample app ""PARROT"", designed using Clean Architecture principles. This project was created as a practice exercise to deepen my understanding of Clean Architecture.",https://github.com/esakik/parrot-backend,128,25,25,3,4,2,86,5,2.232558139534884,1,1,1,1,4,2.4651162790697674,1.552282571138958,0.1104651162790697,0.8813432478081308
841650443,dedgar1,Clean-Architecture-Template-Python,Template to use for clean architecture projects in python,https://github.com/dedgar1/Clean-Architecture-Template-Python,13,0,0,0,0,1,19,5,1.6842105263157894,1,1,1,0,3,2.1052631578947367,2.752829606515693,0.1052631578947368,1.3764148032578465
640820507,Sahal-P,Fusion-Auth-Service-with-Clean-Architecture,Django Authentication Service using Jwt In Clean Architecture,https://github.com/Sahal-P/Fusion-Auth-Service-with-Clean-Architecture,119,1,1,0,0,1,56,7,2.0535714285714284,1,1,1,1,4,3.5,3.2748937678075616,0.1428571428571428,2.8470337213705768
412729891,archyemi,message_passing,Refactoring an application into a microservice architecture using message passing techniques,https://github.com/archyemi/message_passing,320,0,0,0,0,1,35,5,5.0285714285714285,0,0,0,0,0,3.6857142857142855,5.924425746117428,0.3866666666666666,8.17642863821814
943593592,bclasky1539,noakweather-engineering-pipeline,"This Python-based weather engineering pipeline implements domain-driven design architecture while incorporating database persistence, structured data modeling, and cloud-based infrastructure capabilities.",https://github.com/bclasky1539/noakweather-engineering-pipeline,119,2,2,0,0,1,25,5,4.04,1,0,0,1,2,37.88,417.9407388058616,3.220840880773106,3681.95697765862
237556015,RanaFakeeh-87,MisarParser,"A Python application to parse YAML, XML and JAVA artifacts of a microservice architecture  project into a MiSAR PSM model.",https://github.com/RanaFakeeh-87/MisarParser,35,1,1,0,0,1,1,5,12.0,0,0,0,0,0,361.0,4901.045683540315,8.54945054945055,41901.24771202599
848896173,amine-el-amrani,TaskMaster,"A collaborative task management application built with Flask and Vue.js, designed to help teams and individuals organize, track, and complete tasks efficiently. TaskMaster features a clean architecture with a Flask backend, PostgreSQL database, and a dynamic Vue.js frontend, ensuring optimal performance and scalability.",https://github.com/amine-el-amrani/TaskMaster,26,1,1,0,1,1,17,5,2.235294117647059,1,1,1,0,3,4.0588235294117645,13.655669411790688,0.3627450980392157,18.52397286715577
613615676,iamlucasmateo,fcc-microservices,A simple microservices with message queueing architecture,https://github.com/iamlucasmateo/fcc-microservices,34,0,0,0,0,1,12,5,3.6666666666666665,0,0,0,1,1,3.083333333333333,20.84958550774537,0.7826923076923077,54.25499509440427
708338089,serine000,python-video-to-mp3,This is a tool bulid using a microservices architecture for transforming videos to mp3 files.,https://github.com/serine000/python-video-to-mp3,36,0,0,0,0,1,8,5,3.0,0,0,0,1,1,4.0,23.203136165791804,1.1304086538461535,62.20268940458736
133425875,SoftwareDevEngResearch,deep_learning_layer_calculator,"This project is intended to be a deep learning layer calculator. This will be used in the auto-encoding state representations from raw lidar data for multi-agent reinforcement learners project. The user will specify, at a minimum, the input and output data dimensions they wish to have upon completion, as well as the desired layer architecture. The program will then calculate the dimensions of the intermediary layers (possibly with a semi-brute force search), create and save a PyTorch model of the neural network.",https://github.com/SoftwareDevEngResearch/deep_learning_layer_calculator,36,0,0,1,0,1,9,5,0.8888888888888888,0,0,0,0,0,0.8888888888888888,6.505510356681778,0.2222222222222222,5.467373908265797
630203954,SebasttianDaza,ReviewApp,"Project to implement microservices architecture, requirement business, high and low level system desing. ",https://github.com/SebasttianDaza/ReviewApp,368,0,0,0,1,1,31,5,2.419354838709677,0,0,0,0,0,1.7419354838709675,5.357123179369861,0.1935483870967742,12.414244043038972
838093684,josegalindo23,patient-management-system,A clean architecture-based project providing a flexible and sustainable solution for patient management.,https://github.com/josegalindo23/patient-management-system,13289,0,0,0,0,1,946,9,13.90063424947146,1,0,1,1,3,66.72938689217759,692.0851857051522,3.875948517591212,6434.676538637225
264975263,fwojciec,python-eventsource,playground for with event sourcing experiments in python,https://github.com/fwojciec/python-eventsource,22,0,0,0,2,1,10,5,3.5,0,0,0,0,0,7.4,10.823533109312232,0.3545454545454545,6.480570418567829
938387429,pacciu,python-spaghetti-to-hex,An example of how to migrate a spaghetti code to hexagonal architecture,https://github.com/pacciu/python-spaghetti-to-hex,4,0,0,0,0,1,1,5,2.0,0,0,0,0,0,5.0,4.754887502163469,0.5,2.3774437510817346
872143547,SPRIME01,Python-Clean-Architecture-Boilerplate,,https://github.com/SPRIME01/Python-Clean-Architecture-Boilerplate,40,0,0,0,0,1,28,5,3.607142857142857,1,1,1,1,4,11.214285714285714,5.139481905616762,0.3946428571428572,5.101663129851429
487659567,Sadomtsevvs,Flask-HexagonalArchitecture,,https://github.com/Sadomtsevvs/Flask-HexagonalArchitecture,7,0,0,0,0,1,11,5,2.636363636363636,1,0,0,1,2,1.818181818181818,1.4099795458479034,0.0909090909090909,1.4099795458479034
744695649,skalskibukowa,Project_Azure_Data_Engineer,"The data engineering project aims to migrate a company's on-premises database to Azure, leveraging Azure Data Factory for data ingestion, transformation, and storage. The project will implement a three-stage storage strategy, consisting of bronze, silver, and gold data layers (Medalion architecture). Documentation of the project is in PDF file.",https://github.com/skalskibukowa/Project_Azure_Data_Engineer,2893,1,1,1,0,1,3,5,2.0,0,0,0,0,0,0.0,63.45383223791973,1.365079365079365,128.72445423662296
767515596,robert-min,langchain-chat-service,"Langchain, Django, Hexagonal Architecture",https://github.com/robert-min/langchain-chat-service,32,0,0,0,0,1,53,5,2.188679245283019,1,1,1,1,4,2.792452830188679,8.250250546417309,0.1657681940700808,6.97961876719399
167358501,pristupa,ddd,Domain-Driven Design framework for Python,https://github.com/pristupa/ddd,40,16,16,4,0,4,14,5,3.142857142857143,0,0,0,0,0,4.857142857142857,17.793849167128656,0.4928571428571429,33.87715847219257
893199249,siam29,Python-Flask-Microservices-Project,"About A simple, secure, and scalable JWT-based authentication service built with Flask. This service provides endpoints for generating, validating, and revoking JSON Web Tokens (JWTs) to secure your microservices architecture.",https://github.com/siam29/Python-Flask-Microservices-Project,12251,0,0,0,0,1,17,5,2.5294117647058822,1,0,1,0,2,7.294117647058823,43.27613706504527,0.6852941176470587,50.97892729070242
229159223,zhangmengshuo,sfs,Double layer face detection based on Hybrid Architecture,https://github.com/zhangmengshuo/sfs,1,0,0,0,0,1,1,5,1.0,0,0,0,0,0,0.0,0.0,0.0,0.0
489873291,mena18,blog-microservices,simple blog application built with a microservices architecture ,https://github.com/mena18/blog-microservices,680,0,0,0,0,1,60,5,2.05,0,0,1,0,1,1.9,3.3430331655774705,0.1694444444444444,6.729394347493741
778809519,Harut8,cqrs,,https://github.com/Harut8/cqrs,51,0,0,0,0,1,21,5,4.9523809523809526,0,1,1,0,2,8.142857142857142,8.354128101618983,0.4404761904761904,11.885292160877556
775136817,vazgizele,clean-architecture,,https://github.com/vazgizele/clean-architecture,36,0,0,0,0,1,35,5,3.7142857142857135,1,1,1,1,4,4.171428571428572,14.689356560358286,0.4742490842490842,32.05899938636611
631046902,ShahriyarR,hexagonal-user-service,"The demo User service with Eventsourcing, using Hexagonal Architecture",https://github.com/ShahriyarR/hexagonal-user-service,22,2,2,0,0,1,18,5,1.2222222222222223,1,1,0,1,3,5.222222222222222,27.151164135446898,0.1702235772357723,50.54355687735554
116806889,xianjun666,xianjun666_microservice_web,test microservice architecture by flask,https://github.com/xianjun666/xianjun666_microservice_web,5285,0,0,0,0,0,566,12,5.701413427561837,1,0,1,0,2,44.6113074204947,618.8626700877965,3.4287694877075423,6782.938292693319
834290867,UDesai94,Microservices,"An Azure DevOps CI/CD pipeline project employing a GitOps approach for a multi-language, multi-microservice architecture",https://github.com/UDesai94/Microservices,10035,1,1,0,0,1,11,6,6.181818181818182,0,1,0,0,1,24.90909090909091,32.19954427146147,1.0795454545454546,105.228810734727
131015212,diogoff,sequence-partitioning,"Source code for the paper ""Sequence Partitioning for Process Mining with Unlabeled Event Logs""",https://github.com/diogoff/sequence-partitioning,14,2,2,0,0,1,2,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
946404120,karicotiza,book-architecture-patterns-with-python,"Following the book ""Architecture Patterns with Python: Enabling Test-Driven Development, Domain-Driven Design, and Event-Driven Microservices""",https://github.com/karicotiza/book-architecture-patterns-with-python,53,0,0,0,0,1,82,5,1.7560975609756098,1,1,1,1,4,2.8536585365853657,5.777404963211853,0.2262530152774055,12.82394300831868
258034125,Trinkes,clean-architecture,,https://github.com/Trinkes/clean-architecture,10,0,0,0,0,1,13,5,2.0,1,1,0,0,2,2.8461538461538463,4.831749531779492,0.2692307692307692,10.616331521090736
559696630,boundcorp,PlantAssistant,Open source plant care assistant software; integrates with Home Assistant to read plant sensor data and manage plant lifecycle events.,https://github.com/boundcorp/PlantAssistant,2110,2,2,0,0,1,46,5,2.652173913043478,1,0,0,0,1,3.4565217391304346,11.923765769647806,0.3059394409937888,17.42084202634984
399858847,NimaVahdat,DeepSNN-Framework," DeepSNN Framework is an advanced tool for building Spiking Neural Networks, developed for deep learning applications. Tailored for modern neural networks, it features a flexible architecture, convolutional layers, and advanced encoding methods. ",https://github.com/NimaVahdat/DeepSNN-Framework,90,6,6,0,0,1,26,5,4.884615384615385,0,0,0,0,0,13.615384615384617,357.64700387918066,3.526618214139845,2271.703013582876
245818704,MDaniyal2000,web_scraping_running_events,To scrap data from https://www.letsdothis.com/gb/running-events?geolocation=false&utm_source=runners_world_gb&resultsPerPage=24&page=1&selectedLocationName=United%20Kingdom&viewportNorthEastLat=60.9&viewportNorthEastLong=2.1&viewportSouthWestLat=49.8&viewportSouthWestLong=-8.9&sort=%7B%22date%22%3A%22asc%22%7D&sortOption=date-0,https://github.com/MDaniyal2000/web_scraping_running_events,1,0,0,0,0,1,1,5,3.0,0,0,0,0,0,0.0,4.754887502163469,0.5,2.3774437510817346
353988103,atilag,ddd-patterns,Domain-Driven Design tactical patterns for Python,https://github.com/atilag/ddd-patterns,14,0,0,0,0,1,9,5,2.333333333333333,0,0,0,0,0,5.777777777777778,14.057573241189106,0.7370370370370369,17.062060849002673
89523837,jayzoww,OSIModel,Simple OSI layered architecture implementation,https://github.com/jayzoww/OSIModel,4,0,0,0,0,1,3,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
150253368,jdrumgoole,micro-services-exemplar,How to use MongoDB and Event Sourcing with Python.,https://github.com/jdrumgoole/micro-services-exemplar,9189,0,0,0,2,1,12,5,3.583333333333333,0,0,0,0,0,6.916666666666667,52.63081836968643,1.437342171717172,199.2978845793388
963319461,VtGoodgame,Support_chat,The microservice architecture is a small chat room for technical support. FastApi and FastApi.Websokets implementation,https://github.com/VtGoodgame/Support_chat,13,0,0,0,0,1,11,5,2.636363636363636,1,1,0,0,2,3.363636363636364,13.003313516955188,0.4839876033057851,19.908219682203004
666486368,leoomi,video-to-mp3-converter-microservices,Repository for a video to mp3 converter system using microservices architecture done from doing a microservices system design course.,https://github.com/leoomi/video-to-mp3-converter-microservices,12,0,0,0,0,1,11,5,3.0,0,0,0,1,1,2.909090909090909,18.00720244026555,0.86756993006993,46.50434854631048
848656507,dclimber,masterming-python-example,"Event Sourcing examples in Python for Mastermind game Based on the article series ""Functional event sourcing example in Kotlin"" by Jakub Zalas",https://github.com/dclimber/masterming-python-example,14,0,0,0,0,1,8,5,2.5,1,0,0,0,1,14.0,36.50896584772927,0.7413793103448276,189.6943218220928
613887136,Cheesy008,fastapi-clean-architecture-sample,,https://github.com/Cheesy008/fastapi-clean-architecture-sample,53,0,0,0,0,1,69,5,2.318840579710145,1,1,1,1,4,1.6231884057971016,1.3983652124156123,0.1159420289855072,1.241384008079173
956108193,ZenBt,fastapi-clean-template,"Clean architecture template for FastAPI application. Redis, Kafka (producer+consumer), S3 (minio) integration included",https://github.com/ZenBt/fastapi-clean-template,54,0,0,1,0,2,53,5,2.981132075471698,1,1,0,1,3,3.2452830188679247,3.1269261864306297,0.1666666666666666,4.273078951223556
634599677,pochon-tech-pro,python-simple-cqrs-sample,python-simple-cqrs-sample,https://github.com/pochon-tech-pro/python-simple-cqrs-sample,3,0,0,0,0,1,8,5,2.0,1,1,0,1,3,4.375,3.127443751081734,0.25,2.533082813311301
781072413,Yagna32,Video-to-Audio,Microservice architecture,https://github.com/Yagna32/Video-to-Audio,833,0,0,0,0,1,11,5,3.1818181818181817,0,0,0,1,1,2.909090909090909,15.47937007172234,0.7482517482517482,36.531183646146346
149543679,lukemilby,CleanArchTutorial,The Clean Architecture Tutorial,https://github.com/lukemilby/CleanArchTutorial,12,0,0,0,0,1,7,5,1.4285714285714286,0,0,0,0,0,1.7142857142857142,7.4821021623112705,0.3714285714285714,9.034920362749975
177473355,ssh-shashi,microservices-experiment,here is my current ongoing microservices list of projects i did and also working to expand my knowledge in distributed architecture system ,https://github.com/ssh-shashi/microservices-experiment,257,0,0,0,0,1,23,5,4.217391304347826,0,1,0,0,1,14.217391304347826,39.95246814732514,0.948332036028022,97.84193255247637
505268827,guilhermedom,adaline-neural-network,"Adaline is a single-layer neural network, a variation of the original Perceptron architecture.",https://github.com/guilhermedom/adaline-neural-network,38,0,0,0,0,1,3,5,1.0,1,0,0,0,1,6.333333333333333,243.12850206766345,3.3118279569892475,2415.599310865817
563093107,zhenyagit,kafka_gateio_collector,Trying to use microservice architecture with kafka.  This is a part of the project that collects data from the site,https://github.com/zhenyagit/kafka_gateio_collector,33,0,0,0,4,1,5,5,4.4,0,0,0,0,0,16.2,83.5670992767322,1.7872549019607842,148.6982775369654
317324698,gulec2000,Project-203-Microservice-Architecture-for-Phonebook-Web-Application-Python-Flask-with-MySQL-using,"Phonebook Microservice Web Application aims to create a web application with MySQL Database using Docker and Kubernetes to give students the understanding of Microservice architecture. In this application, we have a frontend service and a backend service to interact with database service. Each service will be managed by a Kubernetes deployment. The backend service will be a gateway for the application and it will serve the necessary web pages for create, delete and update operations while the frontend service will serve a search page in order to conduct read operations. To preserve the data in the database, persistent volume and persistent volume claim concepts should be adopted.",https://github.com/gulec2000/Project-203-Microservice-Architecture-for-Phonebook-Web-Application-Python-Flask-with-MySQL-using,6,1,1,0,7,1,1,5,3.0,0,0,0,0,0,27.0,388.8212196174346,2.738095238095238,1064.6295299048804
180625390,nlpie,mtap,MTAP: A framework for distributed text analysis using gRPC and microservices-based architecture.,https://github.com/nlpie/mtap,6345,6,6,2,20,5,90,9,5.766666666666667,0,0,1,0,1,24.6,178.9067017382812,1.8230235899010745,775.7050635844267
791133833,jinks-d,pesto-backend-assignment,Microservices architecture assignment,https://github.com/jinks-d/pesto-backend-assignment,4,0,0,0,0,1,3,5,3.0,0,0,0,0,0,2.6666666666666665,6.754887502163469,0.5,5.96240625180289
962388312,wagatsuma-yuichi,learn-domain-driven-design,,https://github.com/wagatsuma-yuichi/learn-domain-driven-design,32,0,0,0,0,1,36,5,2.805555555555556,1,1,1,1,4,8.472222222222221,10.979454626986318,0.494017094017094,20.46301329822985
921037380,G-Okumu,Mapping-Object-ToDB,This project uses Layered Architecture Pattern,https://github.com/G-Okumu/Mapping-Object-ToDB,19,1,1,3,0,1,6,5,1.6666666666666667,0,1,0,0,1,13.333333333333334,40.55714375685098,0.4242424242424242,61.022215918924864
771162165,nkenchor,tapi-user-service,A user service in python using clean architecture and the asynchronous sanic framework for non-blocking,https://github.com/nkenchor/tapi-user-service,473,0,0,0,0,1,42,7,4.0,1,1,1,1,4,9.857142857142858,23.92169106155568,0.595063025210084,60.26075307467407
442065882,Omair-Khattak,Artificial_Neural_Network_Project,"Task: In groups of 2, given a hand-written Roman numerals (from 1 to 10) dataset, can you design and train the best Multi-layer Perceptron (using scikitLearn library) that reports the best training and validation accuracies. Submission includes: Besides the code files, submit a detailed report describing how you explored the sklearn library, which functions you eventually used, the experimental settings you applied for each experiment of yours, including your input features, neural network architecture and parametric values, accuracy graphs etc. Finally, your informed analysis about which neural network setting was the best and why. If there are some experiments you could not try, what would they have looked like, if you had more time. Submission instructions: 1) Make a folder on your disk, its name should be Your Name(s)_Your ID(s). 2) It should only have the final code file(s) and final report. NO DATAset. 3) Zip it. 4) Upload on LMS before the deadline. Tip: Assume that the reader of your document is somebody who has not been a part of our classroom, so that person should be able to understand what you mean!",https://github.com/Omair-Khattak/Artificial_Neural_Network_Project,142,0,0,1,0,1,1,5,13.0,0,0,0,0,0,3.0,137.6075250475963,2.2,302.7365551047119
648400632,Tomperez98,ez-cqrs,"A lightweight, opinionated framework to write software in a procedural way.",https://github.com/Tomperez98/ez-cqrs,133,0,0,1,0,1,13,5,4.538461538461538,0,0,0,0,0,7.230769230769231,17.028972528438295,0.6153846153846154,32.658593944013695
32693905,guillaumevincent,rangevoting,"training app to play with DDD, clean code and CQRS",https://github.com/guillaumevincent/rangevoting,986,4,4,1,1,4,20,5,3.0,0,0,0,0,0,13.6,17.13102864994061,0.6218181818181818,34.38579970151572
274848840,ngoctnq-1957,redpwnCTF_2020_Source,Source files for some (most?) of the event challs.,https://github.com/ngoctnq-1957/redpwnCTF_2020_Source,1723,0,0,0,0,1,9,5,3.555555555555556,0,0,1,0,1,10.444444444444445,152.52787773068,2.951938096815146,828.3192544899905
809330629,fernando-izar,django_clean_arch,Django applied with Clean Architecture,https://github.com/fernando-izar/django_clean_arch,9,0,0,0,0,1,14,5,2.5,1,1,0,0,2,5.5,4.985284822819373,0.3071428571428571,9.075403127549803
594368949,janvorac,plots-with-microservices,A simple plotting app using microservice architecture.,https://github.com/janvorac/plots-with-microservices,4,0,0,0,0,1,2,5,5.0,0,0,0,0,0,2.5,59.346029280979394,1.375,131.77856588220362
391170782,mahabubul-alam,qnn_builder_pennylane,"This repository holds scripts to build quantum neural networks with a variety of encoding methods, parametric layer architectures, and measurement operations. Circuits can be generated as PennyLane QNode objects.",https://github.com/mahabubul-alam/qnn_builder_pennylane,51,11,11,5,1,1,9,5,2.0,0,0,0,0,0,30.22222222222222,518.1171786314709,1.7872219749514733,2621.9268644532344
897057125,CodeNameJacks,Orchestration-Service-Microservice-Demo,This is a Python program built with the Flask framework to demonstrate and test microservices architecture and the design of a scalable microservice system.,https://github.com/CodeNameJacks/Orchestration-Service-Microservice-Demo,284,0,0,0,0,1,5,5,7.0,0,0,0,0,0,14.0,103.3841747295272,1.037837837837838,116.58339540582104
460119758,sfinnie,event_sourced_bank,A wide-and-shallow example using the Python event sourcing library,https://github.com/sfinnie/event_sourced_bank,648,4,4,2,2,2,10,5,3.6,0,0,0,0,0,6.7,13.583380572528029,0.3136363636363636,9.811450041130218
414113821,jorzel,recruitment,Playground app modelling candidate simple path in a recruitment process using Event Sourcing + CQRS,https://github.com/jorzel/recruitment,61,4,4,0,0,2,37,5,2.756756756756757,1,1,0,1,3,4.648648648648648,7.46382853870368,0.1774774774774774,11.596191329489708
644815670,HazemKaroui,Trackd,A personal movie and TV show tracker built with a microservice architecture in mind using gRPC-go and Flask,https://github.com/HazemKaroui/Trackd,526,0,0,0,3,1,10,5,2.8,1,1,0,0,2,5.5,1.4264662506490406,0.15,0.7132331253245203
498017369,harsh020,ecommerce-microservice,An e-commerce backend built using microservice architecture,https://github.com/harsh020/ecommerce-microservice,404,15,15,5,0,1,221,7,1.737556561085973,1,1,1,0,3,1.9547511312217196,4.160072207171299,0.1164423811482635,5.156740279489643
965253512,CuzImSlymi,Apertis-LLM,"Apertis LLM. Clean. Fast. Built Different. Custom LLM architecture designed to be dead simple, insanely efficient, and easy to run—even without monster GPUs. Powered by Selective Linear Attention, Adaptive Experts, and a Unified Multimodal Core. No BS, just raw performance you can actually use.",https://github.com/CuzImSlymi/Apertis-LLM,159,12,12,0,0,3,20,5,7.35,0,0,0,0,0,28.2,445.9509228238082,3.3429927443460543,5875.191104085668
12408598,LucaCanali,PyLatencyMap,"PyLatencyMap is a tool for heat map visualization on the CLI. It is integrated with scrips to collect and visualize I/O latency heat maps from various sources, including SystemTap, DTrace, Oracle wait events, NetApp filers, trace files.",https://github.com/LucaCanali/PyLatencyMap,579,33,33,11,0,9,5,5,0.8,0,0,0,0,0,25.2,982.448508948118,2.839325842696629,13947.457202875808
819896970,Moh9987,Security-Event-Monitoring-and-Analysis-SEMA-,"Security Event Monitoring and Analysis (SEMA) is a web application designed to monitor and analyze security events in real-time. It collects log data from various sources, identifies potential threats using pattern recognition, and generates reports for IT security teams to facilitate swift responses to security incidents.",https://github.com/Moh9987/Security-Event-Monitoring-and-Analysis-SEMA-,31,0,0,0,0,1,7,5,1.1428571428571428,0,0,0,0,0,1.0,2.8949517866414864,0.2142857142857142,2.5553169650583816
339434120,AbbyXSu,Financial_report_generator,"This project creates a service-orientated Microservices architecture for the application, the application is achieved via feature technology including  CI/CD pipeline on Jenkins , Ansible, GCP VMs, Docker Swarm , NGINX",https://github.com/AbbyXSu/Financial_report_generator,116,0,0,0,0,1,20,5,2.7,0,1,0,0,1,3.2,12.788536656099184,0.6733766233766234,62.25030536701537
934410543,duxtec,appcraft,"A Python framework with modular templates designed for various project types. Built with a layered architecture to ensure scalability, reusability, and efficient management, empowering developers to create maintainable and extensible solutions.",https://github.com/duxtec/appcraft,6193,2,2,0,0,1,206,10,3.1990291262135924,1,1,1,1,4,9.388349514563108,25.74046341200889,0.7687835730168683,89.99106442796705
21647394,eleme,meepo,Event sourcing and broadcasting  for database.,https://github.com/eleme/meepo,209,54,54,16,0,27,36,5,5.0,0,0,0,0,0,11.47222222222222,107.30512229908383,1.1538664254666786,210.1036199186053
803625767,emdeha,clean-architecture-demo,,https://github.com/emdeha/clean-architecture-demo,19,0,0,0,0,1,12,5,3.333333333333333,0,1,0,0,1,5.583333333333333,7.451991349255269,0.4027777777777777,11.776974266336198
430466831,bekha-io,multibank,A simple finance system for multiple banks managment inspired by hexagonal architecture,https://github.com/bekha-io/multibank,19,0,0,0,0,1,26,5,3.1153846153846154,1,1,0,0,2,9.615384615384617,44.15172487785586,1.1043706293706297,266.76227357527523
272953104,deblina23,MyMicroServ,microservice architecture basic design for not even beginner..for new born :D,https://github.com/deblina23/MyMicroServ,2,0,0,0,0,1,3,5,1.6666666666666667,0,0,0,0,0,0.0,4.643856189774724,0.1666666666666666,2.321928094887362
837559102,tommygrammar,Containerized-Flask-Backend-Application-with-Nginx-Microservices-Architecture-,"I explored making flask backends, using nginx and containerizing them",https://github.com/tommygrammar/Containerized-Flask-Backend-Application-with-Nginx-Microservices-Architecture-,39,1,1,0,0,1,6,5,4.5,0,0,0,0,0,10.333333333333334,67.08022196208553,1.4111111111111112,136.8200776991104
643645874,javiertelioz,clean-architecture-python,This repository provides a template for building applications using the Clean Architecture principles with Python.,https://github.com/javiertelioz/clean-architecture-python,49,5,5,2,0,2,79,5,1.860759493670886,1,1,1,1,4,2.367088607594937,1.9367517817088864,0.0829817158931083,1.0224046682266728
936007287,jcirilo,sistema-farmacia,Sistema de venda de remédios para farmácias seguindo os princípios Clean Architecture. Implementado durante o curso de Métodos e Projeto de Software 2024.2 da UFPB,https://github.com/jcirilo/sistema-farmacia,2036,1,1,0,0,1,38,5,1.894736842105263,0,0,0,1,1,6.868421052631579,7.702595966754903,0.1721491228070175,11.061041259183677
567240102,amin-jalali,consolidation_via_microservices,Systems consolidation approach using microservices architecture,https://github.com/amin-jalali/consolidation_via_microservices,46,1,1,0,0,0,22,5,1.6363636363636365,0,0,0,0,0,4.863636363636363,25.21854524001809,0.3814935064935065,33.0595667384368
146114512,smushy129,microservices-boilerplate,"Boilerplate set up for an app built with microservices architecture. Built with Docker, React, Flask, AWS",https://github.com/smushy129/microservices-boilerplate,161,0,0,0,0,1,12,5,3.8333333333333335,0,1,1,0,2,5.666666666666667,16.800407560512983,0.494047619047619,20.25997633118409
80451191,Kukmedis,py-simplecqrs,Simple CQRS application example in python,https://github.com/Kukmedis/py-simplecqrs,24,6,6,4,0,1,10,5,2.5,0,0,0,0,0,8.5,23.119251847502408,0.9522727272727274,35.22024704011825
138265090,vmware-archive,kinesis-demo,Demo of AWS Kinesis stream as event source for Kubeless,https://github.com/vmware-archive/kinesis-demo,220,3,3,10,1,3,2,5,2.0,0,0,0,0,0,3.0,7.754887502163468,0.5,7.754887502163468
778346051,SHIV000000,e_commerce_backend,"This is a comprehensive assignment that covers various aspects of backend engineering, including microservices architecture, concurrency control, clustering for high availability, database integration, APIs, authentication, and more. ",https://github.com/SHIV000000/e_commerce_backend,14211,1,1,0,0,1,1076,9,13.657063197026025,1,0,1,0,2,63.86988847583643,653.9156876220369,3.7629123195623926,5960.118346313067
568094235,vranki,mobilizon-importer,Import events from various data sources to Mobilizon,https://github.com/vranki/mobilizon-importer,59,5,5,2,2,1,7,5,6.142857142857143,0,0,0,0,0,22.0,153.12010055586623,3.00510496671787,655.2622002190061
579626713,Ouissal1629,Meal_Rate_REST_API,"This is a rating web app created with django framework. There are three models (microservices) in this app : users, meals and ratings. These diffrent models can communicate using the REST API architecture, created with the Django Rest Framework.",https://github.com/Ouissal1629/Meal_Rate_REST_API,26,0,0,0,0,1,16,5,2.5625,0,0,1,0,1,1.8125,2.57904140665565,0.20625,3.4832707033278254
415546119,oliveirahelena,hexagonal-architecture,,https://github.com/oliveirahelena/hexagonal-architecture,14,0,0,0,0,1,12,5,2.333333333333333,0,1,0,1,2,10.0,53.44625700814396,0.8448183760683761,84.23508844482868
207781463,NimzyMaina,flask_kafka,Flask Kafka consumer full implementation example. Ideal for a microservices architecture.,https://github.com/NimzyMaina/flask_kafka,18,43,43,7,3,3,10,5,3.0,0,0,0,0,0,8.0,33.653820729601456,0.8615384615384615,125.71783382638498
864129857,VargasCardona,Serverless-Tree,Serverless project that exemplifies the principles of serverless architecture while offering a visual representation of a tree.,https://github.com/VargasCardona/Serverless-Tree,49,1,1,0,0,1,1,5,1.0,0,0,0,0,0,4.0,137.6075250475963,2.2,302.7365551047119
30805921,rtouze,event_sourcing_example,An event sourcing example to accompany a series of blog articles.,https://github.com/rtouze/event_sourcing_example,152,0,0,0,0,2,3,5,2.333333333333333,0,0,1,0,1,35.333333333333336,179.5971657911106,0.921440261865794,219.40623630991763
964709132,CRIWLIEN23,WebScraping-2025-Jornada-Aovivo,"WebScraping-2025-Jornada-Aovivo is a project designed to extract live event data from various online sources. It enables users to gather real-time information efficiently, enhancing their ability to stay updated on key happenings.",https://github.com/CRIWLIEN23/WebScraping-2025-Jornada-Aovivo,103,0,0,0,0,1,7,5,1.1428571428571428,0,0,0,0,0,2.0,18.86911464644095,0.6309523809523808,32.52234706046123
673451398,ZBreno,clean-architecture,,https://github.com/ZBreno/clean-architecture,8,0,0,0,0,1,20,5,0.75,1,1,1,1,4,0.15,0.4754887502163469,0.05,0.2377443751081734
157941840,morissette,hrdevfest,Sample Monolith and Microservice Architectures for a Presentation,https://github.com/morissette/hrdevfest,2452,0,0,0,10,1,10,5,2.8,0,0,0,1,1,6.9,14.44684803737941,0.3,7.998912768906052
431273816,jugal-krishna,Semantic-segmentation,"Implemented FCN-32 and FCN-16 by extracting features from RESNET-18 CNN architecture, and increasing their spatial resolution using Transpose Convolution and upsampling layers to perform semantic segmentation of images from the KITTI dataset",https://github.com/jugal-krishna/Semantic-segmentation,11,2,2,0,0,1,4,5,7.25,0,0,0,0,0,14.0,310.8321564309072,3.9778911564625847,1701.9542371045231
289294322,gacou54,starlette-resource,Starlette resource that helps you follow a layered architecture.,https://github.com/gacou54/starlette-resource,18,3,3,0,0,1,8,5,2.125,0,0,0,0,0,2.75,1.1887218755408673,0.125,0.5943609377704336
183551336,proxyserver2023,clean-architecture-python,build applications for future,https://github.com/proxyserver2023/clean-architecture-python,279,1,1,0,0,1,34,5,1.0294117647058822,1,0,0,0,1,3.117647058823529,19.89225400622663,0.3265837104072397,28.781513955366627
740586248,therafiali,Todo_RestAPI_using_FastAPI,"Todo REST API project using combination of FastAPI, Postgres SQL Database, and SQLAlchemy in Python using layered architecture.,Add API endpoints for todo CRUD operations (POST, PUT, DELETE. Also develop Streamlit client and a Python console client and a Typescript Node.js console client. Also add unit tests using pytest.",https://github.com/therafiali/Todo_RestAPI_using_FastAPI,2,0,0,0,0,1,6,5,3.5,0,0,0,0,0,4.5,26.734416303682497,0.3333333333333333,19.07824053492765
725950136,deepskydatahq,hook2events,This Cloud Run container can receive any kind of web hook and pipes it into a source table in BigQuery.,https://github.com/deepskydatahq/hook2events,68,0,0,0,0,0,1,5,6.0,0,0,0,0,0,4.0,4.754887502163469,0.5,2.3774437510817346
717316932,hojungyun,training-cqrs,,https://github.com/hojungyun/training-cqrs,33,0,0,0,0,1,6,5,3.8333333333333335,0,0,0,0,0,5.666666666666667,2.7924812503605785,0.4166666666666667,4.3962406251802895
923584176,emilholmegaard,sokrates-kafka-viz,Tool for visualizing Kafka microservices architecture using static code analysis,https://github.com/emilholmegaard/sokrates-kafka-viz,595,1,1,0,6,1,52,8,4.9423076923076925,1,0,0,0,1,23.884615384615383,171.75975746838418,2.05951548168002,551.6811725100158
374633148,akommala-dot,CQRS-Pattern-Student-Registration-System-in-AWS,,https://github.com/akommala-dot/CQRS-Pattern-Student-Registration-System-in-AWS,2296,0,0,0,0,1,2,5,5.0,0,0,0,0,0,6.5,39.86313713864836,0.4444444444444444,35.43389967879854
907099886,FOrcedbruh,Fastapi-clean-achitecture,A clean architecture example with FastAPI and Python,https://github.com/FOrcedbruh/Fastapi-clean-achitecture,12719,1,1,0,0,1,1647,10,7.088038858530662,1,1,1,1,4,2.9642857142857144,2.211317959380005,0.1696428571428571,1.819202755249289
966656202,Zukizuk,lakehouse-architecture-transaction,"A lakehouse architecture for an e-commerce platform which will ingest raw transactional data stored in Amazon s3, clean and duplicate it using Delta Lake, and expose it for downstream analytics through Amazon Athena",https://github.com/Zukizuk/lakehouse-architecture-transaction,6678,0,0,0,0,1,7,5,4.714285714285714,0,0,0,0,0,9.428571428571429,107.36929475766352,2.2773471457548538,665.7088196900864
539477302,ramos-rr,my_clean_architecture,"Repository based on the Clean Architecture book from Robert C Martin and youtube classes from ""programador Lhama""",https://github.com/ramos-rr/my_clean_architecture,2111,2,2,0,3,1,133,5,2.5037593984962405,1,1,1,1,4,5.428571428571429,27.88548446700067,0.5658351205520981,83.50793602224772
655934239,JuAnDaGmiss77,django_hexagonal_architecture,,https://github.com/JuAnDaGmiss77/django_hexagonal_architecture,19,0,0,0,0,1,19,5,1.5789473684210529,1,1,1,1,4,0.9473684210526316,1.1320934212803653,0.0789473684210526,0.5660467106401826
201334604,bmonikraj,sharkradar,"Lightweight micro service registry and discovery tool, compatible with any HTTP based microservice",https://github.com/bmonikraj/sharkradar,5324,9,9,1,14,2,21,6,5.380952380952381,0,0,0,0,0,12.38095238095238,153.3652252564151,1.102957923910305,475.1769762865698
725370732,bonetou,python-clean-architecture-fastapi,,https://github.com/bonetou/python-clean-architecture-fastapi,193,0,0,0,0,1,44,5,1.2954545454545454,1,1,1,1,4,3.0454545454545454,8.581607423903444,0.2367424242424242,12.715708492732553
910972192,peytontolbert,neural_network_building_blocks,Reusable layer components and architectures - Day 2 of 365 Days of Repos,https://github.com/peytontolbert/neural_network_building_blocks,84,1,1,0,0,1,35,5,4.4,0,0,0,0,0,25.37142857142857,290.25879039945363,4.027547496205909,2058.7974091312703
635527926,nullwiz,rest-calculator,an example restful calculator built using serverless framework with minimal flask extensions used. domain driven design and a lambda function that process operations as a poc.,https://github.com/nullwiz/rest-calculator,137,0,0,0,0,1,53,5,4.2075471698113205,1,0,0,1,2,9.18867924528302,43.71790638244093,0.9676896041435442,172.94535927521872
92219920,uwekamper,justeventme,Minimum-Impact Event-Sourcing Library for Django,https://github.com/uwekamper/justeventme,14,0,0,0,0,1,18,5,2.333333333333333,0,0,0,0,0,4.0,2.151614219622253,0.1666666666666666,2.151614219622253
548715141,TcMits,python-clean-template,Clean Architecture template for Python services ,https://github.com/TcMits/python-clean-template,139,1,1,0,0,1,82,5,3.609756097560976,1,1,0,1,3,5.158536585365853,15.70504664692977,0.3839980480224382,13.779342865836112
723066710,leocraig18,shakespeare_transformer,A simplistic decoder only shakespeare transformer following the Attention is All You Need (2017) architecture. One key divergence is that layer normalisation precedes the Multi-Head Attention and Feed Forward. There is no need for an encoder or cross attention as the model is only tasked with generating similar text to the training data. ,https://github.com/leocraig18/shakespeare_transformer,428,0,0,0,0,1,1,5,3.0,0,0,0,0,0,39.0,570.6163757880986,7.914893617021277,4516.367910493036
761117061,JuanSebastianBecerra,propiedades-alpes-inseparables,This is a repository to explore DDD principles and use microservices based on events architecture.,https://github.com/JuanSebastianBecerra/propiedades-alpes-inseparables,135,0,0,1,0,2,216,7,2.7777777777777777,0,0,1,0,1,4.3657407407407405,2.4312338325625977,0.1129510921177587,4.864075455716891
651503618,avrtt,MobileEAST,"Paper and code for a lightweight & fast scene text detection based on EAST architecture and MobileNet layers, introduced in 2023",https://github.com/avrtt/MobileEAST,7100,3,3,1,0,1,4,5,0.0,0,0,0,0,0,25.25,2598.033121598158,6.6247411868582695,29401.3436909416
932139206,muza-music,muza-metadata-server,An audio files metadata API server for the Muza project,https://github.com/muza-music/muza-metadata-server,24,0,0,0,1,1,11,5,3.090909090909091,0,0,0,0,0,7.818181818181818,18.776998667173142,0.8636363636363636,36.78024449130651
968396054,Garritosk8CR,fastApi-CQRS,,https://github.com/Garritosk8CR/fastApi-CQRS,303,1,1,0,0,1,34,5,5.588235294117647,1,1,1,1,4,26.705882352941178,157.89635634523418,0.8271250984830832,284.62390050686656
628658578,elif-admin,Project-206-Microservice-Architecture-for-Phonebook-Web-Application-Python-Flask-with-MySQL-using,Project-206: Microservice Architecture for Phonebook Web Application (Python Flask) with MySQL using Kubernetes.,https://github.com/elif-admin/Project-206-Microservice-Architecture-for-Phonebook-Web-Application-Python-Flask-with-MySQL-using,273,1,1,0,0,1,2,5,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
889761341,nrobledosagredo,discord-bot-microservices,"A Discord bot with a microservices architecture that manages birthdays, searches YouTube, and facilitates communication between services using RabbitMQ.",https://github.com/nrobledosagredo/discord-bot-microservices,14,0,0,0,0,1,4,5,5.0,0,0,0,0,0,6.5,58.55873237818946,0.96875,95.1713119600259
450561185,JoanMouba,software-development,"I provide real inspiration for software development with Python: Clean code, Architecture, patterns and more. ",https://github.com/JoanMouba/software-development,4,1,1,0,0,1,1,5,4.0,0,0,0,0,0,2.0,4.754887502163469,0.5,2.3774437510817346
817409703,KovvalVeetil,e-commerce-microservices,This project is a microservices-based architecture for an e-commerce application. Each microservice is responsible for a specific business function and is implemented using Python and Flask,https://github.com/KovvalVeetil/e-commerce-microservices,22,0,0,0,0,1,7,5,1.4285714285714286,0,0,0,0,0,8.285714285714286,30.62982408390084,0.7142857142857143,28.42796895152438
915109370,rohancodestack,Serverless-Microservices-Based-Food-Delivery-System-,"This project focuses on designing and implementing a serverless microservices-based application by migrating a traditional monolithic application to a modern, serverless architecture.",https://github.com/rohancodestack/Serverless-Microservices-Based-Food-Delivery-System-,7,0,0,0,0,1,6,5,1.6666666666666667,0,0,0,1,1,3.6666666666666665,10.355894885730647,0.5750000000000001,15.39008157266444
419611541,prags2392,repo_clean,different architectures for small scale image classification,https://github.com/prags2392/repo_clean,9,0,0,0,0,1,9,5,13.555555555555555,0,0,0,0,0,4.555555555555555,164.73866116841776,3.888973063973064,778.8347997056417
899980842,jmorenobl,fastapi-template,A FastAPI project template with clean architecture to be used with cookiecutter,https://github.com/jmorenobl/fastapi-template,34,0,0,0,0,1,36,6,0.7222222222222222,1,1,1,1,4,0.9166666666666666,7.942460596538573,0.2771164021164021,8.631225104048914
512176635,vmandke,abc_cqrs,A compliment for Medium blog: https://medium.com/@vmandke/abc-of-cqrs-circa-2018-5e4cebebe2d2,https://github.com/vmandke/abc_cqrs,172,0,0,0,0,1,21,5,2.571428571428572,0,0,0,0,0,7.857142857142857,30.68632193286758,0.8611145468288325,64.43428923469997
634298379,gabriele-panebianco-inaf,gammapysimulator,"Gamma-ray astrophysical source simulator: produces Event List, Spectra Maps and Lightcurves",https://github.com/gabriele-panebianco-inaf/gammapysimulator,591,0,0,0,7,1,21,5,5.142857142857143,0,0,0,0,0,19.714285714285715,207.8496521437398,1.8229730608496075,683.2131630063609
484583736,Academia-de-Dados,backend,"Projeto criado com intuito de colocar em pratica conceitos de DDD, Arquitetura Orientada a Eventos, CQRS, etc.",https://github.com/Academia-de-Dados/backend,630,0,0,0,7,0,131,5,2.9083969465648853,0,0,0,0,0,3.427480916030534,8.285537842948884,0.1883977673807765,7.751955208954151
814377939,AnakinNN,Optimizing_Public_Transportation,"Kafka producer (train arrival and turnstile event for passenger arrival), Kafka Rest Proxy producer for weather data, Kafka Connect for JDBC source connector to extract data from Postgres, Faust Stream Processor, KSQL table, Kafka consumer, run simulation with Docker-compose environment",https://github.com/AnakinNN/Optimizing_Public_Transportation,703,0,0,0,0,0,23,5,3.8260869565217392,1,0,0,0,1,9.0,60.11062649771227,1.4652466145601155,335.0034482565772
808937067,cameron-cs,gnn_qm9_models,"The GraphClassificationModel model leverages the standard GCN layers to capture the structural and feature information of the molecules. The architecture comprises three GCN layers, followed by two fully connected (linear) layers on QM9 dataset",https://github.com/cameron-cs/gnn_qm9_models,424,0,0,0,0,1,4,5,4.75,1,0,0,0,1,8.0,91.94547961217474,1.5392857142857144,517.5701418060171
778634249,maxbeaudoin,fastapi-cqrs,FastAPI + CQRS,https://github.com/maxbeaudoin/fastapi-cqrs,50,2,2,0,0,1,27,5,2.2222222222222223,1,0,1,1,3,1.7407407407407407,2.174353254524798,0.1296296296296296,1.4575469976327695
792081629,kano1101,PythonCleanArchitecture,,https://github.com/kano1101/PythonCleanArchitecture,10,0,0,0,0,1,13,5,3.5384615384615383,0,0,0,0,0,7.230769230769231,8.290043247563132,0.3461538461538461,16.06067929971816
784710058,kapursanchita,MP3-Extractor,"An app that enables user to convert a video file into an MP3 file, built using microservices architecture and system design concepts. ",https://github.com/kapursanchita/MP3-Extractor,11,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
975051936,ghostwalkin,supply-chain-api,Demo of a neo4j based supply chain app with microservice architecture,https://github.com/ghostwalkin/supply-chain-api,2,0,0,0,1,1,2,5,4.5,0,0,1,0,1,5.0,5.804820237218405,0.5,5.804820237218405
167822850,shimakaze-git,python-ddd,domain driven design of python,https://github.com/shimakaze-git/python-ddd,62,6,6,0,0,0,56,6,1.5178571428571428,1,1,1,1,4,6.982142857142857,19.38244122268403,0.4268380429094714,44.18770916844686
536841393,ZHU-Zhiyu,Event-tracking,"Source code of neurips 2022 paper ""Learning Graph-embedded Key-event Back-tracing for Object Tracking in Event Clouds""",https://github.com/ZHU-Zhiyu/Event-tracking,1233,70,70,11,2,5,85,5,8.494117647058824,1,0,0,0,1,37.44705882352941,1969.3951280818333,5.745894925862558,16613.228086127478
340757154,marcelsud,python-ddd-cqrs-es,,https://github.com/marcelsud/python-ddd-cqrs-es,12,1,1,0,0,1,5,5,3.2,1,0,0,0,1,11.2,11.203353666550004,0.425,11.415050999327883
505847366,MalekMt-git,PyCleanThon,A small project to demonstrate the use of Clean Architecture with Python,https://github.com/MalekMt-git/PyCleanThon,13,0,0,0,0,1,10,5,1.8,1,1,1,0,3,7.0,5.440362799390803,0.2,3.3006634234172423
251422706,kurosouza,webshop,A sample application implemented using clean architecture. Uses flask for HTTP backend and sqlalchemy for persistence.,https://github.com/kurosouza/webshop,9,0,0,0,0,1,14,5,2.5,1,1,0,1,3,7.428571428571429,21.10350883090549,0.43796992481203,61.63624345931025
670494162,JiaweiSheng,UR-HAT,Source code for ECAI 2023 paper: Uncertain Relational Hypergraph Attention Networks for Document-level Event Factuality Identification.,https://github.com/JiaweiSheng/UR-HAT,9103,3,3,0,1,1,10,5,9.3,1,0,0,0,1,41.5,1399.750251715721,5.925639008790978,13921.466047794453
816539061,ivanildobarauna-dev,currency-quote,"Complete solution for extracting currency pair quotes data with comprehensive testing, parameter validation, flexible configuration management, Hexagonal Architecture, CI/CD pipelines, code quality tools, and detailed documentation.",https://github.com/ivanildobarauna-dev/currency-quote,7400,1,1,0,3,2,22,5,3.5454545454545454,1,1,0,1,3,7.772727272727272,32.82247440213425,0.6153335301062574,43.868673836338616
315063945,jorzel,opentable,"Clean architecture python application sample, with domain layer protected",https://github.com/jorzel/opentable,117,31,31,2,1,3,44,5,2.386363636363636,1,1,1,1,4,3.522727272727273,2.7296108638257084,0.1988636363636363,3.221699074323414
494850278,webclinic017,event_driven_microservices_python,Event driven microservice architecture - Python Flask Docker RabbitMQ React,https://github.com/webclinic017/event_driven_microservices_python,33,0,0,0,0,0,25,5,2.52,0,0,0,0,0,1.48,2.3508662333965398,0.15,1.6165994547268685
434019555,izaguerreiro,clean_architecture,Projeto criado como exemplo para a tech talk de Clean Architecture,https://github.com/izaguerreiro/clean_architecture,18,1,1,0,0,1,22,5,1.6363636363636365,1,1,0,1,3,2.5,0.0909090909090909,0.0227272727272727,0.0454545454545454
469987088,thunlp,LEVEN,"Source code and dataset for ACL2022 Findings Paper ""LEVEN: A Large-Scale Chinese Legal Event Detection dataset""",https://github.com/thunlp/LEVEN,6939,111,111,26,6,6,163,6,4.049079754601227,0,0,0,0,0,15.061349693251534,276.22136726834407,3.176590102930333,2156.9591732796857
326042705,yoophi,ca-util,Utility class for building Python projects based on clean architecture.,https://github.com/yoophi/ca-util,17,2,2,1,0,1,14,5,1.5714285714285714,0,0,0,0,0,7.0,40.117638361911546,0.4714285714285714,40.65280147991079
64509090,julianpistorius,test_event_source,A space to try out Event Sourcing things. Probably not interesting for most people.,https://github.com/julianpistorius/test_event_source,40,1,1,0,0,1,22,5,3.090909090909091,1,1,0,1,3,3.909090909090909,4.264665449227336,0.3257575757575757,5.669371158725993
894226058,Arthur-Rocha-Lima,clean-architecture,Projeto da pós-graduação para estudar Clean Architecture utilizando Python e Docker,https://github.com/Arthur-Rocha-Lima/clean-architecture,32,0,0,0,0,1,47,5,2.5531914893617023,1,1,1,1,4,3.127659574468085,4.10360152885764,0.1539598108747044,7.912491768227144
653254794,rafaelaco,python-clean-architecture-example,Study of python and clean architecture,https://github.com/rafaelaco/python-clean-architecture-example,4,0,0,0,0,1,12,5,2.583333333333333,1,1,0,1,3,4.333333333333333,5.1167707736572,0.2395833333333333,8.504283481361455
710850668,ByZ0e,Glance-Focus,This repo contains source code for Glance and Focus: Memory Prompting for Multi-Event Video Question Answering (Accepted in NeurIPS 2023),https://github.com/ByZ0e/Glance-Focus,3115,27,27,6,3,2,14,5,7.071428571428571,0,0,0,0,0,35.42857142857143,386.6870557190063,4.698206722726452,2782.859842555593
300914404,THU-KEG,NGS,"Source code for AACL-IJCNLP 2020 paper ""Neural Gibbs Sampling for Joint Event Argument Extraction"".",https://github.com/THU-KEG/NGS,28,2,2,0,0,6,19,5,8.68421052631579,0,0,0,0,0,40.10526315789474,1421.6503406009117,5.961225956392696,13138.580436571932
563015513,SamWarden,didiator,,https://github.com/SamWarden/didiator,214,32,32,2,9,2,36,5,5.472222222222222,0,0,1,0,1,13.25,27.820233212436897,0.4279947954176629,42.5464325811727
963218697,QuentCoud,TP_2025_DDD,Domain-Driven Design TP,https://github.com/QuentCoud/TP_2025_DDD,395,0,0,0,0,1,30,5,2.1333333333333333,0,0,1,0,1,4.966666666666667,10.570459093982045,0.2894385026737968,25.24315000838175
483136726,JiaweiSheng,CorED,Source code for SIGIR 2022 paper: CorED: Incorporating Type-level and Instance-level Correlations for Fine-grained Event Detection.,https://github.com/JiaweiSheng/CorED,2865,10,10,0,2,1,12,5,6.0,1,0,0,0,1,31.666666666666668,568.9740211809693,5.060879292699605,4579.911663187729
797112030,TARUN2K3,Emotion-Detection-CNN,Design a convolutional neural network (CNN) architecture with appropriate layers for feature extraction and classification to detect emotions in images and Live video.,https://github.com/TARUN2K3/Emotion-Detection-CNN,8650,2,2,3,2,1,2,5,5.0,0,0,0,0,0,3.0,108.54337954676876,2.5105263157894737,340.6585678274111
577181222,amcquistan,es-cqrs-python-aws,,https://github.com/amcquistan/es-cqrs-python-aws,27,0,0,0,0,1,28,5,3.25,1,0,0,1,2,5.857142857142857,20.593519535345344,0.7099816849816849,57.6213704433167
429582432,kleysonr,python-clean-architecture,Python Clean Architecture Example,https://github.com/kleysonr/python-clean-architecture,14,0,0,0,0,1,25,5,1.52,1,1,1,1,4,1.68,0.4603910001730775,0.06,0.2301955000865387
584944596,Iazzetta,hexagonal-fastapi-sentry-sqlalchemy,"Hexagonal Architecture in Python with Sentry, FastAPI and SQLAlchemy on Kubernetes",https://github.com/Iazzetta/hexagonal-fastapi-sentry-sqlalchemy,24,5,5,1,0,2,28,5,1.8214285714285716,1,0,0,1,2,2.4285714285714284,9.48475756571198,0.0912698412698412,4.995231611037156
780291051,DilerFeed,Event-Planner-app,Open source desktop application for event planning with the ability to send email reminders using a Google account.,https://github.com/DilerFeed/Event-Planner-app,4687,1,1,0,0,1,1,5,20.0,0,0,0,0,0,326.0,4959.267128012253,21.68055555555556,107519.66648371013
802741239,pandastic007,Adaptive-layer-Toyama-architecture,"An addition to the architecture of the current SOTA model (on MAESTRO dataset) in piano music to note transcription. In this model, there is a piano classifier at the beginning along with main model with adaptive layers based on the piano type. For my thesis paper ""Research on Machine Learning Methods for Audio to Music Notes Transcription""",https://github.com/pandastic007/Adaptive-layer-Toyama-architecture,14,0,0,0,0,1,6,5,5.333333333333333,0,0,0,0,0,19.0,794.5055787671254,3.66511544011544,10935.57243339142
198373336,dsbyprateekg,FaceDetection,"OpenCV’s deep learning face detector is based on the Single Shot Detector (SSD) framework with a ResNet base network. When using OpenCV’s deep neural network module with Caffe models, you’ll need two sets of files:The .prototxt file(s) which define the model architecture (i.e., the layers themselves) and The .caffemodel file which contains the weights for the actual layers.",https://github.com/dsbyprateekg/FaceDetection,9885,1,1,0,0,0,2,5,4.5,0,0,0,0,0,0.0,94.98912768906057,4.375,432.8192344168166
480864665,Almlett,HOBBY-ApiGatewayEventSourcing,,https://github.com/Almlett/HOBBY-ApiGatewayEventSourcing,48,0,0,0,0,1,54,5,3.703703703703704,0,0,0,0,0,9.444444444444445,26.66020896056438,0.3112631195964529,35.54963391562748
325447409,Orion751,events-generator,A script to automate the creation of calendar events from online sources,https://github.com/Orion751/events-generator,2,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
835639405,Abiorh001,module_import_checker,"The Modular Monolith Import Checker is a Python utility designed to enforce modular boundaries within your codebase. It ensures that modules in a modular monolith architecture do not import each other inappropriately, maintaining clear module boundaries and a clean architecture.",https://github.com/Abiorh001/module_import_checker,21,1,1,0,0,1,4,5,1.5,0,0,0,0,0,6.75,9.513436951252569,0.5,19.026873902505137
851610115,alanmmolina,colmeia,A sweet demonstration of Hexagonal Architecture with Python in a buzzing hive!,https://github.com/alanmmolina/colmeia,18,0,0,0,0,1,17,5,1.411764705882353,1,1,0,1,3,4.294117647058823,6.270937518683112,0.1443850267379679,15.392301182222184
862205048,ArtemVoropay,OTUS_HW,OTUS - Microservice Architecture,https://github.com/ArtemVoropay/OTUS_HW,9727,0,0,0,0,1,151,7,3.4768211920529803,0,0,1,0,1,3.728476821192053,21.15110077327488,0.7327696310312203,56.55389156961929
907600323,ismaelnjr,domain-driven-design-project,,https://github.com/ismaelnjr/domain-driven-design-project,17,0,0,0,0,1,11,5,2.090909090909091,1,1,1,1,4,7.090909090909091,6.368271277098902,0.3181818181818182,6.506063733436815
559202027,Sudhanshu1304,Unet-In-PyTorch,Different ways to create the Unet Architecture  in PyTorch. A U-shaped architecture consists of a specific encoder-decoder scheme: The encoder reduces the spatial dimensions in every layer and increases the channels....,https://github.com/Sudhanshu1304/Unet-In-PyTorch,27,0,0,0,0,1,2,5,4.0,0,0,0,0,0,26.0,4.754887502163469,0.5,2.3774437510817346
70101196,sesam-io,sesam-cqrs-example,An example that uses Sesam to implement a CQRS application.,https://github.com/sesam-io/sesam-cqrs-example,239,1,1,0,0,19,1,5,4.0,0,0,0,0,0,6.0,4.754887502163469,0.5,2.3774437510817346
658550266,Christiangsn,python-with-cleanArchitecture,,https://github.com/Christiangsn/python-with-cleanArchitecture,8,0,0,0,0,1,1,5,0.0,0,0,0,0,0,1.0,0.0,0.0,0.0
936883979,workflows-guru,hexagonal-architecture,Hexagonal Architecture implementation in Python,https://github.com/workflows-guru/hexagonal-architecture,8,0,0,0,0,1,12,5,1.6666666666666667,1,0,0,1,2,4.0,9.28833627724775,0.2611111111111111,18.52073134920625
237252161,5fcgdaeb,hexagonal_python,Skeleton of an Hexagonal Architecture (Ports and Adapters) in Python,https://github.com/5fcgdaeb/hexagonal_python,1130,0,0,0,0,1,1,5,1.0,0,0,0,0,0,7.0,0.0,0.0,0.0
885858328,Istiyaqueahmad,Machine-Learning-with-Microservices-Architecture,,https://github.com/Istiyaqueahmad/Machine-Learning-with-Microservices-Architecture,340,0,0,0,0,1,16,5,2.875,0,0,0,0,0,2.9375,9.752024523238198,0.4829545454545454,18.50140083740655
183509825,rohitkeshav,code_evaluator,Code evaluation app built on a microservice based architecture,https://github.com/rohitkeshav/code_evaluator,11,0,0,0,0,0,10,5,2.9,0,1,1,0,2,6.6,14.54012492838864,0.36875,17.632175034892008
148929618,joebluems,ZenModelMaintenance,"An open-source stack of python, elasticseach & grafana using a decision tree based on iris data to show how you can detect events that affect performance sooner rather than later.",https://github.com/joebluems/ZenModelMaintenance,10,1,1,0,0,1,2,5,11.5,0,0,0,0,0,0.0,40.8746284125034,1.3541666666666667,110.7021186171967
691419729,jackhmiller,CV_microservice_app,A computer vision application containerized in a microservices architecture with minikube deployment,https://github.com/jackhmiller/CV_microservice_app,59,0,0,0,0,1,10,5,5.0,0,0,0,0,0,5.6,15.338339893541626,0.5613636363636363,24.8317528718429
369997567,sarimurrab,Clean-Architecture-with-Cookiecutter,"Create your own clean architecture project in one go with implementation of REST API with a full Authentication/Authorization Protocols, Dependency Injection and furthermore the Swagger documentation.",https://github.com/sarimurrab/Clean-Architecture-with-Cookiecutter,29,1,1,0,0,1,77,6,0.4675324675324675,1,0,1,1,3,1.1168831168831168,0.8716394317734182,0.0418470418470418,1.7526965075212977
945160597,robinoburka,hexlist,A demo project showcasing the advantages of Hexagonal Architecture.,https://github.com/robinoburka/hexlist,31,0,0,0,0,1,13,5,3.923076923076923,0,0,0,0,0,9.538461538461538,33.07388589882404,0.8814102564102565,36.88066799334974
778827677,aleksa-hubgit,activity-junky-backend,Graduate work on the topic on the implementation of a microservice architecture and the implementation of some important microservice patterns.,https://github.com/aleksa-hubgit/activity-junky-backend,7075,0,0,0,0,1,23,5,4.304347826086956,0,0,1,0,1,13.130434782608695,158.4194154835721,1.4937701257722162,927.1058335595692
966928728,RamonWinkler,Video-to-mp3-converter-service,Microservice Architecture and System Design with Python & Kubernetes,https://github.com/RamonWinkler/Video-to-mp3-converter-service,8730,0,0,0,0,1,1,5,5.0,0,0,0,0,0,0.0,0.0,0.0,0.0
38461945,gotrhythm88,dm-events,Django REST data source for Social Media Challenge,https://github.com/gotrhythm88/dm-events,9992,0,0,0,0,1,1346,11,5.25260029717682,1,0,1,0,2,34.50965824665676,372.73192873144257,2.6341282888213047,3244.444122218628
922283508,me9hanics,aws-amazon-athena-wikipedia-pipeline-example,"Simple AWS pipeline calling the Wikipedia API for top daily pageviews, then uploading processed data to AWS S3 in a medallion architecture style data warehouse - running SQL scripts in Amazon Athena to create the layers.",https://github.com/me9hanics/aws-amazon-athena-wikipedia-pipeline-example,5,1,1,0,0,1,1,5,5.0,0,0,0,0,0,8.0,210.0,2.0,420.0
458954067,hasanozdem1r,burgerzilla-food-order-management,This project is aiming with microservice architecture developing bridge between customers & restaurants to running operations on products.,https://github.com/hasanozdem1r/burgerzilla-food-order-management,716,0,0,0,0,2,36,5,2.111111111111111,0,0,0,0,0,2.7222222222222223,5.113846339771408,0.2393162393162393,5.37490081417657
610600681,ilivy,flowersbasket,Skeleton of microservice architecture with FastAPI + Apache Kafka.,https://github.com/ilivy/flowersbasket,629,0,0,1,0,1,69,5,3.130434782608696,0,0,1,0,1,4.63768115942029,9.364645856360893,0.4415458937198068,21.0012420393929
608813361,ducanhho2296,FastAPI-Servers-Real-time-communication,This repos was created to for practicing and developing skills in building microservices using FastAPI and multiple servers in a distributed architecture.,https://github.com/ducanhho2296/FastAPI-Servers-Real-time-communication,379,3,3,1,0,0,13,5,4.461538461538462,0,0,0,0,0,7.076923076923077,104.14356841143594,1.934353146853147,538.770426476163
819065156,thomas-chiang,fastapi_clean_architecture,,https://github.com/thomas-chiang/fastapi_clean_architecture,14,0,0,0,0,1,20,5,3.3,1,1,0,1,3,6.75,27.07933569468833,0.3532258064516129,34.712857843403945
289394483,sutterlaird,opinball,Open Pinspot for Ballrooms (OPinBall) is an open source DMX over Art-Net lighting controller designed to make it easier to pinspot centerpieces for banquet functions in ballrooms.,https://github.com/sutterlaird/opinball,112,1,1,0,0,1,12,5,3.4166666666666665,0,0,0,0,0,17.5,187.40814468844223,2.040244928964441,1385.7173045873935
820488006,Yash-op7,Video-to-MP3-converter-microservices-project,"Developed a video to MP3 converter application using a microservices architecture with distributed services for authentication, conversion, gateway, and notifications.",https://github.com/Yash-op7/Video-to-MP3-converter-microservices-project,13909,0,0,0,0,1,2035,18,8.182800982800982,1,0,1,1,3,49.646191646191646,554.6222758702204,3.759673214070637,5318.515920105287
588161028,acurtido,microservices_with_django,Our project is an e-commerce marketplace for online courses and physical products. We will be building it using microservices architecture.,https://github.com/acurtido/microservices_with_django,97,2,2,0,0,0,431,5,2.3155452436194897,1,0,0,0,1,2.5846867749419955,7.258394321275835,0.2049355291747671,23.90367831091581
557034751,Hespius,clean-architecture-python,,https://github.com/Hespius/clean-architecture-python,9,0,0,0,0,1,10,5,1.6,1,0,0,1,2,1.8,0.0,0.0,0.0
568934438,StephanStu,Refactoring-a-Three-Tier-Application-into-Microservices,"The application under consideration is UdaConnect, Project #2 of Udacity's Cloud Native Application Architecture Nanodegree. This is my solution for this project.",https://github.com/StephanStu/Refactoring-a-Three-Tier-Application-into-Microservices,260,0,0,0,0,1,38,5,4.447368421052632,0,0,1,0,1,4.368421052631579,8.823606182567891,0.4661654135338346,14.508199819801057
626775620,tmwalter98,knative-slack-bolt,Slack Bolt application built on Knative Serving to manage and relay product inventory tracking notifications.  This project leverages Knative-eventing Kafka source with Cloud Events to efficiently manage and relay notifications.,https://github.com/tmwalter98/knative-slack-bolt,146,0,0,1,2,1,6,5,6.833333333333333,1,0,0,0,1,13.5,88.07652085425798,1.7956140350877192,292.6104798192428
974284802,Sujal-Shrivastav,ANN-from-Scratch,"This project implements an Artificial Neural Network (ANN) from scratch to classify the Iris dataset. It includes a multi-layer architecture with ReLU activation, backpropagation, and gradient descent for training. The model's performance is evaluated with a confusion matrix, and the training process is visualized with a loss curve.",https://github.com/Sujal-Shrivastav/ANN-from-Scratch,82,0,0,0,0,1,4,5,3.25,1,0,0,0,1,3.5,148.2938193444087,2.7151098901098907,367.9704094951665
908704187,Vashkatsi,food-ordering-system,"Microservices: Clean Architecture, DDD, SAGA, Outbox & Kafka",https://github.com/Vashkatsi/food-ordering-system,202,1,1,0,0,1,31,5,2.064516129032258,1,1,0,1,3,4.387096774193548,3.318541209881825,0.2177419354838709,3.363862955079893
884107244,sakku116,fastapi-ecommerce-restapi,E-commerce app backend - FastAPI with Clean Architecture,https://github.com/sakku116/fastapi-ecommerce-restapi,185,2,2,1,0,2,80,5,4.4875,1,0,1,0,2,10.3125,49.795949757507415,0.9382960128230464,176.97550355779123
163969366,AlanDonohoe,CleanArchitecturePython,,https://github.com/AlanDonohoe/CleanArchitecturePython,17,0,0,0,0,0,9,5,2.0,0,0,0,0,0,1.4444444444444444,8.05943638927244,0.3333333333333333,17.052686846664614
527672068,sgomez,fastapi-hexagonal-demo,FastAPI hexagonal architecture demo,https://github.com/sgomez/fastapi-hexagonal-demo,129,3,3,1,0,0,51,6,3.6666666666666665,1,1,0,1,3,4.901960784313726,5.078346260971645,0.168954248366013,14.10105815335321
73715267,waveaccounting,event-sourcing-example,,https://github.com/waveaccounting/event-sourcing-example,62,3,3,0,0,57,22,5,1.6363636363636365,0,0,1,0,1,4.863636363636363,2.349384366885802,0.0909090909090909,1.924692183442901
491593550,LaxmanMaharjan,Microservice-Architecture,Implementation of microservice architecture,https://github.com/LaxmanMaharjan/Microservice-Architecture,16,0,0,0,0,1,10,5,3.5,0,0,0,0,0,8.7,4.903910001730774,0.425,4.196804688852168
404007843,guytrakht,version-control,this tool is designed to help deploying a microservices architecture software by easily differentiating the current installed version of each service and thus replacing only the necessary  updated services,https://github.com/guytrakht/version-control,2,0,0,0,0,1,1,5,3.0,0,0,0,0,0,0.0,4.754887502163469,0.5,2.3774437510817346
51168236,hubblestack,hubble-salt,"Hubble is a modular, open-source security compliance framework built on top of SaltStack. The project provides on-demand profile-based auditing, real-time security event notifications, automated remediation, alerting and reporting.",https://github.com/hubblestack/hubble-salt,1124,91,91,21,0,28,37,5,6.216216216216216,0,0,0,0,0,55.891891891891895,655.3238439216553,3.94958692776912,5681.453742334652
22726431,pbs,agora-proc,Agora is a batch analyzer of video stream logs. It heavily uses Amazon Web Services and is built using the open-source mrjob python module. It leverages AWS EMR to parallelize the processing of client video player events.,https://github.com/pbs/agora-proc,1150,8,8,0,3,16,11,5,2.636363636363636,0,0,0,0,0,12.636363636363637,81.31098452803799,1.4880006150497953,694.3473682305258
954411597,liuchangyue,Deep-Sparse-Coding-Method,"The novel deep architecture, composed of multi-layer image decomposition and sparse coding, can effectively extract image features and convert them into spike sequences while simultaneously achieving dimensionality reduction of the input data.",https://github.com/liuchangyue/Deep-Sparse-Coding-Method,6,0,0,0,0,1,1,5,11.0,0,0,0,0,0,26.0,159.81495041679716,3.8684210526315783,618.23151871761
966598673,GitUserNameCheck,django_clean_architecture_rest_api,,https://github.com/GitUserNameCheck/django_clean_architecture_rest_api,35,0,0,0,0,1,56,5,3.696428571428572,1,1,1,1,4,6.785714285714286,7.270520541217669,0.2796846011131725,5.988347580798828
772703573,SumitPokale7,Resilient-Microservices-Architecture,,https://github.com/SumitPokale7/Resilient-Microservices-Architecture,2,0,0,0,0,1,5,5,1.0,0,0,0,0,0,3.6,12.411873642892589,0.6,7.756914321878986
448059076,Dantheman1517,CNN-with-most-of-LeNet-architecture-hyperparameters-optimized-with-Optuna,"CNN closely resembling LeNet, but with variable units within layers along with variable learning rate.",https://github.com/Dantheman1517/CNN-with-most-of-LeNet-architecture-hyperparameters-optimized-with-Optuna,7,0,0,0,0,1,1,5,8.0,0,0,0,0,0,12.0,220.0,4.833333333333333,1063.3333333333333
970911997,neginfarhadnejad,BookShop_WhispersOfWord,"Online Bookstore Microservices Project using FastAPI, React & Docker. Includes IAM (user auth & JWT), Media Service (file handling), Core Service (book catalog, orders), API Gateway & responsive Frontend. Built on Clean Architecture principles.",https://github.com/neginfarhadnejad/BookShop_WhispersOfWord,11,0,0,0,0,1,9,5,3.2222222222222223,1,1,1,1,4,3.7777777777777777,10.790476390411332,0.5,19.97510486443644
204654765,thunlp,TLNN,"Source code for EMNLP-IJCNLP 2019 paper ""Event Detection with Trigger-Aware Lattice Neural Network"".",https://github.com/thunlp/TLNN,75,74,74,17,1,9,27,5,5.333333333333333,1,0,0,0,1,42.77777777777778,897.4787879060718,4.68962235007318,8517.627588792155
601850632,LHJMurr,Neural-Networks-from-Scratch,"A scalable neural network architecture written, from scratch, in python with the help of Numpy. Currently, it only has implementations of select activation/cost functions and densely connected layers, but it could be given additional functionality.",https://github.com/LHJMurr/Neural-Networks-from-Scratch,4,0,0,0,0,1,1,5,2.0,0,0,0,0,0,84.0,1527.353191174633,7.783783783783784,11888.58700157552
860161391,GustavoLuizaga,Hexagonal-Architecture,Example hexagonal architecture Python,https://github.com/GustavoLuizaga/Hexagonal-Architecture,25,0,0,0,0,1,21,5,1.5238095238095235,1,1,1,1,4,2.619047619047619,1.964983928880496,0.119047619047619,1.625349107297391
412740686,mahadi22,Collection-of-Script,This Repo are for Hacktoberfest Event on any year. Participated by contributing to any Open Source project on GitHub!,https://github.com/mahadi22/Collection-of-Script,232,7,7,15,2,1,16,5,0.9375,0,0,0,0,0,3.9375,169.9996699576416,2.8385290198653683,767.3666869014553
961045392,alisharify7,user-service-management,user-managment FastAPI service  for microservice architecture,https://github.com/alisharify7/user-service-management,360,1,1,0,0,1,26,5,4.5,1,0,0,0,1,5.653846153846154,18.84627263159788,0.4760989010989011,47.534214141196976
975238768,archiesingla,microservices_architecture,,https://github.com/archiesingla/microservices_architecture,4,0,0,0,0,1,2,5,2.5,0,0,0,0,0,10.5,137.93326494693324,2.7976190476190474,383.7428838024747
392240242,Hsword,Lasagne,Lasagne: A Multi-Layer Graph Convolutional Network Framework via Node-aware Deep Architecture [TKDE 2021],https://github.com/Hsword/Lasagne,6153,1,1,1,0,1,2,5,6.5,0,0,0,0,0,12.0,178.42576247924848,3.002415458937198,567.0590706403088
440998877,djsincla,ds_sdwan_events,VMware® SD-WAN VeloCloud Orchestrator to Splunk App. This source has been submitted to Splunk for inclusion in SplunkBase.,https://github.com/djsincla/ds_sdwan_events,419,1,1,3,0,1,29,5,5.862068965517241,0,0,1,0,1,61.44827586206897,702.9389547177536,4.421256599343455,6690.940381577036
965223582,jhonticonachambi,domain-driven-design,,https://github.com/jhonticonachambi/domain-driven-design,131,0,0,0,0,1,2,5,1.5,0,0,0,0,0,21.5,84.12871113600806,2.723684210526316,458.2800843461493
794316227,manymetrics,manymetrics,An open-source event tracking infrastructure based on AWS,https://github.com/manymetrics/manymetrics,523,7,7,0,4,2,4,5,6.25,0,0,0,0,0,21.0,167.21557951726732,2.0703125,329.2222110176843
853909276,mo-hamedaziz,mp4-converter-microservices-architecture,"A Python-based MP4 to MP3 converter API built using a microservices architecture and distributed systems principles. The project leverages Kubernetes for container orchestration, RabbitMQ for message queuing, MongoDB for database management.",https://github.com/mo-hamedaziz/mp4-converter-microservices-architecture,57,0,0,0,0,1,15,5,3.2,0,0,0,1,1,2.8,14.446701636412955,0.7005698005698006,35.9875787948963
506136890,leonsusanto38,Microservices-Portfolio,Personal Microservices Portfolio for Service Oriented Architecture Assignment,https://github.com/leonsusanto38/Microservices-Portfolio,4324,0,0,0,0,1,27,5,2.814814814814815,0,0,0,0,0,7.814814814814815,37.00998168870359,0.5118055555555555,65.96681167394435
918543439,MustafaYagci,Kubernetes-e2e-application-deployment,Microservice Architecture for Phonebook Web Application (Python Flask) with MySQL using Kubernetes.,https://github.com/MustafaYagci/Kubernetes-e2e-application-deployment,537,0,0,0,0,1,2,5,3.0,0,0,0,0,0,16.0,229.24980643862077,1.880434782608696,712.6753832138519
620115475,AdityaPunetha,Microservice-Architecture-and-System-Design,"Microservice architectures and distributed systems using Python, Kubernetes, RabbitMQ, MongoDB, mySQL.",https://github.com/AdityaPunetha/Microservice-Architecture-and-System-Design,9,0,0,0,0,1,8,5,2.5,0,0,0,1,1,3.75,23.859188075163534,1.0049715909090908,54.81639940537602
961384482,OmarKhalil10,UdaConnect-Cloud-Native-Application-Architecture,🛰️ UdaConnect – Scalable Microservices Platform for Real-Time Location Sharing,https://github.com/OmarKhalil10/UdaConnect-Cloud-Native-Application-Architecture,424,0,0,0,0,1,24,5,4.416666666666667,0,0,0,0,0,3.1666666666666665,5.877765184335715,0.3416666666666666,8.33241445630487
771829968,juandaospina,courses-api,API for student registration to courses and authentication (JWT) - FastAPI - Hexagonal Architecture,https://github.com/juandaospina/courses-api,4,0,0,0,0,1,5,5,2.2,1,0,0,0,1,1.2,0.9509775004326938,0.1,0.4754887502163469
855786311,miteshp2110,NotesService,This is notes Service which is a part of microservice architecture,https://github.com/miteshp2110/NotesService,11,0,0,0,0,1,8,5,2.5,0,1,1,0,2,6.375,44.063513502412256,0.5,55.73619807448964
670017852,DGCK81LNN,obs-custom-browser-events.py,Custom JavaScript events for OBS Studio browser sources,https://github.com/DGCK81LNN/obs-custom-browser-events.py,200,6,6,0,0,1,1,5,2.0,0,0,0,0,0,19.0,101.95026032264605,2.1333333333333333,217.4938886883116
891318746,FazlulAyanKoushik,micro-service-fast-APIs,"Learn about software system design and microservices. This course is a hands-on approach to learning about microservice architectures and distributed systems using Python, Kubernetes, RabbitMQ, MongoDB, mySQL.",https://github.com/FazlulAyanKoushik/micro-service-fast-APIs,7,0,0,0,0,1,1,5,6.0,0,0,0,0,0,15.0,25.26619429851844,1.0,25.26619429851844
795175902,mawedi,Seeds-Analysis,Clean Architecture,https://github.com/mawedi/Seeds-Analysis,14,0,0,0,0,1,4,5,2.75,1,0,0,0,1,3.75,0.0,0.0,0.0
955242136,GiulioSurya,xgb-bike-predictor,"Modular and production-ready Python pipeline for preprocessing, training, and deploying an XGBoost regressor — designed for clean architecture, not business-specific modeling.",https://github.com/GiulioSurya/xgb-bike-predictor,846,0,0,0,0,1,6,5,5.833333333333333,0,0,0,0,0,31.5,190.2401408625645,2.144996476391825,988.85486871395
847064907,munazzaz,Online-Mart-Microservices-Architecture-Project,,https://github.com/munazzaz/Online-Mart-Microservices-Architecture-Project,306,0,0,1,0,1,62,5,3.290322580645161,1,0,0,0,1,3.4516129032258065,19.261523234157124,0.4779387437357076,66.45324212407644
615653051,TheAbhilash23,SGB_Backend,This repository contains a web application project based on microservice architecture.,https://github.com/TheAbhilash23/SGB_Backend,5011,0,0,0,0,1,146,5,1.9383561643835616,1,0,0,0,1,1.910958904109589,1.679472204930785,0.107428245270711,2.014161261915794
864988864,codewithmike01,Ecommerce-server,"using _**microservices architecture**_. The app should feature services like user management, product catalog, order processing and more, and use Docker for containerization.",https://github.com/codewithmike01/Ecommerce-server,5033,0,0,0,0,1,572,10,7.666083916083916,1,1,1,0,3,44.75874125874126,512.4880419523074,3.7124277799496967,5033.637211587097
735993527,SerCap98,fastapi_proyecto,"Proyecto de API en Python con FastAPI siguiendo los principios de Domain-Driven Design (DDD) y Test-Driven Development (TDD). Esta API está diseñada para ser altamente modular y escalable, siguiendo las mejores prácticas de arquitectura de software. Utiliza Docker para el despliegue y administración de contenedores.",https://github.com/SerCap98/fastapi_proyecto,210,0,0,0,0,1,162,5,6.197530864197531,1,0,0,0,1,9.716049382716047,60.85409909444058,0.9909587746394184,199.8559022413436
835977119,brianroytman,fast-api-cqrs-todo-app,,https://github.com/brianroytman/fast-api-cqrs-todo-app,9,0,0,0,0,1,13,5,4.0,1,1,0,1,3,6.0,0.8534413465421611,0.0769230769230769,0.4267206732710805
798922930,igor-mauricio,PLC-Sensor-Domain-Driven-Design,,https://github.com/igor-mauricio/PLC-Sensor-Domain-Driven-Design,56,0,0,0,0,1,47,5,3.1702127659574466,1,1,0,1,3,7.0212765957446805,21.07208668372424,0.5209304289091522,36.953293751811565
735356002,harpiechoise,Video-Converter,A simple microservices architecture to convert videos to mp3.,https://github.com/harpiechoise/Video-Converter,9,1,1,0,0,1,9,5,2.888888888888889,0,0,0,0,0,11.22222222222222,55.7544002548437,1.4146214896214897,94.36540808488854
831482852,Abd-elr4hman,ModularMonolith-to-MicroServices,,https://github.com/Abd-elr4hman/ModularMonolith-to-MicroServices,2,0,0,0,0,1,13,5,1.3846153846153846,0,0,0,0,0,1.6923076923076923,0.0,0.0,0.0
909630630,sanketrs,implementation-of-modern-data-engineering-architecture-with-fabric_analytics,"Building a next-generation hybrid data pipeline architecture that combines the power of Microsoft Fabric, Azure Cloud, and Power BI. This pipeline is engineered to tackle the challenges of real-time data ingestion, multi-layered processing, and analytics, delivering business-critical insights.",https://github.com/sanketrs/implementation-of-modern-data-engineering-architecture-with-fabric_analytics,33,1,1,0,0,1,13,5,3.0,0,0,0,0,0,10.153846153846152,69.95521703098778,0.7858627858627858,490.4160727130732
638051185,subhamay-cloudworks,0001-tarius-cft,AWS Serverless Real Time Data Load to DynamoDB using Python Lambda and S3 Event Source Mapping and creating the stack using AWS CloudFormation.,https://github.com/subhamay-cloudworks/0001-tarius-cft,29,1,1,0,0,0,1,5,8.0,0,0,0,0,0,34.0,134.671829503467,3.0,404.015488510401
379071566,ArnaudSene,clean_architecture,,https://github.com/ArnaudSene/clean_architecture,19,0,0,0,1,1,26,5,1.3076923076923077,0,0,1,0,1,1.8846153846153848,6.455170902550861,0.1153846153846153,12.361700939467475
612533093,LJlkdskdjflsa,fastapi-template,fastapi template with layer architecture,https://github.com/LJlkdskdjflsa/fastapi-template,92,0,0,0,0,1,12,5,0.8333333333333334,1,0,1,0,2,0.75,1.5572046726239703,0.0833333333333333,0.7786023363119852
675749817,vramakrishnaparjanya,microservices-with-fastapi,"The project demonstrates a microservices architecture using FastAPI and Redis Streams. It showcases a modern approach to developing asynchronous, scalable, and resilient systems using RESTful APIs and event-driven communication.  This repository complements the Medium article.",https://github.com/vramakrishnaparjanya/microservices-with-fastapi,417,0,0,0,0,1,6,5,3.6666666666666665,0,0,0,0,0,4.333333333333333,33.189467759155086,0.9365079365079364,42.85912509585154
747937342,PedroGuilhermeSilv,django-clean-architecture,,https://github.com/PedroGuilhermeSilv/django-clean-architecture,117,0,0,0,0,1,8,6,0.75,1,0,0,0,1,0.5,0.0,0.0,0.0
885087913,jovialpala,Hello-Kitty-Dream-Village-Calculator,"The HKDV Calculator estimates an item's projected and community value based on its rarity, source, age, and demand. Users input the item’s rarity (Super Rare, Rare, Common), source (Event, Limited-Time, Regular), time factor, and supply-demand factor. The program calculates both projected and community values and repeats for multiple items.",https://github.com/jovialpala/Hello-Kitty-Dream-Village-Calculator,4,1,1,0,0,1,1,5,2.0,0,0,0,0,0,0.0,181.11039140121423,2.4761904761904763,448.4638263268163
221878308,alex-grover,hexagonal-architecture-python,An example backend implementing Hexagonal Architecture in Python using Flask and SqlAlchemy.,https://github.com/alex-grover/hexagonal-architecture-python,34,164,164,17,0,5,32,5,2.59375,1,0,0,1,2,3.5,10.474349116355652,0.1679398148148148,7.201618768891471
407590061,qu3vipon,drf-service-layer,Simple package which supports service-layered architecture for Django REST Framework.,https://github.com/qu3vipon/drf-service-layer,40,19,19,1,1,2,22,5,2.272727272727273,0,0,0,0,0,4.909090909090909,5.57221332852017,0.2575757575757575,4.29658151840338
898026833,FerasTamer,autonomous-line-following-traffic-aware-robot,"A low-cost, intelligent robotic platform demonstrating autonomous navigation, traffic sign recognition, and line-following capabilities using YOLO V8, embedded systems, and multi-layer communication architecture.",https://github.com/FerasTamer/autonomous-line-following-traffic-aware-robot,13,1,1,0,0,1,4,5,3.25,0,0,0,0,0,2.75,66.78781579358568,1.225,289.2303741771676
433640176,mariacastrotorres,Project_Layered_Architecture,Proyecto final para la materia de arquitectura de software,https://github.com/mariacastrotorres/Project_Layered_Architecture,3306,0,0,3,0,1,2,5,4.5,0,0,1,0,1,8.5,53.65544840314867,1.125,78.10566326893614
39638053,datawire,bakerstreet,Baker Street is a HAProxy based routing engine for microservice architectures,https://github.com/datawire/bakerstreet,628,226,226,18,3,36,11,6,1.3636363636363635,0,0,0,0,0,3.909090909090909,29.19533028756273,0.7968102073365231,79.26196769426627
250484567,NerLOR,owinec,An open-source log collector for collecting logs from Windows Event Forwarding,https://github.com/NerLOR/owinec,142,8,8,2,1,2,5,5,5.0,0,0,0,0,0,74.0,843.7555621014895,6.226393705661999,8034.201741241352
456991967,ichdamola,Technical_challenge,Building a RESTFUL API services using Microservices architecture.,https://github.com/ichdamola/Technical_challenge,25,0,0,0,0,1,21,5,1.5714285714285714,0,0,0,0,0,0.4285714285714285,1.1321160719436831,0.119047619047619,0.5660580359718416
864011598,InterviewAndHealth,Microservices-Backend-FastAPI-Base,Base for the FastAPI Microservice Architecture Backend for the Mock Interview and Mental Health Platform,https://github.com/InterviewAndHealth/Microservices-Backend-FastAPI-Base,12,0,0,0,0,0,21,5,2.6666666666666665,1,1,1,0,3,2.8095238095238093,1.238095238095238,0.1507936507936507,1.1904761904761905
844347401,caiotomich,clean-architecture-study-with-flask,,https://github.com/caiotomich/clean-architecture-study-with-flask,33,0,0,0,0,1,31,5,2.5161290322580645,1,1,1,1,4,6.258064516129032,4.801135166543386,0.2661290322580645,4.735188398352562
215970632,pureone-tcy,clean-architecture-python,Python and clean architecture sample repository.,https://github.com/pureone-tcy/clean-architecture-python,18,0,0,0,0,1,11,5,1.181818181818182,1,1,1,0,3,3.4545454545454546,1.4876843615091162,0.1363636363636363,1.2715531114107768
956015090,SOULEYMANEHAMANEADJI,clean-fastapi-v1,Clean Architecture Fast API,https://github.com/SOULEYMANEHAMANEADJI/clean-fastapi-v1,23,0,0,0,0,1,8,5,5.125,0,0,0,0,0,13.0,91.86145935572132,1.6535048285048286,234.47571319838192
453819037,paulorodriguesxv,webauthn-demo,WebAuthn and Clean Architecture demonstration,https://github.com/paulorodriguesxv/webauthn-demo,40,0,0,0,0,1,17,6,3.764705882352941,1,1,1,1,4,2.764705882352941,1.0155683827347295,0.1470588235294117,0.8757187503181573
230939114,boukeversteegh,magnum-sal-kata-python,Trying out https://github.com/Sch3lp/event-sourced-magnum-sal in python,https://github.com/boukeversteegh/magnum-sal-kata-python,6,0,0,0,0,2,3,5,2.6666666666666665,0,0,0,0,0,22.33333333333333,245.5560001175279,3.756624510689552,1199.1986396366729
147864805,Saavan-Nanavati,Free-Food-Finder,A website that lists free food events happening at UT Austin by scraping 10+ web sources,https://github.com/Saavan-Nanavati/Free-Food-Finder,6362,0,0,0,0,0,23,6,4.913043478260869,1,0,1,0,2,5.565217391304348,61.43536940671121,1.197109621880789,204.1627068634525
494041998,jujumilk3,fastapi-clean-architecture,Base FastAPI Project to create general api.,https://github.com/jujumilk3/fastapi-clean-architecture,578,397,397,84,0,5,49,5,4.122448979591836,1,1,1,0,3,5.204081632653061,12.906431535701214,0.4269850797461841,29.96646428569864
552382092,Yassine-cheffai,clean_architecture,,https://github.com/Yassine-cheffai/clean_architecture,6365,0,0,0,0,1,42,5,2.0,0,0,1,0,1,6.119047619047619,16.54317958817145,0.3878536922015182,49.26174225476044
580036539,vishalsingh17,ArchitecturePatternsWithPython,"This repository contains code from the guide Architecture Patterns with Python, Enabling Test-Driven Development, Domain-Driven Design, and Event-Driven Microservices.",https://github.com/vishalsingh17/ArchitecturePatternsWithPython,20,0,0,0,0,1,39,5,3.1794871794871797,1,0,0,1,2,7.461538461538462,22.374492921538675,0.5662712903424978,51.36805335623699
958259706,AndersonFilho14,CleanArchitecture,Estudando Clean Architecture seguindo o Lhama,https://github.com/AndersonFilho14/CleanArchitecture,77,0,0,0,0,1,40,5,1.125,1,0,1,1,3,3.075,7.090997162138619,0.18,5.97664967477793
887615608,surajkadapa,memstream,"Distributed microservice architecture for a custom kv-store, with logging.",https://github.com/surajkadapa/memstream,64,0,0,0,0,1,8,5,8.625,0,0,0,0,0,29.125,185.25169951517427,3.464196654040404,813.0383011734657
486969086,Kahumbi,News-Article,News Articles is a privatised application that is intended for a select audience to preview their most anticipated news topics in the event they want a brief catch up of the news they had missed. Users can read their news sources in different title topics as well as view images and also have a brief description of the news they want and  other contents by clicking a link that takes them to the entire news article.,https://github.com/Kahumbi/News-Article,27,0,0,0,0,1,9,5,1.8888888888888888,1,0,0,0,1,1.8888888888888888,1.0566416671474377,0.1111111111111111,0.5283208335737188
128178043,DennisMatveyev,nameko-microservices,Simple example of microservice architecture app written with nameko and Flask ,https://github.com/DennisMatveyev/nameko-microservices,10,0,0,1,8,0,6,5,0.8333333333333334,0,1,1,0,2,0.5,0.0,0.0,0.0
836312485,vedaka1,kafka-chat,A project with a microservice architecture on FastAPI,https://github.com/vedaka1/kafka-chat,375,1,1,0,0,1,127,7,4.291338582677166,1,1,1,1,4,5.425196850393701,5.815461609451473,0.2558070866141732,9.82575468973417
929728318,GitRon,tettenhall,Historical browser game using a CQRS architecture,https://github.com/GitRon/tettenhall,3317,3,3,0,4,1,301,6,2.6312292358803986,1,1,1,0,3,2.6312292358803986,7.530682098859368,0.2415121851852357,29.699053482338755
948019362,AtahanPoyraz,Django-Microservice,A fully scalable microservice architecture built with Django REST Framework (DRF).,https://github.com/AtahanPoyraz/Django-Microservice,48,2,2,0,0,1,57,5,2.333333333333333,0,0,0,0,0,2.929824561403509,6.54839985353753,0.2685045948203843,11.24487419216712
968695099,Wxysnx,ai-memory-system,"A high-performance, distributed memory management system for LLM agents built with LangGraph, LangChain, Ray, and vLLM. Features multi-layer memory architecture, semantic retrieval, and event-driven processing for enhanced AI conversation capabilities.",https://github.com/Wxysnx/ai-memory-system,38,6,6,3,0,1,17,5,6.529411764705882,0,1,0,0,1,18.235294117647054,71.47389467256941,1.5671068262763763,164.6873443821036
650932743,PatrickKalkman,python-streamfinity-cqrs,A repository that contains all the examples that go with a Medium article called Understanding CQRS: A Pythonic Approach to Command-Query Separation,https://github.com/PatrickKalkman/python-streamfinity-cqrs,4732,2,2,2,0,1,26,5,3.4615384615384617,0,0,0,0,0,4.346153846153846,26.21012085283012,0.912018430287661,62.33812527741259
968740848,whoisdon,HandSign,"Sistema de reconhecimento de gestos com Python e MediaPipe, estruturado em Clean Architecture, desenvolvido para fins educacionais no Projeto Aplicado da graduação.",https://github.com/whoisdon/HandSign,17,6,6,0,0,1,10,5,2.3,1,0,0,1,2,4.9,28.34383182346553,0.9655388471177944,57.26664277363383
790964492,pdrleal,Clean_Architecture_Python_Template,Clean Architecture Python Template,https://github.com/pdrleal/Clean_Architecture_Python_Template,46,0,0,0,0,1,52,5,2.1346153846153846,1,1,1,1,4,2.9615384615384617,4.451001248665756,0.0902366863905325,11.128851244169844
937775465,AlexandrosKyriakakis,apistresstesting,Thesis 📝: Performance Investigation of Various Microservice Architectures,https://github.com/AlexandrosKyriakakis/apistresstesting,6452,1,1,0,0,1,41,5,5.682926829268292,1,0,1,0,2,4.121951219512195,44.03271457138315,0.5896917481320563,104.49054578656624
857813673,highofolly,shellui,library simplifies the creation of TUI (Text User Interface) in the terminal. Offers a clean and intuitive architecture to help you build interactive applications effortlessly,https://github.com/highofolly/shellui,122,1,1,0,0,1,14,5,3.142857142857143,1,0,0,0,1,19.928571428571427,80.94289072975096,1.938017206882753,557.8801746091904
121146067,dystopiaxyz,Convolutional_autoencoder,"An autoencoder is used for data, image compression and also image denoising. The architecture of neural network is such that the input and output layer is same. We want the hidden layer to learn the representations of the compressed input images. Although their applications are mostly used in image denoising.",https://github.com/dystopiaxyz/Convolutional_autoencoder,3,1,1,0,0,0,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
77648740,geeknam,midimoco,Django - Event sourcing - CQRS - Serverless,https://github.com/geeknam/midimoco,983,5,5,1,1,1,27,5,2.185185185185185,0,0,0,0,0,3.592592592592593,4.692183192440474,0.2037037037037037,4.72326038158383
189304055,ttsakai,til_clean_architecture,learning histroy of clean architecture in python,https://github.com/ttsakai/til_clean_architecture,17,0,0,0,1,0,2,5,1.5,1,0,0,0,1,7.5,43.39979500497118,0.5,21.69989750248559
667245360,SMati000,CleanArchitecture,Simple Clean (layered) Architecture example,https://github.com/SMati000/CleanArchitecture,349,0,0,0,0,1,11,5,3.8181818181818175,1,1,0,1,3,6.909090909090909,13.59535227469406,0.4923076923076923,16.866136155262243
817665646,bejoygm,calendly-like,An example calendar blocking APIs using FastAPI and clean architecture,https://github.com/bejoygm/calendly-like,250,0,0,0,0,1,73,5,3.328767123287671,1,1,1,0,3,4.054794520547945,12.165799636043502,0.3218826835265191,24.002505194574184
965534201,ahmadalsharef994,fastapi-postgres-boilerplate,"Production-Ready Starter Template, FastAPI + PostgreSQL boilerplate with Docker, GitHub Actions, and clean architecture.",https://github.com/ahmadalsharef994/fastapi-postgres-boilerplate,52,1,1,0,0,1,4,5,2.25,1,0,1,1,3,0.75,0.0,0.0,0.0
966922573,Aabhaas9413,EventSourcingUserService,A service with event sourcing architecture with python and postgress.,https://github.com/Aabhaas9413/EventSourcingUserService,2,1,1,0,0,1,1,5,0.0,0,0,0,0,0,1.0,4.754887502163469,0.5,2.3774437510817346
851235504,othmane099,hexagonal-architecture-python,Sample Python REST API implemented according to hexagonal architecture.,https://github.com/othmane099/hexagonal-architecture-python,97,1,1,0,0,1,58,6,3.5689655172413794,1,1,1,1,4,8.0,58.668205805323865,0.7401332946971892,247.52864254390985
170302584,flaviogf,promissory_note,Simple promissory note issuance implemented with clean architecture,https://github.com/flaviogf/promissory_note,470,1,1,0,3,0,21,5,3.380952380952381,0,0,0,0,0,14.761904761904765,4.480366921684479,0.2037037037037037,3.845490913422012
808201659,softUai,pythonTemplate,This project is a python language template implemented using an architecture in three layers.,https://github.com/softUai/pythonTemplate,33,0,0,0,0,0,5,5,1.2,0,0,1,0,1,6.8,17.556249269891723,0.26,13.75970616578357
829056946,aysegulkocak1,-NumPy-CNN-Implementation-for-Image-Classification,"This repository contains a Python implementation of a Convolutional Neural Network (CNN) for image classification using only NumPy. The CNN architecture includes convolutional layers, ReLU activation, softmax output layer, and basic training and testing routines.",https://github.com/aysegulkocak1/-NumPy-CNN-Implementation-for-Image-Classification,5,1,1,0,0,1,1,5,5.0,0,0,0,0,0,22.0,1017.675665144894,4.761904761904762,4846.074595928067
499932903,Ik-Emmanuel,Event-driven-microservice-architecture,"Python microservices with Django, Flask, Docker and RabbitMQ",https://github.com/Ik-Emmanuel/Event-driven-microservice-architecture,19,0,0,0,0,1,41,5,2.2195121951219514,0,0,0,0,0,1.048780487804878,1.0895558625561854,0.0792682926829268,0.6722008145341065
313135710,robbidog,cqrsPythonExercises,,https://github.com/robbidog/cqrsPythonExercises,652,11,11,10,0,3,329,6,3.762917933130699,1,1,1,1,4,5.249240121580547,35.58935967985632,0.3784194528875379,103.27919272785228
140248433,snow6oy,mssaga,Architectural Investigation of the Microservices Saga Pattern ,https://github.com/snow6oy/mssaga,11,0,0,0,0,1,3,5,0.6666666666666666,0,0,0,0,0,3.0,22.20263830884656,0.6,39.9647489559238
286225248,hyunsung-kim,py-clean-architecture,Clean architecture,https://github.com/hyunsung-kim/py-clean-architecture,218,0,0,0,0,1,25,5,1.76,1,1,0,1,3,3.16,7.650135002629676,0.3226666666666666,32.12147726998574
813070289,1nikitas,fastapi-clean-architecture-backend-with-mongodb,,https://github.com/1nikitas/fastapi-clean-architecture-backend-with-mongodb,28,0,0,0,0,1,36,5,2.7222222222222223,1,1,1,1,4,3.1944444444444446,6.392310961825228,0.2330246913580247,7.5628892934369
925679434,HerbertHu,LLMERE,"LLMERE-Source code for COLING 2025 paper ""Large Language Model-Based Event Relation Extraction with Rationales""",https://github.com/HerbertHu/LLMERE,825,2,2,0,1,1,23,5,4.695652173913044,0,0,0,0,0,39.869565217391305,588.4872823303456,4.567208199226919,4460.0256428170405
373349363,JiaweiSheng,CasEE,Source code for ACL 2021 finding paper: CasEE: A Joint Learning Framework with Cascade Decoding for Overlapping Event Extraction.,https://github.com/JiaweiSheng/CasEE,2170,80,80,19,13,3,12,5,4.25,1,0,0,0,1,19.166666666666668,298.52333929372145,3.406427007209468,1463.4228809255335
709791211,Nav1Cr0ss,aiohttp-clean-example,Example of aiohttp with Clean Architecture,https://github.com/Nav1Cr0ss/aiohttp-clean-example,43,0,0,0,0,1,83,6,3.180722891566265,1,0,0,1,2,3.963855421686747,4.662603403003791,0.2058232931726908,11.217534460298182
642292829,longyi-xw,python-microservice-framework,A python microservice architecture that I tried to build for the first time.,https://github.com/longyi-xw/python-microservice-framework,21,0,0,0,0,1,34,5,2.794117647058824,1,1,1,0,3,2.8529411764705883,5.171285087210135,0.3088235294117647,8.417240029193023
739469772,vianney-g,events-sourcing-archi-python,Opinionated events sourcing architecture skeleton in Python,https://github.com/vianney-g/events-sourcing-archi-python,4,0,0,0,0,1,1,5,8.0,0,0,0,0,0,36.0,4.754887502163469,0.5,2.3774437510817346
608613869,marcosvs98,cqrs-architecture-with-python,Applying CQRS pattern with Python Fastapi.,https://github.com/marcosvs98/cqrs-architecture-with-python,105,41,41,4,0,1,76,5,2.4342105263157894,1,1,1,1,4,4.197368421052632,4.036243259669273,0.2258771929824561,7.202749606673933
713357679,ceebeel,Template-Py310-CA-CI-CD,Template Python - Clean Architecture - CI/CD (Ruff - Pyright - PyTest),https://github.com/ceebeel/Template-Py310-CA-CI-CD,24,1,1,0,0,1,2,5,0.5,0,0,0,0,0,1.5,4.754887502163469,0.5,2.3774437510817346
754507982,vocaoo,Clean-Architecture-Template,,https://github.com/vocaoo/Clean-Architecture-Template,4,0,0,0,0,1,28,5,1.3571428571428572,1,1,1,0,3,1.8571428571428568,1.9285714285714288,0.0714285714285714,3.857142857142857
516782736,osmariojunior,request_api,Projeto em FastApi que faz Requisições para uma API pública. Um estudo de caso de Design Patterns e Clean Architecture.,https://github.com/osmariojunior/request_api,24,0,0,0,0,1,31,5,1.3225806451612905,1,1,1,1,4,2.193548387096774,10.038938546658851,0.2081885856079404,19.24303247455278
870270435,ProgrammingCharm,simple_browser,Main program for microservice architecture.,https://github.com/ProgrammingCharm/simple_browser,6,0,0,0,0,1,1,5,10.0,0,0,0,0,0,38.0,519.1272112606621,7.733333333333333,4014.5837670824535
781914359,anusha2009,SoftwareArchitecture,"SoftwareArchitecture/LLM - ChatBot integrated with Llama2, Large Language Models for user’s goal in adaptive microservice based IOT architectures.",https://github.com/anusha2009/SoftwareArchitecture,435,0,0,0,0,1,12,5,2.25,0,0,0,0,0,4.833333333333333,48.70596812408821,1.45875597713833,112.584763063108
251534862,Francesco-Chen,cloudmovies,"CloudMovies - A simple application to search movies info and posters, based on a microservices architecture.",https://github.com/Francesco-Chen/cloudmovies,7470,0,0,0,0,1,9,5,3.6666666666666665,0,0,1,0,1,24.88888888888889,127.86286182954636,1.7123034308272809,408.0249276788306
810488989,tawakkal12,Deploying-MS-Architecture-with-Kubernetes,"Deploying MS Architecture with Kubernetes"" focuses on using Kubernetes to deploy, scale, and manage microservices efficiently, ensuring automation and resiliency in distributed systems.",https://github.com/tawakkal12/Deploying-MS-Architecture-with-Kubernetes,558,0,0,0,0,1,2,5,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
108646933,Fortiz2305,cafe,Simple CQRS / Event Sourcing example,https://github.com/Fortiz2305/cafe,15,1,1,0,0,1,13,5,1.4615384615384617,1,0,1,1,3,5.076923076923077,0.1538461538461538,0.0384615384615384,0.0769230769230769
899738974,miragecentury,fastapi_clean_exploration,Exploration of FastAPI usage with Clean Architecture in Mind ,https://github.com/miragecentury/fastapi_clean_exploration,24,0,0,0,0,1,15,5,4.6,0,0,0,0,0,7.933333333333334,13.916799781123766,0.5369047619047619,18.262451539457267
624287700,bekirokutan,Kubernetes-Microservice-Phonebook,Microservice Architecture for Phonebook Web Application (Python Flask) with MySQL using Kubernetes.,https://github.com/bekirokutan/Kubernetes-Microservice-Phonebook,225,0,0,0,0,1,2,5,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
592534552,cmakkaya,Ln-D03-Kubernetes-Microservice-Deployment-of-web_app-Flask-_using-DevOps-Tools,Kubernetes_Project-Microservice-Architecture-for-Phonebook-Web Application-(Python Flask)with-MySQL-using-Kubernetes-Docker-Cloudformation-Git-Github,https://github.com/cmakkaya/Ln-D03-Kubernetes-Microservice-Deployment-of-web_app-Flask-_using-DevOps-Tools,476,2,2,3,0,1,2,5,3.0,0,0,0,0,0,16.0,207.04370695797653,1.619047619047619,538.6313135270698
224500750,wolimaa,hexagonal-python-flaskInjector,Case study to apply a hexagonal architecture with Python and FlaskInjector,https://github.com/wolimaa/hexagonal-python-flaskInjector,24,1,1,0,5,1,19,5,4.157894736842105,1,1,1,1,4,6.315789473684211,15.006422613654763,0.471291866028708,52.73244712509499
931482572,limarios,webapi-start,"Este projeto é uma API base construída com os princípios de Clean Architecture e DDD (Domain-Driven Design), oferecendo uma estrutura modular, escalável e de fácil manutenção. O objetivo é servir como um modelo inicial para o desenvolvimento de APIs profissionais em Python, garantindo boas práticas e uma base sólida para projetos reais.",https://github.com/limarios/webapi-start,70,0,0,0,0,1,34,5,4.264705882352941,1,0,1,1,3,6.941176470588236,27.818568596562137,0.4496437301711135,46.43116914570593
875566070,hanixhk,Online-Mart,"Online Mart API is a scalable, event-driven microservices architecture using FastAPI, Docker, Kafka, and PostgreSQL. It includes services for users, products, orders, payments, and notifications. ",https://github.com/hanixhk/Online-Mart,136,1,1,0,0,1,73,5,3.767123287671233,0,0,0,0,0,5.726027397260274,34.802889825520424,0.341375786907298,35.6135528755135
325826125,Ap3lsin4k,irrational-translator-clean-architecture-example,"76 automated tests! Working with files using pickle, shelve. Playing with strings and dictionaries.",https://github.com/Ap3lsin4k/irrational-translator-clean-architecture-example,132,0,0,0,0,1,56,5,1.5535714285714286,0,0,0,1,1,10.839285714285714,84.12660072528432,0.8068418887248071,195.8719840996052
913949567,kushank-patel,microservices-python-app,Converting mp4 videos to mp3 in a microservices architecture.,https://github.com/kushank-patel/microservices-python-app,3369,0,0,0,0,1,14,5,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
78110109,yoongkang,event_sourcing_example,Event sourcing example for Django,https://github.com/yoongkang/event_sourcing_example,8,8,8,0,1,2,22,5,1.7727272727272727,0,0,0,0,0,0.5,1.2369875853920138,0.1079545454545454,2.022171253724809
865753852,NoManNayeem,EcommLite,EcommLite is a minimal e-commerce platform built using microservices architecture. The main focus is to learn and implement end-to-end microservice architecture with event-driven methods. The project will be divided into two primary services:,https://github.com/NoManNayeem/EcommLite,149,0,0,0,0,1,17,5,2.7058823529411766,1,0,0,0,1,1.9411764705882355,1.118797059332581,0.1176470588235294,0.5593985296662904
611469318,idan441,chat_application,A chat application consisted of multiple microservices with 3-tier architecture made in Python and Javascript,https://github.com/idan441/chat_application,96,1,1,0,0,1,50,5,3.74,0,0,0,0,0,9.66,23.01540097311615,0.6697430340557275,61.26647545292433
136826623,shashidonthiri9,GiftRegistry,Design and implement a responsive web site and scalable web application based on the Service Oriented Architecture(SOA) . Web Services and Microservices  for implementing the SOA.,https://github.com/shashidonthiri9/GiftRegistry,150,0,0,0,0,1,27,5,2.074074074074074,0,0,0,0,0,2.3703703703703702,10.050017329674752,0.1111111111111111,19.061898210933524
961089008,devsecopskb,Clean-Architecture-with-Python,,https://github.com/devsecopskb/Clean-Architecture-with-Python,290,0,0,0,0,1,268,5,4.604477611940299,1,1,1,1,4,15.6455223880597,76.09615672749379,0.998087340465684,201.73857841331235
168427763,likhongomes,API-Hackathon,Team Lab for MicroService Architecture,https://github.com/likhongomes/API-Hackathon,2455,0,0,0,0,1,395,9,6.10632911392405,1,0,1,0,2,45.53924050632912,632.8713650388064,3.779913718700717,6906.277255315919
569226088,e183b796621afbf902067460,c3d3-fastapi-old,Microservice based architecture for C3D3 vault management using FastAPI.,https://github.com/e183b796621afbf902067460/c3d3-fastapi-old,183,0,0,0,0,1,148,8,2.6013513513513518,1,1,1,1,4,2.45945945945946,6.566014659047049,0.1385135135135135,7.005151906925735
941469504,TerraformFoundation,terraform-aws-notifications,Module used to forward events from an sns source to one or more destinatsions,https://github.com/TerraformFoundation/terraform-aws-notifications,1411,0,0,0,0,0,13,5,5.923076923076923,0,0,0,0,0,16.153846153846153,117.7519770983626,1.3175756132412482,385.3920055649396
812332732,vitorjpc10,etl-breweries,"Brewery Data Pipeline - This project implements a data pipeline to fetch, transform, and persist brewery data from the Open Brewery DB API into a data lake, following the medallion architecture (bronze, silver, gold layers). The pipeline is orchestrated using Apache Airflow and runs within Docker containers, coordinated via Docker Compose.",https://github.com/vitorjpc10/etl-breweries,292,1,1,0,0,1,14,7,3.857142857142857,0,0,0,0,0,16.285714285714285,57.80809879650734,1.2142857142857142,96.98452592063944
494744505,AdamHavlicek,fastapi-todo-ddd,FastAPI Python DDD and Clean Architecture Example,https://github.com/AdamHavlicek/fastapi-todo-ddd,190,106,106,21,0,2,102,5,2.9019607843137254,1,1,1,1,4,2.9607843137254903,2.9463515657989747,0.1469421101774043,2.591442409541029
224727654,rahul-aedula95,LAT,"A CQRS (Command Query Responsibility Segregation) design based Log Analysis Tool which utilizes RabbitMQ, SQL , Redis, and Rest to achieve scalable metric computations of custom logs.",https://github.com/rahul-aedula95/LAT,146,0,0,0,0,2,8,5,4.625,0,0,1,0,1,7.0,69.51336251874847,1.7670454545454546,164.6572034018613
922028314,SKT27182,AttenNet,"In this repository, I will implement a Transformer model, including attention layers, encoder-decoder architecture, and the full module, from scratch using PyTorch.",https://github.com/SKT27182/AttenNet,10922,0,0,0,0,1,3,5,5.333333333333333,0,0,0,0,0,48.5,492.3428625411059,6.898351648351648,3743.3402161454674
516093314,omlnaut,rentomatic,"Clean architecture in python, following https://www.thedigitalcatbooks.com/index.html",https://github.com/omlnaut/rentomatic,60,0,0,0,0,1,36,5,2.4444444444444446,1,1,1,0,3,6.388888888888889,36.8930310159218,0.5503577441077441,55.52751368325158
899996508,Araden14,microservices_djangopay,Microservice de facturation et de paiement relié à une architecture orientée événement avec RabbitMQ,https://github.com/Araden14/microservices_djangopay,20,0,0,0,0,1,16,5,2.6875,1,0,0,0,1,1.5,0.2971804688852168,0.03125,0.1485902344426084
881785626,j3rrryy,cloud_storage,Cloud Storage app with microservice architecture. Written using Litestar and gRPC framework,https://github.com/j3rrryy/cloud_storage,1060,0,0,0,0,1,139,5,4.223021582733813,0,0,0,1,1,8.122302158273381,38.06453267335159,0.3517711545049674,43.94202041300799
817749568,dougecomp,clean-architecture-with-python,Project to learn the concepts of clean architecture with python,https://github.com/dougecomp/clean-architecture-with-python,236,0,0,0,0,1,22,5,2.0,0,0,1,0,1,2.772727272727273,6.351231267310156,0.1909090909090909,4.61438529280499
973266164,IhateCreatingUserNames2,Criticality,An advanced cognitive architecture for AI assistants that combines multi-layered memory systems with adaptive criticality assessment.,https://github.com/IhateCreatingUserNames2/Criticality,163,0,0,0,0,1,16,5,7.9375,0,0,0,0,0,75.25,1341.273306971765,7.359169816759558,12971.645274099874
917199662,sokhna00,Rag_system_orchestration,"A Retrieval-Augmented Generation (RAG) system built with FastAPI, Docker, and Kubernetes. This project demonstrates a modular microservices architecture for document retrieval, query embedding, and response generation, with full containerization and orchestration support",https://github.com/sokhna00/Rag_system_orchestration,6,0,0,0,0,1,14,5,2.0,0,0,0,0,0,1.8571428571428568,3.319915392164446,0.1428571428571428,3.319915392164446
850746490,2dope4writingcode,MNIST-neural-network,This repository contains a simple feedforward neural network implemented in Python for classifying handwritten digits from the MNIST dataset. The network architecture consists of a single hidden layer and uses the backpropagation algorithm for training.,https://github.com/2dope4writingcode/MNIST-neural-network,5,1,1,0,0,1,2,5,2.5,0,0,0,0,0,0.5,452.1396749134383,3.633333333333333,2792.5662219461524
629899807,ShubhamSBhat,Microservices-Based-Architecture,,https://github.com/ShubhamSBhat/Microservices-Based-Architecture,63,0,0,1,0,1,8,5,2.375,0,0,0,0,0,5.0,77.36215925978833,0.8888888888888888,83.45344940789236
882455595,Maclovi,clean-architecture-one-file,Implementation of clean architecture in one file,https://github.com/Maclovi/clean-architecture-one-file,9,1,1,0,0,1,1,5,8.0,0,0,0,0,0,28.0,38.03910001730775,3.2,121.72512005538482
73929370,nickciava98,stylus,Stylus OS Layer Software Architecture,https://github.com/nickciava98/stylus,17,0,0,0,0,2,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
511481375,Kurky,EventStoreDB_python,event-sourcing/ Django REST API ,https://github.com/Kurky/EventStoreDB_python,53,0,0,0,0,1,25,5,1.4,0,0,1,0,1,1.24,12.955695431986475,0.21,46.72945174410554
199043730,huanghongqing,microservice1,microservice architecture,https://github.com/huanghongqing/microservice1,2239,0,0,0,4,1,339,12,6.687315634218289,1,0,1,1,3,50.09090909090909,687.1424816679031,3.9339235001310113,7587.557894079001
884834526,noah-milarski,Ecommerce-StoreFront,"The Storefront App is a full-stack e-commerce platform. It is designed to provide a seamless shopping experience for users, with key features like product browsing, cart management, and secure checkout. The project showcases best practices in modern web development, focusing on clean architecture, scalability, and user experience.",https://github.com/noah-milarski/Ecommerce-StoreFront,42,1,1,0,0,1,42,5,1.1666666666666667,0,0,0,0,0,0.6190476190476191,0.1132116071943683,0.0119047619047619,0.0566058035971841
974363994,gmunumel,clean-buckpal-app,Clean Architecture Send Money Project,https://github.com/gmunumel/clean-buckpal-app,72,0,0,0,0,1,60,5,4.45,1,1,0,1,3,5.95,12.701809833998183,0.4304347826086956,21.689255514106623
621791795,BenTalese,clapy,"A powerful, generic tool designed to provide the perfect solution for constructing and invoking clean architecture use cases in Python.",https://github.com/BenTalese/clapy,1215,11,11,0,0,1,33,5,2.787878787878788,0,1,0,0,1,9.363636363636363,40.4432415902215,0.7625148243569296,201.49555059245435
971263005,ismaelcj,ddd_api_example,Example project build with Python :snake: based on the Hexagonal architecture + DDD + CQRS principles.,https://github.com/ismaelcj/ddd_api_example,62,0,0,0,0,1,81,5,2.4814814814814814,1,1,1,1,4,3.802469135802469,5.209830125224316,0.152936571837538,5.382705726778272
416539085,satheler,py-clean-arch,"API in Python with TDD, Clean Architecture, Design Patterns and SOLID principles and AWS Services",https://github.com/satheler/py-clean-arch,51,0,0,0,0,1,35,5,2.142857142857143,1,1,1,1,4,3.2857142857142856,4.635200480806879,0.1357142857142857,3.9259656337377975
129307004,doguhanyeke,distributed,"Designing architecture for web layers, implementing leader election algorithms in highly mobile networks.",https://github.com/doguhanyeke/distributed,7,0,0,1,0,1,3,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
794834847,kandulacharith4,CNN-Implementation-for-MNIST-Digit-Recognition,"In this project, we aim to build a Convolutional Neural Network (CNN) from scratch to classify handwritten digits using the MNIST dataset. We will implement the network architecture, including convolutional layers with ReLU activation, max pooling, and fully connected layers followed by a softmax activation function. ",https://github.com/kandulacharith4/CNN-Implementation-for-MNIST-Digit-Recognition,2,0,0,0,0,1,1,5,7.0,0,0,0,0,0,5.0,39.86313713864836,1.7142857142857142,68.33680652339717
768755321,Leviathat,library,This is a project that can be representated as my approach in implementating Clean Architecture standards following also SOLID principles,https://github.com/Leviathat/library,1,0,0,0,0,1,6,5,3.0,1,1,1,1,4,3.333333333333333,0.0,0.0,0.0
866850860,Zhima-Mochi,whisper-v3-server,"A robust backend server for audio processing, delivering high-accuracy transcription and speaker diarization. Powered by Whisper for speech-to-text and Pyannote for speaker segmentation, wrapped in a clean, maintainable architecture based on Domain-Driven Design (DDD) and Hexagonal Architecture.",https://github.com/Zhima-Mochi/whisper-v3-server,1858,0,0,0,0,1,29,5,3.413793103448276,1,1,1,1,4,7.448275862068965,18.86310426466817,0.6645952164894997,94.39201963167216
323053540,switchelven,python_todo_clean_api,This project manage code related to Python example of clean architectured API,https://github.com/switchelven/python_todo_clean_api,10,0,0,0,0,0,15,5,1.8666666666666667,0,1,0,1,2,6.133333333333334,16.058050272744982,0.5311111111111112,28.88459568714997
971625176,pankeshpatel,clean-architecture,,https://github.com/pankeshpatel/clean-architecture,1,0,0,0,0,1,1,5,1.0,0,0,0,0,0,18.0,84.0,1.0,84.0
540384339,bueroingleuering,ANN_DFT,This example shows a artificial neural network (ANN) to calculate the discrete Fourier transform (DFT) by using the architecture of a sequential layer structure.,https://github.com/bueroingleuering/ANN_DFT,1749,0,0,0,0,1,1,5,4.0,0,0,0,0,0,0.0,579.9740053859864,3.333333333333333,1933.2466846199547
736290822,Amirtheahmed,ddd-cqrs-fastapi,,https://github.com/Amirtheahmed/ddd-cqrs-fastapi,39,5,5,1,0,1,129,7,3.6589147286821695,1,1,1,1,4,4.596899224806202,4.560638732381423,0.2070299437604499,9.25978583464824
916398425,ParsaFouladi,Barmie,Binding Affinity Ranking at the Molecular Initiating Event (BARMIE): An open-source computational pipeline for ecological hazard ranking of endocrine disrupting chemicals.,https://github.com/ParsaFouladi/Barmie,446,0,0,0,0,1,14,5,2.857142857142857,0,0,0,0,0,4.357142857142857,34.062492357316565,1.5200216450216448,83.93411221996624
304982720,serfer2,flask-hexagonal-architecture-api,Simple example of Python Flask API following SOLID and Hexagonal Architecture principles,https://github.com/serfer2/flask-hexagonal-architecture-api,280,60,60,8,0,3,27,5,1.6296296296296295,1,1,0,1,3,3.592592592592593,4.885017818156952,0.2345679012345679,8.046541890147362
482827848,MSC29,clean-architecture-python,A Clean Archtiecture template for a Rest API in python,https://github.com/MSC29/clean-architecture-python,46,48,48,10,0,1,64,5,2.609375,1,1,1,1,4,3.484375,2.8865446114130973,0.0890625,1.8609864426047824
721050154,sinmajidi,Microservices-Communication-with-Redis-Message-Broker-python-,"This example demonstrates a simple microservices architecture using Flask, where two microservices communicate asynchronously through a Redis message broker. ",https://github.com/sinmajidi/Microservices-Communication-with-Redis-Message-Broker-python-,7,0,0,0,0,1,7,5,1.5714285714285714,0,0,0,0,0,3.7142857142857135,7.329211530328495,0.3571428571428571,3.664605765164248
601197142,shobhitgupta01,convert_to_mp3,This project uses microservices architecture for creating a service which converts mp4 to mp3.,https://github.com/shobhitgupta01/convert_to_mp3,4,0,0,0,0,2,1,5,5.0,0,0,0,0,0,9.0,93.45440529575887,3.230769230769231,301.9296171093748
30591989,peternycander,microservice-lbtest,A toy example to use lbtest in a microservice architecture with apache kafka.,https://github.com/peternycander/microservice-lbtest,224,0,0,2,0,0,25,5,1.84,0,0,0,0,0,2.36,16.822125497614874,0.3933176470588235,58.988785038255045
592016107,BartDewancker,tools_aabMicro,aab as microservices architecture,https://github.com/BartDewancker/tools_aabMicro,2731,0,0,1,1,1,41,5,5.512195121951219,0,0,0,0,0,20.341463414634145,176.78740794522002,1.8400507975953029,721.7997578853559
87844437,xy1377660586,Fine-tuning-a-pre-trained-CNN-for-first-year-sea-ice-and-multi-year-sea-ice-cp-imagery-classificatio,"Mapping first-year sea ice and multi-year sea ice in the oceans is significant for many applications. For example, ship navigation and weather forecast. Accurate and robust classification methods of multi-year ice and first-year ice are in demand [2]. Hybrid-polarity SAR architecture will be included in future SAR missions such as the Canadian RADARSAT Constellation Mission (RCM). These sensors will enable the use of compact polarimetry (CP) data in wide swath imagery [1]. Convolutional neural networks (CNNs) are becoming increasingly popular in many research communities due to availability of large image datasets and high-performance computing systems. As Convolutional networks (ConvNets) have achieved great success on many image classification tasks, I pursue this method for the classification of image patches from compact polarimety (CP) imagery into first-year ice and multi-year ice is applicable. In this course project, my work is kind of like the first practice of the CP imagery classification by fine-tuning a pre-trained convolutional neural network (CNN). Specifically, fine-tuning the last fully-connected layer of a pre-trained convolutional networks, I extract patches from simulated CP images as my dataset, the classification accuracy of the test set achieved 91.3% by fine-tuning a pre-trained CNN, compared to 49.4% classification accuracy by training from scratch.",https://github.com/xy1377660586/Fine-tuning-a-pre-trained-CNN-for-first-year-sea-ice-and-multi-year-sea-ice-cp-imagery-classificatio,6,16,16,8,0,0,3,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
123679672,hesampakdaman,ppgn-disc,Experimenting with the PPGN-h architecture by adding new discriminators to the layers of the encoder,https://github.com/hesampakdaman/ppgn-disc,14,1,1,0,0,2,9,5,13.0,0,0,0,0,0,13.0,837.7532537385866,5.760408599489058,8800.836451109062
693375750,felypecoliveira,CleanArch,First tempt to implement clean architecture ,https://github.com/felypecoliveira/CleanArch,258,0,0,0,0,1,101,5,2.9207920792079207,1,1,1,1,4,5.9405940594059405,20.181240259365158,0.4120321396640733,110.72449703226768
608903914,agusmdev,fastapi-ddd-cookiecutter,This project is a backend template for a FastAPI-based application that uses the repository pattern approach to provide an abstraction layer between the business logic and the data access layer. It aims to provide a scalable and maintainable architecture for building web applications.,https://github.com/agusmdev/fastapi-ddd-cookiecutter,58,44,44,6,3,3,20,5,2.6,1,0,0,0,1,3.75,13.019658376967795,0.2349206349206349,18.609455366448625
276829937,dhruvmk,NeuralNetArchitecture,This project involves building a single layer neural network architecture from scratch without using any prominent deep learning libraries that can be used to compute and predict various values.,https://github.com/dhruvmk/NeuralNetArchitecture,6,0,0,0,0,1,2,5,0.0,0,0,0,0,0,2.0,70.27707876446017,1.640625,230.59666469588493
837542024,OzodbekPyDev,ToDo-API,"ToDo API is a task management system built using Domain-Driven Design (DDD) and Clean Architecture (CA). It leverages FastAPI, SQLAlchemy, Alembic, and PostgreSQL to enable user registration, task creation, viewing, updating, and deletion. Users can assign and revoke read and update permissions for specific tasks to other users, with only the task ",https://github.com/OzodbekPyDev/ToDo-API,43,1,1,0,0,1,79,5,4.89873417721519,1,1,1,1,4,4.886075949367089,8.63960462587467,0.2044427897741374,10.17086082692313
485588926,Resonite-Community-Projects,community_events.resonite,Service for announcing Resonite events and stream from multiple source like Discord and Google Agenda to client like Resonite Facet or Web Browsers.,https://github.com/Resonite-Community-Projects/community_events.resonite,3551,4,4,1,22,1,73,5,4.534246575342466,1,0,1,1,3,8.013698630136986,54.60248317456785,0.9932891364363178,287.5345076055561
748499518,adityasingh770,microservices-devops,Microservice Architecture and System Design with Python & Kubernetes - freecodecamp,https://github.com/adityasingh770/microservices-devops,39,2,2,0,0,1,14,5,2.9285714285714284,0,0,0,1,1,2.7142857142857144,12.264975749055038,0.6825396825396826,28.08382288250175
327888441,lucassus,python-ddd-sandbox,,https://github.com/lucassus/python-ddd-sandbox,346,11,11,0,0,2,179,5,4.324022346368715,1,1,1,1,4,5.743016759776537,16.23592470790773,0.4801033076172741,20.135889071178227
823564297,Saimkhalid6220,MartApi-Microservices,we will be building the mart api microservices using event driven architecture,https://github.com/Saimkhalid6220/MartApi-Microservices,254,1,1,0,0,1,24,5,2.75,0,0,0,0,0,2.583333333333333,15.9681274082562,0.641425120772947,59.45341618238907
907309321,dminier,py-microservice,"This repository serves as a comprehensive guide to the best practices for Python development within a microservices architecture. It aims to provide developers with clear, actionable insights and examples for building scalable, maintainable, and efficient microservices using Python.",https://github.com/dminier/py-microservice,254,1,1,0,0,1,34,5,2.147058823529412,1,1,0,1,3,3.4705882352941178,13.344471863144545,0.4054621848739495,22.485203712605557
926033491,Ranjesh-random,Mathematics-Genius-Agent,"Mathematics Genius Agent is a powerful AI-driven educational tool designed to assist students in learning and understanding various mathematical concepts. Using multi-agent architecture, it provides step-by-step solutions, generates practice problems, explains concepts, and recommends learning resources across different mathematical domains.",https://github.com/Ranjesh-random/Mathematics-Genius-Agent,5,1,1,0,0,1,2,5,8.0,0,0,0,0,0,4.0,13.5,0.5,13.5
167121192,jairvercosa,ca_auth,Clean architecture implementation,https://github.com/jairvercosa/ca_auth,40,25,25,7,1,0,48,5,1.7916666666666667,1,1,1,1,4,6.791666666666667,17.83790553556346,0.2682291666666667,27.2497678897148
556277363,qu3vipon,python-ddd,Python Domain-Driven-Design(DDD) Example,https://github.com/qu3vipon/python-ddd,470,397,397,44,0,10,77,6,2.3376623376623376,1,1,1,1,4,2.1818181818181817,3.8541522858129422,0.1851370851370851,4.233216429699223
130439768,dfoderick,fullcycle,Full Cycle Mining Controller - a workflow message bus microservice architecture for bitcoin mining,https://github.com/dfoderick/fullcycle,2017,30,30,10,3,6,93,5,3.3870967741935485,1,0,0,0,1,13.913978494623656,103.36127289542767,1.4073250920859068,489.0542911802117
411322276,QM-BINF,AITIA-PM,"Source code for the AITIA-PM algorithm. See paper entitled ""Root Cause Analysis in Process Mining with Probabilistic Temporal Logic"", published at the 2nd International Workshop on Event Data & Behavioral Analytics, co-located with ICPM2021",https://github.com/QM-BINF/AITIA-PM,1879,7,7,1,0,2,4,5,5.75,0,0,0,0,0,49.25,1172.673982984898,6.469656152037617,12146.307762986293
479660848,maxipavlovic,proyectoCQRS,,https://github.com/maxipavlovic/proyectoCQRS,14,0,0,0,0,0,50,5,1.64,0,1,0,0,1,1.42,3.798268842737967,0.15,4.499896178227747
490634957,pchikani,WebApp,BlogManagement - Reactjs / Django / Nginx / Docker |||| OrderManagement - Django / Microservice Architecture / MangoDB / Docker,https://github.com/pchikani/WebApp,186,0,0,0,0,1,41,5,2.609756097560976,0,0,1,0,1,1.6829268292682926,0.6958371954385565,0.073170731707317,0.3479185977192782
253883509,Argeniss-Software,rolaguard_backend,"This repository contains the source code of RoLaGuard backend. This module serves requests from the frontend, data-collectors and engine using an API. Also it provides communication via web sockets to the frontend, and makes use of message queues to notify events to the data-collectors module.",https://github.com/Argeniss-Software/rolaguard_backend,424,0,0,3,3,1,79,5,6.455696202531645,1,0,0,0,1,35.46835443037975,359.5044608118912,1.6872656877882295,3613.537127666171
587880123,alercebroker,alerce-scribe,ALeRCE CQRS eventual consistency engine,https://github.com/alercebroker/alerce-scribe,154,0,0,0,0,8,20,5,3.9,0,0,0,0,0,11.9,43.9328216601687,0.8885897435897435,97.33302641598335
897459422,walidzz,hexagonal-architecture,,https://github.com/walidzz/hexagonal-architecture,292,0,0,0,0,1,32,5,1.6875,1,1,1,1,4,1.875,1.316493738910586,0.078125,0.658246869455293
426694128,rfrezino,hexagonal-py,Check if hexagonal architecture was respected given the a project configuration,https://github.com/rfrezino/hexagonal-py,240,1,1,1,0,1,100,7,1.81,1,1,0,1,3,3.31,6.584813390631422,0.2216607142857142,20.79125493601663
401049224,JeongGod,Portfolio-Project,"Flask(Layered Architecture), React를 이용한 포트폴리오 웹서비스",https://github.com/JeongGod/Portfolio-Project,350,0,0,0,0,1,27,5,3.259259259259259,1,0,1,0,2,4.444444444444445,11.28659138584844,0.1962962962962963,11.976955857269829
903500820,S0Smislom,hexagonal-architecture-fastapi,,https://github.com/S0Smislom/hexagonal-architecture-fastapi,26,0,0,0,0,1,48,6,4.645833333333333,1,0,1,1,3,6.708333333333333,5.159304688852168,0.2301587301587301,7.429875141266211
355161357,Zeztron,react-python-microservices,Product/admin app built using django/react with microservice architecture,https://github.com/Zeztron/react-python-microservices,6,0,0,0,0,2,13,5,1.6153846153846154,0,0,0,0,0,1.0,0.3657605770894976,0.0384615384615384,0.1828802885447488
803062725,VictorCruzTech,clean-architecture,My Project Studying Clean Architecture,https://github.com/VictorCruzTech/clean-architecture,62,0,0,0,0,1,78,5,2.7564102564102564,1,1,1,1,4,3.628205128205128,15.672802376495188,0.4484573119188503,34.224284689645145
444425214,drather,clean-architecture,클린 아키텍쳐를 간단한 코드로 실습,https://github.com/drather/clean-architecture,25,0,0,0,0,1,15,5,2.933333333333333,1,1,1,1,4,4.333333333333333,6.855748398223211,0.4333333333333333,6.555096731268081
727961670,sato96,spycam2.0,Security camera with raspberry pi and picamera2 with microservices architecture,https://github.com/sato96/spycam2.0,1216,0,0,0,0,1,19,5,5.631578947368421,0,1,0,0,1,26.57894736842105,601.3147581571499,2.277794921529712,2276.6694066499845
561429204,rynoterblanche,python-web-dev,Template project for python web development using Clean Architecture & DDD (WORK IN PROGRESS),https://github.com/rynoterblanche/python-web-dev,55,0,0,0,0,1,42,5,1.5952380952380951,1,0,1,1,3,2.4047619047619047,1.810491233555614,0.0952380952380952,1.2266741882063783
222925140,badranarayana,clean-architecture-in-python,,https://github.com/badranarayana/clean-architecture-in-python,14,8,8,2,0,3,24,5,1.0416666666666667,1,1,0,1,3,4.166666666666667,6.002527347641625,0.2872023809523809,9.524121744792245
725013557,MathisLagouge,gps_tracker_2000,Projet ING3 Architecture Microservices,https://github.com/MathisLagouge/gps_tracker_2000,167,0,0,1,0,1,5,6,4.4,0,0,0,0,0,8.4,80.7192222282209,1.603846153846154,387.24253176704735
959437941,kylefrommelt,Enterprise-Stream-Analytics-Platform-,"A production-grade streaming analytics platform that processes real-time user activity data through a microservices architecture using Kafka, Airflow, and PostgreSQL, featuring automated data quality checks, anomaly detection, and comprehensive monitoring with Prometheus/Grafana",https://github.com/kylefrommelt/Enterprise-Stream-Analytics-Platform-,118,0,0,0,0,1,21,5,6.523809523809524,0,0,1,0,1,22.19047619047619,207.24975142700384,2.1214207700129024,1034.4825015867646
457752370,iitpvisionlab,heterogeneous-ai-system-simulator,"Official source code for the ""Predicting Performance of Heterogeneous AI systems with Discrete-Event Simulations"" paper",https://github.com/iitpvisionlab/heterogeneous-ai-system-simulator,10,3,3,1,0,4,7,5,3.0,0,0,0,0,0,19.142857142857142,75.68242423482585,2.2736296441653585,279.3557876411351
944525134,peter-louisx,clean-architecture-flask-basic,,https://github.com/peter-louisx/clean-architecture-flask-basic,9,0,0,0,0,1,9,5,1.7777777777777777,1,0,1,0,2,2.2222222222222223,0.5283208335737188,0.0555555555555555,0.2641604167868594
108247168,SpComb,myottd2,[Archive] WIP reimplementation of myottd.net with a containerzed microservice architecture (2008),https://github.com/SpComb/myottd2,103,1,1,0,0,1,37,5,2.054054054054054,0,0,0,0,0,6.247317322432294,23.712252603685897,0.7316493689964495,61.355485503770296
755877006,sqlmerr,fastapi-template,🔐 This is my fastapi clean architecture template. Currently in development 👀,https://github.com/sqlmerr/fastapi-template,158,2,2,0,0,1,71,5,4.619718309859155,1,1,1,1,4,4.23943661971831,6.505414308497087,0.3318131008271853,10.28323953917124
803197879,k-appears,FeverCodeChallenge,"Fever, Python, Hexagonal Architecture, Redis",https://github.com/k-appears/FeverCodeChallenge,123,0,0,0,0,1,50,5,3.68,1,1,1,1,4,5.28,24.84988335653634,0.4028561253561253,30.15615957916819
465848844,HarvinderSinghDiwan,microserviceCalculator,This reposeitory contains the frontend part of a web application calculator which is based on microservice architecture.,https://github.com/HarvinderSinghDiwan/microserviceCalculator,296,0,0,0,0,1,3,5,1.6666666666666667,0,0,0,0,0,3.0,17.29715809318649,0.1666666666666666,8.648579046593245
65495147,belvedere-trading,ChronosES,A cross-platform event sourcing middleware,https://github.com/belvedere-trading/ChronosES,132,4,4,1,0,3,32,5,4.15625,0,0,0,0,0,39.5625,155.07734763483663,2.0979234193714045,890.7416614620032
556830525,estebansolo,python-microservice-template,A micro-service template using Hexagonal Architecture for a multi domain,https://github.com/estebansolo/python-microservice-template,13,0,0,0,0,1,42,5,0.5476190476190477,1,1,1,1,4,0.7857142857142857,0.0,0.0,0.0
753499295,desireetorrente,clean_architecture,,https://github.com/desireetorrente/clean_architecture,4,0,0,0,0,1,13,5,1.7692307692307692,1,1,0,1,3,4.461538461538462,2.5252643632876546,0.1307692307692307,2.774284831982537
942765986,jonny-vm,delivery,Domain Driven Design repo,https://github.com/jonny-vm/delivery,74,0,0,0,0,1,87,6,2.71264367816092,1,1,1,1,4,4.022988505747127,14.190169244917808,0.385458770157046,38.320294694462426
388720375,JulianFeinauer,django-eventsourcing,Event Sourcing Example in Django,https://github.com/JulianFeinauer/django-eventsourcing,11,0,0,0,0,1,15,5,2.1333333333333333,0,0,0,0,0,1.7333333333333334,1.4339850002884629,0.1111111111111111,0.8503258334775646
366764675,malwaredllc,microservices,"Boilerplate web app built with microservice architecture using React, Django, Flask, RabbitMQ.",https://github.com/malwaredllc/microservices,597,6,6,1,0,2,22,5,2.272727272727273,0,0,1,0,1,1.5,1.8144046755745515,0.125,1.1446722565825742
774320818,rishirishhh,MP3-Converter,"microservice architectures and distributed systems using Python, Kubernetes, RabbitMQ, MongoDB, mySQL.",https://github.com/rishirishhh/MP3-Converter,22,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
931337460,Nayeem0072,fastapi-auth-rate-demo,"A robust API Gateway built with FastAPI featuring JWT authentication, rate limiting, and secure file upload capabilities. Perfect for microservices architecture.",https://github.com/Nayeem0072/fastapi-auth-rate-demo,18,0,0,0,0,1,7,5,5.142857142857143,0,0,0,0,0,10.714285714285714,51.21503300477918,1.5571428571428572,117.27349007787642
704891063,azizjon-aliev,python_clean_architecture,Python Inspiration: Clean Architecture Project Pattern hon development.,https://github.com/azizjon-aliev/python_clean_architecture,360,7,7,1,0,1,95,5,2.147368421052632,1,1,1,1,4,4.178947368421053,18.7437542243952,0.1963607584955951,18.84297891680356
278064306,andrerodrig,clean-architecture,Repository for estudies in clean archirecture.,https://github.com/andrerodrig/clean-architecture,40,1,1,0,4,1,66,5,1.3484848484848484,1,1,1,0,3,2.803030303030303,11.466872591329416,0.2257065850815851,15.3389057450436
149905048,qvissak,CleanArchitectureExample,"Tutorial to transform your ""working"" python code into scalable, testable code with separation of concerns using clean architecture.",https://github.com/qvissak/CleanArchitectureExample,3,0,0,0,0,0,1,5,3.0,0,0,0,0,0,1.0,4.754887502163469,0.5,2.3774437510817346
523400694,litsynp,fastapi-practice,Practicing FastAPI in layered architecture.,https://github.com/litsynp/fastapi-practice,5,1,1,0,0,1,10,5,1.8,0,0,0,0,0,1.7,3.002108180068191,0.1699999999999999,3.269687690930386
818671654,JohnPetros,clean-hangman,Hangman game using Clean Architecture,https://github.com/JohnPetros/clean-hangman,192,0,0,0,0,1,70,6,2.6142857142857143,1,0,1,0,2,2.6,9.490218798075846,0.3465702947845804,12.389318161719611
957029711,tkc,python-boundaries,"This GitHub Action helps enforce architectural boundaries, ensuring your layers (like in Clean Architecture or DDD)",https://github.com/tkc/python-boundaries,27,0,0,0,0,1,4,5,5.5,0,0,0,0,0,26.0,356.6838055875867,2.6297002032520327,1807.5606760623125
821080731,Isr43l86,flask_clean_architecture_custom,,https://github.com/Isr43l86/flask_clean_architecture_custom,70,0,0,0,0,1,42,5,2.380952380952381,1,1,0,1,3,1.880952380952381,0.7247938946107407,0.0833333333333333,0.398111233019656
809523703,zrostamirad,3Layers,three layer architecture in python,https://github.com/zrostamirad/3Layers,7,0,0,0,0,1,7,5,2.142857142857143,0,0,0,0,0,6.714285714285714,12.359795623878398,0.5642857142857143,21.72457664423801
748195177,shyogaswara,EqSourceDeterminator,The code will be used to determine the source of the earthquake by using Geopandas library. This code is meant to be used with GetParam.py as Module to create simple report about earthquake event. ,https://github.com/shyogaswara/EqSourceDeterminator,4499,1,1,0,0,1,1,5,3.0,0,0,0,0,0,56.0,837.6912823032428,8.63265306122449,7231.498212536158
898429013,waku-py,waku,A Python framework for building modular and loosely coupled applications,https://github.com/waku-py/waku,2177,10,10,1,9,1,83,5,4.433734939759036,0,1,0,0,1,6.831325301204819,12.375937511843617,0.4066079443825722,20.374713624165768
287459058,AWS-Devops-Projects,k8s-automation-on-cloud,"Microservices have become a popular architectural style for building cloud-native applications that are self-contained, independently deployable, resilient and quickly evolve. Additionally, Istio makes it easy to create a network of deployed services with load balancing, service-to-service authentication, monitoring.",https://github.com/AWS-Devops-Projects/k8s-automation-on-cloud,66,10,10,6,3,1,1,5,18.0,0,1,1,0,2,429.0,5822.32484847033,8.51923076923077,49601.72899754532
190929864,is-gabs,oxe-flask,This project was developed during a talk about development with Flask + Mongodb and DDD (Domain driven design) at the 0xE hacker space.,https://github.com/is-gabs/oxe-flask,13,1,1,0,1,0,9,5,2.0,0,0,1,0,1,2.333333333333333,0.0,0.0,0.0
918376893,esraa4037,Bookify---Modular-Monolith,,https://github.com/esraa4037/Bookify---Modular-Monolith,34,0,0,0,0,1,55,5,1.945454545454545,1,0,0,1,2,2.618181818181818,1.8607627750718287,0.1,1.9858072069096788
827018926,Qwor01,EventSourcingAppExample,An example application copied from the Event Source library within python in order to comprehend event sourcing,https://github.com/Qwor01/EventSourcingAppExample,5050,0,0,0,0,1,516,9,7.614341085271318,1,0,1,0,2,5.0,1.5849625007211563,0.1666666666666666,0.7924812503605781
824111450,CodeMath,codestargram,이 프로젝트는 Django와 Domain-Driven Design(DDD) 원칙을 사용하여 인스타그램과 유사한 서비스를 구현한 것입니다.,https://github.com/CodeMath/codestargram,10,0,0,0,0,1,44,6,1.3863636363636365,0,0,0,0,0,0.7727272727272727,0.9151059660566002,0.0757575757575757,0.548462073937391
565330040,MaycolTeles,pythonshop,A photoshop application created using Python and Clean Architecture.,https://github.com/MaycolTeles/pythonshop,666,6,6,0,0,1,57,7,1.9649122807017545,1,1,1,1,4,2.210526315789474,0.083419078985324,0.0087719298245614,0.041709539492662
966547171,crisboleda,flight-reservation-system,Complete flight booking application built with microservices architecture.,https://github.com/crisboleda/flight-reservation-system,1530,0,0,0,0,1,35,5,3.0285714285714285,0,1,1,1,3,3.2,14.39552982296386,0.3554545454545454,17.959360377018058
714000960,VladSmirnou,clean_architecture_practice,This is a simple calculator app that I'm trying to structure according to the 'Clean architecture' rules. Based on schema 22.2 of the book.,https://github.com/VladSmirnou/clean_architecture_practice,282,0,0,0,0,1,60,5,2.7666666666666666,1,1,1,1,4,3.783333333333333,0.588070208585738,0.0666666666666666,0.294035104292869
789810941,estevaofon,orders-hexagonal-arch,Hexagonal Architecture example,https://github.com/estevaofon/orders-hexagonal-arch,3,0,0,0,0,1,4,5,1.5,1,1,0,1,3,3.75,1.1887218755408673,0.125,0.5943609377704336
582386936,hamed1130,hexagonal-voting-system,Design a voting system using Hexagonal Architecture,https://github.com/hamed1130/hexagonal-voting-system,8,0,0,0,0,1,16,5,1.5,1,0,1,1,3,2.5625,6.398897027334813,0.19375,3.4386026543329717
776285740,AK-Khan02,Neural-Architecture-Search,"This project implements an Enhanced Neural Architecture Search (NAS) system designed to automatically find the optimal architecture for a neural network on a given dataset. Using Bayesian Optimization, the system efficiently searches through a predefined hyperparameter space, including the number of layers, units per layer, and learning rate.",https://github.com/AK-Khan02/Neural-Architecture-Search,11,1,1,0,0,1,1,5,10.0,0,0,0,0,0,3.0,98.09910819000817,2.3076923076923075,226.38255736155728
351127570,shani-pls,PythonMicroservicesIoT,IoT application that follows the Microservices architecture. This code has been run successfully on a Raspberry Pi.,https://github.com/shani-pls/PythonMicroservicesIoT,66,0,0,0,0,2,6,5,4.166666666666667,0,0,0,0,0,0.8333333333333334,66.07841785860658,1.8063492063492064,214.34952962039355
935070858,TheSixDecadence,CQRS_Django,"Backend created in CQRS Software architecture, with a basic CRUD, on a customized E-Learning platform.",https://github.com/TheSixDecadence/CQRS_Django,37,0,0,0,0,1,18,5,1.5555555555555556,0,0,0,0,0,2.555555555555556,1.7233083338141042,0.1481481481481481,1.7652465283787413
944572394,KevinFairuz,Tugas-CleanArchitecture-Arkavidia,,https://github.com/KevinFairuz/Tugas-CleanArchitecture-Arkavidia,11604,0,0,0,0,1,898,10,14.515590200445434,1,1,1,1,4,69.19153674832963,722.2048668230514,3.970148784739537,6746.918893990661
699763748,yukiyaogasa,rentomatic,The implementation of Clean Architecture in Python,https://github.com/yukiyaogasa/rentomatic,87,0,0,0,0,1,28,5,1.7142857142857142,1,1,1,0,3,6.5,39.88095615669615,0.5953027950310558,56.96481703225753
565545867,ivangeorgiev,eventsourcer,Python Event Sourcing,https://github.com/ivangeorgiev/eventsourcer,98,0,0,0,0,1,8,5,2.125,0,0,1,0,1,12.125,43.62891298959941,0.3125,43.3317325207142
40073976,distributed-cms,rest-api,REST API  to trigger commands and perform queries. Wrapper of current CQRS API.,https://github.com/distributed-cms/rest-api,136,1,1,2,0,1,5,5,3.4,0,0,0,0,0,3.0,5.705865002596163,0.3,8.558797503894244
358084637,abraham-musa,aws-serverless-twitter-event-source,AWS Serverless Twitter Event Source,https://github.com/abraham-musa/aws-serverless-twitter-event-source,14,0,0,0,0,1,4,5,3.5,0,0,0,0,0,4.25,9.877443751081737,0.625,12.877443751081737
950953839,otherside9710,fastapi-backend-template,A clean architecture template for FastAPI applications with MongoDB integration.,https://github.com/otherside9710/fastapi-backend-template,8,0,0,0,0,1,21,5,1.238095238095238,1,1,0,1,3,1.0,0.2264232143887366,0.0238095238095238,0.1132116071943683
451122415,NamamiShanker,microservices-flask-example,"An example of microservice architecture using Flask and docker, using docker-compose for orchestration",https://github.com/NamamiShanker/microservices-flask-example,3199,7,7,1,0,1,67,5,3.08955223880597,0,0,1,0,1,6.2388059701492535,4.530844662764229,0.2064676616915423,6.6004981587536
957535726,VictorSouzaCV,game-component-creator,Game Clean Architecture - Component Creator,https://github.com/VictorSouzaCV/game-component-creator,179,4,4,1,0,1,1,5,3.0,0,0,0,0,0,21.0,164.51539013493823,2.738095238095238,450.4588063218547
331134030,PanGan21,distributed-tracing,Distributed tracing example in microservices architecture using flask ,https://github.com/PanGan21/distributed-tracing,11,1,1,0,0,1,13,5,3.3846153846153846,0,0,0,0,0,5.153846153846154,26.29434314833656,0.8568376068376069,43.632122035661006
916263431,niccokunzmann,icalendar_compatibility,icalendar event information with maximum compatibility to various ICS sources,https://github.com/niccokunzmann/icalendar_compatibility,131,0,0,0,2,1,10,5,3.3,0,0,0,0,0,13.8,126.09973348494006,1.5719155354449472,341.1408401421359
695400784,pratham1357,sourceprint_Pratham,Source print event starting point/repository,https://github.com/pratham1357/sourceprint_Pratham,4,0,0,0,1,1,2,5,0.5,0,0,0,0,0,0.0,29.897352853986263,2.0,119.58941141594504
270984579,UtkarshKulsreshtha,python-assignment-2,"python assignment on analysing rsyslogs and fetch info like source ip , event and user.",https://github.com/UtkarshKulsreshtha/python-assignment-2,3210,0,0,0,0,1,453,10,7.459161147902869,1,0,1,0,2,54.26106194690266,812.2393436076222,3.7051889148629953,9726.385338602253
930595218,tyronejosee,prototype_domain_driven_design,pending description,https://github.com/tyronejosee/prototype_domain_driven_design,19,2,2,0,0,1,28,5,1.3214285714285714,1,1,0,1,3,2.107142857142857,3.2647147200101085,0.1845238095238095,4.717004876686176
78699692,nicolastrres,rentomatic,"Clean architecture in python application, following the tutorial http://blog.thedigitalcatonline.com/blog/2016/11/14/clean-architectures-in-python-a-step-by-step-example/#.WHbElGQrLVo",https://github.com/nicolastrres/rentomatic,33,0,0,0,0,0,20,5,1.2,1,1,0,0,2,1.2,3.8690871201536425,0.15,6.2178178473916255
81959892,vectorhacker,pygeteventstore,"A client for Event Store, the open-source, functional database with Complex Event Processing, written in python",https://github.com/vectorhacker/pygeteventstore,1583,5,5,0,0,1,86,5,5.406976744186046,0,0,0,0,0,54.174418604651166,658.4740101182997,3.5623219805952555,6825.606259598737
893770768,VladislavArkh,homework6_Python_CleanArchitecture,,https://github.com/VladislavArkh/homework6_Python_CleanArchitecture,21,0,0,0,0,1,15,5,2.6666666666666665,1,1,1,0,3,3.2,0.0,0.0,0.0
971385261,SriramMurugesan,fastapi_clean_architecture,,https://github.com/SriramMurugesan/fastapi_clean_architecture,52,0,0,0,0,1,32,5,4.0625,1,0,1,0,2,6.0625,28.561227926590536,0.6399387071262072,66.75648152270652
691874547,freecode-py,ddd-python-aws,Domain-Driven Design (DDD) Python Project with AWS Serverless Framework.,https://github.com/freecode-py/ddd-python-aws,36,2,2,0,0,3,43,5,2.4651162790697674,1,0,0,1,2,7.232558139534884,11.268145137956337,0.3100104030336588,13.385850994348472
696932776,charliebrassington,tiny-architect,Tiny-Architecture is a Python framework to help developers create applications with clean architecture and minimize code used ,https://github.com/charliebrassington/tiny-architect,5,2,2,0,0,1,7,5,2.7142857142857144,0,0,0,0,0,7.571428571428571,2.9552080102125204,0.2142857142857142,1.4776040051062602
965929745,jjguijt,clean-architecture-tutorial,,https://github.com/jjguijt/clean-architecture-tutorial,9,0,0,0,0,1,5,6,2.6,0,0,0,0,0,5.8,18.25620665658675,0.8,23.33137748358204
361378467,mausamadh,Domain-Driven-Design,This Repository Contains my learning of Domain-Driven Design and its implementation in python.,https://github.com/mausamadh/Domain-Driven-Design,62,0,0,0,2,1,19,5,2.1578947368421053,1,0,0,1,2,9.421052631578949,20.054426155925697,0.5522853185595568,93.57608139431956
479407669,alexandruxt,StudentLabAssignment,Layered Architecture Application that manages Student assignments and grades,https://github.com/alexandruxt/StudentLabAssignment,39,0,0,0,0,1,15,5,1.0666666666666669,1,1,0,1,3,35.6,255.9998119534397,1.7983108108108108,1610.7136797149733
649517715,fortega,pyspark-hexagon,Test PySpark app using hexagon architecture,https://github.com/fortega/pyspark-hexagon,5,0,0,0,0,1,9,5,1.8888888888888888,0,0,0,1,1,3.2222222222222223,2.9182958340544896,0.2407407407407407,1.681370139249467
193247851,ntn23,flask-tdd,"Learn Docker, Flask in a microservices architecture",https://github.com/ntn23/flask-tdd,3696,0,0,0,27,0,10,6,3.2,0,1,1,0,2,6.9,11.877596930284538,0.3,11.402108180068192
98130917,hdnl,Contrasting-Political-Language,Compares how liberal vs. conservative sources communicate the same policy/event/etc,https://github.com/hdnl/Contrasting-Political-Language,1510,0,0,0,0,1,4,5,15.25,0,0,0,0,0,10.75,316.81058349839907,4.713939347290641,2285.0325869722674
727052922,thtrangphu,CleanArchitecture-KTPM,,https://github.com/thtrangphu/CleanArchitecture-KTPM,12086,0,0,0,0,1,25,5,2.48,0,0,0,0,0,2.08,4.118044743119122,0.2533333333333333,7.963407990537032
867439532,kiroshin,PurePYQ,Minimal Clean Architecture,https://github.com/kiroshin/PurePYQ,410,0,0,0,0,1,47,5,4.085106382978723,0,1,0,0,1,9.5531914893617,32.07088385646103,0.9202345711642658,103.21415618558294
970291156,karanjot0611,Employee_Management_System,"Employee Management System is a desktop-based application that allows managing employee records via a sleek modern UI. Features include login-controlled access, live CRUD operations, multi-filter search, and MySQL backend integration. Built using modular architecture with clean separation between UI, logic, and database layers. ",https://github.com/karanjot0611/Employee_Management_System,213,0,0,0,0,1,3,5,3.6666666666666665,0,0,0,0,0,12.666666666666666,65.4923913296881,1.3058712121212122,111.31778599357834
388954373,rpenna,ecom,"Project to improve my clean code, refactoring, TDD and software architecture skills",https://github.com/rpenna/ecom,134,0,0,0,0,1,68,5,2.897058823529412,1,1,0,1,3,6.602941176470588,20.669365521353164,0.7417679223305822,56.336647673394495
973846752,soheltarir,py-starter-kit,This comprehensive starter kit demonstrates how to build a Python application following Domain-Driven Design principles with dependency injection. ,https://github.com/soheltarir/py-starter-kit,80,0,0,0,0,1,48,5,3.125,1,1,0,1,3,7.4375,37.73048114770573,0.4819169204763245,79.70144867480235
739085369,mathmed,py-awesome-template,Kickstart your Python Python 3.x project with Clean Architecture,https://github.com/mathmed/py-awesome-template,464,17,17,3,0,1,39,5,0.8461538461538461,1,1,1,1,4,0.8205128205128205,0.1732022436452171,0.0256410256410256,0.0866011218226085
321433832,murilo-scapim,information-architecture-microservices,Repositório do módulo Arquitetura da Informação e Microserviços da Pós Uni-FACEF,https://github.com/murilo-scapim/information-architecture-microservices,1256,0,0,0,0,1,8,5,1.75,0,0,0,0,0,1.875,23.07201742854801,1.25,42.17615337064538
404850974,andrewwgordon,ddd-northwind-api,"This project is an example Domain-Driven Design, Microservice supporting OpenAPI .The purpose of the project is an education ""toy"" application to articulate DDD and Microservice best practices.",https://github.com/andrewwgordon/ddd-northwind-api,16,1,1,1,4,1,19,5,2.8947368421052637,1,0,0,1,2,4.631578947368421,9.035879280168771,0.5368421052631579,10.048305210792378
950517284,chelongar,cqrs-event-sourcing,,https://github.com/chelongar/cqrs-event-sourcing,10,0,0,0,0,1,8,5,1.75,0,0,0,0,0,5.75,11.720671786825555,0.1538461538461538,14.425442199169916
839542700,kaiqueBellmont,hexagonal-fastApi-DDD-example,A simple example of a hexagonal architecture made with Python. fastApi and DDD,https://github.com/kaiqueBellmont/hexagonal-fastApi-DDD-example,247,4,4,0,0,1,46,5,2.239130434782609,1,1,1,1,4,2.6956521739130435,2.685207469744926,0.1576086956521739,3.443976833466738
148631719,ryzencool,flask_arch,clean architecture of flask,https://github.com/ryzencool/flask_arch,12,0,0,0,0,1,7,5,1.4285714285714286,0,0,1,0,1,0.2857142857142857,0.6792696431662099,0.0714285714285714,0.3396348215831049
692946740,Simba91,Microservice-Architecture-and-System-Design-with-Python-Kubernetes-,Microservice Architecture and System Design with Python & Kubernetes - Full Course from freeCodeCamp.org,https://github.com/Simba91/Microservice-Architecture-and-System-Design-with-Python-Kubernetes-,11372,0,0,0,0,1,1219,17,7.703855619360131,1,0,1,0,2,51.540008206811656,615.9968074653481,3.686195036430581,5779.153563937138
944035282,ArthurBitt,FastAPI-Users-API---Clean-Architecture,,https://github.com/ArthurBitt/FastAPI-Users-API---Clean-Architecture,31,0,0,0,0,1,53,5,4.150943396226415,1,1,1,1,4,7.773584905660377,17.820860925012358,0.5180807099855379,51.77610214297929
817194797,piotrswiecik,auctions,Microservice architecture demo based on Neil Cummings .NET course.,https://github.com/piotrswiecik/auctions,191,0,0,0,0,1,12,5,2.083333333333333,0,0,0,0,0,1.5833333333333333,0.0,0.0,0.0
614175832,chazzhou,aapromax,AutoArmor Pro Max is a Python script that analyzes and visualizes microservice architectures in containerized applications.,https://github.com/chazzhou/aapromax,1925,4,4,0,0,1,3,5,5.0,0,0,0,0,0,33.666666666666664,846.6475439702575,3.293478260869566,7544.411410334094
614883459,Far-sa,video-converter,"This repository is about microservices architecture and distributed systems using Python, Kubernetes, RabbitMQ, MongoDB, and MySQL.",https://github.com/Far-sa/video-converter,23,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
909763700,vidiasgiannis,MLPractical-DeepNetworkArchitectures,The VGG38 model extends the traditional VGG architecture by increasing depth to 38 layers and incorporating  Batch Normalization and Residual Learning for enhanced performance,https://github.com/vidiasgiannis/MLPractical-DeepNetworkArchitectures,1043,0,0,0,0,1,5,5,5.8,0,0,0,0,0,21.8,87.50052127410707,2.3145454545454545,520.7054570456779
377214475,Krysox,ProjetCleanArchitecture,,https://github.com/Krysox/ProjetCleanArchitecture,149,0,0,0,0,2,19,5,2.0526315789473686,0,0,0,0,0,3.631578947368421,4.583100959111411,0.2218045112781955,6.340738004137485
702377308,DariuszMak,clean-python-architecture,,https://github.com/DariuszMak/clean-python-architecture,25,0,0,0,0,1,13,5,3.923076923076923,0,0,0,0,0,10.461538461538462,41.98430777437549,1.077268244575937,88.40236849887022
851130191,dom-ini,ddd-crm-poc,Customer Relationship Management (CRM) app following Domain-Driven Design (DDD) rules.,https://github.com/dom-ini/ddd-crm-poc,1020,0,0,0,0,1,329,6,4.465045592705168,1,1,1,1,4,7.580547112462006,28.50265985466605,0.4275971170571206,43.68559405104511
696258557,josericardopenase,flask-microservices,"Microservice architecture example with flask, nginx and docker",https://github.com/josericardopenase/flask-microservices,26,0,0,0,0,1,17,5,1.1764705882352942,0,0,0,0,0,1.5294117647058822,4.325254412528283,0.1294117647058823,3.2304467651640283
612709983,zohararad,clean-arch-python,Clean Architecture skeleton app in Python,https://github.com/zohararad/clean-arch-python,3,0,0,0,0,2,13,5,1.1538461538461535,1,0,1,1,3,2.3076923076923075,1.9435534075783412,0.0384615384615384,0.9717767037891708
350513482,alexandremahdhaoui,fast_layers,Fast-layers is a python library for Keras and Tensorflow users: The fastest way to build complex deep neural network architectures with sequential models,https://github.com/alexandremahdhaoui/fast_layers,30,0,0,0,0,1,3,5,1.6666666666666667,0,0,0,0,0,20.33333333333333,236.8441295323456,2.191812865497076,948.3697705267524
861486065,QIRoss,CQRS-and-Event-Sourcing,Studies based in day 5-6 of 100 Days System Design for DevOps and Cloud Engineers,https://github.com/QIRoss/CQRS-and-Event-Sourcing,5,0,0,0,0,1,8,5,1.75,1,0,0,0,1,2.5,7.375006052527727,0.3125,9.65883161776279
458735583,Larrykatuva,Django-Clean-Architecture-Setup,,https://github.com/Larrykatuva/Django-Clean-Architecture-Setup,13,1,1,0,0,1,24,5,0.7083333333333334,1,1,1,0,3,0.25,0.3962406251802891,0.0416666666666666,0.1981203125901445
356577367,massa423,flask-on-clean-architecture,flask sample application on Clean Architecture,https://github.com/massa423/flask-on-clean-architecture,323,1,1,0,2,1,43,5,3.3255813953488373,0,0,1,0,1,5.116279069767442,12.760927726686742,0.3718134578599695,17.494840208720387
904277625,cedric57,flask-boilerplate,"Flask application boilerplate based on clean architecture, domain-driven design (DDD), SOLID principle, CQRS pattern, DTO pattern, test-driven development (TDD) for building production-grade applications 🚀",https://github.com/cedric57/flask-boilerplate,651,2,2,0,1,1,61,6,1.0491803278688523,1,1,1,1,4,3.098360655737705,11.836269057371608,0.2758834971949726,18.095451583208717
274691381,vishnu1209,clean_architecture,,https://github.com/vishnu1209/clean_architecture,333,0,0,0,0,1,265,5,1.950943396226415,1,1,1,1,4,2.509433962264151,5.301372100944632,0.2320125786163521,7.405935396532276
643350905,starlingvibes,pykube,Microservice architecture and System design using Python and Kubernetes,https://github.com/starlingvibes/pykube,9,0,0,0,0,1,1,5,6.0,0,0,0,0,0,11.0,131.76952268336282,3.8,500.7241861967787
792743352,sinkozs,GlimmerShop,GlimmerShop is a modular e-commerce web application following the headless CMS microservices architecture built with FastAPI and React with a strong focus on security.,https://github.com/sinkozs/GlimmerShop,3235,2,2,0,0,1,91,5,4.516483516483516,1,1,1,0,3,8.571428571428571,93.7105282742971,0.5968614296331687,301.9060609314528
779177365,opielapatryk,Django_Menu_API,Restaurant Menu Rest API made with Django | Clean Architecture,https://github.com/opielapatryk/Django_Menu_API,127,0,0,0,0,1,39,5,1.7435897435897436,1,1,1,0,3,4.076923076923077,18.52619852297451,0.4081196581196581,89.4079253854969
856700420,GabrielSlima,clean-architecture-aws-lambda,,https://github.com/GabrielSlima/clean-architecture-aws-lambda,2,0,0,0,0,1,7,5,0.1428571428571428,1,1,1,1,4,1.1428571428571428,0.0,0.0,0.0
549049474,alegotta,Microservices,"Simulated apartment booking system, built following a microservices-based architecture",https://github.com/alegotta/Microservices,14,0,0,0,0,1,20,5,2.6,0,0,0,1,1,5.65,35.34673240479988,1.0209603801995106,85.85622320400387
671674439,SAOSurvivor,challenge,"API implementation to track products, built with hexagonal architecture",https://github.com/SAOSurvivor/challenge,140,0,0,0,0,1,41,5,2.414634146341464,1,1,1,1,4,2.5609756097560976,5.489640945370754,0.19765478424015,9.473942560450489
676560730,AJAYK-01,Form-Handler-Atlan,A backend for a demo Form submission system based on Microservices architecture,https://github.com/AJAYK-01/Form-Handler-Atlan,236,0,0,0,0,1,12,5,4.166666666666667,1,0,0,0,1,7.25,28.67366371807159,0.9492424242424242,54.39981102274064
518047305,andriykohut,esdb-py,EventStoreDB gRPC client for Python,https://github.com/andriykohut/esdb-py,861,10,10,0,6,2,50,5,3.94,0,0,0,0,0,12.64,53.55354489618981,0.751629143258304,208.36943088542145
455929318,oscarychen,django-rest-microservice,"Provides OAuth2.0 Code Grant w/ PKCE authentication flow with third-party IDP (AWS Cognito), microservices architecture with Django, and out-of-box auth operation REST APIs for working with SPA.",https://github.com/oscarychen/django-rest-microservice,1012,10,10,1,0,1,15,5,3.733333333333333,0,0,0,0,0,6.733333333333333,10.848459891412288,0.4479166666666667,32.729906026117824
713995258,MOHANBV153,MicroServices-Python-App,Converting mp4 videos to mp3 in a microservices architecture.,https://github.com/MOHANBV153/MicroServices-Python-App,3213,0,0,0,0,1,14,5,3.071428571428572,0,0,0,0,0,2.9285714285714284,18.01958430767078,0.7385912698412699,50.86488395034637
305925137,jfsolarte,python_clean_architecture,python_clean_architecture,https://github.com/jfsolarte/python_clean_architecture,20,0,0,0,0,1,25,5,2.2,1,1,1,0,3,3.8,7.793716972351898,0.18,4.207053986262488
434312310,tlacuilose,gas-sensores,Microservice architecture - A gas company requires retrieving the information from its tank sensors and creating a report.,https://github.com/tlacuilose/gas-sensores,13,0,0,0,0,1,8,5,1.75,0,0,0,0,0,7.625,16.705743477233284,0.5,38.88691494200148
363150995,zhenyuhe00,RDEA,"Source code for SIGIR 2021 paper ""Rumor Detection on Social Media with Event Augmentations""",https://github.com/zhenyuhe00/RDEA,14332,24,24,7,0,3,11,5,4.545454545454546,0,0,0,0,0,17.818181818181817,860.2774800644715,4.100307705653579,6402.4649136020735
923214691,BorjaIP,fapid-rest,A FastAPI base/template designed for REST API development with clean architecture pattern.,https://github.com/BorjaIP/fapid-rest,16,0,0,0,0,1,19,5,3.210526315789474,1,0,0,0,1,2.210526315789474,3.689804292847776,0.1666666666666666,2.200422541274597
778093040,TheDao032,clean-architecture-python,,https://github.com/TheDao032/clean-architecture-python,76,2,2,1,3,1,33,5,2.515151515151515,1,0,1,1,3,2.636363636363636,8.650373247228273,0.2857991681521093,16.016950664856733
452304695,stefannastasa,exm_code,Application coded in a 2.5 hour exam session using layered architecture and GRASP principles.,https://github.com/stefannastasa/exm_code,36,2,2,0,0,1,17,5,1.5294117647058822,1,0,0,0,1,6.470588235294118,22.065139180130497,0.6960784313725491,70.17687060755644
884521234,Skrutz-Z,Hybrid-Feature-Pyramid-Network,"functions used to enhance a feature pyramid network (FPN) architecture. It introduces several layers to improve the quality of extracted features, ensuring that important details are emphasized while low-level noise is reduced.",https://github.com/Skrutz-Z/Hybrid-Feature-Pyramid-Network,10333,1,1,0,0,1,3,5,2.0,0,0,0,0,0,3.6666666666666665,26.3468772697786,1.5904761904761904,74.12366523228518
428314380,Orange-OpenSource,EDNA,Event Driven Network Automation (EDNA) is an open-source network automation and reconfiguration solution.,https://github.com/Orange-OpenSource/EDNA,13,1,1,1,0,17,4,5,2.75,0,0,0,0,0,4.0,119.9077911114324,0.65,85.48770854239628
84238170,ccube-eml,scheduler,"A component of cCube, the cloud microservices architecture for Evolutionary Machine Learning (EML) classification.",https://github.com/ccube-eml/scheduler,11,1,1,0,0,1,13,5,2.230769230769231,0,0,0,0,0,7.769230769230769,13.53330407745299,0.7846153846153847,22.283518310019566
771773125,aitsam12,Event_data_processing_pipeline,This is the official repository of Event data processing pipeline. Here we provide code to convert single file conversion and also provide google drive link of open-source datasets.,https://github.com/aitsam12/Event_data_processing_pipeline,440,1,1,0,0,1,32,6,3.25,0,0,0,0,0,6.90625,123.29988856974178,3.0373542191861347,672.6882331358364
927117230,KlejdaRR,Seq2Seq,This project implements a Sequence-to-Sequence (Seq2Seq) model for automatic translation using PyTorch. The model translates sentences from Italian to English using an encoder-decoder architecture with LSTM layers.,https://github.com/KlejdaRR/Seq2Seq,28,0,0,0,0,1,11,5,3.727272727272727,1,0,0,0,1,7.545454545454546,46.416884507756485,1.2697580197580196,151.30210574655263
858970144,hramirezq,product-management-python-cqrs,,https://github.com/hramirezq/product-management-python-cqrs,12,0,0,0,0,1,39,5,1.2820512820512822,1,1,1,1,4,1.564102564102564,1.240023892399142,0.0555555555555555,0.6712939974816222
187290501,RedPenguin101,rentomatic,example of clean architecture and TDD,https://github.com/RedPenguin101/rentomatic,28,0,0,0,0,0,28,5,2.2857142857142856,1,1,1,0,3,9.25,61.874656067456975,0.8121962976171903,90.4962647951888
875102316,paulccuno,fastapi-hexagonal-achitecture,Hexagonal Architecture using FastAPI,https://github.com/paulccuno/fastapi-hexagonal-achitecture,19,0,0,0,0,1,34,5,3.882352941176471,1,1,1,1,4,5.235294117647059,8.195524121500918,0.3071266968325792,20.611116754569675
906971688,sugrobovp,task_management,Task management system on FastApi with Clean Architecture approach,https://github.com/sugrobovp/task_management,10,0,0,0,0,1,7,5,2.142857142857143,1,1,1,1,4,2.142857142857143,0.6792696431662099,0.0714285714285714,0.3396348215831049
646593320,silvanosfo,plugins_eventscripts,"Random firstblood, grenade, headshot and knife kill sounds made in 2014 for EventScripts, for the game Counter Strike: Source",https://github.com/silvanosfo/plugins_eventscripts,6,0,0,0,0,1,4,5,3.0,0,0,0,0,0,8.25,62.04923411588534,1.9242424242424243,121.52915568187264
737316129,diyoifa,FastApi_LayeredArchitecture,"restApi to manage user information using JWT, fastApi, and mongo Db all inside a LayeredArchitecture",https://github.com/diyoifa/FastApi_LayeredArchitecture,174,1,1,0,0,1,25,5,2.28,1,1,1,1,4,2.6,5.848686620881324,0.2,5.6584911207947854
414517349,shivanisarthi,flask_clean_code,rest api with clean architecture,https://github.com/shivanisarthi/flask_clean_code,66,1,1,0,0,0,48,5,2.0,1,1,1,1,4,2.145833333333333,2.814568371568696,0.0895833333333333,2.1385341857843483
815826205,ShubhamNagure,drf-ecommerce-platform,"An advanced e-commerce platform built with Django and Django REST Framework (DRF). This project provides a robust backend solution for managing products, orders, users, and payments, with a focus on clean architecture, scalability, and security.",https://github.com/ShubhamNagure/drf-ecommerce-platform,2945,1,1,1,1,1,18,5,2.7222222222222223,1,0,0,0,1,5.833333333333333,8.22038472550749,0.2761243386243386,8.328363024268842
182506150,girnara,nameko-pybuilder,"Microservices architecture based on Nameko Framework. Stack: Python, Nameko, RabbitMq, Redis, Postgres and Docker",https://github.com/girnara/nameko-pybuilder,99,0,0,0,0,1,39,5,2.2051282051282053,0,0,1,1,2,6.282051282051282,33.65287040590204,0.25387902695595,24.00747933917939
55060731,johnnncodes,DDD-and-Hexagonal-Architecture-in-Python,,https://github.com/johnnncodes/DDD-and-Hexagonal-Architecture-in-Python,2,3,3,1,0,3,5,5,2.0,0,0,0,0,0,12.0,39.06890595608519,0.7909090909090909,86.48435091187949
681358976,bhw9102,d5,"Domain Driven Design, Django, to Do list",https://github.com/bhw9102/d5,53,11,11,0,0,1,85,5,1.741176470588235,1,1,0,0,2,1.776470588235294,1.5849450801777063,0.0807843137254902,2.066450096244922
971568514,MadMenDew,StudentManagementSystem,"A Python-based Student Management System demonstrating Layered Architecture with separate modules for presentation, business logic, and data access using SQLite.",https://github.com/MadMenDew/StudentManagementSystem,2,0,0,0,0,1,4,5,1.25,0,0,0,0,0,8.0,17.601086545602335,0.46875,21.153963375663547
750442252,sound1ust,FastAPI_Clean_Arch_Store,creating clean architecture on FastAPI,https://github.com/sound1ust/FastAPI_Clean_Arch_Store,65,0,0,0,0,1,35,5,2.6,1,1,1,1,4,6.4,31.68414252326735,0.2602564102564103,21.70231115907139
734280679,vedant-girish-dalvi,Real-Time-Body-Pose-Classification-using-Deep-Learning-in-microservices-architecture,,https://github.com/vedant-girish-dalvi/Real-Time-Body-Pose-Classification-using-Deep-Learning-in-microservices-architecture,10231,0,0,0,0,1,2,5,2.0,1,0,0,0,1,0.0,0.0,0.0,0.0
502650302,Coder1221,Todo-App,TodoApp with Domain Driven Design,https://github.com/Coder1221/Todo-App,60,0,0,0,0,1,29,5,3.034482758620689,1,1,0,1,3,8.310344827586206,32.77585422046225,0.6369533748163513,59.45130884390487
783335477,programadriano,python-clean-architecture,,https://github.com/programadriano/python-clean-architecture,10,2,2,0,0,2,10,5,1.8,1,1,1,1,4,3.0,1.4264662506490406,0.15,0.7132331253245203
475704130,404-439-446-458-CloudHack3,CloudHack_3,The objectives of the project were to get familiar with reading error stack trace and debugging code. Convert a monolith architecture based docker-compose application into a microservices based architecture.,https://github.com/404-439-446-458-CloudHack3/CloudHack_3,21,0,0,1,0,0,12,5,3.0,0,0,0,0,0,6.583333333333333,151.1437175322661,1.4838253221873912,294.2552144810773
832529945,sglbl,sg_project_template,Sglbl Python Project Template (with Onion/Hexagonal/DDD Architecture and Clean Structure using UV Project Manager),https://github.com/sglbl/sg_project_template,1382,2,2,0,0,1,23,5,5.391304347826087,1,1,1,1,4,6.695652173913044,19.561210122270808,0.7451086956521739,54.363827438145066
81812528,arushigupta148,Hybrid-Architecture-for-Numeral-Handwritten-Recognition,"Designed a hybrid architecture using a Random Forest Classifier and a Multi-Layer Perceptron to classify handwritten digits, taken from the MNIST dataset. The system allowed false predictions of only 0.97%. Certain pixels (features) of the image having low variance were excluded which helped increase accuracy and improve speed of computation. Published in the 5th International Conference on Future Computational Technologies (ICFCT), Kyoto, Japan (April 2017).",https://github.com/arushigupta148/Hybrid-Architecture-for-Numeral-Handwritten-Recognition,730,0,0,0,0,1,9,5,1.3333333333333333,0,0,0,0,0,0.6666666666666666,16.190399207958965,0.4888888888888889,34.031694764422014
856692849,GabrielSlima,hexagonal-architecture-aws-lambda,,https://github.com/GabrielSlima/hexagonal-architecture-aws-lambda,11,0,0,0,0,1,18,5,1.8333333333333333,1,1,1,1,4,3.5,1.5849625007211563,0.0833333333333333,2.377443751081734
237133546,Amefuri,codegen-csharp-clean,python code generator for c# clean architecture,https://github.com/Amefuri/codegen-csharp-clean,5732,0,0,0,0,1,953,10,4.816369359916054,1,0,1,0,2,31.223504721930745,434.8187646463039,2.294168410846359,4852.31497234005
836587335,Tuddy09,microservices-architecture,,https://github.com/Tuddy09/microservices-architecture,27,0,0,0,0,1,24,5,3.9166666666666665,0,0,0,0,0,9.166666666666666,26.372249389049788,0.923177426438296,63.55715494015976
125338763,EggPool,BismuthEvents,"Event Sourcing POC for Bismuth, with sample Dapps",https://github.com/EggPool/BismuthEvents,65,1,1,1,0,1,7,5,4.285714285714286,0,0,0,0,0,21.714285714285715,122.25732139240688,2.499152874152874,482.186643035113
597397703,safecorners,clean-architectures-in-pyton,,https://github.com/safecorners/clean-architectures-in-pyton,36,0,0,0,0,2,41,5,1.804878048780488,1,1,1,0,3,6.658536585365853,41.43783251707157,0.6023737662125784,56.62541363389568
926375394,eyobbokru,task-man-cqrs,,https://github.com/eyobbokru/task-man-cqrs,141,0,0,0,2,1,44,5,4.090909090909091,1,1,1,1,4,9.704545454545457,58.93947336244327,0.8430474201291606,166.6821837166336
761474361,rcvdigo,desafio-uber-clean-architecture,API,https://github.com/rcvdigo/desafio-uber-clean-architecture,555,0,0,0,0,1,96,6,2.9479166666666665,1,1,1,1,4,3.34375,7.254921122704357,0.1066186417748917,38.3267637955095
594260428,GustavoBPereira,clean_pyramid,Implementing Clean Architecture with pyramid as backend.,https://github.com/GustavoBPereira/clean_pyramid,5,0,0,0,0,1,13,5,0.4615384615384615,1,0,0,1,2,3.615384615384616,3.2929719467056726,0.1538461538461538,4.573697342969012
749066674,tomerten,archi-concrete-service-example,Example python implementation of the Abstract Factory Pattern for clean architecture.,https://github.com/tomerten/archi-concrete-service-example,23,0,0,0,0,1,7,5,1.4285714285714286,0,1,0,0,1,2.7142857142857144,0.6792696431662099,0.0714285714285714,0.3396348215831049
619470506,xamma,KubeS3,Fullstack-App for interacting with data from and to S3 storage via RestAPI and SPA. Written in Microservice-Architecture & running on K8s. ,https://github.com/xamma/KubeS3,3339,2,2,0,6,1,4,5,6.0,1,0,1,0,2,8.75,38.49864607729983,1.5089285714285714,68.44068360539735
377760926,tpcm,ALife-Module,"The code is for a GA to evolve crude single layer perceptron network architecture, defined from a 'Genome'",https://github.com/tpcm/ALife-Module,6,0,0,0,0,1,2,5,3.0,0,0,0,0,0,147.5,3407.9078056316807,10.433024407091873,39328.71590150345
5107520,JensRantil,rewind,Rewind is a (CQRS) event store server written in Python.,https://github.com/JensRantil/rewind,321,86,86,8,8,9,11,5,7.363636363636363,0,0,0,0,0,48.45454545454545,285.21495509752424,3.094447376522848,2231.2276919631845
808417529,mohd-shibilicv,Microservices-Architecture---FastAPI,,https://github.com/mohd-shibilicv/Microservices-Architecture---FastAPI,2,0,0,0,0,1,6,5,1.5,0,0,0,0,0,2.1666666666666665,1.5849625007211563,0.1666666666666666,0.7924812503605781
138730684,stefanomunarini,store_microservices,A simple online store designed as a microservices architecture,https://github.com/stefanomunarini/store_microservices,1330,0,0,0,0,0,56,5,1.8928571428571428,0,0,0,0,0,0.9464285714285714,0.5943609377704336,0.0625,0.2971804688852168
839283291,Fructueux-san,simple-ms-architecture,Simple microservice architecture project with docker & swarm,https://github.com/Fructueux-san/simple-ms-architecture,21,0,0,0,0,1,16,5,3.4375,0,0,0,1,1,2.375,13.99660231525193,0.6672008547008547,34.089764885772674
973765965,Amir0234-afk,CNN-Experiments-on-NIST-SD19-Handwritten-Characters,"Description  Modular pipeline to load, preprocess, train, and evaluate CNNs on NIST SD19 handwritten characters. Supports configurable architectures (filter sizes, kernels, layers, pooling, activations), automated training, metric reporting (accuracy, F1, confusion) and visualization of misclassifications.",https://github.com/Amir0234-afk/CNN-Experiments-on-NIST-SD19-Handwritten-Characters,177,0,0,0,0,1,1,5,9.0,0,0,0,0,0,39.0,444.367108134211,8.742857142857142,3885.0381454019584
783512995,khybort,devices-api,"Devices API with Clean Architecture, DI, RabbitMQ, FastAPI, TCP Data Communication, PostgreSQL, Docker",https://github.com/khybort/devices-api,86,0,0,0,0,1,54,5,4.018518518518518,1,1,1,1,4,5.0,3.7251878443838535,0.1654320987654321,3.763248676627277
427863062,PragyaShukla2580,DeepLog,"Anomaly detection is a critical step towards building a secure and trustworthy system. The primary purpose of a system log is to record system states and significant events at various critical points to help debug system failures and perform root cause analysis. Such log data is universally available in nearly all computer systems. Log data is an important and valuable resource for understanding system status and performance issues; therefore, the various system logs are naturally excellent source of information for online monitoring and anomaly detection. We propose DeepLog, a deep neural network model utilizing Long Short-Term Memory (LSTM), to model a system log as a natural language sequence. This allows DeepLog to automatically learn log patterns from normal execution, and detect anomalies when log patterns deviate from the model trained from log data under normal execution.",https://github.com/PragyaShukla2580/DeepLog,4028,14,14,4,1,1,11,5,4.636363636363637,0,0,0,0,0,16.727272727272727,324.1568432273025,3.690977853083571,2974.016032919077
306308010,rjNemo,graphql_python_template,GraphQL API server written in Python with clean architecture,https://github.com/rjNemo/graphql_python_template,35,2,2,0,0,2,45,5,2.488888888888889,1,1,0,1,3,2.555555555555556,1.9062183667087365,0.1977777777777777,1.9387942409632768
39532422,jaredthecoder,aussie,OSSEE (Open Source Social Event Engine),https://github.com/jaredthecoder/aussie,136,0,0,1,0,1,12,5,1.1666666666666667,0,0,1,0,1,0.0,0.3962406251802891,0.0416666666666666,0.1981203125901445
970992801,El-Viajero,Keyhole,"Keyh0le {Alpha} is an intelligent web content analyzer and crawler designed for investigators, researchers, and security analysts. It enables users to extract, summarize, and assess content from individual web sections, full pages, or entire domains using powerful AI-driven techniques.",https://github.com/El-Viajero/Keyhole,13,0,0,0,0,1,1,5,13.0,0,0,0,0,0,53.0,725.6701601015525,7.830508474576271,5682.3663384223255
621290534,RENJITHVS,Python-Microservice,This is a python-Flask based microservice architecture to convert video files into mp3. Each services are dockerized and orchastrated using Kubernetes.,https://github.com/RENJITHVS/Python-Microservice,2508,0,0,1,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,13.051943450395166,0.6236263736263735,29.6978099200233
846355680,Kartiksandy,Reddit-Pipelien," This project creates a scalable data pipeline using Reddit data. It automates ETL processes with Apache Airflow, AWS S3, Glue, and Redshift, ensuring efficient data extraction, transformation, and storage. The architecture is designed for real-time analytics with a layered S3 approach (Bronze, Silver, Gold), making it robust and cost-effective.",https://github.com/Kartiksandy/Reddit-Pipelien,36,0,0,0,0,1,6,5,3.0,0,0,0,0,0,1.5,1.459147917027245,0.25,0.7295739585136225
871932976,NguyenLy2108,FastAPI-clean-architecture,,https://github.com/NguyenLy2108/FastAPI-clean-architecture,113,0,0,0,0,1,61,5,4.852459016393443,1,0,1,0,2,4.639344262295082,24.45431671094999,0.7167772573510278,85.26456961772372
645861748,microsoft,deep-language-networks,"We view Large Language Models as stochastic language layers in a network, where the learnable parameters are the natural language prompts at each layer. We stack two such layers, feeding the output of one layer to the next. We call the stacked architecture a Deep Language Network - DLN",https://github.com/microsoft/deep-language-networks,1544,94,94,14,7,10,33,5,5.575757575757576,0,0,0,0,0,36.42424242424242,451.8013279951431,4.078823679032216,3161.9749515515077
593131440,kp-nagar,MicroserviceArchitectureDemo,This is a simple App that connects the server (FastAPI - FastAPI - Flask) using micro-services architecture and domain-driven design.,https://github.com/kp-nagar/MicroserviceArchitectureDemo,226,13,13,3,0,1,23,5,0.9565217391304348,0,0,1,0,1,1.434782608695652,2.230629596186933,0.144927536231884,1.620081775242893
960874156,ShyamSundhar1411,Course-Management-Project,"🎓 A Course Management System built with Django using MVCS Clean Architecture — a practice project focused on clean code, service-layer logic, error handling, and scalable design. Perfect for learning modular structure and real-world app patterns. 🛠️📚",https://github.com/ShyamSundhar1411/Course-Management-Project,221,0,0,0,0,1,51,5,2.823529411764706,1,1,1,1,4,3.07843137254902,2.6030960792232305,0.1437908496732026,2.95123112828526
18420465,LeetCoinTeam,lc_eventscripts_python,The leetcoin plugin for eventscripts.  Currently known working with Team Fortress 2 and Counter Strike Source,https://github.com/LeetCoinTeam/lc_eventscripts_python,173,0,0,1,0,4,4,5,0.25,0,0,0,0,0,8.0,49.18284266374492,1.0,196.73137065497968
418531809,gimKondo,clean-architecture-api-sample,Sample of API server implemented by Clean Architecture,https://github.com/gimKondo/clean-architecture-api-sample,39,0,0,0,0,1,29,5,1.862068965517241,1,1,0,1,3,2.034482758620689,1.6281303822230504,0.0862068965517241,1.797835019145346
908245837,sungchan1,fastapi-clean-architecture,fastapi-clean-architecture,https://github.com/sungchan1/fastapi-clean-architecture,70,0,0,0,0,1,35,5,2.3714285714285714,1,1,1,1,4,3.142857142857143,6.817830357657968,0.2571428571428571,15.5301540483196
612571264,wrkbase,microservices-native,Python Micro-Services Architecture on AWS EC2,https://github.com/wrkbase/microservices-native,78,0,0,0,0,1,3,5,3.0,0,0,0,0,0,2.333333333333333,19.58496250072116,0.8333333333333334,18.792481250360577
869428239,themafto,conference-booking,"Web application on AWS. Designed a microservices-based architecture leveraging S3, CloudFront, EC2, RDS (PostgreSQL), ElastiCache (Redis), and VPC to ensure scalability, security, and performance.",https://github.com/themafto/conference-booking,150,0,0,0,0,1,12,5,2.583333333333333,1,0,0,0,1,0.75,4.792481250360578,0.2499999999999999,5.062907291846956
327015502,kevingstewart,sslo-external-layered-architecture,,https://github.com/kevingstewart/sslo-external-layered-architecture,294,0,0,0,1,1,2,5,9.0,0,0,0,0,0,192.5,32819.01726991199,8.727991773718786,287059.1987817185
376246496,itsikad,depth-completion-public,"A modular Pytorch-Lightning environment for the development, evaluation and testing of deep learning algorithms for Guided Depth Completion. Currently, KITTI depth completion benchmark is available including some notable architectures for this benchmark. This is a public and clean version of the environment I've created during my thesis.",https://github.com/itsikad/depth-completion-public,39,2,2,0,0,1,18,5,6.833333333333333,1,0,0,0,1,26.33333333333333,520.2943242485585,4.0853431382890175,4263.828210333632
389911986,Glovesme,TrafficEventDetectionBE,This repository contains the source code of our work on Belgium and Brussels traffic event detection using Twitter.   ,https://github.com/Glovesme/TrafficEventDetectionBE,304,1,1,0,0,3,11,5,5.0,0,0,0,0,0,25.90909090909091,425.2149860264568,4.35633971291866,2894.1148660739736
946080564,KandyYe,ctms-ms,Crypto Trading Management System Microservices Architecture.,https://github.com/KandyYe/ctms-ms,59,6,6,2,0,2,40,5,3.1,1,1,0,0,2,4.9,34.334112640400825,0.5869458653026427,131.22561011371565
935241234,qykong,Language-TPP,"Source code for paper ""Language-TPP: Integrating Temporal Point Processes with Language Models for Event Analysis""",https://github.com/qykong/Language-TPP,3947,7,7,1,0,2,5,5,7.4,0,0,0,0,0,77.4,1789.2582329568486,5.967342377462447,32542.900344637237
830651967,JakobRoche,OCSVM-Transit-Detection,The source code for a One-Class SVM model designed to detect exoplanet transit events.,https://github.com/JakobRoche/OCSVM-Transit-Detection,11,0,0,0,0,1,1,5,13.0,0,0,0,0,0,5.0,262.3084942066396,5.28,1384.9888494110571
751218873,aliJavaTar,Clean-Architectures-in-Python,i try to implimention Clean Architectures in Python,https://github.com/aliJavaTar/Clean-Architectures-in-Python,3,0,0,0,0,1,1,5,0.0,1,0,0,0,1,0.0,0.0,0.0,0.0
560237821,ideafang,MixerNet,"Code for our CNSM'2022 paper ""A Novel Network Delay Prediction Model with Mixed Multi-layer Perceptron Architecture for Edge Computing""",https://github.com/ideafang/MixerNet,417,3,3,0,0,1,7,5,5.857142857142857,0,0,0,0,0,15.428571428571429,391.5141687874207,3.449608713600885,2021.9788837398096
480524777,Crushoverride007,Django-Ecommerce,A microservice based E-commerce App architecture ,https://github.com/Crushoverride007/Django-Ecommerce,9838,1,1,0,17,0,47,7,2.765957446808511,1,1,1,0,3,4.276595744680851,3.4049952860376127,0.1744680851063829,5.116961732706008
114772351,matthiask,django-spark,Event sourcing and handling,https://github.com/matthiask/django-spark,66,3,3,1,0,2,36,5,2.2777777777777777,0,0,0,0,0,4.277777777777778,11.90187669140776,0.3308270676691729,23.790704426357543
239599674,jakubjanuzik,management_system,Small management project system to play around with Django's clean architecture,https://github.com/jakubjanuzik/management_system,31,2,2,0,3,3,35,5,1.9142857142857144,0,0,0,1,1,3.257142857142857,0.7267025002266491,0.0857142857142857,1.5450483933001389
771004735,Daniil-Solo,PastaBeanAuthService,"Code of Auth Service in microservices architecture (FastAPI, PostgreSQL, Redis, Pytest, Ruff)",https://github.com/Daniil-Solo/PastaBeanAuthService,80,0,0,0,0,1,40,5,4.15,0,1,0,1,2,6.775,17.34136013832374,0.3922024054376996,26.9692143593286
656002160,luismoroco,CleanAPI,Flask API based on The Clean Architecture,https://github.com/luismoroco/CleanAPI,13,0,0,0,0,1,34,5,1.3529411764705883,1,0,1,0,2,2.2058823529411766,1.8332444782724224,0.0970588235294117,1.9489751803126816
663599390,gcglinton,MicroservicesDemo,Very basic demo of what a Microservices architecture could be,https://github.com/gcglinton/MicroservicesDemo,37,1,1,2,0,1,7,5,6.857142857142857,0,0,0,0,0,17.857142857142858,115.56262722978984,3.166666666666667,377.8215989467952
634648960,Valcilio,project-template,This is a project template for anyone who wants to build data projects based in Clean Architecture.,https://github.com/Valcilio/project-template,16,2,2,1,0,1,8,5,0.375,1,1,0,1,3,1.875,10.0,0.1875,15.0
704565813,bondzai,microservice-fast-api,A streamlined microservices in mono repo showcasing an elegantly simple architecture. It effortlessly integrates with other components using Redis streams.,https://github.com/bondzai/microservice-fast-api,13,0,0,0,0,1,18,5,1.1111111111111112,1,1,1,0,3,2.111111111111111,4.803468076351835,0.2333333333333333,4.565135344349604
731324928,geanportugal,clean_architecture,,https://github.com/geanportugal/clean_architecture,3589,0,0,0,0,1,49,5,2.326530612244898,1,1,1,1,4,2.7142857142857144,2.72332097982073,0.1285714285714285,1.9455520254167848
963425915,npragin,pet-classifier-model-service,Course project demonstrating a microservice architecture through a web app for cat/dog breed-level classification,https://github.com/npragin/pet-classifier-model-service,13,0,0,0,0,1,9,5,4.666666666666667,1,0,0,0,1,9.444444444444445,102.57807790532254,2.0659611992945326,415.86980593300046
889379373,Vladimir-82,domain_driven_design,,https://github.com/Vladimir-82/domain_driven_design,21,0,0,0,0,1,28,5,1.25,1,0,0,1,2,5.647058823529412,10.664638099784918,0.303921568627451,15.084595732451197
433166434,niconunez96,delivery_service,Delivery service as part of an ecommerce microservice architecture (https://github.com/nmarsollier/ecommerce),https://github.com/niconunez96/delivery_service,50,0,0,0,0,1,60,5,2.9,1,1,0,1,3,4.333333333333333,1.866416572026591,0.1083333333333333,1.3124564110493528
242137692,abdallahkhairy,GP-Data_Analysis_and_ML,"Human locomotion affects our daily living activities. Losing limbs or having neurological disorders with motor deficits could affect the quality of life. Gait analysis is a systematic study of human locomotion, which is defined as body movements through aerial, aquatic, or terrestrial space. This analysis has been used to study people ambulation, registration, and reconstruction of physical location and orientation of individual limbs used to quantify and characterize human locomotion using different gait parameters including gait activities such as walking, stairs ascending/descending, … etc., phases, and spatiotemporal parameters of human gait. Additionally, gait analysis parameters can be used to evaluate the functionality of patients and wearable system users. The evaluation is based on patient's stability, energy consumption, gait symmetry, ability to recover from perturbations, and ability to perform activities of daily living. Many companies develop assistive, wearable, and rehabilitation devices for patients with lower limb neurological disorders. These devices are tested and evaluated inside controlled lab environments. However, they don’t have enough data on the patient's performance in real world and harsh environments. Collecting large datasets of device users and their gait performance data in real environment are notoriously difficult. Additionally, collecting data on less prevalent or on gait activities other than level walking, stair ascending/descending, sitting, standing, …etc. on hard surfaces is rarely attempted. However, the scope for collecting gait data from alternative sources other than traditional gait labs could be attained with the help of IoT data collection embedded on the wearable and assistive devices and well-established cloud platforms equipped with big-data analytics and data visualization capabilities. This project aims to develop a cloud platform capable of collect data from wearable and assistive devices such as prostheses, exoskeleton, gait analysis wearable sensors, …etc. using IoT technologies. This platform is capable of automatically use data mining and visualization tools. Additionally, it uses statistical and machine learning techniques to estimate gait events, gait symmetry, gait speed, gait activities, stability, energy consumption, …etc. Also, it is capable of predicting patient's progress over time. The project will be composed of two major components, hardware component and software component. In hardware component, the students will design and implement the IoT that collects the different readings for gait analysis and send them to the cloud. Meanwhile, in the software component, the students will design and implement a set of algorithms to visualize the collected data, then design and implement data analytics to automatically analyze the collected data, so that we can estimate gait events, gait symmetry, gait speed, classify gait activities, stability, energy consumption, …etc. and predicting patient's progress over time. By analyzing the collected data, the patient's progress can be predicted over time. Additionally, these data can be used through manufacturers of prostheses legs to improve their products, as well as through health-care centers to assess the patient's performance. The following figures describe the main modules of our graduation project.",https://github.com/abdallahkhairy/GP-Data_Analysis_and_ML,6042,19,19,3,0,1,5,5,5.0,1,0,0,0,1,2.0,92.0452832538974,1.662857142857143,265.1206164773133
519548508,amelendres,postit,Hexagonal Architecture (Port and Adapter) in Python using Flask,https://github.com/amelendres/postit,23,1,1,0,0,1,33,5,2.5454545454545454,1,1,1,1,4,3.4242424242424243,10.505133233910726,0.1628507295173961,7.3315765333393985
838261922,Simongolovinskiy,websocket-chat,Fastapi project with clean architecture,https://github.com/Simongolovinskiy/websocket-chat,210,0,0,0,0,1,78,5,2.782051282051282,1,1,1,1,4,3.4743589743589745,3.737187373303812,0.1196581196581196,7.045251136368329
708688411,Achujozef,django-micro-test," In a microservices architecture, two Django projects on ports 8000 and 8001 can communicate via HTTP requests, enabling modular, independent services to exchange data and functionality, promoting scalability, and enhancing system flexibility.",https://github.com/Achujozef/django-micro-test,9,0,0,0,0,1,28,5,1.2142857142857142,0,0,0,0,0,0.3214285714285714,0.8490870539577624,0.0892857142857142,0.4245435269788812
173335086,ibm-functions,package-rabbitmq,Event Source for Rabbit MQ for IBM Functions ,https://github.com/ibm-functions/package-rabbitmq,22,9,9,2,1,3,6,5,4.5,0,0,0,0,0,16.666666666666668,96.74424418566451,2.399790184272943,331.6676774628145
471429764,solmars,python-fastapi-clean-architecture,,https://github.com/solmars/python-fastapi-clean-architecture,9,0,0,0,0,1,14,6,4.142857142857143,1,1,1,1,4,5.928571428571429,7.399820025692927,0.3910714285714285,9.069713111778128
214558357,radrumond,hidra,"The performance of gradient-based optimization strategies depends heavily on the initial weights of the parametric model. Recent works show that there exist weight initializations from which optimization procedures can find the task-specific parameters faster than from uniformly random initializations, and that such a weight initialization can be learned by optimizing a specific model architecture across similar tasks via MAML (Model-Agnostic Meta-Learning). Current methods are limited to populations of classification tasks that share the same number of classes due to the static model architectures used during meta-learning. In this paper, we present HIDRA, a meta-learning approach that enables training and evaluating across tasks with any number of target variables. We show that Model-Agnostic Meta-Learning trains a distribution for all the neurons in the output layer and a specific weight initialization for the ones in the hidden layers. HIDRA explores this by learning one master neuron which is used to initialize any number of output neurons for a new task. Extensive experiments on the Miniimagenet and Omniglot data sets demonstrate that HIDRA improves over standard approaches while generalizing to tasks with any number of target variables. Moreover, our approach is shown to robustify low-capacity models in learning across complex tasks with a high number of classes for which regular MAML fails to learn any feasible initialization.",https://github.com/radrumond/hidra,24,1,1,1,0,3,11,5,3.272727272727273,0,0,0,0,0,15.181818181818182,326.33850656653493,3.515656565656566,2419.7720563451967
243647567,sobczi,nest-cqrs-poor-cli,,https://github.com/sobczi/nest-cqrs-poor-cli,114,0,0,0,0,1,1,5,3.0,0,0,0,0,0,1.0,2837.534207028605,3.276315789473684,9296.65812565951
937489258,datashuffle63,de-gcp-covid-lake,"Modern data engineering portfolio showcasing medallion architecture implementation with end-to-end batch pipelines. Features automated ingestion and transformation of COVID-19 data through bronze, silver, and gold layers using Mage orchestration and cloud infrastructure.",https://github.com/datashuffle63/de-gcp-covid-lake,39,0,0,0,0,1,29,5,2.586206896551724,0,0,0,0,0,2.1724137931034484,15.693520821339751,0.6172413793103447,43.87601093787304
146371948,vishalpandey2192,serviceMesh-SidecarProxy,Microservices Architecture routing - Working with Envoy and tracing,https://github.com/vishalpandey2192/serviceMesh-SidecarProxy,35,0,0,0,0,0,3,5,6.0,0,0,0,0,0,17.666666666666668,174.14207229289067,2.4914529914529915,548.9887218673817
159051353,MrtnMndt,Rethinking_CNN_Layerwise_Feature_Amounts,"PyTorch implementation of our paper ""Rethinking Layer-wise Feature Amounts in Convolutional Neural Network Architectures""",https://github.com/MrtnMndt/Rethinking_CNN_Layerwise_Feature_Amounts,32,6,6,3,0,2,15,5,3.333333333333333,1,0,0,0,1,12.8,373.1200306592498,3.0478678439514697,2588.4853541962843
853697537,evil-des,todo-service,"ToDo App implemented with microservice architecture (Django, FastAPI, Aiogram)",https://github.com/evil-des/todo-service,390,1,1,0,0,1,161,6,3.093167701863354,1,1,1,0,3,3.6149068322981366,8.99146417393214,0.3350911510849398,18.9276818678992
213180663,alvarillo89,OpenEvents,☁️ Aplicación cloud open source que permite a organizadores publicar información sobre eventos,https://github.com/alvarillo89/OpenEvents,2732,2,2,0,2,1,11,5,5.727272727272728,0,0,0,0,0,8.363636363636363,54.41961163857877,0.8707912457912457,76.03438536438763
826771843,sokmeta,fastapi-clean-architecture,,https://github.com/sokmeta/fastapi-clean-architecture,29,0,0,0,0,1,43,5,3.3488372093023258,1,1,0,1,3,3.441860465116279,6.672098547122308,0.2414174972314507,7.379077568599268
491112855,guimaraaes,backend-python-clean-architecture,,https://github.com/guimaraaes/backend-python-clean-architecture,74,0,0,0,0,1,77,5,2.7532467532467533,1,1,1,1,4,4.987012987012987,21.98132061534989,0.5141471803809466,40.32748256399296
837207879,galexla,wildberries_task1,Teams management application implementing Clean Architecture,https://github.com/galexla/wildberries_task1,21,0,0,0,1,1,31,5,2.3225806451612905,1,0,0,0,1,9.193548387096774,47.884929975370376,0.3461973793043403,131.43829707784224
351512391,alekseykonotop,prod_4_practice,A repository for training in microservice architecture on a remote server.,https://github.com/alekseykonotop/prod_4_practice,27,0,0,0,0,1,3,5,6.0,0,0,0,0,0,1.0,6.895485357162548,0.5,3.447742678581274
882142466,Sachin20010517,Tender-Microservice-Flask,"This project is designed for practicing the creation of a backend microservice using the Flask framework. It provides a hands-on experience with RESTful API development, database integration, and best practices for microservice architecture.",https://github.com/Sachin20010517/Tender-Microservice-Flask,10,0,0,0,0,1,17,5,2.411764705882353,0,0,1,0,1,2.411764705882353,3.01856744438696,0.2352941176470588,1.850743736147504
521483619,ismairdrs,python-hexagonal-architecture,,https://github.com/ismairdrs/python-hexagonal-architecture,10,0,0,0,0,1,25,5,0.68,1,1,1,1,4,1.32,1.825232743349892,0.08,2.180586372251871
938767318,binogood,layered-architecture,,https://github.com/binogood/layered-architecture,37,0,0,0,0,1,47,7,4.319148936170213,1,1,1,1,4,6.25531914893617,15.690329332196333,0.4123284516901538,32.06854397151983
490017639,slapshin,django-cqrs-demo,Practical example of Django CQRS architecture,https://github.com/slapshin/django-cqrs-demo,512,5,5,1,5,1,213,6,2.544600938967136,1,1,1,0,3,3.0704225352112675,8.088487847678879,0.2489423862012655,9.745082635960545
453442306,julianVelandia,Eureka,"Eureka is a Rest-API project for Web Scraping, data cleaning and organization, based on FastAPI and following a hexagonal architecture. Designed for the Eureka by Turing project of the National University of Colombia",https://github.com/julianVelandia/Eureka,69,4,4,1,0,1,85,6,1.2470588235294118,1,1,0,1,3,1.6941176470588235,4.164132959433984,0.1098297780650721,5.12170410180525
934250779,DVDLC,traxion,"Technical apply using python, dessing patterns and hexagonal architecture",https://github.com/DVDLC/traxion,40,0,0,0,0,1,40,5,2.75,1,1,1,1,4,3.575,17.41385354654637,0.4087274774774775,88.6039007471388
649012236,how-dev,scrapping,Web Scrapping using Flask and Clean Architecture,https://github.com/how-dev/scrapping,34,2,2,0,0,1,28,5,2.142857142857143,1,1,1,0,3,3.5357142857142856,3.6575137164152296,0.2619047619047619,6.904944741590908
775247732,Shubh-kr,End-to-end-ML,Detailed overview of creating and deploying an ML pipeline leveraging a Microservice based architecture.,https://github.com/Shubh-kr/End-to-end-ML,6,0,0,0,0,1,1,5,15.0,0,0,0,0,0,28.0,210.0,2.5,525.0
250557571,cuzzuky87,clean-architecture-django,,https://github.com/cuzzuky87/clean-architecture-django,22,0,0,0,2,1,31,5,1.5161290322580645,0,0,0,0,0,2.6129032258064515,1.4925182879293883,0.064516129032258,2.0853939640823578
485453029,erictolson,bjj-technique-generator,"Simple project as a byproduct of my computer science studies at Oregon State University. Representative of course CS 361, Software Engineering 1. The purpose of which was an introduction to Agile methodology and microservice architecture.",https://github.com/erictolson/bjj-technique-generator,7,1,1,0,0,1,2,5,2.0,0,0,0,0,0,25.5,444.1145231868255,2.0398734177215188,1257.7169877632418
741877468,ahmedraza41190,Todo-REST-API,"Todo REST API project using combination of FastAPI, Postgres SQL Database, and SQLAlchemy in Python using layered architecture.,Add API endpoints for todo CRUD operations (POST, PUT, DELETE. Also develop Streamlit client and a Python console client and a Typescript Node.js console client. Also add unit tests using pytest.",https://github.com/ahmedraza41190/Todo-REST-API,11,1,1,0,0,1,6,5,2.6666666666666665,0,0,0,0,0,5.0,26.167240110370816,0.4166666666666667,16.40554815007277
641833429,pesfahanian,django-monorepo-microservice,Simple payment application utilizing Monorepo codebase architecture and Microservice deployment architecture.,https://github.com/pesfahanian/django-monorepo-microservice,86,7,7,0,0,1,110,6,2.327272727272727,1,0,1,1,3,1.6272727272727272,4.03734055076037,0.1436363636363636,7.0059461057327095
900647231,huykiemrong389,CleanArchitecture,,https://github.com/huykiemrong389/CleanArchitecture,12118,0,0,0,0,1,1003,10,12.64406779661017,1,1,1,1,4,68.3678963110668,804.0067177129653,3.917804173561173,7889.760684499688
562259063,guilhermeffreire,clean_architecture_python,,https://github.com/guilhermeffreire/clean_architecture_python,43,0,0,0,0,1,68,5,2.2205882352941178,1,1,1,1,4,3.0,5.907621076135431,0.2105392156862745,7.189823504054263
768676314,Cinnamoon-dev,FastAPI-Hexagonal,A FastAPI API with a PostgreSQL database using Ports & Adapters Architecture (Hexagonal Architecture),https://github.com/Cinnamoon-dev/FastAPI-Hexagonal,69,2,2,1,0,1,21,5,2.571428571428572,1,1,1,1,4,5.333333333333333,9.729231570630134,0.3514739229024943,19.45623511347199
621482550,daneschoen,flask_auth0,Flask auth0 authentication layer for Microservices architecture,https://github.com/daneschoen/flask_auth0,1014,0,0,0,0,1,21,5,3.333333333333333,0,0,1,0,1,3.2857142857142856,13.862381537658589,0.3220551378446115,33.44490845990956
415792907,neil-vqa,firekeep,"A Flask app that follows Domain-Driven Design, Repository, Service Layer, and CQRS patterns. For educational purposes only.",https://github.com/neil-vqa/firekeep,97,0,0,0,0,1,11,5,2.4545454545454546,0,0,0,0,0,4.0,1.8422420460445823,0.1363636363636363,1.6261107959462429
901886761,bpaiken,fastapi-reference,Clean reference architecture for FastAPI,https://github.com/bpaiken/fastapi-reference,32,1,1,0,0,1,35,5,2.6,1,0,0,1,2,2.5428571428571427,3.182080477082593,0.1795918367346938,4.373764239933245
499533089,vcenteio,diystore,A sample project for an online store using a mix of Domain Driven Design and Clean Architecture.,https://github.com/vcenteio/diystore,433,0,0,0,3,1,146,7,6.513698630136986,1,1,1,1,4,10.76027397260274,52.00717773185156,0.525647940866739,114.38098805192612
969312057,AyoubJadouli,Gemma3-InternalWorld-WildFire,"This repository contains the implementation of a novel architecture for wildfire prediction described in our paper ""Deep Learning with Pretrained 'Internal World' Layers: A Gemma 3-Based Modular Architecture for Wildfire Prediction"".",https://github.com/AyoubJadouli/Gemma3-InternalWorld-WildFire,699,1,1,0,0,1,7,5,8.428571428571429,1,0,0,0,1,34.142857142857146,723.709913743044,7.130791742737157,5953.00623272939
49256898,bkvarda,particleboard,Streams Particle.io public events to Hadoop HDFS using Flume HTTP Source with Hive sink,https://github.com/bkvarda/particleboard,6,2,2,1,1,1,1,5,7.0,0,0,0,0,0,0.0,463.9792043087891,1.9534883720930232,906.3779805101926
79171632,spatel1010,COMP150_Fall14,"Introduction to Computing: This course provides a broad survey introducing the many layers of the computer science discipline, emphasizing the computer’s role and limitations as a tool for describing, organizing, and manipulating information applicable to many disciplines. Topics include binary logic expressed in electronic circuitry, machine architecture, basic programming in the very accessible language Python, data organization, the potential and limitations of machines, and useful tools.  This course serves as a terminal course for students who want a one-course introduction to the field, as well as a preliminary course to upper-level computer science offerings.",https://github.com/spatel1010/COMP150_Fall14,491,0,0,0,0,1,43,5,0.0,0,0,0,0,0,1.0465116279069768,14.31843157297792,0.8445736434108528,28.665637500914663
463338307,CharlyJazz,Chat-Firebase-Apache-Camel,"Chat Message Monorepo Architecture Solution using Kafka, Terraform, GKE, GCP,  DockerHub,Kubernetes, Docker, Apache Camel, Python, FastAPI, Cassandra and Firestore, Next JS, React",https://github.com/CharlyJazz/Chat-Firebase-Apache-Camel,906,21,21,2,7,1,68,9,3.779411764705882,1,0,1,0,2,4.779411764705882,27.269357507915963,0.4230960602864627,45.42721262358674
954407268,Pliperkiller,cookiecutter-flask-Hexagonal,Cookiecutter Template for a Flask Microservice with Hexagonal Architecture,https://github.com/Pliperkiller/cookiecutter-flask-Hexagonal,12,0,0,0,0,1,34,7,0.1470588235294117,1,1,1,1,4,0.1470588235294117,1.5,0.0735294117647058,1.8529411764705883
621931860,webowodev,fastapi-clean-architecture,Company standard Fastapi clean architecture boilerplate,https://github.com/webowodev/fastapi-clean-architecture,69,1,1,0,0,1,43,5,1.837209302325581,1,1,1,1,4,1.6511627906976745,2.450257593777138,0.1302325581395348,1.7207281792384044
579304005,Jackk-Doe,e-commerce-microservices-backend-app,E-Commerce backend with Microservices architecture,https://github.com/Jackk-Doe/e-commerce-microservices-backend-app,318,0,0,0,0,1,38,5,3.1052631578947367,0,1,1,1,3,5.947368421052632,14.99726502946379,0.3608552631578947,46.30552924571948
784544878,mancubus77,eda-sources,Event Driven Ansible AMQP and Kafka Sources,https://github.com/mancubus77/eda-sources,6,0,0,0,0,1,2,5,6.0,0,0,0,0,0,8.5,27.764662506490406,1.25,34.89699375973561
815205753,putongyong,python_clean_architecture,,https://github.com/putongyong/python_clean_architecture,7,0,0,0,0,1,14,5,3.928571428571429,1,1,1,1,4,3.642857142857143,1.9475853070370317,0.0714285714285714,0.9737926535185156
258310407,codershona,project_event_management_system,Socialize Application is an open source event management system. ,https://github.com/codershona/project_event_management_system,130,12,12,1,9,2,23,5,1.4782608695652173,0,0,0,0,0,1.3478260869565215,1.1419418481082786,0.0942028985507246,0.6579274457932697
311893370,huiluocao,MLP_training,A class that alows to train the neural network architecture of a multi-layered perceptron.,https://github.com/huiluocao/MLP_training,28,0,0,0,0,0,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
237857729,leizleho,freebay-microservices,4th iteration of my Freebay App using microservice architecture,https://github.com/leizleho/freebay-microservices,247,0,0,0,2,1,15,5,2.933333333333333,0,0,0,0,0,6.2,43.6681683803666,0.6074338624338623,86.9766458390918
412452947,geekahmed,Radio-Tefa,A simple radio streaming app to prove the concept of using Fastapi with MongoDB with the assistance of Clean Architecture concepts.,https://github.com/geekahmed/Radio-Tefa,5,1,1,0,0,1,26,5,1.2307692307692308,1,1,0,1,3,1.4615384615384617,0.5965298078587283,0.0384615384615384,0.5965298078587283
893032257,Danitilahun,Order-Management-Microservices-Rabbitmq,"This system demonstrates a microservices architecture for managing e-commerce orders. It handles order creation, payment processing, inventory management, and user notifications, leveraging RabbitMQ for asynchronous communication.",https://github.com/Danitilahun/Order-Management-Microservices-Rabbitmq,8593,0,0,2,0,1,27,5,3.074074074074074,0,0,0,0,0,2.333333333333333,3.247957045846765,0.1931216931216931,4.177275107500385
117867136,Enforcer,clean-architecture-example-1,Exemplary project using Clean Architecture in Python,https://github.com/Enforcer/clean-architecture-example-1,62,34,34,8,1,1,44,5,3.136363636363636,1,1,1,1,4,4.613636363636363,13.533568983311165,0.4075757575757576,29.229812597559725
242948634,modem0011,Convolutional-Neural-Networks,"Training and Testing CIFAR10 data set with 1 layer CNN,2 layer CNN and Lenet architecture.",https://github.com/modem0011/Convolutional-Neural-Networks,6,0,0,0,0,1,1,5,7.0,0,0,0,0,0,25.0,178.37726474549189,4.875,869.589165634273
578397058,MattiaSarti,kafka,Kafka for an Event-driven Microservice Architecture,https://github.com/MattiaSarti/kafka,2936,0,0,0,0,1,2,5,7.5,0,0,0,0,0,7.5,76.12692989580097,2.0769230769230766,158.85668438131404
547391175,pmareke,domain-driven-design,Domain Driven Design example using Python,https://github.com/pmareke/domain-driven-design,811,23,23,0,0,2,56,6,3.0357142857142856,1,1,1,1,4,3.5535714285714284,1.1165950895175143,0.0931122448979591,2.9909506702481137
949128731,ArmanGrewal007,fastapi_cqrs,Command Query Request Segregation template using FastAPI,https://github.com/ArmanGrewal007/fastapi_cqrs,28,1,1,0,0,1,11,5,2.909090909090909,1,0,1,0,2,2.8181818181818183,4.088419185662261,0.1363636363636363,6.13262877849339
883322517,vigneshs-dev,fastapi-rabbitmq-micro-service,"A modern microservices architecture showcasing FastAPI, ML processing, authentication, and real-time notifications",https://github.com/vigneshs-dev/fastapi-rabbitmq-micro-service,251,3,3,0,1,1,11,5,7.454545454545454,0,0,0,1,1,8.181818181818182,21.15350230755334,0.6710743801652893,44.30286213963111
145317330,aldo774,clean_architecture_python,A demo implementation of a clean architecture in Python,https://github.com/aldo774/clean_architecture_python,33,0,0,0,0,1,32,5,1.6875,1,1,1,0,3,6.09375,35.8839355461007,0.4171875,40.08751932012403
666121396,LucasMallmann,clean-architecture-python,,https://github.com/LucasMallmann/clean-architecture-python,3,0,0,0,0,1,12,5,0.5,1,1,0,1,3,2.75,5.860335893412778,0.2291666666666666,16.115923706885138
923049163,RenzoLenes,api-jwt-cleanArchitecture,,https://github.com/RenzoLenes/api-jwt-cleanArchitecture,22,0,0,0,0,1,12,5,3.6666666666666665,0,1,0,1,2,5.083333333333333,6.509807494238884,0.2625,9.638162260912829
855632464,swarajkumarsingh,ats-project,"Free & Open Source ATS HR Portal with simple user friendly interface. With built-in features like Email Notifcation, Google Meet Call Scheduling & Google Calendar Event using Python with the support of Gemini & ChatGPT  ",https://github.com/swarajkumarsingh/ats-project,8792,5,5,0,0,1,5,5,8.4,0,0,0,0,0,23.2,108.55727162049224,2.1333333333333337,288.9952121141868
900519774,hperezc,hazard-event-query-app,"A query application for hazard events in Colombian municipalities, integrating data from official sources such as UNGRD, DAGRAN, and SIMMA.",https://github.com/hperezc/hazard-event-query-app,10882,1,1,0,0,1,1,5,18.0,0,0,0,0,0,97.0,1241.2945601180904,9.2,11419.909953086431
934813312,pickle-slime,modular_monolith,,https://github.com/pickle-slime/modular_monolith,8567,0,0,0,0,1,201,7,3.925373134328358,1,1,1,1,4,8.597014925373134,33.43962305162068,0.7218680356207007,112.95058269285038
587118998,ixcheldelsun,microservices-arch-example,Example of a microservices architecture with Python,https://github.com/ixcheldelsun/microservices-arch-example,161,0,0,0,0,1,7,5,2.0,0,1,0,0,1,6.0,15.178303576579683,0.3979591836734694,34.18306123626377
680040784,emirhanbilgic,flexible_neural_nets,"This project implements a multi-layer neural network from scratch, using only fundamental Python libraries such as NumPy. The architecture is designed with flexibility in mind, allowing users to easily adjust the number of layers and neurons within those layers.",https://github.com/emirhanbilgic/flexible_neural_nets,3,0,0,0,0,1,1,5,1.0,0,0,0,0,0,18.0,390.947375050481,5.1923076923076925,2029.919062762113
527804429,gdscuic,microservices,Introduction to Microservices Architecture with Protocol Buffers,https://github.com/gdscuic/microservices,3,0,0,0,0,1,2,5,5.0,0,0,0,0,0,2.5,27.686456071487648,1.3571428571428572,41.923290763862056
816001090,Pedrodkp,clean_architecture,,https://github.com/Pedrodkp/clean_architecture,1949,0,0,0,0,1,63,5,1.4285714285714286,1,1,1,1,4,2.6825396825396823,4.854993180076569,0.1507936507936507,3.837252070062814
545011233,theshohidul,FastAPI-Boilerplate,"A dockerized FastAPI Boilerplate with JWT, Loguru logging, Role based authorization, SQLAlchemy ORM with AsyncSession. Repository design pattern, Domain driven design, Service Layer implemented.",https://github.com/theshohidul/FastAPI-Boilerplate,217,22,22,9,1,2,66,6,2.787878787878788,1,0,1,0,2,3.409090909090909,8.214167011886767,0.2390791027154663,12.584889067035087
694042964,Prakhar2295,Wafer_Kubernetes_Microservices,A machine learning inferencing project which combines multicontainer microservices architecture consists of streamlit frontend as an UI and backend flask server app for getting results from the models and logging the details into mongodb database and saving preprocessed data into mysql database.,https://github.com/Prakhar2295/Wafer_Kubernetes_Microservices,2922,1,1,0,0,1,19,5,3.1578947368421053,1,0,0,0,1,8.947368421052632,99.85230385293984,0.8046845837999254,272.7519777408638
900246248,josnin,PyDDD,A reference implementation of Domain Driven Design principles in Python,https://github.com/josnin/PyDDD,14,1,1,0,0,1,15,5,2.333333333333333,1,0,0,1,2,5.0,10.714586668205136,0.3,21.22917333641027
852908041,hiramochoavea,hexarch_orders_api,Orders API with Hexagonal Architecture,https://github.com/hiramochoavea/hexarch_orders_api,119,0,0,0,0,1,71,5,2.183098591549296,1,1,0,1,3,3.6056338028169015,15.22307358209097,0.2782834260464749,29.22840268808686
194160850,r-sitko,todo-list-app-microservices,"A todo list backend application written using microservices architecture.  Used languages and technologies: gRPC, C++, Python, Docker, JWT, SQL, SQLAlchemy.",https://github.com/r-sitko/todo-list-app-microservices,346,23,23,14,0,0,20,5,6.6,0,0,0,1,1,7.7,14.385691707489382,0.5425595238095238,12.420402173400234
555461591,ingestebancorrea,proyectoregistraduria-be-resultados,This project content the setup of the result backend like a part of the project developed to Registraduria Nacional De Colombia through a the architecture of microservices.,https://github.com/ingestebancorrea/proyectoregistraduria-be-resultados,44,0,0,1,0,1,15,5,2.8666666666666667,0,0,0,0,0,8.333333333333334,9.422857502740392,0.2,15.26075250475963
235231400,phella,microservices-file-system,Node js project for online drive using micro services architecture.,https://github.com/phella/microservices-file-system,3028,0,0,1,5,1,15,5,5.6,0,0,0,1,1,5.8,139.26026698224328,1.6341798941798942,529.4778305444571
701354127,AustinAdodo,CQRS_implmentation_python,Project demonstrating how to ensure database consistency with utilizing CQRS with RDBMS. This method can also be applied to NoSQL databases where consisency is the area of focus. CQRS implmentation can be utilised with sharded RDBMS and tries to attain consitency between shards with further adjustments and configurations. ,https://github.com/AustinAdodo/CQRS_implmentation_python,5,1,1,0,0,1,10,5,0.7,0,0,0,0,0,4.1,1.7264662506490407,0.25,1.0132331253245204
739546121,davearch,gentle-event-sourcing,,https://github.com/davearch/gentle-event-sourcing,7,0,0,0,0,1,2,5,4.0,0,0,0,0,0,7.0,63.67494954495236,1.5,95.51242431742854
32725040,stefanvanwouw,knutseldag-maart-2015,Demo of MicroService architecture using Ansible/Docker Swarm and Consul,https://github.com/stefanvanwouw/knutseldag-maart-2015,1419,0,0,0,0,3,1,8,10.0,0,0,1,0,1,22.0,408.4146246219477,6.4625,2639.3795116193373
579738631,AhmedRaafat-AR,UdaConnect,Cloud Native Application Architecture Nanodgree - Udacity - refactor our application into a microservice architecture using message passing techniques ,https://github.com/AhmedRaafat-AR/UdaConnect,1968,0,0,0,0,1,26,5,3.8461538461538463,0,0,0,0,0,3.230769230769231,4.1454673811120335,0.3153846153846154,7.051378488220951
169054457,deepkashiwa,DeepUrbanEvent,Source Codes for KDD'19 Paper - DeepUrbanEvent: A System for Predicting Citywide Crowd Dynamics at Big Events,https://github.com/deepkashiwa/DeepUrbanEvent,1104,16,16,1,0,1,39,5,11.615384615384617,0,0,0,0,0,40.92307692307692,2175.1152354507767,5.326256456437444,17028.615276147433
734677026,qu3vipon,django-ddd,Apply Domain-driven Design to Django without Django Rest Framework,https://github.com/qu3vipon/django-ddd,106,47,47,4,0,1,77,5,1.896103896103896,1,1,1,1,4,2.467532467532468,1.8392021059789985,0.0952380952380952,1.1872587214886785
786032977,yehzu,import_shipment_poc,poc under clean architecture,https://github.com/yehzu/import_shipment_poc,70,0,0,0,8,2,71,5,1.380281690140845,1,1,0,1,3,2.323943661971831,0.8030922536430124,0.0633802816901408,0.4860531690750273
754849868,dominowr,PicRater,Simple backend for web application based on microservices architecture.,https://github.com/dominowr/PicRater,20,0,0,0,0,1,26,5,2.6538461538461537,0,0,0,0,0,1.6153846153846154,1.5352654947169282,0.1057692307692307,0.9685688324929476
778821383,harshbalpande55,ClipConvert,Converting mp4 videos to mp3 in a microservices architecture.,https://github.com/harshbalpande55/ClipConvert,18,0,0,0,0,1,17,5,3.764705882352941,0,0,0,0,0,4.647058823529412,56.98438115027143,0.90965247887773,218.7195813794919
728564264,albertoalcolea,ringr,Sound event detection system based on the open-source cross-platform PortAudio API,https://github.com/albertoalcolea/ringr,79,5,5,0,0,1,15,5,4.933333333333334,0,0,0,0,0,9.533333333333331,35.08640733886925,0.586036036036036,120.37849354108474
915811969,MytsV,caps,Clean Architecture Python SDK,https://github.com/MytsV/caps,199,0,0,0,0,0,14,5,3.0,0,0,0,0,0,6.5,20.465081902936934,0.4345238095238095,33.15594740929037
889587842,NeliocmSampaio,clean-architecture,,https://github.com/NeliocmSampaio/clean-architecture,60,0,0,0,0,1,94,6,2.5638297872340425,1,1,1,1,4,3.0638297872340425,4.029133443751257,0.1486406619385342,7.784832193759059
863942873,Vioancer,python-fastapi-hex-todo,TODO aplication made with Python's FastAPI framework and Hexagonal Architecture,https://github.com/Vioancer/python-fastapi-hex-todo,167,0,0,0,0,1,99,6,2.686868686868687,1,1,1,1,4,4.242424242424242,14.204817562627223,0.1954874560137718,22.47087941202823
873590566,franckeni,accountings_fastapi_ci_cd,"FastAPI app with Jenkins CI / CD, Ansible, Vagrant, SONARQUBE and clean architecture deployed on AWS EC2",https://github.com/franckeni/accountings_fastapi_ci_cd,106,0,0,0,0,1,47,7,3.617021276595745,1,1,1,1,4,4.893617021276596,18.51625228714336,0.4745862884160757,58.20863386855864
309733954,TIBHannover,VisE,"This repository contains all necessary meta information, results and source files to reproduce the results in the publication Eric Müller-Budack, Matthias Springstein, Sherzod Hakimov, Kevin Mrutzek, and Ralph Ewerth:  ""Ontology-driven Event Type Classification in Images"". In: IEEE Winter Conference on Applications of Computer Vision (WACV), IEEE, 2021.",https://github.com/TIBHannover/VisE,1552,6,6,3,1,2,8,5,8.625,0,0,0,0,0,20.875,234.31004903967064,4.560105253047671,1373.8158777093292
796056713,LunarianLuvien,Library_OOAD_DomainDrivenDesign,"OOAD COURSE PROJECT - A basic library management system designed using domain-driven design, implemented with Flask and SQLAlchemy, supporting registration, cataloging, and borrowing of books.",https://github.com/LunarianLuvien/Library_OOAD_DomainDrivenDesign,538,0,0,0,0,1,16,5,2.1875,1,0,0,1,2,5.625,3.1958648451472405,0.125,1.5979324225736202
931721219,ConradMearns,dizzy,Something about Domain Driven Event Sourcing,https://github.com/ConradMearns/dizzy,12374,1,1,1,2,2,16,5,2.4375,1,0,0,0,1,16.25,34.35450010742609,0.9287946428571427,112.45219126524984
241114506,shriyaagarwal,Global-Terrorism,"The Global Terrorism Database (GTD)™ is the most comprehensive unclassified database of terrorist attacks in the world. The National Consortium for the Study of Terrorism and Responses to Terrorism (START) makes the GTD™ available via this site in an effort to increase understanding of terrorist violence, so that it can be more readily studied and defeated. The GTD™ is produced by a dedicated team of researchers and technical staff, who are supported by an alumni of researchers.  The governance of the database is assured by an advisory board which includes some of the most respected academics in the field of terrorism research.  The GTD™ is an open-source database, which provides information on domestic and international terrorist events around the world since 1970, and now includes more than 190,000 events. For each event, a wide range of information is available, including the date and location of the incident, the weapons used, nature of the target, the number of casualties, and – when identifiable – the group or individual responsible.",https://github.com/shriyaagarwal/Global-Terrorism,1,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
892330156,Graciliana,clean_architecture,,https://github.com/Graciliana/clean_architecture,16,0,0,0,0,1,14,5,0.8571428571428571,1,0,0,1,2,1.8571428571428568,0.3396348215831049,0.0357142857142857,0.1698174107915524
444817928,vijay-guttula,microservices.architecture,,https://github.com/vijay-guttula/microservices.architecture,117,0,0,0,0,1,25,5,2.36,1,0,1,0,2,3.2,6.924032545093017,0.2666666666666666,7.503250544746862
629826506,ashishkulkarnii,microservice-calculator,Simple Calculator made using Microservice Architecture for UE20CS351 Cloud Computing Assignment,https://github.com/ashishkulkarnii/microservice-calculator,608,0,0,2,0,0,14,5,1.1428571428571428,0,0,0,0,0,1.2142857142857142,15.449570079934569,0.9285714285714286,14.782196648810013
18096865,commoncode,cqrs.io,,https://github.com/commoncode/cqrs.io,396,2,2,1,0,39,19,5,1.631578947368421,1,0,0,0,1,1.0526315789473684,0.983497687973034,0.0526315789473684,0.4917488439865169
889834843,OND10,CleanArch-with-Django,Build a clean architecture app with Django framework. Try to separate between layers. Implement some design patterns such as repository dp.,https://github.com/OND10/CleanArch-with-Django,70,0,0,0,0,1,24,5,2.5416666666666665,1,1,1,1,4,3.5,3.5245288844768226,0.125,4.6924323889448
952936896,EdwardPham1615,python-clean-architecture-project,"🛠️ A scalable Python backend following Clean Architecture, designed to adapt to multiple infrastructures (SQL, NoSQL, queues, caches).",https://github.com/EdwardPham1615/python-clean-architecture-project,233,11,11,0,0,1,105,5,4.266666666666667,1,1,1,1,4,8.361904761904762,13.321253779866842,0.3236188920012449,32.99386572635127
434974952,wrsbyte,Softpymes_Hexagonal_Architecture,Softpymes_Hexagonal_Architecture,https://github.com/wrsbyte/Softpymes_Hexagonal_Architecture,29,0,0,0,0,1,41,6,1.7804878048780488,1,1,1,1,4,2.0,0.115972865906426,0.0121951219512195,0.057986432953213
788661085,RubenBBlazquez,ApiRestOrders-,Api Rest to get orders from mysql using hexagonal architecture,https://github.com/RubenBBlazquez/ApiRestOrders-,64,0,0,0,0,1,63,5,3.9047619047619047,1,1,0,1,3,5.142857142857143,13.065490747358384,0.1615646258503401,11.938411545296775
917791499,Sorokindrew,clean_architecture,,https://github.com/Sorokindrew/clean_architecture,13,0,0,0,0,1,16,5,2.4375,1,0,0,1,2,5.625,16.83241086141338,0.2764204545454545,23.768537735001168
951480994,PleaseMePython,OTUS_HW6,Clean architecture,https://github.com/PleaseMePython/OTUS_HW6,28,0,0,0,0,1,20,5,2.7,1,0,0,1,2,10.05,28.392619778104528,0.4949197860962567,35.17846861818522
831424495,JEONG-BD,clean_architecture,,https://github.com/JEONG-BD/clean_architecture,26,0,0,0,0,1,57,5,1.5087719298245614,1,1,1,1,4,2.43859649122807,4.614580577703536,0.1403508771929824,3.86544108256309
417083156,evoludigit,clean_fastapi,"A project to explore Domain Driven Design and clean architecture, on a Python / Fastapi / PostgreSQL / SQLAlchemy stack.",https://github.com/evoludigit/clean_fastapi,71,1,1,1,0,1,7,5,4.285714285714286,1,0,0,1,2,3.4285714285714284,9.04339464625688,0.2285714285714286,4.854049644649732
218839668,mohamedgalia,telegrambot-MobSourcing,bot for recruitment people for doing events,https://github.com/mohamedgalia/telegrambot-MobSourcing,16,0,0,0,0,1,2,5,6.5,0,0,0,0,0,42.0,402.799050221104,5.702545297670405,2697.882629443156
919339632,tobolovskaya,A-REST-API-application-implemented-using-a-multi-layered-architecture.,,https://github.com/tobolovskaya/A-REST-API-application-implemented-using-a-multi-layered-architecture.,259,0,0,0,0,1,18,5,5.166666666666667,0,1,1,0,2,6.0,12.96170234140172,0.5044642857142857,32.097465473768224
261919387,v-shash,nido,Forum using a microservices architecture,https://github.com/v-shash/nido,7,0,0,0,1,1,3,5,2.6666666666666665,0,0,0,0,0,17.666666666666668,38.52932501298081,1.0476190476190477,76.65435359759623
461036721,rob0t7,django-hexagonal-arch,"Code experiment around Django, DRF and hexagonal architecture.",https://github.com/rob0t7/django-hexagonal-arch,90,0,0,0,3,1,15,5,1.6666666666666667,0,0,0,0,0,1.4666666666666666,0.8339850002884626,0.1333333333333333,0.5169925001442313
880584705,Sirius506775,fastapi-clean-architecture,,https://github.com/Sirius506775/fastapi-clean-architecture,50,0,0,0,0,1,10,5,3.2,1,1,1,1,4,2.9,1.4264662506490406,0.15,0.7132331253245203
859058131,jorgesalinas07,role-based-user-control,Hexagonal architecture app for role and permission based user control,https://github.com/jorgesalinas07/role-based-user-control,118,0,0,0,0,1,66,5,3.409090909090909,1,1,1,1,4,6.318181818181818,29.556566487464902,0.3224307562865557,42.22512306407053
261530299,arodrigueze0215,katas,"katas to TDD, Clean Architecture, DDD Practices",https://github.com/arodrigueze0215/katas,68,1,1,0,0,1,112,6,1.8125,1,1,0,1,3,4.5,5.870984473727531,0.2238720914502164,14.38327306863081
36873985,usnistgov,ocr-pipeline,Convert a corpus of PDF to clean text files on a distributed architecture,https://github.com/usnistgov/ocr-pipeline,1906,38,38,8,4,10,35,6,3.2,1,0,0,0,1,20.0,258.4973126638888,2.2438869873199123,2205.1559495849497
264771656,chonhan,flask_restapi_clean_architecture,A Clean Architecture Practice with Flask REST API,https://github.com/chonhan/flask_restapi_clean_architecture,77,141,141,28,1,5,77,5,1.3376623376623376,1,0,1,1,3,2.4545454545454546,3.851871651639416,0.0924963924963925,5.249385284977191
736816064,hilliegithub,videoToMp3_pythonApp,"This is a small Python Flask app to help me understand how a microservices architecture works whilst learning technology such as kubernetes, RabbitMQ and MongoDB.",https://github.com/hilliegithub/videoToMp3_pythonApp,14,0,0,0,0,1,14,5,3.5,0,0,0,1,1,2.7857142857142856,13.704001964574612,0.6791819291819292,35.82121454465464
965187748,Adrianordp,todo_clean,TODO app structured according to Clean Architecture principles,https://github.com/Adrianordp/todo_clean,104,0,0,0,0,1,44,5,1.8409090909090908,1,1,0,0,2,5.7727272727272725,12.832763312942832,0.314105339105339,16.021317942545735
311455154,paki-the-box,packi-es,Event Sourcing based Backend for Packi!,https://github.com/paki-the-box/packi-es,33,3,3,0,0,2,4,5,5.75,0,0,0,0,0,20.75,49.366510049584384,1.1041666666666667,175.87441268594145
313503815,himanshub1007,Alzhimers-Disease-Prediction-Using-Deep-learning,"# AD-Prediction  Convolutional Neural Networks for Alzheimer's Disease Prediction Using Brain MRI Image  ## Abstract Alzheimers disease (AD) is characterized by severe memory loss and cognitive impairment. It associates with significant brain structure changes, which can be measured by magnetic resonance imaging (MRI) scan. The observable preclinical structure changes provides an opportunity for AD early detection using image classification tools, like convolutional neural network (CNN). However, currently most AD related studies were limited by sample size. Finding an efficient way to train image classifier on limited data is critical. In our project, we explored different transfer-learning methods based on CNN for AD prediction brain structure MRI image. We find that both pretrained 2D AlexNet with 2D-representation method and simple neural network with pretrained 3D autoencoder improved the prediction performance comparing to a deep CNN trained from scratch. The pretrained 2D AlexNet performed even better (**86%**) than the 3D CNN with autoencoder (**77%**).  ## Method #### 1. Data In this project, we used public brain MRI data from **Alzheimers Disease Neuroimaging Initiative (ADNI)** Study. ADNI is an ongoing, multicenter cohort study, started from 2004. It focuses on understanding the diagnostic and predictive value of Alzheimers disease specific biomarkers. The ADNI study has three phases: ADNI1, ADNI-GO, and ADNI2. Both ADNI1 and ADNI2 recruited new AD patients and normal control as research participants. Our data included a total of 686 structure MRI scans from both ADNI1 and ADNI2 phases, with 310 AD cases and 376 normal controls. We randomly derived the total sample into training dataset (n = 519), validation dataset (n = 100), and testing dataset (n = 67).  #### 2. Image preprocessing Image preprocessing were conducted using Statistical Parametric Mapping (SPM) software, version 12. The original MRI scans were first skull-stripped and segmented using segmentation algorithm based on 6-tissue probability mapping and then normalized to the International Consortium for Brain Mapping template of European brains using affine registration. Other configuration includes: bias, noise, and global intensity normalization. The standard preprocessing process output 3D image files with an uniform size of 121x145x121. Skull-stripping and normalization ensured the comparability between images by transforming the original brain image into a standard image space, so that same brain substructures can be aligned at same image coordinates for different participants. Diluted or enhanced intensity was used to compensate the structure changes. the In our project, we used both whole brain (including both grey matter and white matter) and grey matter only.  #### 3. AlexNet and Transfer Learning Convolutional Neural Networks (CNN) are very similar to ordinary Neural Networks. A CNN consists of an input and an output layer, as well as multiple hidden layers. The hidden layers are either convolutional, pooling or fully connected. ConvNet architectures make the explicit assumption that the inputs are images, which allows us to encode certain properties into the architecture. These then make the forward function more efficient to implement and vastly reduce the amount of parameters in the network.  #### 3.1. AlexNet The net contains eight layers with weights; the first five are convolutional and the remaining three are fully connected. The overall architecture is shown in Figure 1. The output of the last fully-connected layer is fed to a 1000-way softmax which produces a distribution over the 1000 class labels. AlexNet maximizes the multinomial logistic regression objective, which is equivalent to maximizing the average across training cases of the log-probability of the correct label under the prediction distribution. The kernels of the second, fourth, and fifth convolutional layers are connected only to those kernel maps in the previous layer which reside on the same GPU (as shown in Figure1). The kernels of the third convolutional layer are connected to all kernel maps in the second layer. The neurons in the fully connected layers are connected to all neurons in the previous layer. Response-normalization layers follow the first and second convolutional layers. Max-pooling layers follow both response-normalization layers as well as the fifth convolutional layer. The ReLU non-linearity is applied to the output of every convolutional and fully-connected layer. ![](images/f1.png)  The first convolutional layer filters the 224x224x3 input image with 96 kernels of size 11x11x3 with a stride of 4 pixels (this is the distance between the receptive field centers of neighboring neurons in a kernel map). The second convolutional layer takes as input the (response-normalized and pooled) output of the first convolutional layer and filters it with 256 kernels of size 5x5x48. The third, fourth, and fifth convolutional layers are connected to one another without any intervening pooling or normalization layers. The third convolutional layer has 384 kernels of size 3x3x256 connected to the (normalized, pooled) outputs of the second convolutional layer. The fourth convolutional layer has 384 kernels of size 3x3x192 , and the fifth convolutional layer has 256 kernels of size 3x3x192. The fully-connected layers have 4096 neurons each.  #### 3.2. Transfer Learning Training an entire Convolutional Network from scratch (with random initialization) is impractical[14] because it is relatively rare to have a dataset of sufficient size. An alternative is to pretrain a Conv-Net on a very large dataset (e.g. ImageNet), and then use the ConvNet either as an initialization or a fixed feature extractor for the task of interest. Typically, there are three major transfer learning scenarios:   **ConvNet as fixed feature extractor:** We can take a ConvNet pretrained on ImageNet, and remove the last fully-connected layer, then treat the rest structure as a fixed feature extractor for the target dataset. In AlexNet, this would be a 4096-D vector. Usually, we call these features as CNN codes. Once we get these features, we can train a linear classifier (e.g. linear SVM or Softmax classifier) for our target dataset.   **Fine-tuning the ConvNet:** Another idea is not only replace the last fully-connected layer in the classifier, but to also fine-tune the parameters of the pretrained network. Due to overfitting concerns, we can only fine-tune some higher-level part of the network. This suggestion is motivated by the observation that earlier features in a ConvNet contains more generic features (e.g. edge detectors or color blob detectors) that can be useful for many kind of tasks. But the later layer of the network becomes progressively more specific to the details of the classes contained in the original dataset.   **Pretrained models:** The released pretrained model is usually the final ConvNet checkpoint. So it is common to see people use the network for fine-tuning.  #### 4. 3D Autoencoder and Convolutional Neural Network We take a two-stage approach where we first train a 3D sparse autoencoder to learn filters for convolution operations, and then build a convolutional neural network whose first layer uses the filters learned with the autoencoder. ![](images/f2.png)  #### 4.1. Sparse Autoencoder An autoencoder is a 3-layer neural network that is used to extract features from an input such as an image. Sparse representations can provide a simple interpretation of the input data in terms of a small number of \parts by extracting the structure hidden in the data. The autoencoder has an input layer, a hidden layer and an output layer, and the input and output layers have same number of units, while the hidden layer contains more units for a sparse and overcomplete representation. The encoder function maps input x to representation h, and the decoder function maps the representation h to the output x. In our problem, we extract 3D patches from scans as the input to the network. The decoder function aims to reconstruct the input form the hidden representation h.  #### 4.2. 3D Convolutional Neural Network Training the 3D convolutional neural network(CNN) is the second stage. The CNN we use in this project has one convolutional layer, one pooling layer, two linear layers, and finally a log softmax layer. After training the sparse autoencoder, we take the weights and biases of the encoder from trained model, and use them a 3D filter of a 3D convolutional layer of the 1-layer convolutional neural network. Figure 2 shows the architecture of the network.  #### 5. Tools In this project, we used Nibabel for MRI image processing and PyTorch Neural Networks implementation.",https://github.com/himanshub1007/Alzhimers-Disease-Prediction-Using-Deep-learning,555,161,161,24,1,2,27,5,6.518518518518518,0,0,0,0,0,11.592592592592592,181.1761279886002,2.670924359879399,975.2985740160898
183177207,SvenWesterlaken,saibot-airport-microservices,Microservices assignment for Solution Architecture course @Avans (Period 3.4),https://github.com/SvenWesterlaken/saibot-airport-microservices,1431,3,3,2,13,4,60,6,3.216666666666667,1,0,1,0,2,5.533333333333333,22.04636769509335,0.5338659951159951,55.260758471916695
319155580,paullewallencom,microservices-978-1-7888-3957-0,Implementing Serverless Microservices Architecture Patterns [Video],https://github.com/paullewallencom/microservices-978-1-7888-3957-0,466,1,1,0,0,2,65,5,2.046153846153846,0,0,0,0,0,6.938461538461539,27.91249533081405,0.8093278290337115,75.0682430900197
556764120,davidwmartines,microservices-django-kafka,Demo of a microservice architecture utilizing Django and Kafka.,https://github.com/davidwmartines/microservices-django-kafka,428,1,1,1,0,1,71,5,2.507042253521127,0,0,0,0,0,1.9154929577464788,2.0991934427521373,0.124413145539906,2.230188205484967
49172646,Juanvulcano,fossasia_eventmanager,Open source event manager ,https://github.com/Juanvulcano/fossasia_eventmanager,115,0,0,0,0,1,27,5,1.851851851851852,0,0,0,0,0,1.0740740740740742,29.71953598843716,0.2890946502057613,200.0370490098041
948227809,yahna8,pixel-pets-backend,"A FastAPI-powered microservices backend that fuels the Pixel Pets productivity game. Manages tasks, points, inventory, and user authentication with a scalable API architecture.",https://github.com/yahna8/pixel-pets-backend,2,0,0,0,0,1,1,5,5.0,0,0,0,0,0,0.0,0.0,0.0,0.0
579398805,SC-ECE,PYTHON-PROJECT,About Synapse is a month-long challenge. It happens every year in the month of January. Synapse is open to everyone and it marks the celebration of Open Source. It's the first Open Source event of AOT that encourages newbies to participate in Open Source and create their 1st meaningful PR.,https://github.com/SC-ECE/PYTHON-PROJECT,10543,0,0,0,0,0,74,5,3.027027027027027,0,0,0,0,0,11.14864864864865,226.49989234610103,2.7836406269892136,1268.4939340781573
494286569,edilson-silva,hexagonal-architecture-python,Hexagonal Architecture python sample,https://github.com/edilson-silva/hexagonal-architecture-python,45,0,0,0,0,1,14,5,2.2857142857142856,0,1,0,0,1,6.5,15.529230497511648,0.3928571428571428,41.17165952703607
830818076,protonx-tf-09,Poem_Generator,Poem Generator uses an RNN architecture with Bidirectional and LSTM layers.,https://github.com/protonx-tf-09/Poem_Generator,113,0,0,0,0,1,6,5,4.5,0,0,0,0,0,8.166666666666666,47.26234036050931,1.4907407407407407,149.8954891719271
647276025,malikmmoaz,domain-driven-design-1,,https://github.com/malikmmoaz/domain-driven-design-1,13,0,0,0,0,1,8,5,3.125,0,0,0,0,0,8.625,10.916602231651323,0.3333333333333333,5.708301115825662
469057277,rk4bir,microservice-boilerplate,Django based microservice architecture with oauth2 🔋🌟,https://github.com/rk4bir/microservice-boilerplate,10726,11,11,1,0,1,65,5,2.2153846153846155,0,0,1,0,1,3.692307692307693,12.324986306139472,0.373219653909309,36.94289471034378
967585349,LARBREAHELICES,clean-architecture,Clean architecture,https://github.com/LARBREAHELICES/clean-architecture,61,0,0,1,2,1,33,5,3.636363636363636,1,1,1,1,4,3.878787878787879,2.459010595569474,0.1515151515151515,2.0684888151025445
899631637,Nodetus-Integrators-LLC,API-Microservice-Template,A production-ready template for building scalable API microservices following best practices and clean architecture principles.,https://github.com/Nodetus-Integrators-LLC/API-Microservice-Template,15,0,0,1,0,0,16,5,0.625,1,1,1,0,3,1.0,0.0,0.0,0.0
860853140,TemiShols,CowryWiseLMS,A event driven microservice architecture task,https://github.com/TemiShols/CowryWiseLMS,21,0,0,0,0,1,41,5,2.268292682926829,0,0,0,0,0,2.3902439024390243,2.104016158694888,0.1016260162601625,2.515422713493786
773978714,kuboschek,votigo,Learning practical event sourcing with a sample project.,https://github.com/kuboschek/votigo,849,0,0,0,7,1,23,6,4.173913043478261,0,0,1,0,1,10.391304347826088,22.52151005300067,0.562061711079944,67.88706326707927
867050634,AdamJanasek,fastapi-cqrs,,https://github.com/AdamJanasek/fastapi-cqrs,27,0,0,0,0,1,9,5,0.2222222222222222,1,1,0,1,3,0.2222222222222222,0.0,0.0,0.0
370829312,hajipoor,time2event,"Source code for Embedding Time Differences in Context-sensitive Neural Networks for Learning Time to Event. Nazanin Dehghani, Hassan Hajipoor, Hadi Amiri. ACL 2021.",https://github.com/hajipoor/time2event,1590,2,2,1,0,1,2,5,8.0,0,0,0,0,0,13.0,242.05614475142585,4.204268292682927,1169.0709341779989
448971481,uzh-rpg,rpg_ev-transfer,"Open source implementation of RAL 2022 ""Bridging the Gap between Events and Frames through Unsupervised Domain Adaptation""",https://github.com/uzh-rpg/rpg_ev-transfer,382,44,44,6,2,9,42,5,4.380952380952381,1,0,0,0,1,23.80952380952381,677.5365877752762,5.094278108588225,5575.372004198052
917564712,irinacos,IoT-Sensor-Data-Platform,"IoT platform for sensor data collection and visualization, using a MQTT Broker, an InfluxDB database and Grafana in a Dockerized microservices architecture",https://github.com/irinacos/IoT-Sensor-Data-Platform,11,0,0,0,0,1,1,5,6.0,0,0,0,1,1,4.0,11.60964047443681,1.0,11.60964047443681
61721032,dantagg,awsbackup,"Script(s) to create the S3 Buckets, Lambda scripts, Roles, Event sources necessary to backup servers",https://github.com/dantagg/awsbackup,9,0,0,0,0,1,3,5,3.333333333333333,0,0,0,0,0,4.333333333333333,29.189475010096185,0.6666666666666666,58.37895002019237
943112264,Yzurgzd,django-clean-architecture,,https://github.com/Yzurgzd/django-clean-architecture,45,4,4,0,0,1,84,7,2.1547619047619047,1,1,1,1,4,2.583333333333333,3.674486920798652,0.1354166666666666,4.181784696670984
683950983,IsaacOrzDev,sketch-blend,"A drawing and sharing website that is powered by micro-service architecture in Kubernetes with AWS, and multiple backend languages",https://github.com/IsaacOrzDev/sketch-blend,4322,0,0,0,0,1,1,5,12.0,0,0,0,0,0,0.0,1084.8830939992592,0.855072463768116,927.6536600863232
463762603,shairbekov-bakyt,FastAPI_microservices,"Microservice architecture is a variant of service-oriented software architecture aimed at the interaction of as few, weakly and easily modified modules as possible - microservices, which became widespread in the mid-2010s in connection with potentially practically agile development and DevOps",https://github.com/shairbekov-bakyt/FastAPI_microservices,8,1,1,0,0,1,11,5,2.8181818181818183,0,0,1,0,1,3.272727272727273,7.247163638461544,0.4090909090909091,7.156254547552454
699848478,GeniaKybalchych,ExamenFinalA018,"Système de gestion des projets d'une entreprise spécialisée dans la construction.  Fait partie d'une architecture globale basée sur une approche microservices, encapsulant différentes responsabilités dans des services distincts tout en offrant une interface unifiée aux utilisateurs.",https://github.com/GeniaKybalchych/ExamenFinalA018,8,0,0,0,0,1,3,5,2.0,0,0,0,0,0,3.6666666666666665,6.754887502163469,0.5,5.96240625180289
947515356,enricogoerlitz,explore-airflow,"Apache Airflow project for orchestrating ETL workflows in a data warehouse environment. Implements a medallion architecture (Bronze, Silver, Gold layers) with Postgres integration for scalable and modular data processing pipelines.",https://github.com/enricogoerlitz/explore-airflow,1393,0,0,0,0,1,11,5,3.8181818181818175,0,0,0,0,0,1.7272727272727273,3.387443711871504,0.1363636363636363,1.693721855935752
445611863,DenisTrukhin,otus_arch_hw2,Microservice architecture: homework 2,https://github.com/DenisTrukhin/otus_arch_hw2,96,0,0,0,0,1,1,5,8.0,0,0,0,0,0,14.0,59.794705707972525,1.5,89.69205856195879
760156225,MilfuegosDEV,clothing-store-api,"Welcome to the Clothing Store API, a RESTful API developed with Flask and SQLAlchemy using Clean Architecture for managing a clothing store inventory.",https://github.com/MilfuegosDEV/clothing-store-api,105,1,1,0,0,1,39,5,2.9743589743589745,1,1,1,1,4,6.230769230769231,9.579124837614083,0.3354312354312354,18.463711775318963
774217560,TManas,Security-Event-Analysis-Automation,"Analyze user behavior logs from multiple sources using Python pandas and openpyxl. Extracts and processes data to identify authentication events, sentiment analysis, and user activity trends.",https://github.com/TManas/Security-Event-Analysis-Automation,4815,0,0,0,0,1,1,5,7.0,0,0,0,0,0,5.0,345.9253261676786,7.166666666666667,2479.1315042016968
932465696,marcelolsanto,Sistema_Biblioteca,"# Sistema de Biblioteca  Este é um sistema de gerenciamento de biblioteca desenvolvido utilizando Python, seguindo os princípios do Domain-Driven Design (DDD). O sistema permite o gerenciamento de livros e usuários, além de controlar empréstimos e devoluções.",https://github.com/marcelolsanto/Sistema_Biblioteca,11,1,1,0,0,1,37,5,1.7297297297297298,1,1,1,1,4,3.3783783783783785,6.536926001538217,0.1749249249249249,12.051912542119531
301761739,Glovesme,covid19-event-extraction,This repository contains the source code for our models for the W-NUT 2020 shared task 3 at EMNLP,https://github.com/Glovesme/covid19-event-extraction,22,1,1,1,0,1,2,5,11.0,0,0,0,0,0,92.0,1957.176421908248,10.93994035540798,22221.974068141437
551429678,ShahriyarR,hexagonal-fastapi-jobboard,JobBoard project with FastAPI using Hexagonal Architecture,https://github.com/ShahriyarR/hexagonal-fastapi-jobboard,10168,59,59,13,0,1,66,6,3.363636363636364,1,1,1,1,4,5.878787878787879,16.507893249102708,0.3499373433583959,25.44177411068336
480740156,exceedev,vashe_poh,repository for practice in microservice architecture,https://github.com/exceedev/vashe_poh,181,2,2,1,7,1,7,5,2.571428571428572,0,0,0,0,0,1.0,0.6792696431662099,0.0714285714285714,0.3396348215831049
661115079,gavric-s,django-rabbitmq-microservices,Microservice architecture implemented in Django using RabbitMQ for communication between the services.,https://github.com/gavric-s/django-rabbitmq-microservices,104,1,1,0,0,1,58,5,2.603448275862069,0,0,0,1,1,7.172413793103448,12.961515172062072,0.3162347709761502,15.568440972606258
955036718,mokoshin0720,fastapi-clean-architecture,,https://github.com/mokoshin0720/fastapi-clean-architecture,147,0,0,1,0,1,19,5,2.789473684210526,1,1,0,1,3,3.631578947368421,1.1897111847039492,0.131578947368421,0.5948555923519746
967407237,daxitpatel,fastapi-microservice-template,"🚀 fastapi-microservice-template is a minimal, scalable template for building modern microservices with FastAPI ⚡. It includes 🌿 environment-based config, 🐳 Docker support, 📑 structured logging, ❤️ health checks, and ⚙️ async-ready architecture. Perfect for quickly bootstrapping clean, production-ready Python services with best practices.",https://github.com/daxitpatel/fastapi-microservice-template,545,0,0,0,0,1,41,5,2.902439024390244,1,1,0,0,2,4.219512195121951,4.928545392330593,0.2886178861788618,6.404297966228062
399781648,Ishan-Tewari,MAP-CODES,Contains Code for Microservice Architecture and Programming,https://github.com/Ishan-Tewari/MAP-CODES,1692,0,0,0,0,1,3,5,2.0,0,0,0,0,0,4.666666666666667,1.5849625007211563,0.1666666666666666,0.7924812503605781
606779390,fathiyul,system_design,"Microservice Architecture and System Design with Python & Kubernetes, from freeCodeCamp.org YouTube channel",https://github.com/fathiyul/system_design,11738,0,0,0,0,1,2048,17,8.78466796875,1,0,1,1,3,55.2206457925636,632.0238195255537,3.76160651664729,6166.378446766113
481580367,jpfcabral,python-clean-architecture,,https://github.com/jpfcabral/python-clean-architecture,32,0,0,0,0,1,23,5,1.6956521739130437,1,0,1,1,3,2.9565217391304346,8.629828090496957,0.1772946859903381,11.019700900124809
891674215,skvkel,clean_architecture_template,,https://github.com/skvkel/clean_architecture_template,2376,0,0,0,0,1,50,5,3.2,1,0,1,1,3,4.06,5.780875595896982,0.2386111111111111,8.413500283661135
422965235,GLEF1X,blacksheep-clean-architecture,Follows the most popular principles of clean architecture and shows an example how to do it well,https://github.com/GLEF1X/blacksheep-clean-architecture,579,18,18,1,2,2,178,6,2.848314606741573,1,1,1,1,4,2.915730337078652,4.218448546613797,0.2036918138041733,8.401451355052917
865910829,liupras,langchain-llama3-Chroma-RAG-demo,"This system implements a micro-microservice architecture, and uses vuetify+langchain+local large model+local vector database to build a demonstration of the RAG system.  ",https://github.com/liupras/langchain-llama3-Chroma-RAG-demo,1931,10,10,3,1,2,28,5,6.178571428571429,0,1,0,1,2,7.892857142857143,60.11364142506376,1.6593258457229043,221.78389146114912
134945270,shambhu384,microservices-architecture,,https://github.com/shambhu384/microservices-architecture,3,1,1,0,0,1,1,5,2.0,0,0,0,0,0,4.0,4.754887502163469,0.5,2.3774437510817346
1963732,pyladies,pyladies-kit,"An open-source kit for starting your own PyLadies chapter in your city.  PyLadies' mission is to promote, educate and advance a diverse Python community through outreach, education, conferences, events and social gatherings.",https://github.com/pyladies/pyladies-kit,9946,142,142,77,13,32,4,5,2.0,0,0,0,0,0,1.25,1.1887218755408673,0.125,0.5943609377704336
79657454,OrkoHunter,source_code_ktj,Reverse engineer the executables | Source Code event | Kshitij,https://github.com/OrkoHunter/source_code_ktj,7342,7,7,2,0,4,12,5,0.8333333333333334,0,0,0,0,0,2.0,72.55504738601178,2.7443469359587787,234.97937479695472
265272745,ruiconti,cosmic,🐍  Implementation of functional core & imperative shell  web app. Hexagonal architecture with CQRS entrypoints. Domain designed referring to DDD patterns. ,https://github.com/ruiconti/cosmic,167,6,6,0,3,1,39,5,2.8461538461538463,1,0,0,1,2,7.384615384615385,21.695776022398352,0.4949814890991361,57.33154003157011
781662642,MuhammedQureshi,system_Design,"Learning about microservice architectures and distributed systems using Python, Kubernetes, RabbitMQ, MongoDB, mySQL.",https://github.com/MuhammedQureshi/system_Design,14927,0,0,0,0,1,867,17,8.31603229527105,1,0,1,0,2,53.22837370242215,808.7352877863478,3.968760750267246,15497.514443107344
119738910,lopezm1,python-clean-architecture,,https://github.com/lopezm1/python-clean-architecture,23,4,4,1,6,1,43,5,1.697674418604651,1,1,1,1,4,5.116279069767442,19.01901266142232,0.5102227182182542,31.50623341533188
484306017,Taycode,taySave,A saving App built using a microservice architecture,https://github.com/Taycode/taySave,8,1,1,0,0,1,14,5,1.6428571428571428,0,0,0,0,0,0.3571428571428571,0.3396348215831049,0.0357142857142857,0.1698174107915524
386726533,muhammadddev,Fastapi_Auth,Authentication service built top of python and Fastapi with an eye on domain-driven and event-driven design ,https://github.com/muhammadddev/Fastapi_Auth,16,4,4,1,0,2,21,5,2.619047619047619,1,0,0,1,2,6.714285714285714,6.874434797060052,0.1688311688311688,8.600036313691154
545748464,gabrielleandro0801,python-clean-architecture-course,Repository with a basic Clean Architecture project following a course from Alura.,https://github.com/gabrielleandro0801/python-clean-architecture-course,57,0,0,0,0,1,28,5,2.892857142857143,1,1,0,1,3,4.857142857142857,3.335145642330505,0.2857142857142857,3.946316401065909
579561219,JorgeCardona,fastapi_sqlite_clean_architecture,,https://github.com/JorgeCardona/fastapi_sqlite_clean_architecture,1600,1,1,0,0,1,64,5,1.859375,1,1,1,1,4,3.46875,7.685496648900326,0.2750558035714286,27.851068885268887
589064398,deidax,clean_architecture_python,This's a test project to learn TDD and clean architecture (Leonardo Giordani's book),https://github.com/deidax/clean_architecture_python,5092,3,3,0,0,1,124,5,1.7741935483870968,1,1,1,0,3,6.379032258064516,39.09943400064894,0.4663131515515807,60.491927667937446
942824030,YanPina,fastapi-clean-architecture,,https://github.com/YanPina/fastapi-clean-architecture,73,0,0,0,0,1,45,5,2.8666666666666667,1,1,1,1,4,4.422222222222223,17.88413347746601,0.2540849673202614,15.691819055951235
748442161,davidjnevin,hexagonal-chat-cleaner,A Zoom chat cleaner web app - hexagonal architecture,https://github.com/davidjnevin/hexagonal-chat-cleaner,356,0,0,0,5,1,51,6,2.156862745098039,1,1,1,1,4,4.529411764705882,21.972942098499495,0.252463549522373,40.99173698436171
531466968,RajeshJ3,ms-on-k8s-arch,Microservices on Kubernetes Architecture,https://github.com/RajeshJ3/ms-on-k8s-arch,7,0,0,0,0,1,15,5,1.4,0,0,0,0,0,2.1333333333333333,0.7169925001442313,0.1333333333333333,0.3584962500721156
405168410,exequielmoneva,products-main,Microservice's Proof of Concept based on Event-Driven Architecture,https://github.com/exequielmoneva/products-main,22,0,0,0,0,1,11,5,3.0,1,1,1,0,3,2.8181818181818183,2.7642843507557453,0.1590909090909091,1.8570820129684693
61387900,Ayuto,EventScripts-Emulator,A Source.Python plugin that is able to run EventScripts addons.,https://github.com/Ayuto/EventScripts-Emulator,3412,16,16,10,12,3,240,8,3.2916666666666665,0,1,1,0,2,36.958333333333336,499.55841751931007,3.2534876524204863,4536.293854470329
919577016,bilal1604,REST-API-Flask-Clean-Architecture,,https://github.com/bilal1604/REST-API-Flask-Clean-Architecture,8,0,0,0,0,1,6,5,2.0,1,1,1,1,4,9.833333333333334,23.133514150458375,0.6858974358974358,54.65092570888652
827800731,NascimentoFrancisco,clean-architecture-crud-api,"O projeto consiste na construção de uma API REST em Python utilizando Flask. A arquitetura segue os princípios da Clean Architecture de Robert Cecil Martin. Foram empregadas várias bibliotecas, incluindo pylint, pytest, pre-commit, black, flake8 e SQLAlchemy, para facilitar o desenvolvimento e a manutenção do código.",https://github.com/NascimentoFrancisco/clean-architecture-crud-api,318,2,2,0,0,1,120,5,2.525,1,1,1,1,4,4.275,10.588097004640495,0.2422097727980081,10.984212559293828
739785392,edugraminho,produtrue-backend,"API for generating products with QR Code, hexagonal architecture",https://github.com/edugraminho/produtrue-backend,33,0,0,0,0,1,21,5,3.0476190476190474,0,1,0,1,2,4.714285714285714,5.127684596507033,0.1746031746031746,6.285209903095994
827038191,PallaviPranesh,django-react-microservices-firstapp,"""Hi, this is a simple web application using Django and React that implements a microservices architecture.""",https://github.com/PallaviPranesh/django-react-microservices-firstapp,208,0,0,0,0,2,34,5,1.5,1,0,0,0,1,0.7647058823529411,0.6992481620828631,0.0735294117647058,0.3496240810414315
362009455,MartinMwiti,Microservices,Photo and video sharing social networking service app based on Microservices Architecture.,https://github.com/MartinMwiti/Microservices,11863,0,0,0,0,1,24,5,2.2916666666666665,0,0,1,0,1,1.375,1.663204285943339,0.1145833333333333,1.0492829018673595
913649547,DesayoEm,Kademia,"A backend-focused academic performance management system designed with domain-driven factories, a thorough custom exception handling layer,  and lifecycle-safe CRUD operations such as archive, restore, and hard delete. ",https://github.com/DesayoEm/Kademia,14839,1,1,0,0,1,361,8,4.085872576177286,1,1,0,1,3,9.947368421052632,34.19237930138012,0.5437539515663931,79.05975121971086
671599549,clemensv,real-time-sources,"Real Time Sources for Apache Kafka, Azure Event Hubs, and Fabric Event Streams",https://github.com/clemensv/real-time-sources,1338,18,18,4,0,2,396,9,6.184343434343434,0,0,0,0,0,17.174242424242426,80.94426975338239,1.3703377018636504,564.8466024851532
727281576,usesummit,models,Open-source models written using Summit Event Language (SEL).,https://github.com/usesummit/models,206,1,1,0,0,1,0,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
705066218,Zhaolin99,Network-Socket-Programming,"Overview of computer networks, TCP/IP protocol suite, computer-networking applications and protocols, transport-layer protocols, network architectures, Internet Protocol (IP), routing, link-layer protocols, local area and wireless networks, medium access control, physical aspects of data transmission, and network-performance analysis. ",https://github.com/Zhaolin99/Network-Socket-Programming,53,0,0,0,0,1,13,5,6.307692307692308,0,0,0,0,0,18.0,760.7755680774543,4.205666144125484,5154.179144584444
262575973,FabienArcellier,spike-clean-architecture-with-sqlalchemy,The goal of this repository is to understand through experimentation how to build clean architecture with sql alchemy,https://github.com/FabienArcellier/spike-clean-architecture-with-sqlalchemy,293,0,0,0,5,1,8,5,1.625,0,0,0,0,0,0.75,1.7830828133113008,0.1875,0.8915414066556504
719464439,git-fetch-pythondev,banking,Implemented a simplified version of the banking system application based on clean architecture,https://github.com/git-fetch-pythondev/banking,3,0,0,0,0,1,1,5,0.0,0,0,0,0,0,50.0,174.22857502740396,4.941176470588236,860.8941354295255
959948713,dilarademirhan,crm-microservices-architecture,,https://github.com/dilarademirhan/crm-microservices-architecture,106,0,0,0,0,1,33,5,3.9696969696969697,1,1,1,0,3,5.121212121212121,20.2223472902738,0.6038720538720539,69.79286919249861
328852433,aberriel,clean_architecture_basic_classes,"Este projeto provê as classes básicas para a implementação de projetos em clean architecture seguindo o modelo conhecido como ""cebolão"".",https://github.com/aberriel/clean_architecture_basic_classes,54,0,0,0,0,2,42,5,2.5,0,0,0,0,0,8.119047619047619,33.746267127622026,0.6074367772524454,55.425142969094544
902438707,bryans57,template-python-fastapi,"A template with clean architecture, fastapi,  poetry config, pytest, memory database for test, precommits, deploys to azure and more",https://github.com/bryans57/template-python-fastapi,274,2,2,0,0,1,55,5,2.345454545454545,1,1,1,1,4,3.618181818181818,9.32982781656943,0.2058059587471352,19.46835542978902
636250579,irtazafaisal,Prime-Number-Generation-Microservice,A simple prime number generation written as flask microservice architecture to practice fundamentals of docker and docker compose basics,https://github.com/irtazafaisal/Prime-Number-Generation-Microservice,4,0,0,0,0,1,4,5,4.5,0,0,0,0,0,9.5,107.35722551440288,3.0188439011968424,482.4894011981972
787010857,darkllen,pyeventor,Event Sourcing framework for Python,https://github.com/darkllen/pyeventor,94,0,0,0,0,1,24,5,4.958333333333333,0,0,0,0,0,20.25,76.82300680427292,1.5043567543567542,222.0416266225401
97996285,davestroud,Global_Terrorism_Database,"The Global Terrorism Database (GTD) is an open-source database including information on terrorist events around the world from 1970 through 2016 (with annual updates planned for the future). Unlike many other event databases, the GTD includes systematic data on domestic as well as international terrorist incidents that have occurred during this time period and now includes more than 170,000 cases.",https://github.com/davestroud/Global_Terrorism_Database,3,0,0,0,0,1,2,5,2.5,0,0,0,0,0,3.0,9.343228035743822,0.9166666666666666,10.476434255090316
432701618,MirandaMat,cerraNet-v2,"CerraNet is a deep learning convolutional neural network, specially designed to process and contextually classify the types of use and coverage in the Brazilian Cerrado, whose biome is the second largest in Brazil and is characterized by different landscapes, sometimes forests, sometimes savannas and countryside. However, only four classes were considered, Forest, Deforest, Fire and Agriculture. The model was trained with images obtained by the CBERS-4A satellite, with two meters of spa- tial resolution, totalling 32000 images; for tests, two other datasets were structured, each with 800 images, differentiating only the observed areas and the spatial resolution, the first with two meters and the second with eight meters. Regarding the model’s architecture, a model was designed with six convolutional layers, succeeded by average pooling and dropout layers, as well as two dense and dropout layers, optimized with Adam. Model performance was evaluated using Accuracy and F1-Score metrics, achieving respectively for each test set, 94.38%, 94.37%, 46.75% and 46.75% accuracy in image classification. In general, the model achieved encouraging results, above all, it proved to be optimized and efficient.",https://github.com/MirandaMat/cerraNet-v2,16,5,5,0,1,1,3,5,7.666666666666667,0,0,0,0,0,0.0,1186.2516291673878,1.656042496679947,3496.480396257001
220409065,sradl1981,MatheGram_ATC1,"Repository for source coude and simple data exchange for the ""ATC1"" event of MatheGRAM",https://github.com/sradl1981/MatheGram_ATC1,148,0,0,1,0,2,1,5,2.0,0,0,0,0,0,0.0,4.754887502163469,0.5,2.3774437510817346
631819052,ypeng90,account-api,"Account management RESTful backend, integrating JWT-based authentication with an event-driven architecture and CQRS pattern for enhanced efficiency",https://github.com/ypeng90/account-api,85,1,1,1,1,1,24,5,3.625,0,0,1,0,1,4.625,12.666851576935798,0.3725274725274725,28.261692678127886
959192234,Kishoraditya,bulk_qr_generator,"A powerful, free open source web application for generating multiple QR codes from spreadsheet data in seconds. Perfect for businesses, event organizers, inventory management, and creative projects.",https://github.com/Kishoraditya/bulk_qr_generator,44,1,1,0,0,1,8,5,8.0,0,0,0,0,0,15.25,630.7556279992536,6.060297390527109,5208.462849943458
224986285,Chingles2404,wworld-halloween-2019,Source code of @WWEventBot during the Halloween event in 2019,https://github.com/Chingles2404/wworld-halloween-2019,20,0,0,0,0,1,1,5,4.0,0,0,0,0,0,84.0,3869.422764369432,7.01417004048583,27140.78922781393
496347809,eversrx19,layered-architecture,,https://github.com/eversrx19/layered-architecture,2,1,1,0,0,1,7,5,1.5714285714285714,0,0,0,0,0,2.4285714285714284,4.075617858997259,0.2142857142857142,6.113426788495888
794336191,wesleey,python-clean-architecture,"Clean Architecture with Python using SQLAlchemy, PostgreSQL and Flask.",https://github.com/wesleey/python-clean-architecture,24,8,8,0,0,1,91,5,2.021978021978022,1,1,1,1,4,2.912087912087912,8.55329786604007,0.1615384615384615,5.2551625210602495
208908572,henrilhos-archives,hexagonal-architecture,,https://github.com/henrilhos-archives/hexagonal-architecture,6,1,1,0,0,1,10,5,1.7,1,0,0,1,2,3.2,6.60708185604657,0.43125,15.283714515505071
809741177,fsalom,python-hexagonal-architecture,,https://github.com/fsalom/python-hexagonal-architecture,99,1,1,0,0,1,40,5,1.075,1,1,1,1,4,1.25,0.2377443751081734,0.025,0.1188721875540867
584921632,Lucasal072,Clean-Architecture-Project-Python,"This is a clean architecture project in python, just for study purposes :)",https://github.com/Lucasal072/Clean-Architecture-Project-Python,10,1,1,0,0,1,40,5,2.15,1,1,0,1,3,4.125,4.321673463931882,0.3508928571428571,5.012835256218458
952632102,XavierCanadas,kafka-realtime-chat,"A scalable real-time chat platform built with Apache Kafka, FastAPI, and WebSockets. Features microservices architecture, multi-database integration (PostgreSQL, MongoDB, Redis), JWT authentication, and support for web and iOS clients.",https://github.com/XavierCanadas/kafka-realtime-chat,486,1,1,0,5,1,19,5,5.2631578947368425,0,0,0,0,0,8.421052631578947,33.944456695402394,1.0120564420100024,80.1546897236276
671050285,fardad2222,Clean-Architecture,,https://github.com/fardad2222/Clean-Architecture,46,0,0,0,0,1,52,5,2.0,1,1,0,1,3,2.980769230769231,5.007554600573038,0.2054029304029304,6.864203187315784
469883465,gabrieldev525,fastapi-ddd-architecture,A fastapi application developed using domain driven design architecture,https://github.com/gabrieldev525/fastapi-ddd-architecture,1,0,0,0,0,1,1,5,2.0,1,1,0,1,3,2.0,0.0,0.0,0.0
496568796,romshen,todo,It's a pet project to practice with layered application architecture.,https://github.com/romshen/todo,38,0,0,0,0,1,11,5,2.909090909090909,0,0,1,0,1,3.090909090909091,4.322625001966791,0.1948051948051948,4.384376787709173
708003489,gk-anonymous,Multi-tier-Architecture-Project,"A multi-tier architecture, also known as a multi-layer architecture, is a design approach commonly used in software development to create scalable, maintainable, and modular applications. It divides the application into distinct layers or tiers, each with its own set of responsibilities and interactions. ",https://github.com/gk-anonymous/Multi-tier-Architecture-Project,3,0,0,0,0,1,0,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
943511503,TahaDataAlchemy,Clean-Architecture,,https://github.com/TahaDataAlchemy/Clean-Architecture,7,0,0,0,0,1,8,5,4.0,1,1,0,1,3,4.375,6.432354922057604,0.3125,6.307354922057604
692064533,dedgar1,Simple-Flask-SQL-Blog,Flask and SQL blog with minimal no Domain Driven design,https://github.com/dedgar1/Simple-Flask-SQL-Blog,17,0,0,0,0,1,3,5,3.333333333333333,1,0,1,0,2,1.6666666666666667,5.584962500721157,0.3888888888888888,3.459147917027245
344778044,danylott,panini-todo-app,Simple app for managing your tasks based on microservices architecture,https://github.com/danylott/panini-todo-app,8,1,1,0,0,1,7,5,2.571428571428572,0,0,1,0,1,5.857142857142857,17.38847410858893,0.4480519480519481,23.279056432190995
809541864,davidmillan5,Clean_Architecture_Python_Structure,,https://github.com/davidmillan5/Clean_Architecture_Python_Structure,13,0,0,0,0,1,5,5,1.2,1,1,0,1,3,4.6,0.9509775004326938,0.1,0.4754887502163469
329298976,benyanko,MoviezAPI,"Movie library management platform RESTful API with Flask-RESTful, Microservice Architecture, SQLAlchemy, Docker, Gunicorn and JWT",https://github.com/benyanko/MoviezAPI,8168,2,2,0,0,1,22,5,1.7727272727272727,1,0,0,0,1,3.4545454545454546,1.9866366400064328,0.1363636363636363,1.3458132064651922
860064652,vyt777,microservices-pipeline-aws-demo,"A demonstration of a microservices architecture pipeline using Python, Go, Kafka, gRPC, AWS Lambda, Redis, and DynamoDB. This project showcases the integration of various technologies with Terraform setup for deployment on AWS EC2 (t2.micro) and includes CI/CD using GitHub Actions.",https://github.com/vyt777/microservices-pipeline-aws-demo,812,0,0,0,0,1,3,5,5.333333333333333,0,0,0,0,0,15.333333333333334,61.53446602426373,1.3194444444444444,146.02797331369229
783408004,KarlaNunes,hotel-rooms-users-microservice,Microservice to manage users in a hotel room reservation system for a Software Architecture project,https://github.com/KarlaNunes/hotel-rooms-users-microservice,27,0,0,0,1,1,35,5,1.8,0,0,1,0,1,1.7428571428571429,0.4075617858997259,0.0428571428571428,0.2037808929498629
157202717,di-unipi-socc,microFreshener-core,Core python module of microFreshener that permits to discover architectural smells affectinng microservices.,https://github.com/di-unipi-socc/microFreshener-core,634,2,2,3,7,2,79,5,3.810126582278481,1,0,0,0,1,15.39240506329114,48.859999427453936,0.6528996201697772,133.20523805097272
619851797,samnzay,Python-Microservices,"Microservice Architectures and Distributed Systems using Python, Kubernetes, RabbitMQ, MongoDB, MySQL.",https://github.com/samnzay/Python-Microservices,254,0,0,0,0,1,14,5,3.0,0,0,0,1,1,2.7857142857142856,14.420695126937018,0.7162698412698413,36.18226758262416
73860019,jthak002,CS164-Fall2016,"Covers the fundamentals of computer networks. Topics include layered network architecture, communication protocols, local area networks, UNIX network programming, verification, network security, and performance studies.",https://github.com/jthak002/CS164-Fall2016,75,0,0,0,0,1,9,5,0.1111111111111111,0,0,0,0,0,0.6666666666666666,36.74278718680801,0.9953703703703703,329.15413521515507
182119000,Zero-Down-Time,streamlogs2fluentd,Lambda function to parse and forward log events from various AWS sources to Fluentd,https://github.com/Zero-Down-Time/streamlogs2fluentd,56,0,0,1,0,1,4,5,6.25,0,0,0,0,0,27.75,284.0072715056612,2.5892857142857144,1990.617963763959
682354222,subhamay-cloudworks,0001-tarius-py-cft,AWS Serverless Real Time Data Load to DynamoDB using Python Lambda and S3 Event Source Mapping and creating the stack using AWS CloudFormation and Language as Python.,https://github.com/subhamay-cloudworks/0001-tarius-py-cft,24,0,0,0,0,1,1,5,8.0,0,0,0,0,0,34.0,134.671829503467,3.0,404.015488510401
701844246,azhar-iqbal2942,clean-code-in-django,Project Architecture for building Scalable apps with Django.,https://github.com/azhar-iqbal2942/clean-code-in-django,125,0,0,1,0,2,53,5,1.528301886792453,1,1,1,0,3,1.7735849056603774,7.636678107951463,0.2322551662174303,10.337865841274228
285962578,MthwRobinson,event-explorer,a utility for merging events from multiple sources,https://github.com/MthwRobinson/event-explorer,481,0,0,0,0,1,16,5,3.0,0,0,0,0,0,14.1875,41.23268364924093,1.3016937107010635,120.16801971014624
922181139,Moohnai,merd,MERD(Multi-source Event Recognition Dataset),https://github.com/Moohnai/merd,10,0,0,0,0,1,5,5,7.2,0,0,0,0,0,10.4,73.46381513436695,2.145833333333333,255.24274630020264
939060886,darwinhc,bisslog-core-py,bisslog is a lightweight and dependency-free Python library that implements the Hexagonal Architecture (Ports and Adapters).,https://github.com/darwinhc/bisslog-core-py,248,0,0,0,0,1,88,5,1.9318181818181817,0,1,0,1,2,7.488636363636363,35.78862922960333,0.4965593434343434,69.56551838659183
926960337,shubhamc07,Layered-Architecture-POC,,https://github.com/shubhamc07/Layered-Architecture-POC,27,0,0,0,0,1,18,5,2.388888888888889,0,0,0,0,0,4.111111111111111,6.528320833573719,0.1581196581196581,11.341083493709936
306860057,alcacer0,mastermind-api-ddd-cqrs-es,Refactor mastermind-api using DDD with Python and Event Sourcing,https://github.com/alcacer0/mastermind-api-ddd-cqrs-es,21,2,2,0,0,1,38,5,2.526315789473684,0,1,1,0,2,5.868421052631579,26.89759360690561,0.5316599190283401,114.77494790809028
650905435,khiemdoan,clean-architecture-python-boilerplate,Just a simple boilerplate to create a new project.,https://github.com/khiemdoan/clean-architecture-python-boilerplate,401,1,1,1,0,1,17,5,4.117647058823529,1,0,0,1,2,6.235294117647059,11.441679568149102,0.4323529411764705,43.43412769237883
318810631,fernandohfs,information-architecture-microservices,Repositório que contém as atividades do módulo de Arquitetura da Informação e Microsserviços da Pós-Graduação,https://github.com/fernandohfs/information-architecture-microservices,348,0,0,0,0,1,8,5,1.75,0,0,0,0,0,1.875,23.07201742854801,1.25,42.17615337064538
326438332,CzakoZoltan08,dash-clean-architecture-template,Template for enterprise application using Dash frontend with Flask backend,https://github.com/CzakoZoltan08/dash-clean-architecture-template,25,109,109,31,0,2,20,5,2.95,0,0,0,0,0,1.15,3.765224035614973,0.2,3.6050458391571434
619324090,JPFrancoia,clean_architecture_example,An example of Clean Architecture in Python,https://github.com/JPFrancoia/clean_architecture_example,17,0,0,0,0,1,5,5,2.2,0,0,0,0,0,4.8,7.337291214297528,0.4,5.468645607148764
839933023,PiConsulting,be_clean_architecture,,https://github.com/PiConsulting/be_clean_architecture,12,0,0,0,1,3,41,5,0.4634146341463415,1,1,1,0,3,0.7804878048780488,0.2319457318128521,0.024390243902439,0.115972865906426
569812755,asai95,cookiecutter-python-clean-architecture,,https://github.com/asai95/cookiecutter-python-clean-architecture,5,0,0,0,0,1,10,5,0.1,1,1,1,1,4,0.0,0.0,0.0,0.0
915782794,xopino,python-cqrs,Showcasing clean code using python and cqrs.,https://github.com/xopino/python-cqrs,32,0,0,0,0,1,36,6,0.8333333333333334,1,1,1,1,4,1.2222222222222223,0.1320802083934297,0.0138888888888888,0.0660401041967148
652252108,ADemkin,layered-architecture-example,An example for layered architecture. Just a playground.,https://github.com/ADemkin/layered-architecture-example,26,2,2,0,0,2,1,5,4.0,0,0,0,0,0,106.0,415.2084415539646,6.545454545454546,2717.727981080496
149243379,aaqibkhorasi,redis-proxy,High Level Architecture:  The http interface is running on flask server and the redis is used as an in memory database for this. The application is running 3 instances at a same time:  Redis Server (Image in Docker) Main App Server (Logic Layer) Worker Process (Queue all the Post request and run it sequentially),https://github.com/aaqibkhorasi/redis-proxy,14,0,0,0,4,1,4,5,8.0,0,0,0,0,0,12.25,68.41886807737906,2.549342105263158,320.24277189221533
906565790,NedaArab,UserManagementApplication,"User Management Application: This Python-based app manages user data with features like registration, login, and profile management. It uses a layered architecture and SQLite for database management, ensuring efficient data handling and a clear user interface. ",https://github.com/NedaArab/UserManagementApplication,27,0,0,0,0,1,18,5,1.6666666666666667,1,0,0,0,1,5.388888888888889,16.37468326782401,0.3480204342273307,44.561514717786366
279091458,Vaishnvi,GAMMA,An efficient and scalable architecture for underwater plastic detection and cleaning using Underwater Autonomous Vehicle (AUV) and CycleGans as Data Augmentation technique to convert in air plastic to underwater style.,https://github.com/Vaishnvi/GAMMA,8547,11,11,0,0,0,81,8,6.061728395061729,0,0,0,0,0,14.679012345679013,424.54538120540457,3.0153079608144497,3306.365739729679
502163294,JuanDAC,base-clean-architecture-python,,https://github.com/JuanDAC/base-clean-architecture-python,4,1,1,0,0,1,20,5,0.8,1,1,0,1,3,1.7,1.859811553790729,0.1,2.0931389022198847
276772615,thepabloaguilar,divide-and-conquer-talk,Slides of Clean Architecture Lecture,https://github.com/thepabloaguilar/divide-and-conquer-talk,4890,0,0,0,18,1,28,5,2.5357142857142856,1,0,1,0,2,1.9285714285714288,3.9072108016432456,0.0535714285714285,1.9536054008216228
200025351,yoophi,sample-posts-api,Clean Architecture 기반의 Flask API Sample,https://github.com/yoophi/sample-posts-api,29,0,0,0,2,1,48,5,2.395833333333333,1,1,1,1,4,6.9375,24.02976890469441,0.4440972222222222,22.913823389771498
918995803,svuksanova,DIANS_final,"This project is an analytical platform for tracking and predicting stock trends on the Macedonian Stock Exchange. Built with a microservices architecture, it features containerized components for data analysis, prediction, and strategy evaluation. ",https://github.com/svuksanova/DIANS_final,1264,0,0,0,0,1,11,5,2.5454545454545454,1,0,1,0,2,9.090909090909092,112.44496272850267,2.037392250955301,506.865018264204
265696843,lucaslc-sp,Hexagonal-architecture-python,,https://github.com/lucaslc-sp/Hexagonal-architecture-python,12,1,1,0,0,2,44,5,1.1363636363636365,1,0,1,1,3,2.272727272727273,0.0,0.0,0.0
872776306,zkan,hexagonal-architecture-examples,Hexagonal architecture examples,https://github.com/zkan/hexagonal-architecture-examples,22,0,0,1,0,1,13,5,1.0,0,1,0,1,2,3.4615384615384617,5.800924012329465,0.1923076923076923,3.972121126881976
422900521,titabash,python-clean-architecture-template,,https://github.com/titabash/python-clean-architecture-template,19,0,0,0,0,1,14,5,2.7142857142857144,1,1,1,1,4,5.214285714285714,5.450487579132444,0.3857142857142857,5.251863219418065
55829013,gb0143,sneak_out,Crowd sourced event attendance!,https://github.com/gb0143/sneak_out,1,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
345876602,tarcisiocorte,python-tdd-clean-architecture,,https://github.com/tarcisiocorte/python-tdd-clean-architecture,42,1,1,0,0,1,15,5,1.8,0,0,1,0,1,2.8666666666666667,7.903631834140389,0.1666666666666666,4.851815917070195
861589752,hadrianus-dev,clean-architecture-python,Clean Architecture Python,https://github.com/hadrianus-dev/clean-architecture-python,36,0,0,0,0,1,62,5,1.3709677419354838,1,1,1,1,4,2.661290322580645,5.477951575805382,0.1596774193548387,4.125928292841187
902576323,pietermarsman,clean-imports,An Python import analyzer implements suggestions from Clean Architecture,https://github.com/pietermarsman/clean-imports,5,0,0,0,0,1,8,5,2.125,0,0,0,0,0,3.25,1.7414460711655215,0.0625,0.8707230355827609
249533713,cdaksha,parametrization_clean,Refactored ReaxFF parametrization project (that uses genetic algorithm + artificial neural network) to moreso comply with clean architecture.,https://github.com/cdaksha/parametrization_clean,365,11,11,1,2,2,103,5,3.3398058252427183,1,0,0,1,2,10.679611650485436,113.52476138712264,1.171996989125337,324.3621163480698
183928086,alexfowler,rentomatic,Code recreation of Leonardo Giordani's Clean Architecture in Python,https://github.com/alexfowler/rentomatic,51,0,0,0,0,1,38,5,2.0,1,1,1,0,3,7.131578947368421,44.39120501479806,0.6356275303643725,59.42998507653675
813786671,harshkedia17,Portfolio-Reviewer,"AI Portfolio Reviewer is a Django-based web application designed to provide AI-driven feedback on portfolio websites. Users can submit their domain, receive a detailed review, and rate the feedback using an intuitive rating system. ",https://github.com/harshkedia17/Portfolio-Reviewer,30,0,0,0,0,1,15,5,1.6666666666666667,0,0,0,0,0,1.0666666666666669,5.061794341978117,0.1666666666666666,6.958706512678712
905485192,ifarouk,playmetrics,A CQRS-based sports data analytics backend using FastAPI and PostgreSQL,https://github.com/ifarouk/playmetrics,3,0,0,0,2,1,6,5,1.1666666666666667,0,1,1,0,2,0.1666666666666666,0.7924812503605781,0.0833333333333333,0.3962406251802891
824254667,Jdalarmi,Clean-Architecture-Python,,https://github.com/Jdalarmi/Clean-Architecture-Python,54,0,0,0,0,1,23,5,0.8260869565217391,1,1,1,1,4,1.5217391304347827,0.1304347826086956,0.0434782608695652,0.1304347826086956
589236633,CasselKim,Hexagonal-instagram,Implement Hexagonal Architecture with fastAPI and Python,https://github.com/CasselKim/Hexagonal-instagram,33,0,0,0,0,1,1,5,1.0,0,0,0,0,0,1.0,0.0,0.0,0.0
836248514,miladkoohi,DDDWriter,DDDWriter is a CMS for managing blog articles using Domain-Driven Design and Django Rest Framework. It features a clean architecture for easy maintenance and scalability.,https://github.com/miladkoohi/DDDWriter,1979,17,17,0,0,1,71,5,1.056338028169014,1,1,1,1,4,1.676056338028169,0.9395212123963594,0.0938967136150234,0.936093570626867
358538467,Derrick-Nyongesa,NewsBlitz,This is an application that lists and previews news articles from various sources. The goal of this application is to help people who are too busy to watch news on TV to get realtime news so that they are also updated on the current world events.,https://github.com/Derrick-Nyongesa/NewsBlitz,5149,0,0,0,0,2,351,9,10.435897435897436,1,0,1,0,2,58.66810966810967,697.0224737564353,3.864722549944551,7351.611479700383
282045304,saber-solooki,Clean-REST-Django,"Clean architecture is necessary is every project. REST is alway part of new application severs. If you use Django as web framework, why not mix these with each other to build great app? ",https://github.com/saber-solooki/Clean-REST-Django,11,7,7,1,0,0,42,5,2.333333333333333,1,1,0,0,2,5.380952380952381,3.757917292169183,0.1777777777777777,5.820816536691382
918979099,Amna251,microservices_project,"This project implements a microservices-based architecture using Docker Compose, consisting of three interconnected services: a Web service (Nginx) for serving static HTML content, an App service (Python Flask) for backend logic, and a Database service (PostgreSQL) for data storage. ",https://github.com/Amna251/microservices_project,4,1,1,0,0,1,1,5,2.0,0,0,0,0,0,3.0,4.754887502163469,0.5,2.3774437510817346
843142979,kadu20es,projeto_modelo_python,Modelo de projeto segundo o padrão Clean Architecture,https://github.com/kadu20es/projeto_modelo_python,22,0,0,0,0,1,42,5,0.8809523809523809,1,1,1,1,4,0.9285714285714286,0.4110633930116763,0.0595238095238095,0.2412459822201239
118197430,abrightmoore,UniversalNBT,Convenience API layer for NBT translation between Minecraft architectures,https://github.com/abrightmoore/UniversalNBT,60,2,2,0,0,2,12,5,0.3333333333333333,0,0,0,0,0,1.1666666666666667,8.962406251802891,0.0757575757575757,8.147642047093537
679774210,ahmedbelal20,ROS-Supervisor,A Python package to be used within ROS architectures. Provides an abstraction layer for systems that rely on switching between different states with each state requiring specific nodes to be running at a given time.,https://github.com/ahmedbelal20/ROS-Supervisor,25,2,2,0,0,1,4,5,4.0,0,0,0,0,0,17.75,114.4117690215271,2.200854700854701,624.338225191137
263939829,blackhammerbrewing,Twitch_Bot,Open Source Twitch Bot for community driven events,https://github.com/blackhammerbrewing/Twitch_Bot,15,0,0,0,0,1,5,5,1.4,0,0,0,0,0,5.8,48.35097750043269,1.106153846153846,145.88779644252404
424753534,m-Mateja,Wordpress-Event-Automation,This python script uses Pandas to scan a given excel file for certain event parameters. These parameters are sourced and sent to a wordpress site using Selenium. The required event fields in wordpress are filled with the extracted excel information.,https://github.com/m-Mateja/Wordpress-Event-Automation,13,0,0,0,0,1,2,5,3.0,0,0,0,0,0,21.5,365.9511909262191,1.4045454545454543,488.7949929705758
241339644,nicolaszein,catalog-cqrs,A catalog of products application with cqrs,https://github.com/nicolaszein/catalog-cqrs,36,1,1,0,1,1,50,6,2.6,1,1,1,1,4,2.82,0.50718800023077,0.05,0.253594000115385
872861667,modifiededition,OnlineBookStore,"Online Book Store Microservices  This project implements an online bookstore using a microservices architecture, consisting of two main services: Marketplace and Recommendations. The project utilizes Docker for containerization and Kubernetes for orchestration, enabling easy deployment and scalability. ",https://github.com/modifiededition/OnlineBookStore,14,0,0,0,0,1,6,5,4.666666666666667,0,0,0,0,0,4.5,15.931329173157073,0.5,9.258145836939114
891636150,arthurbrenno,architecture,"Architecture is a lightweight, comprehensive framework that empowers developers to create robust, maintainable applications. By adhering to clean architecture principles and domain-driven design (DDD) patterns, weavearc provides the foundational building blocks needed for scalable, flexible, and easily testable backends.",https://github.com/arthurbrenno/architecture,214,0,0,0,0,1,21,5,4.857142857142857,0,0,0,0,0,15.0,110.22768220384587,1.2908272283272284,677.6283910706437
879086288,Edurz135,EventSourcing,,https://github.com/Edurz135/EventSourcing,43,0,0,0,0,1,1,5,3.0,0,0,0,0,0,16.0,38.03910001730775,0.5,19.01955000865388
719625705,ggguille,rent-o-matic,Project to learn python and clean architecture,https://github.com/ggguille/rent-o-matic,29,0,0,0,0,1,33,5,2.4242424242424243,1,1,1,0,3,8.303030303030303,51.9964310033632,0.7484037701429005,70.86584996669012
58201091,xyicheng,pySimpleCQRS,Python implementation of Super Simple CQRS Example by Greg Young,https://github.com/xyicheng/pySimpleCQRS,104,0,0,0,0,0,12,5,1.3333333333333333,0,0,0,0,0,9.416666666666666,16.150489295854282,1.2333333333333334,52.225646334362
688507265,edwardforero,aws-back-personal-example,"This is an example of an AWS backend architecture using CloudFormation and Python. Here are some examples of layers, Lambdas, SQS, SNS, Cognito user pool, API Gateway integrated with Cognito, and more.",https://github.com/edwardforero/aws-back-personal-example,28,0,0,0,0,1,23,5,3.0434782608695654,0,0,0,0,0,5.826086956521739,70.88725271683423,1.804590017825312,301.8962742552096
885341266,2004YD,Enterprise-Data-Hub-Data-Analytics-of-Telecommunication-Domain-,"The project is designed to efficiently process and analyze data from a source  RDBMS using AWS Glue for ETL (Extract, Transform, Load) operations. It follows a  multi-layer architecture inspired by the Medallion architecture, comprising Bronze,  Silver, Gold, and Platinum layers to ensure data quality and optimize data processing  and reporting.",https://github.com/2004YD/Enterprise-Data-Hub-Data-Analytics-of-Telecommunication-Domain-,57,0,0,0,0,1,7,5,3.857142857142857,0,0,0,0,0,1.7142857142857142,39.28158357835328,0.8406593406593406,52.22838637795317
941744648,ArashKarampour,VideoToAudioConvertorService,"This is a Project that I've developed about microservices architecture using Python(flask),Docker,Kubernetes, RabbitMQ, MongoDB, and MySQL becuase of personal interests in DevOps, System Architecture, python programming languge and web technologies.",https://github.com/ArashKarampour/VideoToAudioConvertorService,11,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
822217311,willemse-and-co,pylint-hexagonal,"A PyLint plugin to check a ""hexagonal"" Python application conforms to to the principles of hexagonal architecture",https://github.com/willemse-and-co/pylint-hexagonal,4,0,0,0,0,1,6,5,2.6666666666666665,0,0,0,0,0,8.0,51.66710966286397,1.108974358974359,313.4708770098166
324155422,gbourniq,django-on-aws,"Django web application deployed to AWS via Cloudformation templates, with an infrastructure as code approach following the AWS architecture best practices. The application is a sample blog-like website which can be used as a personal portfolio.",https://github.com/gbourniq/django-on-aws,14051,20,20,11,0,2,45,6,4.0,0,0,1,0,1,8.133333333333333,33.44467357247891,0.6483177316510651,61.80566472753068
119013048,quanrong88,microservices-demo,A simple project use micro services architecture,https://github.com/quanrong88/microservices-demo,34,0,0,0,0,1,16,5,3.1875,0,1,0,0,1,4.5,7.31880085170784,0.28125,3.65940042585392
594854746,MeqdadDev,fastapi-redis-microservices-inventory,Microservices architecture system with FastAPI and Redis,https://github.com/MeqdadDev/fastapi-redis-microservices-inventory,299,0,0,0,0,1,4,5,5.0,0,0,0,0,0,2.75,11.816165626622604,0.625,11.221804688852169
898876239,gs1068,fast-api-slack-gpt-bot,This bot is a service that analyzes Slack thread messages and automatically generates responses using ChatGPT. It is built with FastAPI and follows Domain-Driven Design (DDD). Its main use cases include improving team communication efficiency and automating question responses.,https://github.com/gs1068/fast-api-slack-gpt-bot,41,1,1,0,0,1,22,5,3.227272727272727,1,1,1,1,4,6.727272727272728,11.007632109774791,0.4166666666666667,17.973978990768988
890049350,renatoprovi,clean_architecture,,https://github.com/renatoprovi/clean_architecture,39,0,0,0,0,1,18,5,1.8888888888888888,1,1,0,1,3,2.6666666666666665,1.7610694452457292,0.0833333333333333,2.6416041678685938
946623473,kollydap,cdc_event_sourcing_demo,,https://github.com/kollydap/cdc_event_sourcing_demo,10,0,0,0,0,1,22,5,1.7727272727272727,0,0,0,0,0,2.090909090909091,1.8144046755745515,0.125,1.1446722565825742
536505285,ezerfernandes,fastapi-app-template,Template of a FastAPI inspired by the clean architecture and using dependency injection,https://github.com/ezerfernandes/fastapi-app-template,19,0,0,0,0,1,11,5,2.4545454545454546,1,0,1,1,3,3.909090909090909,5.800533777295581,0.3636363636363636,4.951149410409779
545183245,mabdelhack,mfcl,modulation layer architecture for neural networks,https://github.com/mabdelhack/mfcl,547,2,2,0,0,1,19,5,6.315789473684211,1,0,0,0,1,25.31578947368421,438.8980493582181,5.167735634933766,3693.487644501777
263353376,nicfix,py-ddd-cqrs-microservice-boilerplate,"A boilerplate for a Domain Driven Design(ed), CQRS based, Microservice in Python",https://github.com/nicfix/py-ddd-cqrs-microservice-boilerplate,2870,19,19,2,4,2,42,5,2.6666666666666665,1,1,1,1,4,3.023809523809524,0.4528464287774733,0.0476190476190476,0.2264232143887366
831839227,Paola-CansecoPenagos,TaskMaster_users,"Service used for users in the taskMaster application, using hexagonal architecture",https://github.com/Paola-CansecoPenagos/TaskMaster_users,81,0,0,0,0,1,33,5,3.060606060606061,1,1,1,1,4,4.393939393939394,10.120365243157472,0.4545454545454545,10.66641221311668
806186599,LegallyCoder,CyclicFormer,"CyclicFormer is a new architecture designed to enhance the performance of the transformer architecture. It introduces a new perspective for decoder layers, forming a cyclic loop between all the layers.",https://github.com/LegallyCoder/CyclicFormer,42,3,3,0,0,1,2,5,6.0,0,0,0,0,0,40.0,438.24373571156514,5.625,4930.242026755108
484030772,astepe,Domain-Driven-Design-Exercises,A place to put Domain Driven Design exercises and learnings,https://github.com/astepe/Domain-Driven-Design-Exercises,31,0,0,0,0,1,22,5,2.409090909090909,1,0,0,1,2,6.318181818181818,29.32859224309466,0.4994180939833113,55.15213518474846
646554180,cbrwx,BiSOLA,Bi-objective Self-Organizing Layered Architecture for Multi-Task Learning,https://github.com/cbrwx/BiSOLA,29,0,0,0,0,1,1,5,8.0,0,0,0,0,0,61.0,398.5385081605227,5.333333333333333,2125.5387101894544
274142185,jweng1,KafkaSource-Demo,Setting up kafka source to send data to display with knative event display ,https://github.com/jweng1/KafkaSource-Demo,10,0,0,0,0,1,2,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
332843907,ahmedsadman,python-microservices,"A basic example of microservice architecture with Python. Built with Django, Flask, React and (obviously) Docker",https://github.com/ahmedsadman/python-microservices,22,0,0,0,0,2,24,5,2.6666666666666665,0,0,0,0,0,1.4166666666666667,1.663204285943339,0.1145833333333333,1.0492829018673595
626844842,SSuSSanich,flask_clean_architecture,,https://github.com/SSuSSanich/flask_clean_architecture,65,0,0,0,0,1,40,5,3.45,0,1,0,0,1,4.375,7.834423807898342,0.2738675213675213,13.008208603974447
563635287,serfer2,game-of-life-ports-and-adapters,Conway's game of life implementation with Hexagonal software architecture (formerly Ports & Adapters),https://github.com/serfer2/game-of-life-ports-and-adapters,18,0,0,0,0,1,27,5,1.4074074074074074,1,1,0,1,3,5.444444444444445,22.293974911949345,0.5729166666666666,188.49392106775676
218932231,JayStevency,clean-architecture,,https://github.com/JayStevency/clean-architecture,22,0,0,0,0,1,31,5,1.5483870967741935,1,0,0,0,1,5.483870967741935,19.56399650203191,0.2096774193548387,20.044421043025416
776490933,GabrielSlima,microservices-archictecture-breakdown-process-guide,A guide for identifying the microservices of your architecture aligned with Martin Fowler's principles and tips and domain driven design,https://github.com/GabrielSlima/microservices-archictecture-breakdown-process-guide,787,0,0,0,0,1,2,5,2.0,0,0,0,0,0,7.0,0.0,0.0,0.0
180395653,oumarkouf,Microservices,Experimentation of Microservices Architecture using Docker ,https://github.com/oumarkouf/Microservices,1,0,0,0,0,0,1,5,4.0,0,0,0,0,0,2.0,4.754887502163469,0.5,2.3774437510817346
624723077,NourigeonL,MSA-Practice,Small project to practice MSA and Clean Architecture,https://github.com/NourigeonL/MSA-Practice,54,0,0,0,0,1,57,5,2.8771929824561404,1,1,1,1,4,5.087719298245614,18.63153135863957,0.3538986354775829,26.388458010248755
304429025,hermanstehouwer,TDD-intcode,"Advent-of-Code 2019 intcode processor code, test-driven-development, clean-architecture, clean-code",https://github.com/hermanstehouwer/TDD-intcode,11,0,0,0,0,1,17,5,3.294117647058824,0,1,0,0,1,14.0,75.04260177300598,1.1528111852028262,416.0604051051916
693417896,prathmesh4321,Video-to-MP3-Conversion-as-a-Service,An application that performs video to mp3 conversion and adopts a microservices architecture managed and deployed using Kubernetes.,https://github.com/prathmesh4321/Video-to-MP3-Conversion-as-a-Service,326,0,0,0,0,1,14,5,3.2142857142857144,0,0,0,1,1,3.071428571428572,17.433327451058762,0.8363247863247862,41.21341914671
514054410,rsar97,-Microcontroller-based-ANN-for-Pick-and-Place-Robot-Coordinate-Monitoring-System,"Industrial Robots have captivated the manufacturing process of a product in the present assembly lines. The pick and place robot plays a vital role in this process for handling the products. But sometimes it may deviate from its desired position due to vibrations in the motors or due to external factors such as the impact on the robotic arm by the nearby robotic arm in an assembly line, resulting in aberrant gripping of the product. The resulting product either becomes unusable or gets damaged. As a solution to this a microcontroller- based machine learning coordinate monitoring design is proposed. A Feed-Forward neural network is used to determine whether the robot can pick the product or not. Before the robot picks the product the position of the robot arm is tracked by the three-axis angle sensor. The simple design of the system makes it easier to implement. The output of the feed forward neural network in microcontroller will determine whether the robot arm can grip the product. The network is trained through an iterative process with the training data which consists of both accepted and rejected values. The performance of the network is tested by exposing the outputs of the sensor (i.e. test data) to the network. The accuracy and the performance of the network are achieved by modeling the network architecture with the required number of neurons in the hidden layers. The accuracy of the neural network designed is observed to be around 98% from the respective accuracy graphs at different training process. The simple design procedure makes this system compact and reprogrammable.",https://github.com/rsar97/-Microcontroller-based-ANN-for-Pick-and-Place-Robot-Coordinate-Monitoring-System,5,1,1,0,0,1,1,5,5.0,0,0,0,0,0,0.0,260.0,3.807692307692308,990.0
782761336,juanluiscr27,shared-kernel,A Python library that implements the Shared Kernel pattern to build projects using Domain-Driven Design principles.,https://github.com/juanluiscr27/shared-kernel,154,1,1,0,0,1,48,5,4.270833333333333,1,1,1,1,4,17.479166666666668,78.6514532890901,0.7882210457261442,202.2867407572861
325555436,vikashtank,django-event-sourcing,Experimental library for event sourcing with Django.,https://github.com/vikashtank/django-event-sourcing,53,0,0,0,3,1,21,5,2.238095238095238,0,0,0,0,0,9.904761904761903,35.05523309262842,0.3825458111172397,55.91973253334845
419113264,sdediego,django-clean-architecture,Clean Architecture approach for Django project code structure implementation.,https://github.com/sdediego/django-clean-architecture,178,92,92,13,0,2,145,6,2.7379310344827585,1,1,1,1,4,8.83448275862069,43.34593359322255,0.4267504374829463,100.21109212100926
758293020,farzanmrz,native-deep-learning,"🧠 Neural Network Craft 🚀 A deep dive into foundational neural network algorithms, stripping back high-level abstractions to reveal the core mechanics of deep learning. This project is a hands-on exploration of native network layer implementations, offering a ground-up understanding of neural architectures by applying them to real datasets too..",https://github.com/farzanmrz/native-deep-learning,587,0,0,0,0,1,29,5,2.896551724137931,0,0,0,0,0,7.068965517241379,89.97804895568787,2.186058037072236,318.9011493925293
964260386,nicanornicolas,fastapi-clean-architecture,,https://github.com/nicanornicolas/fastapi-clean-architecture,16,0,0,0,0,1,31,5,4.064516129032258,1,0,0,0,1,6.258064516129032,29.48255785970636,0.6605818912270526,68.90991641053577
823793592,j-e-0,scaffold-hexagonal-pattern-py,"This project is a FastAPI application designed with Hexagonal Architecture (Ports and Adapters). It demonstrates the separation of concerns, making the application more maintainable, testable, and scalable.",https://github.com/j-e-0/scaffold-hexagonal-pattern-py,16,0,0,0,0,1,30,5,2.2333333333333334,1,1,1,1,4,2.6333333333333333,8.312701557413767,0.1276388888888888,4.8129372301938815
850612346,kenanhancer,taxi_app,"Taxi Application with customer and driver mobile apps, built using a microservice architecture in a monorepo.",https://github.com/kenanhancer/taxi_app,30,0,0,0,0,1,22,5,2.772727272727273,0,1,0,0,1,11.363636363636363,11.1631192934954,0.6398268398268399,16.14143946011941
342293963,ultranet1,APACHE_AIRFLOW_DATA_PIPELINES,"Project Description: A music streaming company wants to introduce more automation and monitoring to their data warehouse ETL pipelines and they have come to the conclusion that the best tool to achieve this is Apache Airflow. As their Data Engineer, I was tasked to create a reusable production-grade data pipeline that incorporates data quality checks and allows for easy backfills. Several analysts and Data Scientists rely on the output generated by this pipeline and it is expected that the pipeline runs daily on a schedule by pulling new data from the source and store the results to the destination.  Data Description: The source data resides in S3 and needs to be processed in a data warehouse in Amazon Redshift. The source datasets consist of JSON logs that tell about user activity in the application and JSON metadata about the songs the users listen to.  Data Pipeline design: At a high-level the pipeline does the following tasks.  Extract data from multiple S3 locations. Load the data into Redshift cluster. Transform the data into a star schema. Perform data validation and data quality checks. Calculate the most played songs for the specified time interval. Load the result back into S3. dag  Structure of the Airflow DAG  Design Goals: Based on the requirements of our data consumers, our pipeline is required to adhere to the following guidelines:  The DAG should not have any dependencies on past runs. On failure, the task is retried for 3 times. Retries happen every 5 minutes. Catchup is turned off. Do not email on retry. Pipeline Implementation:  Apache Airflow is a Python framework for programmatically creating workflows in DAGs, e.g. ETL processes, generating reports, and retraining models on a daily basis. The Airflow UI automatically parses our DAG and creates a natural representation for the movement and transformation of data. A DAG simply is a collection of all the tasks you want to run, organized in a way that reflects their relationships and dependencies. A DAG describes how you want to carry out your workflow, and Operators determine what actually gets done.  By default, airflow comes with some simple built-in operators like PythonOperator, BashOperator, DummyOperator etc., however, airflow lets you extend the features of a BaseOperator and create custom operators. For this project, I developed several custom operators.  operators  The description of each of these operators follows:  StageToRedshiftOperator: Stages data to a specific redshift cluster from a specified S3 location. Operator uses templated fields to handle partitioned S3 locations. LoadFactOperator: Loads data to the given fact table by running the provided sql statement. Supports delete-insert and append style loads. LoadDimensionOperator: Loads data to the given dimension table by running the provided sql statement. Supports delete-insert and append style loads. SubDagOperator: Two or more operators can be grouped into one task using the SubDagOperator. Here, I am grouping the tasks of checking if the given table has rows and then run a series of data quality sql commands. HasRowsOperator: Data quality check to ensure that the specified table has rows. DataQualityOperator: Performs data quality checks by running sql statements to validate the data. SongPopularityOperator: Calculates the top ten most popular songs for a given interval. The interval is dictated by the DAG schedule. UnloadToS3Operator: Stores the analysis result back to the given S3 location. Code for each of these operators is located in the plugins/operators directory.  Pipeline Schedule and Data Partitioning: The events data residing on S3 is partitioned by year (2018) and month (11). Our task is to incrementally load the event json files, and run it through the entire pipeline to calculate song popularity and store the result back into S3. In this manner, we can obtain the top songs per day in an automated fashion using the pipeline. Please note, this is a trivial analyis, but you can imagine other complex queries that follow similar structure.  S3 Input events data:  s3://<bucket>/log_data/2018/11/ 2018-11-01-events.json 2018-11-02-events.json 2018-11-03-events.json .. 2018-11-28-events.json 2018-11-29-events.json 2018-11-30-events.json S3 Output song popularity data:  s3://skuchkula-topsongs/ songpopularity_2018-11-01 songpopularity_2018-11-02 songpopularity_2018-11-03 ... songpopularity_2018-11-28 songpopularity_2018-11-29 songpopularity_2018-11-30 The DAG can be configured by giving it some default_args which specify the start_date, end_date and other design choices which I have mentioned above.  default_args = {     'owner': 'shravan',     'start_date': datetime(2018, 11, 1),     'end_date': datetime(2018, 11, 30),     'depends_on_past': False,     'email_on_retry': False,     'retries': 3,     'retry_delay': timedelta(minutes=5),     'catchup_by_default': False,     'provide_context': True, } How to run this project? Step 1: Create AWS Redshift Cluster using either the console or through the notebook provided in create-redshift-cluster  Run the notebook to create AWS Redshift Cluster. Make a note of:  DWN_ENDPOINT :: dwhcluster.c4m4dhrmsdov.us-west-2.redshift.amazonaws.com DWH_ROLE_ARN :: arn:aws:iam::506140549518:role/dwhRole Step 2: Start Apache Airflow  Run docker-compose up from the directory containing docker-compose.yml. Ensure that you have mapped the volume to point to the location where you have your DAGs.  NOTE: You can find details of how to manage Apache Airflow on mac here: https://gist.github.com/shravan-kuchkula/a3f357ff34cf5e3b862f3132fb599cf3  start_airflow  Step 3: Configure Apache Airflow Hooks  On the left is the S3 connection. The Login and password are the IAM user's access key and secret key that you created. Basically, by using these credentials, we are able to read data from S3.  On the right is the redshift connection. These values can be easily gathered from your Redshift cluster  connections  Step 4: Execute the create-tables-dag  This dag will create the staging, fact and dimension tables. The reason we need to trigger this manually is because, we want to keep this out of main dag. Normally, creation of tables can be handled by just triggering a script. But for the sake of illustration, I created a DAG for this and had Airflow trigger the DAG. You can turn off the DAG once it is completed. After running this DAG, you should see all the tables created in the AWS Redshift.  Step 5: Turn on the load_and_transform_data_in_redshift dag  As the execution start date is 2018-11-1 with a schedule interval @daily and the execution end date is 2018-11-30, Airflow will automatically trigger and schedule the dag runs once per day for 30 times. Shown below are the 30 DAG runs ranging from start_date till end_date, that are trigged by airflow once per day.  schedule",https://github.com/ultranet1/APACHE_AIRFLOW_DATA_PIPELINES,792,16,16,2,0,1,19,5,4.947368421052632,0,0,0,0,0,2.789473684210526,20.064263471771955,0.510108604845447,21.57665283035109
446511773,MarlonIC,zebrands-challenge,Catalog system with hexagonal architecture,https://github.com/MarlonIC/zebrands-challenge,13,0,0,0,0,1,40,7,2.925,1,1,1,1,4,3.6,3.251367869370262,0.1541666666666666,4.166326689385562
767895803,zeamort,multi-service-demo,"A demo microservices architecture featuring Python services, Kafka integration, and Docker-based deployment.",https://github.com/zeamort/multi-service-demo,386,0,0,0,0,1,25,5,5.36,0,0,0,0,0,3.36,70.1152727147273,1.344013237216504,435.78050764153465
931226760,sdfarshid,Microservice-DDD-CQRS,,https://github.com/sdfarshid/Microservice-DDD-CQRS,190,0,0,0,0,1,306,7,2.813725490196078,1,1,1,1,4,2.865573770491803,3.976443294721368,0.179326684244717,8.529701640104712
552403497,rajdemon,HacktoberFest-2022,About Hacktoberfest is an annual worldwide event held during the month of October. The event encourages open source developers to contribute to repositories through pull requests (PR). ,https://github.com/rajdemon/HacktoberFest-2022,2094,3,3,12,4,1,13,5,1.5384615384615383,0,0,0,0,0,5.615384615384615,244.62174762989324,3.0085858362454108,1693.2404734021588
718719432,fabius-lovato,clean-architecture-etl-backend-service,,https://github.com/fabius-lovato/clean-architecture-etl-backend-service,93,0,0,0,0,1,94,6,2.1382978723404253,1,1,1,1,4,6.5638297872340425,20.909793849125627,0.4002492548052214,76.3940428025719
941231488,Bradd3rs,full-stack-starter-backend,"A modern, production-ready backend starter built with FastAPI, featuring RESTful API endpoints, database integration, CORS support, and health monitoring. Perfect foundation for full-stack web applications with a clean, extensible architecture.",https://github.com/Bradd3rs/full-stack-starter-backend,21,4,4,0,0,1,11,5,3.909090909090909,1,0,1,0,2,2.5454545454545454,2.9062376709807065,0.1818181818181818,2.473975170784028
914470731,simulacrum6,sgumlp,"Pytorch implementation of the SGU-MLP Architecture (mostly) as described in the paper ""Spatial Gated Multi-Layer Perceptron for Land Use and Land Cover Mapping"".",https://github.com/simulacrum6/sgumlp,720,0,0,0,0,1,20,5,3.7,0,0,0,0,0,16.05,211.154339555817,2.792072457793104,1583.591963042531
967048024,Hazrat-Ali9,Software-Development-by-Microsoft,🚢 Microsoft’s software development ✈  principles tools and 🚁  technologies Perfect for 🛸 developers aiming to 🚀 learn build and scale 🛼 world-class software 🚞 NET C# Azure Visual Studio 🚒 and DevOps best 🏟 practices Includes project 🏟 templates clean architecture 🏘 patterns CI/CD workflows  Guides 🕍 on Agile development testing debugging,https://github.com/Hazrat-Ali9/Software-Development-by-Microsoft,11,2,2,0,0,1,16,5,0.0,0,0,0,0,0,0.6875,4.841401585895814,0.484375,7.159793324000661
577353825,biko-73,Xtraevent,"This plugin has been created to get more information and images(poster,background,banner,info...) about events. source data are obtained from public websites(tmdb, tvdb, omdb, maze ...). this plugin is open source and free... Shareable changes can be made by protecting non-commercial and ""digiteng"" rights...",https://github.com/biko-73/Xtraevent,14168,2,2,0,0,0,29,10,12.20689655172414,0,0,0,0,0,47.0,558.4964456317052,3.307619845807888,5568.99966005731
575990433,huckflinn,microservices-python-clone,A clone of Kantan Coding / freeCodeCamp's microservice architecture tutorial,https://github.com/huckflinn/microservices-python-clone,18,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
257247861,Tallot,FilmStore,System based on microservice architecture,https://github.com/Tallot/FilmStore,1053,0,0,0,7,1,31,5,3.612903225806452,0,0,0,1,1,4.258064516129032,23.208266854142504,0.4899804496578691,69.70313235983265
794914570,DarkShadowCoder,microservice_ecommerce,Creation de site ecommerce basé sur l'architecture microservice,https://github.com/DarkShadowCoder/microservice_ecommerce,30,1,1,0,0,1,21,6,0.9047619047619048,0,1,1,0,2,6.761904761904762,27.404759514563956,0.1904761904761904,16.510551398639418
857513980,mateusribs,ccca-python,Repositório de estudo do curso de Clean Code e Clean Architecture. Implementação em Python + FastAPI,https://github.com/mateusribs/ccca-python,88,0,0,0,0,1,47,5,2.5531914893617023,1,1,1,1,4,7.0212765957446805,26.94490313735423,0.6584139264990329,56.1901264930795
718830225,siddharth2011,EventRight,Open Source Event & Invitation Platform,https://github.com/siddharth2011/EventRight,86,0,0,0,0,1,6,5,1.6666666666666667,0,0,0,0,0,0.3333333333333333,1.5849625007211563,0.1666666666666666,0.7924812503605781
140953339,solatis,cqrs,CQRS training @ Xomnia,https://github.com/solatis/cqrs,5,0,0,0,0,2,1,5,6.0,0,0,0,0,0,12.0,131.68575291675114,2.533333333333333,333.60390738910286
813959967,Azriel72,Roman-Numbers-DDD,Decimal-Roman number converter using DOMAIN DRIVEN DESIGN (DDD),https://github.com/Azriel72/Roman-Numbers-DDD,3,0,0,0,0,2,2,5,1.0,0,0,0,0,0,14.5,63.94573713977974,2.05,149.77286856988988
786067385,SGD03,PES2UG21CS164_PES2UG21CS174_PES2UG21CS907_PES2UG21CS922_Microservices_communication_using_RabbitMQ,Course project for UE21CS351B. Building an Inventory management system using microservice architecture,https://github.com/SGD03/PES2UG21CS164_PES2UG21CS174_PES2UG21CS907_PES2UG21CS922_Microservices_communication_using_RabbitMQ,366,0,0,0,0,1,5,5,3.4,0,0,0,0,0,3.0,1.901955000865388,0.2,0.9509775004326938
924415284,JessB2000,Lojinha-Clean-Architecture-,Projeto criado para a disciplina de Engenharia de Software II afim de estudar e entender um pouco de Arquitetura Limpa na prática. ,https://github.com/JessB2000/Lojinha-Clean-Architecture-,65,0,0,0,0,1,88,6,2.011363636363636,1,0,1,1,3,1.6136363636363635,3.4749507277312457,0.2241477272727272,5.7082315991783545
684388853,AnuragBambardekar,Mp4-to-Mp3-Converter-with-Kubernetes-and-Python,Microservice Architecture and System Design with Python & Kubernetes,https://github.com/AnuragBambardekar/Mp4-to-Mp3-Converter-with-Kubernetes-and-Python,5677,3,3,0,0,1,14,6,3.2142857142857144,0,0,0,1,1,2.857142857142857,15.138974074573635,0.7148962148962149,38.38830272659734
675868771,majorsigma,quotes_django_microservice,This app is built with Django with the microservice architecture at heart,https://github.com/majorsigma/quotes_django_microservice,23,0,0,0,0,1,37,5,2.0,0,0,0,0,0,1.4594594594594594,3.4100034503585923,0.1289926289926289,3.537513401375814
119593943,dutradda,domainer,A simple and intuitive Domain Driven Design (DDD) framework for Python with CRUD operations for SQL and NoSQL databases.,https://github.com/dutradda/domainer,34,4,4,0,0,1,59,5,1.1864406779661016,0,1,0,0,1,3.016949152542373,4.032808584679783,0.1655367231638418,5.286466330337131
691028945,indicoanalytics,tmpl_pythonapi_clean,CLEAN Architecture Python implementation with Flask,https://github.com/indicoanalytics/tmpl_pythonapi_clean,6,0,0,0,0,0,20,5,1.6,1,1,1,1,4,1.4,2.514625018644536,0.1875,3.468104510442631
873032642,Sagor0078,fastapi_langchain_in_productions,this is chatbot applications which is build with microservice architecture,https://github.com/Sagor0078/fastapi_langchain_in_productions,2054,0,0,0,0,1,3,5,9.666666666666666,0,0,0,0,0,4.333333333333333,8.152946458820278,0.5,7.819613125486945
138198269,anshuln,ITSP-2018,"Contains the codes for an Automated Dispensary system. The system builds a classifier for images of pills, powered by retraining the final layer of MobileNet architecture. It further contains implementations to localize the positions of certain objects in the omage through contour detection and a simple sliding window. Further, it has code to commnicate with an Arduino-UNO to recieve orders and control stepper motors.",https://github.com/anshuln/ITSP-2018,4197,1,1,1,0,0,10,5,8.2,0,0,0,0,0,38.4,1103.0940224921371,5.724990904781698,11128.326038435427
959125582,artemy-sh,rochambeau,"Rochambeau is a console-based implementation of the classic Rock-Paper-Scissors game, built following Clean Architecture principles.",https://github.com/artemy-sh/rochambeau,24,0,0,0,0,1,47,5,2.5319148936170213,1,1,1,1,4,5.127659574468085,26.735798677726763,0.4862815352177054,48.82495864985784
847733392,trueToastedCode,py-clean-architecture,,https://github.com/trueToastedCode/py-clean-architecture,3,0,0,0,0,1,15,5,1.2666666666666666,0,0,1,0,1,2.6,15.8946803624326,0.2699999999999999,16.24974287614023
627316215,NourigeonL,Clean-Architecture,,https://github.com/NourigeonL/Clean-Architecture,59,0,0,0,0,1,34,5,3.176470588235294,0,0,0,0,0,14.058823529411764,30.493543805046777,1.0832823229017,155.54716890079905
476225402,rohanmrb,Microservice,Converting a monolith architecture based docker-compose application into a microservices based architecture.,https://github.com/rohanmrb/Microservice,56,0,0,0,0,1,12,5,2.083333333333333,0,0,0,0,0,9.5,108.4758186265562,1.851952930018968,320.3785128745037
947976334,edisedis777,Azure-Medallion-API,"A data pipeline using the Medallion architecture (Bronze, Silver, Gold layers) on Microsoft Azure, with a RESTful API built using FastAPI to serve the processed data",https://github.com/edisedis777/Azure-Medallion-API,69,1,1,0,0,1,5,5,6.6,0,0,0,0,0,14.6,48.56551106394586,1.6064102564102565,101.49478542568636
652899870,haiconmeo,fastapi-clean-architecture,,https://github.com/haiconmeo/fastapi-clean-architecture,233,3,3,0,0,1,68,5,2.6323529411764706,0,0,1,1,2,3.4411764705882355,12.97632015371753,0.3180380249265698,50.62473802294069
543383759,pcah,pca-archunit,A DSL & analysis library for testing architecture of your application. Part of the python-clean-architecture project.,https://github.com/pcah/pca-archunit,652,0,0,0,2,1,30,6,1.6,0,0,0,0,0,5.333333333333333,28.08832584206482,0.4624326319675156,69.87002107110791
861238280,mukeshbadgujar,MicroServicePythonFlask,"A lightweight microservices architecture built using Python and Flask. This project demonstrates the implementation of essential microservices, including user authentication (login and registration) and a random number generation service, utilizing RabbitMQ for message brokering.",https://github.com/mukeshbadgujar/MicroServicePythonFlask,3,1,1,0,0,1,3,5,3.333333333333333,0,0,0,0,0,3.6666666666666665,19.43947010383356,1.1666666666666667,31.331571455143077
326507043,LucasGab,Python_Microservice1,A proof of concept of a microservice architecture written in python and using flask and json.,https://github.com/LucasGab/Python_Microservice1,243,0,0,0,0,1,5,5,3.4,0,1,0,0,1,16.0,229.9848116506764,2.538752052545156,1037.4112357536092
795316426,paq1,event-sourcing-lib-kafka,,https://github.com/paq1/event-sourcing-lib-kafka,40,0,0,0,0,1,46,5,2.152173913043478,1,0,0,0,1,3.3260869565217392,3.631146555497536,0.1050724637681159,3.0820794665221247
473855058,27Roger,DL_MiniProject1,"A residual neural network (ResNet) is an artificial neural network (ANN) which utilizes skip connections, or shortcuts to jump over some layers.  Typical ResNet models are implemented with double- or triple- layer skips that contain nonlinearities and batch normalization in between. In this project, we propose a ResNet-18 architecture which uses SGD Nesterov optimizer in combination with Manifold-Mixup regularization and Affine Transform data augmentation techniques. We provide comprehensive empirical evidence showing that this residual network performs optimally for CIFAR-10 dataset with a test accuracy of 94.1%.",https://github.com/27Roger/DL_MiniProject1,10222,0,0,0,0,1,10,5,8.3,0,0,0,0,0,17.9,374.57326924820137,3.4869454562759024,2419.695497324493
641264734,breathfunwithmindte,py-fastapi-boilterplate,Python fastapi web server boilterplate using microservices architecture without db core,https://github.com/breathfunwithmindte/py-fastapi-boilterplate,10,0,0,0,0,1,21,5,3.142857142857143,1,1,0,0,2,2.571428571428572,3.549946429601652,0.1952380952380952,2.993598393712228
519763228,sbhusal123,flask-cqrs,Event sourcing with CQRS,https://github.com/sbhusal123/flask-cqrs,17,0,0,0,0,1,27,5,4.037037037037037,1,0,0,0,1,16.62962962962963,99.9219417258832,1.6870151325461782,402.8835604161106
668852244,behlock,nights-backend,events sourcing and api,https://github.com/behlock/nights-backend,687,1,1,0,0,1,22,5,2.863636363636364,0,0,1,0,1,4.2727272727272725,21.121839311367307,0.3023949169110459,41.21121180932336
73127163,lgiordani,rentomatic,A demo implementation of a clean architecture in Python,https://github.com/lgiordani/rentomatic,34,415,415,88,0,21,31,5,1.870967741935484,1,1,1,0,3,7.129032258064516,41.17167432318684,0.5291563275434243,47.5141741606029
438844963,bonetou,clean-architecture-python,"Clean architecture with Python, based on Alura's Course 'Java and Clean Architecture: Simplifying software architecture'.",https://github.com/bonetou/clean-architecture-python,33,0,0,0,0,1,37,5,1.7567567567567568,1,1,0,1,3,3.027027027027027,5.666603152497269,0.2342342342342342,6.654288552718432
707134807,fmagno,pta-hexagonal-arch,Sample app following hexagonal architecture principles,https://github.com/fmagno/pta-hexagonal-arch,18,0,0,0,0,1,39,6,3.0,1,1,1,1,4,3.076923076923077,0.3657605770894976,0.0384615384615384,0.1828802885447488
854760456,gabrielCarvalhoGit,Flowtec-Solucao-Societaria-Backend,"Projeto desenvolvido com Django Rest Framework, utilizando arquitetura DDD (Domain Driven Design) e tecnologias como JWT (JSON Web Tokens) para autenticação e Celery para processamento de tarefas assíncronas. O objetivo do projeto é proporcionar aos usuários uma solução eficiente e segura para o gerenciamento de processos societários.",https://github.com/gabrielCarvalhoGit/Flowtec-Solucao-Societaria-Backend,636,1,1,2,0,1,143,5,2.965034965034965,1,1,1,1,4,5.587412587412588,10.60491526597209,0.3886571318617532,31.334546314890865
58169888,woodphil,columbia_micromono,Comparison between microservices and monolithic architectures,https://github.com/woodphil/columbia_micromono,44,0,0,0,0,1,4,5,0.0,1,0,0,0,1,0.0,0.0,0.0,0.0
872779879,sapiens-technology,SingleLayerHurNet,Example of construction of an Artificial Neural Network with the single-layer HurNet architecture for two-dimensional numerical matrices.,https://github.com/sapiens-technology/SingleLayerHurNet,373,3,3,2,0,2,1,5,1.0,0,0,0,0,0,0.0,0.0,0.0,0.0
551791883,fariasfc,parallel-mlps,Repository containing the code of the paper: Embarrassingly Parallel Independent Training of Multi-Layer Perceptrons with Heterogeneous Architectures,https://github.com/fariasfc/parallel-mlps,12,0,0,0,0,1,5,5,7.0,0,0,0,0,0,17.6,204.9721125904924,2.30025974025974,1210.3425958398493
689994467,mikhail-luginin,python-project-template,"Clean architecture implementation in python uses FastAPI, SQLAlchemy, Docker and Nginx",https://github.com/mikhail-luginin/python-project-template,21,3,3,0,4,1,42,5,1.5952380952380951,1,1,1,1,4,1.9285714285714288,3.9462229183321935,0.1700680272108843,7.857414395451917
71374780,Anp-tomsk,event-sourcing,,https://github.com/Anp-tomsk/event-sourcing,5,0,0,0,0,0,18,5,2.055555555555556,0,0,1,0,1,2.5,0.3752715278979705,0.0555555555555555,0.1876357639489852
476180498,Rishab2707,Cloud-Computing-Hack3,A monolith architecture based docker-compose application is converted into a microservices based architecture.,https://github.com/Rishab2707/Cloud-Computing-Hack3,57,0,0,0,0,1,8,5,2.125,0,0,0,0,0,4.125,25.477543295845795,0.9125,23.1047038557782
833523971,amorales-iolab93,clean-code-wizard-academy,"Welcome to Wizard Academy, an application designed to manage and administer the records of wizards and their requests within the Clover Kingdom. This application is built to interact with DynamoDB using aioboto3, FastAPI, and Python 3.10, and is structured according to the principles of Clean Code and Clean Architecture.",https://github.com/amorales-iolab93/clean-code-wizard-academy,100,0,0,0,0,1,70,6,2.771428571428572,1,1,1,0,3,3.6142857142857134,5.457305016615533,0.2095238095238095,10.087818371422284
808246677,fatimamahsud1,Notes-App,"This project involves developing a Python-based note application using FastAPI for the backend and Flet for the frontend, structured to scale with MVC architecture, focusing on CRUD operations for notes and user authentication, while maintaining separation of concerns across different layers such as routes, business logic, and database operations.",https://github.com/fatimamahsud1/Notes-App,19,0,0,0,0,1,27,5,1.2592592592592593,1,1,1,0,3,1.5925925925925926,1.828626375665752,0.074074074074074,1.6525194311411786
918552269,Thilak30,S3-bucket-scanning-microservices-,"Microservices project for scanning AWS S3 buckets, identifying sensitive data, and storing results in a MySQL database. Includes Flask-based APIs, Dockerized services, and a scalable architecture for efficient data processing",https://github.com/Thilak30/S3-bucket-scanning-microservices-,26,0,0,0,0,1,4,5,3.0,0,0,0,0,0,4.5,11.512746012021982,0.8333333333333334,22.50442715106811
840147636,AntonVagabond,OnlineStore,"The ""Online Store"" project, written in FastAPI, using microservice architecture.",https://github.com/AntonVagabond/OnlineStore,547,16,16,1,1,1,186,10,2.150537634408602,1,1,1,1,4,2.521505376344086,3.9476203143436654,0.1669574153445121,7.314383612566604
514032554,sergiomauz,Clean-Architecture-Python-Flask,,https://github.com/sergiomauz/Clean-Architecture-Python-Flask,162,0,0,0,0,1,75,7,2.64,1,1,1,1,4,2.5866666666666664,8.012895515850623,0.3224955436720143,29.28141030933345
680220489,parisbite,clean-python,Clean architecture in Python,https://github.com/parisbite/clean-python,138,0,0,1,0,0,73,5,7.52054794520548,1,1,0,1,3,14.945205479452056,78.49135128808203,1.0425950974486071,189.33133770292207
812105883,brenomoura,receivers-api,"A simple API for managing PIX (Brazilian instant payment system) recipients, developed using Clean Architecture and Domain-Driven Design (DDD) principles.",https://github.com/brenomoura/receivers-api,90,0,0,0,0,1,58,6,2.4655172413793105,1,1,0,1,3,5.327586206896552,12.618516508426335,0.2344827586206896,13.743193619130905
938393653,david-dev0415,app-basic-veterinaria,Practice hexagonal architecture,https://github.com/david-dev0415/app-basic-veterinaria,8,0,0,0,0,1,9,5,2.2222222222222223,1,1,0,1,3,9.77777777777778,54.60574701425219,0.8611111111111112,79.92874678613072
826058297,elirazo96,challenge_log_parsing,"This repo contains a Python script to parse and normalize log entries from a specific format. The script extracts key fields such as timestamp, source IP, event description, user, and resource, and standardizes the data for further analysis.",https://github.com/elirazo96/challenge_log_parsing,14,0,0,0,0,1,1,5,2.0,0,0,0,0,0,0.0,0.0,0.0,0.0
541960294,Bazarovinc,template_clean_architecture,,https://github.com/Bazarovinc/template_clean_architecture,78,1,1,0,0,1,75,5,3.16,1,1,1,1,4,2.88,7.35776457130313,0.093008547008547,6.639894310848884
425501253,washington93,Python-with-clean-architecture,,https://github.com/washington93/Python-with-clean-architecture,10,0,0,0,0,1,10,5,1.6,1,0,0,1,2,1.8,0.0,0.0,0.0
827499945,Marlen-Shifu,clean-architecture-drf,,https://github.com/Marlen-Shifu/clean-architecture-drf,8,0,0,0,0,1,28,5,1.3214285714285714,1,1,1,1,4,2.4285714285714284,2.8963037017339484,0.1780612244897959,4.797514779318083
561399119,freenie-study,python-clean-architectures,<클린 아키텍쳐> study repository,https://github.com/freenie-study/python-clean-architectures,75,0,0,1,0,1,26,6,1.4230769230769231,1,0,0,0,1,14.038461538461538,183.50763094004563,3.4188731704422306,1178.4756936453307
622877726,deepankarvarma,Skin-Cancer-Detection--OpenCV-TensorFlow-Keras,"This repository contains Python code for generating a skin cancer detection model and utilizing it to detect skin cancer from user-inputted images or videos. The model architecture follows a sequential structure consisting of convolutional and pooling layers, with the final output layer using a sigmoid activation function. ",https://github.com/deepankarvarma/Skin-Cancer-Detection--OpenCV-TensorFlow-Keras,6,7,7,5,1,2,3,5,4.666666666666667,0,0,0,0,0,1.3333333333333333,34.77849368898537,1.9375,80.41789630781341
930075783,oatwarat,01_layered_architecture,,https://github.com/oatwarat/01_layered_architecture,2,0,0,0,0,1,1,5,0.0,0,0,0,0,0,40.0,127.43782540330756,2.533333333333333,322.8424910217125
906335019,ketan0029,Quark-Glucon-Classifier-with-Hadronic-calorimeters,Repo provides a deep learning solution for classifying 125x125 three-channel images representing quarks and gluons interacting with a calorimeter. The project involves designing and evaluating two distinct deep learning architectures: a 12-layer VGG model and a ResNet-152 model.,https://github.com/ketan0029/Quark-Glucon-Classifier-with-Hadronic-calorimeters,6,0,0,0,0,1,3,5,6.0,0,0,0,0,0,22.33333333333333,236.550151127244,2.3815359477124183,612.7522575734696
78152020,hubblestack,hubble,"Hubble is a modular, open-source security compliance framework. The project provides on-demand profile-based auditing, real-time security event notifications, alerting, and reporting.",https://github.com/hubblestack/hubble,7087,383,383,87,3,24,427,5,5.85480093676815,0,0,0,0,0,39.72131147540984,419.6025370563264,2.86754178993329,3286.466519783309
747080567,jyshine,Django-DDD-Best-Practice,Django + DRF + DDD + RepositoryPattern + CQRS,https://github.com/jyshine/Django-DDD-Best-Practice,93,0,0,0,0,0,83,5,2.5301204819277108,1,0,0,0,1,2.0963855421686746,0.0572878012308851,0.0060240963855421,0.0286439006154425
755621568,KrySeyt,JustChat,Chat with Clean Architecture and more,https://github.com/KrySeyt/JustChat,211,2,2,1,0,1,144,6,3.388888888888889,1,1,1,1,4,4.041666666666667,13.775872084178976,0.267357658078601,20.62305900009823
204308978,matheuseabra,code-school-mvp,"A educational coding app built using Python, Flask, React and Docker using the microservices architecture.",https://github.com/matheuseabra/code-school-mvp,2935,1,1,0,26,1,10,5,3.2,0,1,1,0,2,6.9,8.855040681366273,0.3,8.379551931149926
629373397,MarlakDevelop,fastapi-tasks-manager,Used clean architecture(Layers only),https://github.com/MarlakDevelop/fastapi-tasks-manager,17,0,0,0,0,1,61,11,1.360655737704918,1,1,1,1,4,2.6885245901639343,7.14173826905505,0.1755889350798755,21.037875199350413
720297676,nobitayon,microservice-system-design-tutorial,Learn Microservice Architecture and System Design with Python & Kubernetes from freecodecamp videos,https://github.com/nobitayon/microservice-system-design-tutorial,15,0,0,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.857142857142857,15.138974074573635,0.7148962148962149,38.38830272659734
42164377,dhamidi,python-example-event-sourcing,Event sourcing example in python,https://github.com/dhamidi/python-example-event-sourcing,132,2,2,0,0,1,13,5,2.1538461538461537,0,0,0,0,0,7.846153846153846,9.707833351252749,0.25,20.56246302050544
158270732,kziete,event-sourcing,,https://github.com/kziete/event-sourcing,1,0,0,0,0,1,2,5,2.0,0,0,0,0,0,1.5,10.132331253245203,0.75,8.943609377704336
896814884,yihune21,Event_Calendar_Reminder_System,"This repository hosts an Event Calendar and Reminder System built using a microservices architecture with Django, PostgreSQL, RabbitMQ, and Docker. Developed by a team from AASTU software engineering, it demonstrates the principles of distributed systems and includes services for managing events, sending reminders, and handling user preferences",https://github.com/yihune21/Event_Calendar_Reminder_System,269,1,1,0,0,2,65,6,2.107692307692308,0,0,0,0,0,3.4,13.30921446100081,0.3427619047619047,53.530613218538754
912982493,sigi2488-coder,hexagonal-architecture-backend,,https://github.com/sigi2488-coder/hexagonal-architecture-backend,25,1,1,0,0,1,8,5,2.125,1,0,1,1,3,2.0,0.8443609377704336,0.125,0.4221804688852168
797573723,0x3at,rewards-R-us,"Rewards-R-Us is an eCommerce backend and API developed using Flask and Python, demonstrating my implementation of layered architecture in server design. ",https://github.com/0x3at/rewards-R-us,1281,1,1,0,0,1,69,5,2.1159420289855078,1,1,1,0,3,3.608695652173913,20.18493053053994,0.2672746560689925,47.52239999817766
832348492,SantiagoVOGIT,hexagonal-python-example,Example of FastAPI application with hexagonal architecture,https://github.com/SantiagoVOGIT/hexagonal-python-example,212,2,2,0,1,1,138,6,3.9057971014492754,1,1,1,1,4,5.340579710144928,10.83660550160502,0.2525851161720727,16.661447021657025
910383422,Krishjain1710,Event_Extraction,"Automatically extracting and linking events described in news articles, social media posts, or other text sources to predict potential outcomes.",https://github.com/Krishjain1710/Event_Extraction,3,0,0,0,0,1,1,5,6.0,0,0,0,0,0,28.0,129.65784284662087,2.5,324.1446071165521
857644513,KushagraSikka,RAG_Microservice-,"RAG-Microservice: A robust, scalable question-answering service leveraging the Retriever-Answer Generator (RAG) architecture. Built with [Tech/Models used, e.g., Elasticsearch, GPT-3], this service efficiently retrieves relevant documents and generates precise answers for complex queries. ",https://github.com/KushagraSikka/RAG_Microservice-,391,3,3,0,0,1,1,5,17.0,0,1,0,0,1,89.0,1207.7840501202445,7.674418604651163,9269.040384643737
134470709,astoliarov,toshokan,Link sharing application built with clean architecture in mind,https://github.com/astoliarov/toshokan,36,17,17,3,0,3,42,5,2.333333333333333,1,1,1,1,4,3.976190476190476,0.6334407740327388,0.0476190476190476,0.5013605656393091
951463234,nicklasbekkevold,bumle-service-event-scraper-cron,Python-based script for periodically fetching information about cultural events in Norway from various sources using web scraping and API integrations,https://github.com/nicklasbekkevold/bumle-service-event-scraper-cron,9,0,0,0,0,1,5,5,0.4,0,0,0,0,0,0.6,1.901955000865388,0.2,0.9509775004326938
829207579,melvinmsm,TechScale_Insights,"A backend focused Blog application to gain a deeper understanding of scalable strategies like microservices architecture, caching, and load balancing. ",https://github.com/melvinmsm/TechScale_Insights,864,0,0,0,0,1,8,5,5.25,0,0,0,0,0,9.0,61.21379956254982,1.1933198380566803,192.08058607796812
711073893,rubensolano2,Networks-of-Neural-Networks,This architecture is an experiment to see the efficiency of having a hidden layer submerged in the network,https://github.com/rubensolano2/Networks-of-Neural-Networks,8,0,0,0,0,1,1,5,8.0,0,0,0,0,0,11.0,4.754887502163469,0.5,2.3774437510817346
582090825,VladyslavFrankevych,CLI-based-SIEM,A Security Information and Event Management (SIEM) system is a security management tool that aggregates and analyzes data from various sources to identify and alert on potential security threats.,https://github.com/VladyslavFrankevych/CLI-based-SIEM,11,0,0,0,0,1,1,5,2.0,0,0,0,0,0,9.0,13.931568569324174,0.5,6.965784284662087
266119631,romulorosa,eventsourcing-python,Basic example event sourcing application for studying purpose,https://github.com/romulorosa/eventsourcing-python,6,0,0,0,0,1,13,5,2.3076923076923075,0,0,0,0,0,5.769230769230769,17.542800417571627,0.5048076923076923,34.79468418565318
960873147,TheWitcher1991,clean-django,Django clean architecture toolkit,https://github.com/TheWitcher1991/clean-django,36,0,0,0,0,1,56,5,2.1607142857142856,1,1,0,1,3,5.803571428571429,6.968446596619401,0.3089817176870748,10.07583484038017
762741027,merlinus1,otus-ma-2023-12,Microservice Architecture,https://github.com/merlinus1/otus-ma-2023-12,84,0,0,0,0,1,6,5,0.8333333333333334,0,0,1,0,1,0.1666666666666666,0.0,0.0,0.0
328858699,aberriel,clean_architecture_dynamodb_adapter,Camada de adapter (ou integração com fonte de dados) específica para o DynamoDB da AWS. Esta camada supre a necessidade de uma camada de adapter para projetos em clean architecture.,https://github.com/aberriel/clean_architecture_dynamodb_adapter,13,0,0,0,0,2,10,5,3.3,0,0,0,0,0,12.8,72.17330633260694,0.9925849303135889,253.02829637296043
831256242,gftf2011,python-vending-machine,Python LLD(Low Level Design) Vending Machine REST API built with FastAPI using Clean Architecture and Design Patterns and Domain Driven Design,https://github.com/gftf2011/python-vending-machine,268,2,2,0,0,1,146,6,2.698630136986301,1,1,1,1,4,9.924657534246576,63.65144487350876,0.468447056775479,169.0617412938041
824984189,mirzayevio,PE-file-metadata-extraction-with-Hexagonal-architecture,"This project downloads PE (Portable Executable) files from an S3 bucket (using multithreading), extracts metadata from the files, and stores the metadata in a PostgreSQL database using PySpark. The project is containerized using Docker.",https://github.com/mirzayevio/PE-file-metadata-extraction-with-Hexagonal-architecture,161,0,0,0,0,1,44,5,2.2045454545454546,1,1,1,1,4,4.863636363636363,27.95037514690891,0.3944426785335876,73.3516419355857
895175097,aws-solutions-library-samples,guidance-for-maximum-data-availability-architecture-on-aws,"This Guidance demonstrates how to enhance database resiliency using a Maximum Data Availability Architecture (MD2A). It introduces MD2A, a data platform that uses APIs and SDKs to deliver full-stack resiliency from the user interface to the database layers.",https://github.com/aws-solutions-library-samples/guidance-for-maximum-data-availability-architecture-on-aws,2913,1,1,0,0,14,5,5,5.0,0,0,0,0,0,7.4,228.1935582405132,1.077051282051282,611.3701550828641
694269699,carlosmab,clean-architecture,,https://github.com/carlosmab/clean-architecture,33,0,0,0,0,1,31,5,1.4516129032258065,1,1,1,0,3,3.4516129032258065,18.87790618823305,0.3459766040411201,21.928598954768766
651242457,Jorge27873,ComplexNetworks,This repository contains all the source codes of the discrete event simulator that allow the creation of networks with characteristics very similar to complex networks.,https://github.com/Jorge27873/ComplexNetworks,34,0,0,1,0,1,31,5,3.032258064516129,0,0,0,0,0,12.612903225806452,1001.4288060043252,4.518360003336413,7745.017702880859
762179986,ZineddineBk09,MP4-to-MP3-Converter-with-Microservices-Architecture-Python-Flask-MySQL-K8s-and-Docker,"This is a simple MP4 to MP3 converter using Python, Flask, MySQL, K8s, and Docker. The application is a simple web application that allows users to upload an MP4 file and convert it to an MP3 file. The application will be based on a **Microservices Architecture** and will be deployed on **Kubernetes**.",https://github.com/ZineddineBk09/MP4-to-MP3-Converter-with-Microservices-Architecture-Python-Flask-MySQL-K8s-and-Docker,361,0,0,0,0,1,9,5,2.555555555555556,0,0,0,1,1,3.6666666666666665,23.35904786208421,0.936431623931624,55.09761486499381
339817001,HalaSaadeh,womenwhocode-python-databases-series,This repository is a collection of source code and content for the Women Who Code Python Databases event series. ,https://github.com/HalaSaadeh/womenwhocode-python-databases-series,6416,3,3,0,0,2,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
95875464,kahst,AcousticEventDetection,Source code complementing our paper for acoustic event classification using convolutional neural networks.,https://github.com/kahst/AcousticEventDetection,530,67,67,28,3,8,6,5,0.3333333333333333,0,0,0,0,0,0.3333333333333333,0.7924812503605781,0.0833333333333333,0.3962406251802891
392796443,asai95,python-clean-architecture,,https://github.com/asai95/python-clean-architecture,3,0,0,0,0,1,9,5,1.6666666666666667,0,0,0,0,0,6.444444444444445,1.3333333333333333,0.0555555555555555,0.6666666666666666
610482122,RomanW05,Mailchimp_docker,Send newsletter to all your subscribers with clean code architecture in Python ,https://github.com/RomanW05/Mailchimp_docker,102,0,0,0,0,1,33,5,4.424242424242424,0,0,0,1,1,9.909090909090908,14.644365418448537,0.3351698806244261,26.610389840224723
851481798,notprakhargupta,Credit-Card-Fraud-Detection-with-Autoencoders-,"• Implemented a fraud detection system leveraging Autoencoder neural networks in Keras and TensorFlow, leveraging an architecture with 4 layers to reconstruct normal transactions and identify anomalies.",https://github.com/notprakhargupta/Credit-Card-Fraud-Detection-with-Autoencoders-,341,1,1,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
304094436,OpenLake,Introduction_Python,Introduction to Open source using Algorithms in Python (Event completed),https://github.com/OpenLake/Introduction_Python,27,0,0,4,2,1,10,5,0.1,0,0,0,0,0,6.0,108.3510947538744,3.4312728937728942,522.1644365872205
493897038,RicardoSabinolrs,fastapi-microservice,This repository is intended to be part of a reference architecture for microservices with FastAPI.,https://github.com/RicardoSabinolrs/fastapi-microservice,108,0,0,0,0,1,75,6,2.026666666666667,1,1,1,1,4,2.44,6.763733905726967,0.1762962962962962,9.033660176486231
179845998,implementing-microservices,event-store,Event Store implementation. Docs: ,https://github.com/implementing-microservices/event-store,313,1,1,2,1,1,4,5,5.0,0,0,0,0,0,5.5,10.698496879867806,0.4107142857142857,11.462675228429791
591178866,tuhh-softsec,microSecEnD,"A dataset of dataflow diagrams (DFDs) for microservice applications in Java. The DFDs contain extensive security annotations, full traceability from model to code, and a mapping to a list of architectural security rules (i.e., which rules are adhered to).",https://github.com/tuhh-softsec/microSecEnD,14949,5,5,3,0,2,20,5,2.75,0,0,0,0,0,8.6,397.3278633721597,1.0549295774647889,1588.2391802157497
392631973,umairahmad-ua,Multi-Layered-Neural-Network-for-Regression-problem,Architecture for final model is with 1 input layer of 8 features and 5 hidden layer of 20 x 20 and 1 output layer without activation.After analyzing the trained models multiple times and on different folds the observations and  statistics of expected RMSE on the test data is most probably between 5.0-9.,https://github.com/umairahmad-ua/Multi-Layered-Neural-Network-for-Regression-problem,302,0,0,0,0,1,3,5,7.666666666666667,0,0,0,0,0,6.0,22.844129532345622,0.3333333333333333,22.844129532345622
781510223,DVNghiem,Hypern,"Hypern is an open-source framework designed to accelerate high-performance web development. Its flexible architecture and robust features empower developers to easily build scalable APIs, microservices, and full-stack applications.",https://github.com/DVNghiem/Hypern,922,6,6,1,3,1,76,5,4.4605263157894735,0,0,1,1,2,19.05263157894737,81.28394625753513,1.3874267268047586,370.5158551903645
954114109,gaurav-cicd,kubernetes-event-driven-autoscaling-keda,This project demonstrates how to implement event-driven autoscaling in Kubernetes using KEDA (Kubernetes Event-driven Autoscaling) with AWS SQS and RabbitMQ as event sources.,https://github.com/gaurav-cicd/kubernetes-event-driven-autoscaling-keda,4,0,0,0,0,1,1,5,6.0,0,0,0,0,0,21.0,46.60451250937504,2.0,93.20902501875008
544163412,ziurg,clean_FEM, Hexagonal architecture example for scientific software,https://github.com/ziurg/clean_FEM,77,1,1,0,0,1,10,5,1.3,1,0,0,1,2,9.1,56.11137925014049,0.5638709677419355,119.66083680405283
612442108,aigramjp,fastapi-clean-architecture,,https://github.com/aigramjp/fastapi-clean-architecture,53,0,0,0,0,1,66,5,2.484848484848485,1,1,1,0,3,4.2727272727272725,6.631191414899442,0.1831550802139037,7.712406428672422
921535486,LeahDeshar,FastAPI-Ecommerce,"Ecommerce web application using FastAPI for the backend and SQLite as the database, following a microservice architecture",https://github.com/LeahDeshar/FastAPI-Ecommerce,21,0,0,0,0,1,8,5,5.0,0,0,0,0,0,6.375,28.09285097471215,0.6277173913043479,93.54337449001102
741038465,freiberg-roman,torch-starter,A torch started template build on Clean Architecture principles.,https://github.com/freiberg-roman/torch-starter,25,0,0,0,0,0,22,5,2.4545454545454546,1,0,1,0,2,3.727272727272727,9.99675870219708,0.5006887052341598,22.500083395115222
849083832,KarilynXu,DMixNet,DMixNet: A dendritic multi-layered perceptron architecture for image recognition,https://github.com/KarilynXu/DMixNet,113,1,1,0,1,1,9,5,7.222222222222222,0,0,0,0,0,37.66666666666666,488.4246615856091,5.3859610371707145,4239.647786558927
771985562,akiltipu,microservice-eks-tf,Deployment of a microservices architecture on Amazon Elastic Kubernetes Service (EKS) using Docker for containerization and Terraform for provisioning AWS resources. A complete workflow for deploying microservices on a highly scalable Kubernetes cluster using modern DevOps tools.,https://github.com/akiltipu/microservice-eks-tf,4945,0,0,5,0,1,11,6,6.181818181818182,0,1,0,0,1,24.90909090909091,32.19954427146147,1.0795454545454546,105.228810734727
840179528,Ankan-Das,SHOPSTAR,SHOPSTAR - Sopping app with Microservice architecture (Dockerized),https://github.com/Ankan-Das/SHOPSTAR,6,0,0,0,0,1,6,5,2.6666666666666665,1,1,0,0,2,3.6666666666666665,7.770677086338151,0.4166666666666667,10.148120837419883
407731841,Marco-25,implementation-clean-architecture,,https://github.com/Marco-25/implementation-clean-architecture,52,0,0,0,0,1,79,5,1.7848101265822784,1,1,1,1,4,5.139240506329114,29.500473162791053,0.4548304016658447,47.81161679604156
64299249,quikmile,trellio,Python3 asyncio based microframework for microservice architecture ,https://github.com/quikmile/trellio,608,19,19,1,0,5,43,5,3.395348837209302,0,0,0,0,0,14.0,66.34019626389235,0.9130434695272563,294.92819085805263
325113855,ansromanov,m8s-poc,Proof-of-concept for multi-language microservices architecture,https://github.com/ansromanov/m8s-poc,44,1,1,0,0,1,7,5,3.857142857142857,0,1,1,0,2,3.571428571428572,22.45105170297489,0.8831168831168831,34.96388017485043
913915247,Iqra2003,Three-Tier-Project,"This repository contains the implementation of a Three-Tier Architecture project. The project is divided into three distinct layers, each handling a specific responsibility to ensure modularity, scalability, and maintainability.",https://github.com/Iqra2003/Three-Tier-Project,7,0,0,0,0,0,3,5,1.0,0,0,0,0,0,4.0,10.339850002884624,0.2666666666666666,8.2718800023077
735675025,sana-ullah305,cloud-pos,How to Build a Rich Domain Model With Domain-Driven Design,https://github.com/sana-ullah305/cloud-pos,35,0,0,0,0,1,13,5,1.1538461538461535,1,1,0,1,3,9.461538461538462,19.57353227349604,0.8205128205128206,26.603265076097102
899696069,ANRazvan,Airplanes,"Python airplane game, implemented using layered architecture and PyGame.",https://github.com/ANRazvan/Airplanes,8,0,0,0,0,1,5,5,2.8,0,0,0,0,0,39.8,1549.434787264108,5.943795662100457,17162.527577691028
926346981,MARINE-AI,MARINE,Distributed microservice architecture to detect pirated content,https://github.com/MARINE-AI/MARINE,13228,1,1,3,1,1,22,5,5.090909090909091,1,1,1,0,3,12.318181818181818,68.54037116308292,1.284745528305366,338.52284928282705
791903066,buttafraz22,django-mini-services,A service oriented architecture for Enterprise App Development Microservices Development.,https://github.com/buttafraz22/django-mini-services,16,0,0,0,0,1,41,5,1.829268292682927,0,0,0,0,0,2.414634146341464,5.910241447154365,0.1829268292682926,12.865250308690037
912125340,lmnindzja,BAML_HW1,Microservice architecture demo ML app,https://github.com/lmnindzja/BAML_HW1,41,0,0,0,0,1,4,5,4.5,0,0,0,0,0,5.0,45.66016389911096,1.9375,188.35997432072728
370278180,THU-KEG,CLEVE,"Source code for ACL 2021 paper ""CLEVE: Contrastive Pre-training for Event Extraction""",https://github.com/THU-KEG/CLEVE,184,84,84,10,0,8,46,7,7.108695652173913,1,0,0,0,1,27.32608695652174,575.618334706756,4.031367038553369,5706.980791492148
898453234,sapiens-technology,SingleLayerHurNetCore,Example of construction of an Artificial Neural Network with the single-layer HurNet architecture for two-dimensional numerical matrices.,https://github.com/sapiens-technology/SingleLayerHurNetCore,318,2,2,1,0,1,1,5,1.0,0,0,0,0,0,0.0,0.0,0.0,0.0
561463316,Glaros-M,PythonCleanArchitecture,,https://github.com/Glaros-M/PythonCleanArchitecture,1,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
749969551,1Mashilo,python_microservice_system_design,"hands-on approach to learning about microservice architectures and distributed systems using Python, Kubernetes, RabbitMQ, MongoDB, postgres and Docker",https://github.com/1Mashilo/python_microservice_system_design,4460,0,0,0,0,1,16,5,3.25,0,0,0,1,1,2.875,9.982488939550356,0.5138888888888888,15.892090783187149
676865425,kipperz,discord-logger,Discord Logger is an open-source bot designed to meticulously track and log server events in Discord,https://github.com/kipperz/discord-logger,110,18,18,3,0,1,21,5,3.1904761904761907,0,0,0,0,0,20.428571428571427,121.60500606076076,1.7984418211587407,446.32415866796754
859561053,jwnwilson,hexagonal_architecture_example,,https://github.com/jwnwilson/hexagonal_architecture_example,30,0,0,0,0,1,9,6,4.0,1,0,1,1,3,3.7777777777777777,4.598981561219173,0.3333333333333333,2.9444708069671868
965580863,monta-20,Clean-Code-Architecture,this repo for what is the most tricks i use to build a clean code and scalable.,https://github.com/monta-20/Clean-Code-Architecture,2,0,0,0,0,1,2,5,0.5,0,0,0,0,0,14.0,0.0,0.0,0.0
687015984,JColamaio,python-microservices,"Microservices Architecture using Python, RabbitMQ, MongoDB,mySQL and Kubernetes",https://github.com/JColamaio/python-microservices,34,0,0,0,0,1,9,5,3.7777777777777777,0,0,0,1,1,3.333333333333333,22.008802982546783,1.060363247863248,56.838648223268365
130984246,diogoff,unlabelled-event-logs,"Source code for the paper ""Discovering Process Models from Unlabelled Event Logs""",https://github.com/diogoff/unlabelled-event-logs,245,3,3,0,1,1,3,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
773660630,Cerebro92,ecommerce-microservices,A scalable e-commerce system built with microservices architecture for high availability and performance.,https://github.com/Cerebro92/ecommerce-microservices,38,0,0,0,0,1,26,5,2.9615384615384617,0,0,0,0,0,7.615384615384615,24.807586345696265,0.5044378698224852,36.87871130867189
853670236,angel-valdezzz,robotframework-project-skeleton,"Una plantilla robusta y escalable para proyectos de automatización, basada en Clean Architecture, Arquitectura Hexagonal, Screaming Architecture y Vertical Slice. Ideal para simplificar y estandarizar los flujos de trabajo de testing automatizado. Licenciada bajo Apache 2.0, libre para usar y modificar.",https://github.com/angel-valdezzz/robotframework-project-skeleton,38,0,0,0,0,1,23,5,2.739130434782609,0,1,0,0,1,6.826086956521739,36.98460242057847,0.7810333963453057,217.6143398786724
776282147,Restoration,python-clean-architecture,,https://github.com/Restoration/python-clean-architecture,7,0,0,0,0,1,8,5,1.625,0,1,1,1,3,3.375,0.0,0.0,0.0
106716915,Avinash-Gatsy,MicroservicesArchitecture,,https://github.com/Avinash-Gatsy/MicroservicesArchitecture,3,0,0,0,0,0,3,5,5.0,0,0,0,0,0,8.666666666666666,145.99610202696218,1.462962962962963,562.3913571857423
969641884,malakalali,BookStoreAPI,"A microservices-based Book API designed to manage a catalog of books. This project leverages MongoDB for data storage, Docker for containerization, and Kubernetes for orchestration, all deployed on Azure. It demonstrates the power of modern cloud technologies and microservice architecture for scalable and maintainable applications.",https://github.com/malakalali/BookStoreAPI,580,1,1,0,0,1,1,5,4.0,0,0,0,0,0,19.0,43.18506523353572,1.0,43.18506523353572
725702905,malachieborohoul,Rent-Clean-Architecture,Example Of A Clean Architecture in Python,https://github.com/malachieborohoul/Rent-Clean-Architecture,110,0,0,0,0,1,29,5,1.9310344827586208,1,1,1,0,3,2.411764705882353,2.1605327031294443,0.2352941176470588,1.76318637947277
468761002,mallmanndev,python-clean-architecture,A Python Clean Architecture,https://github.com/mallmanndev/python-clean-architecture,3,0,0,0,0,1,4,5,2.25,1,1,0,1,3,4.5,0.0,0.0,0.0
834861791,P-marashi,Woody-shop,My first project with clean architecture,https://github.com/P-marashi/Woody-shop,29,0,0,0,0,1,38,5,1.736842105263158,1,1,1,1,4,2.3684210526315788,0.8472692388372258,0.0789473684210526,0.4236346194186129
616196582,erickod,py_clean_arch,"An example of the Uncle Bob's Clean Architecture implementing to FastAPI, Django and Flask",https://github.com/erickod/py_clean_arch,35,1,1,0,0,1,24,5,2.458333333333333,0,1,1,1,3,2.333333333333333,2.42932343849159,0.1666666666666666,2.7265039073768063
899428660,xquery-go,SGB-backend,This repository contains a web application project based on microservice architecture.,https://github.com/xquery-go/SGB-backend,4879,0,0,0,0,1,146,5,1.9383561643835616,1,0,0,0,1,1.910958904109589,1.679472204930785,0.107428245270711,2.014161261915794
662451624,raminhaghjou,Clean-Architecture-RestAPI-Flask,REST API development using Flask Framework (Python) while managing dependencies using Clean Architecture,https://github.com/raminhaghjou/Clean-Architecture-RestAPI-Flask,67,0,0,0,0,2,58,5,1.862068965517241,1,1,0,1,3,2.7586206896551726,3.5454033747452174,0.1871921182266009,5.269864833329754
953318509,bilal1604,REST-API-Flask-Clean-Architecture-Auth,,https://github.com/bilal1604/REST-API-Flask-Clean-Architecture-Auth,4,0,0,0,0,1,9,5,2.6666666666666665,0,1,0,0,1,8.222222222222221,16.84915925941237,0.6666666666666666,19.08347723386356
819591036,backchristoffer,GH-Contribution-Counter,Lists github contributions to open source projects. lists repos and the contribution event,https://github.com/backchristoffer/GH-Contribution-Counter,8,0,0,0,0,1,1,5,4.0,0,0,0,0,0,0.0,108.04820237218406,2.6666666666666665,288.12853965915747
336342827,Rydra,simple-cqrs,A small library to create CQRS and event-driven architectures in python,https://github.com/Rydra/simple-cqrs,24,0,0,0,0,2,21,5,2.333333333333333,0,0,0,0,0,6.714285714285714,17.533258485088833,0.3095238095238095,21.14443832022945
773261487,EthanLiang99,EvLight,"The source code for ""Towards Robust Event-guided Low-Light Image Enhancement: A Large-Scale Real-World Event-Image Dataset and Novel Approach"" (CVPR24 Oral)",https://github.com/EthanLiang99/EvLight,57,73,73,4,3,2,14,5,5.071428571428571,1,0,0,0,1,20.714285714285715,357.30173409167713,4.411918129175189,3202.2352981542545
244519546,GArmane,python-fastapi-hex-todo,TODO aplication made with Python's FastAPI framework and Hexagonal Architecture,https://github.com/GArmane/python-fastapi-hex-todo,412,153,153,27,0,5,99,6,2.686868686868687,1,1,1,1,4,4.242424242424242,14.204817562627223,0.1954874560137718,22.47087941202823
20814210,guilhermef,tornado-eventsource,A simple event source handler for Tornado,https://github.com/guilhermef/tornado-eventsource,36,9,9,6,0,4,7,5,4.714285714285714,0,0,0,0,0,14.571428571428571,58.373378017132346,1.1607142857142858,246.71031588684895
915706249,andreyfesunov,event-sourcing-poc,Proof-of-Concept of Event Sourcing pattern implemented in Pythoin with the development of edge cases ,https://github.com/andreyfesunov/event-sourcing-poc,3,0,0,0,0,1,1,5,1.0,0,0,0,0,0,0.0,0.0,0.0,0.0
126703930,chirag16,vjti-tpo-app,A simple application for VJTI TPO to demonstrate the use of microservice architecture,https://github.com/chirag16/vjti-tpo-app,78,1,1,0,0,0,3,5,2.0,0,1,0,0,1,9.666666666666666,62.42537281849307,0.6666666666666666,49.714884999952
404778807,cabellohuaranga,AMicroservicesv1,Architecture of microservices v1,https://github.com/cabellohuaranga/AMicroservicesv1,28,0,0,0,0,1,14,5,1.6428571428571428,0,0,0,0,0,1.0,0.3396348215831049,0.0357142857142857,0.1698174107915524
858494366,JorkDev,hexagonal_cqrs_backend,"Este proyecto es una implementación de un backend basado en la arquitectura hexagonal y utilizando el patrón de CQRS (Command Query Responsibility Segregation). La aplicación permite la gestión de usuarios, incluyendo funcionalidades de registro y consulta de información de usuario.",https://github.com/JorkDev/hexagonal_cqrs_backend,25,0,0,0,0,1,9,5,3.555555555555556,1,1,0,1,3,4.333333333333333,7.033921590647354,0.2777777777777778,9.856810798208302
450773166,pycub,docuemnt-management,Simple Automobile File Management project based on Microservice architecture implemented on Python.,https://github.com/pycub/docuemnt-management,9,0,0,0,0,1,11,5,0.8181818181818182,0,0,0,0,0,0.3636363636363636,0.0,0.0,0.0
336354205,manos-fr,News_Weather_Services_Python_Docker,"Project for Master degree. The architecture of python microservices using Docker. Client -> Nginx -> mainApi -> microservices.. The  respective service accepts the request, communicates with the database and returns the result to the main api and then to the client. ",https://github.com/manos-fr/News_Weather_Services_Python_Docker,1810,8,8,1,0,1,4,5,5.25,0,0,0,0,0,4.25,75.09151438355228,1.6944444444444444,149.68325475536182
866690535,jeissonp,todo-list-clean-architecture-django,,https://github.com/jeissonp/todo-list-clean-architecture-django,8,0,0,0,0,1,26,5,1.4230769230769231,1,1,1,1,4,2.5384615384615383,2.993777519301567,0.2115384615384615,3.237617904027899
201662187,lugatuic,LUGMemServices-Account-Creation,As part our switch to a microservice architecture we will be creating several new applications to handle events and member accounts,https://github.com/lugatuic/LUGMemServices-Account-Creation,25,0,0,1,1,13,3,5,3.333333333333333,0,0,0,0,0,3.6666666666666665,1.5849625007211563,0.1666666666666666,0.7924812503605781
976299415,joaodev,clean-architecture-py,,https://github.com/joaodev/clean-architecture-py,21,0,0,0,0,1,23,5,1.0434782608695652,1,1,1,1,4,2.391304347826087,9.59956909989224,0.120958751393534,14.781424770791244
922602667,Artems2712,microservices-architecture,,https://github.com/Artems2712/microservices-architecture,7,0,0,0,0,1,5,5,5.0,0,0,0,0,0,4.4,4.688268714730222,0.3,2.344134357365111
201652717,ANNASBlackHat,gRPC-OnlineShop-Microservice,"Online Shop API with microservice architecture, using grpc as a communication between services",https://github.com/ANNASBlackHat/gRPC-OnlineShop-Microservice,231,1,1,0,2,1,3,5,5.666666666666667,0,1,0,0,1,12.333333333333334,27.43458750793272,1.0555555555555556,44.139350012500046
625426281,jeromeandrewong,gobook-backend,"Course booking application using microservice architecture where users can book, review and get recommended courses",https://github.com/jeromeandrewong/gobook-backend,10291,0,0,0,0,1,13,7,6.153846153846154,0,0,1,0,1,7.384615384615385,83.89030572141179,1.8353937728937733,234.8571173066721
951773507,Mr-Infect,API-templates,"This repository is a collection of highly optimized API templates designed to help developers quickly build efficient, scalable, and secure APIs for various purposes. Whether you're building a simple CRUD application, an authentication system, or a complex microservice architecture, you'll find reusable templates that follow industry best practices",https://github.com/Mr-Infect/API-templates,18,1,1,0,0,1,26,5,3.1153846153846154,0,1,1,0,2,2.6923076923076925,8.139437178704735,0.3205128205128205,7.597473830446939
816646111,MartIden,clean-architecture-lms,,https://github.com/MartIden/clean-architecture-lms,299,0,0,0,0,1,325,7,3.732307692307692,1,1,1,1,4,3.830769230769231,5.091417618508579,0.1759827224057993,8.430183359557539
847269454,LithiraAponsu2,Blog-app-Microservice,"Blog APP in Microservice Architecture. Tech Stack: Python, Flask, HTML, CSS, JS, Docker, Kubernetes (Minikube), Jenkins",https://github.com/LithiraAponsu2/Blog-app-Microservice,32,1,1,0,0,1,2,5,3.0,0,0,0,0,0,2.5,4.754887502163469,0.5,2.3774437510817346
371886166,yansfil,python-clean-architecture,파이썬으로 구현한 클린 아키텍처 프로젝트,https://github.com/yansfil/python-clean-architecture,45,16,16,1,0,2,25,5,3.24,0,1,0,1,2,7.0,9.491892636172622,0.185,6.743690693194485
717973526,Damir44400,be-analytic-ai,Backend of an Analytical AI FastAPI application following Clean Architecture principles,https://github.com/Damir44400/be-analytic-ai,562,0,0,0,0,1,95,5,2.747368421052632,1,1,1,1,4,3.336842105263158,2.097618363274143,0.0907894736842105,1.7560274604255717
43990524,beck,clean-py-app,Playing around with what a simple python app looks like with a clean architecture and plugins.,https://github.com/beck/clean-py-app,136,1,1,0,1,1,6,5,0.8333333333333334,0,0,0,0,0,0.5,0.0,0.0,0.0
877864510,magistraapta,fastapi-layered-architecture,,https://github.com/magistraapta/fastapi-layered-architecture,78,0,0,0,0,1,12,5,2.5,1,1,1,1,4,2.6666666666666665,3.105516191543204,0.0833333333333333,1.5527580957716018
934177754,RakeshNKundar,cqrs-workshop,,https://github.com/RakeshNKundar/cqrs-workshop,3634,1,1,1,0,1,10,5,5.9,0,0,0,0,0,20.4,128.75913300656012,2.687112010796221,585.6671171144656
946716944,FarbodRezabakhsh,bookstore-ddd,"A scalable Bookstore API built with FastAPI using Domain-Driven Design (DDD). It integrates PostgreSQL, MongoDB, RabbitMQ, and Redis for efficient data management, messaging, and caching. Designed for clean architecture and high performance.",https://github.com/FarbodRezabakhsh/bookstore-ddd,145,0,0,0,0,1,92,5,3.0869565217391304,1,0,0,1,2,4.608695652173913,13.656809873310296,0.5224702380952381,39.921789289466666
943875461,ceydayaparr,Object-Oriented-Analysis-And-Desing-Project,A domain-driven design implementation of a university course registration system. This project demonstrates clean architecture principles with a focus on business rules and transactional integrity.,https://github.com/ceydayaparr/Object-Oriented-Analysis-And-Desing-Project,755,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
618107301,franciscocezar,clean-architecture,,https://github.com/franciscocezar/clean-architecture,113,0,0,0,0,1,78,5,2.3974358974358974,1,1,1,1,4,5.730769230769231,33.293084227972244,0.5267863190940114,56.69942951018824
317305641,hedrox,micromath,"Microservice architecture for 3 math operations: exponentiation, fibonacci and factorial",https://github.com/hedrox/micromath,67,0,0,0,0,1,16,5,3.375,0,0,0,0,0,11.0,111.86605367872453,0.9374057315233786,205.23835728564725
291487097,timozerrer,saga-pattern-airflow,Applying the saga design pattern for solving transactions in microservice architectures using Apache Airflow,https://github.com/timozerrer/saga-pattern-airflow,106,3,3,3,0,1,3,5,7.0,0,0,1,0,1,4.666666666666667,116.40859087979628,0.8717948717948718,184.50896122729296
605262240,JeromeLM,first_hexagonal_architecture_attempt,"Project I will use to try to implement an hexagonal architecture in backend, in Python, for the first time.",https://github.com/JeromeLM/first_hexagonal_architecture_attempt,62,0,0,0,0,1,31,5,4.161290322580645,1,1,0,1,3,6.774193548387097,6.421128896430953,0.2688172043010753,9.772822142638098
622641420,deepankarvarma,Fire-Detection--OpenCV-Keras-TensorFlow,"This repository contains Python code for generating a fire detection model and utilizing it to detect fire from user-uploaded images. The model architecture consists of convolutional and pooling layers, followed by fully connected layers. The repository includes scripts for training the model and predicting fire from uploaded images.",https://github.com/deepankarvarma/Fire-Detection--OpenCV-Keras-TensorFlow,5698,1,1,0,0,2,3,5,5.0,0,0,0,0,0,1.3333333333333333,68.94612334802154,2.566666666666667,237.0878517995029
953196596,serafaleo,CSharp2DartModels,"Python script to generate Dart models and DTOs from C#, based on feature-first Clean Architecture.",https://github.com/serafaleo/CSharp2DartModels,0,0,0,0,0,1,1,5,2.0,0,0,0,0,0,8.0,13.931568569324174,0.5,6.965784284662087
975551290,hugocruzlfc,fastapi-clean-architecture-project,,https://github.com/hugocruzlfc/fastapi-clean-architecture-project,16,0,0,0,0,1,30,5,4.2,1,0,0,0,1,6.4,30.46530978836324,0.6826012876012876,71.20691362422029
853858829,edicleoline,helloworld-core,A library to accelerate development by implementing Clean Architecture and Microservices.,https://github.com/edicleoline/helloworld-core,60,1,1,0,0,1,56,5,3.5357142857142856,1,1,0,1,3,7.017857142857143,32.17674054203675,0.763099859509021,159.21763992008442
607888351,dunderJB,community-together,Simple project to learning about python and clean architecture,https://github.com/dunderJB/community-together,30,0,0,0,0,1,36,7,2.0277777777777777,1,1,1,1,4,2.111111111111111,5.448895324921767,0.0972222222222222,2.7244476624608835
783280366,JhonatasMenezes,ETL_pipeline,Processo de ETLem Python utilizando conceitos de Clean Architecture.,https://github.com/JhonatasMenezes/ETL_pipeline,37,1,1,0,0,1,44,5,1.4772727272727273,0,0,1,1,2,2.5681818181818183,4.609104020254553,0.2077922077922077,4.883417417636978
935472219,Vanduyn39,LayeredArchitecture,,https://github.com/Vanduyn39/LayeredArchitecture,9,0,0,0,0,1,7,5,1.0,0,0,0,1,1,6.714285714285714,10.609237500927202,0.336734693877551,9.167561863017566
792046144,aliseylaneh,Python-Eventsourcing-CQRS,An Event Sourcing python microservice using FastAPI and mongo db,https://github.com/aliseylaneh/Python-Eventsourcing-CQRS,283,6,6,0,0,2,50,5,1.74,1,1,1,1,4,3.74,5.603635924628959,0.1284210526315789,15.045462723463814
866258037,RAAHUL-tech,Discussion_Forum_Backend,Backend microservices architecture for discussion forum using Flask.,https://github.com/RAAHUL-tech/Discussion_Forum_Backend,13,0,0,0,0,1,12,5,2.4166666666666665,0,0,0,0,0,3.4166666666666665,7.326116916519581,0.5416666666666666,6.731755978749145
917559461,aki2025,Zero-Trust-Authentication-System-Design-,"The system implements a modern zero-trust architecture using AI/ML for continuous authentication and threat detection. It follows the principle of ""never trust, always verify"" with multiple layers of security.",https://github.com/aki2025/Zero-Trust-Authentication-System-Design-,18,1,1,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
584137011,alitdev,cqrs-logic,cqrs-logic,https://github.com/alitdev/cqrs-logic,3,0,0,0,0,2,5,5,2.2,0,0,0,0,0,2.8,5.639246215162917,0.4,2.8196231075814584
918025853,ahwlsqja,fastapi_clean_architecture,,https://github.com/ahwlsqja/fastapi_clean_architecture,58,0,0,0,0,1,56,5,2.732142857142857,1,1,1,1,4,3.125,10.758997822305084,0.3375686813186813,30.131443227564965
584131379,abanand132,PYTHON-PROJECT-Synapse,About Synapse is a month-long challenge. It happens every year in the month of January. Synapse is open to everyone and it marks the celebration of Open Source. It's the first Open Source event of AOT that encourages newbies to participate in Open Source and create their 1st meaningful PR.,https://github.com/abanand132/PYTHON-PROJECT-Synapse,5345,0,0,4,0,0,14,5,4.214285714285714,0,0,0,0,0,11.642857142857142,192.09171802133005,2.301487012204686,585.2745715014026
948795707,Spartan-125,Back-Fastapi,This project implements a REST API with FastAPI following the principles of the hexagonal architecture (ports and adapters) and the repository pattern. It includes JWT authentication and PostgreSQL connection.,https://github.com/Spartan-125/Back-Fastapi,86,0,0,0,0,1,43,5,2.9302325581395348,1,1,1,1,4,5.3023255813953485,27.70215541566972,0.5092916988265827,59.124656862277945
312032409,sidneyarcidiacono,week-5-event-app,Source (completed) code for FDIS Rookie group Week 5: Focusing on authentication with Flask-Login,https://github.com/sidneyarcidiacono/week-5-event-app,9408,0,0,0,0,1,8,5,3.0,0,0,0,0,0,5.375,16.855711219507555,0.421875,37.80346062969132
96021583,goagile,ddd,Domain Driven Design examples (python),https://github.com/goagile/ddd,262,0,0,0,3,1,260,5,1.0692307692307692,1,1,0,0,2,8.611538461538462,9.898900360452249,0.4421985813331967,21.28049420313233
681452013,Greguru0,ChronoSort,A PowerShell script for file organization. Arrange files from a source directory into a destination folder based on their creation date. Handle duplicates using MD5 hashing comparison. Destined filenames will follow ISO 8601 format with unique identifiers in the event of duplicate names.,https://github.com/Greguru0/ChronoSort,133,1,1,0,0,1,1,5,12.0,0,0,0,0,0,90.0,787.2388666938919,6.938461538461539,5462.226598137619
825629353,zarifaziz,domain-driven-design-demo,,https://github.com/zarifaziz/domain-driven-design-demo,261,0,0,0,0,2,12,5,2.083333333333333,1,1,0,0,2,4.25,3.062907291846956,0.25,2.7814536459234778
296521080,Reetodeep,Detecting-Respiratory-Diseases-from-Recorded-Lung-Sounds-by-2D-CNN,"Respiratory disease is among the leading causes of deaths around the world. A large amount of population is being affected regularly with some kinds of lung function disorders which eventually lead to respiratory diseases. Prevention and early detection are essential steps in managing respiratory diseases. To decrease the fatality, an efficient detection model is needed. In this paper, 2D convolutional neural network (CNN) is used to detect respiratory diseases from the recorded lung sounds at early stages. The proposed method can detect respiratory diseases like bronchiectasis, pneumonia, bronchiolitis, chronic obstructive pulmonary disease, upper respiratory tract infection, and healthy by using Mel-frequency cepstral co-efficients (MFCC). In the proposed scheme, a data frame is recorded and after extracting the statistical features from the audio clips, the data is loaded in the data frame where further classification is done using 2D CNN. The model is based on 2D CNN architecture where the number of layers is reduced to a certain extent to achieve more accuracy. The proposed model has only 13 CNN layers where each convolution layer is being associated with a pooling layer of max-pooling 2D type. The final convolution layer has a global-average pooling 2D layer. The proposed method obtained an accuracy of over 92.39%.",https://github.com/Reetodeep/Detecting-Respiratory-Diseases-from-Recorded-Lung-Sounds-by-2D-CNN,153,12,12,1,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
886098455,kkarthik3,CNN-Visualizer,This app Used to Visualize the How CNN architecture works on different Layers,https://github.com/kkarthik3/CNN-Visualizer,1350,0,0,0,0,1,1,5,7.0,0,0,0,0,0,10.0,183.39850002884629,3.289473684210526,603.2845395685732
941188371,panjidwisatrio,fastapi-clean-architecture,"A modern, scalable web application template built with FastAPI following clean architecture principles.",https://github.com/panjidwisatrio/fastapi-clean-architecture,20,0,0,0,9,1,26,5,5.153846153846154,1,1,1,1,4,7.115384615384615,20.375155126915278,0.5426069782404623,37.6543776887299
753994602,samratsiddhi,LibraryManagement,Follows microservice architecture,https://github.com/samratsiddhi/LibraryManagement,37,0,0,0,2,1,50,5,2.02,0,0,0,0,0,1.22,1.891759500778849,0.1528571428571428,2.598187018793616
622278580,minyaho,DASCPL,"Improved the architecture of SCPL, which enables dynamic layer accumulation, forward shortcuts, and early exits. This new architecture is called Dynamic Accumulated Supervised Contrastive Parallel Learning (DASCPL). Based on these two features, DASCPL offers higher flexibility and adaptability compared to SCPL.",https://github.com/minyaho/DASCPL,224,0,0,1,0,1,27,5,6.25925925925926,0,0,0,0,0,75.0,1272.7701823154655,7.0323169554928935,18850.294713782387
942224757,gastonoterom,Satoshi-Spark,Satoshi Spark: Crowdfunding With Bitcoin Lightning,https://github.com/gastonoterom/Satoshi-Spark,244,6,6,0,0,1,88,5,2.5795454545454546,0,0,0,1,1,4.306818181818182,6.693467371789087,0.2869318181818182,16.146939366319767
448384649,lorenz-lukas,productsCatalogApi,"Api using Django, Flask, RabbitMQ and Reactjs with microservices architecture. Deploy with docker, docker-compose and K8s.",https://github.com/lorenz-lukas/productsCatalogApi,14,1,1,0,0,1,13,5,1.1538461538461535,0,0,0,0,0,0.3846153846153846,0.3657605770894976,0.0384615384615384,0.1828802885447488
771769396,Toluwalope,lambda-hexagonal-architecture-sample,,https://github.com/Toluwalope/lambda-hexagonal-architecture-sample,94,0,0,0,0,1,48,5,2.5625,1,0,1,1,3,3.5416666666666665,1.6360595167710177,0.0868055555555555,1.4041359489950758
302306470,Silvian,nameko-microservices,A demo building microservices using Nameko python framework for building event driven microservice architecture.,https://github.com/Silvian/nameko-microservices,10,1,1,0,0,0,8,5,2.125,0,1,1,0,2,4.0,14.480477249038987,0.71875,55.449828696268746
528330304,honghuynhit,fastapi-layered-architecture,,https://github.com/honghuynhit/fastapi-layered-architecture,10,0,0,0,0,1,50,5,2.54,1,0,1,0,2,3.04,2.513263250706734,0.1733333333333333,2.3657143756850987
208799076,kamwoh,DeepIPR,"[NeurIPS 2019] This is the code repo of our novel passport-based DNN ownership verification schemes, i.e. we embed passport layer into various deep learning architectures (e.g. AlexNet, ResNet) for Intellectual Property Right (IPR) protection.",https://github.com/kamwoh/DeepIPR,10629,81,81,18,0,1,29,5,7.275862068965517,1,0,0,0,1,31.517241379310345,562.9335301605636,5.228235646932905,4357.809499738975
639519572,ridwanray,django-microservice-product-app,Product service for a microservice architecture ,https://github.com/ridwanray/django-microservice-product-app,111,4,4,3,0,2,29,5,2.4827586206896552,1,0,0,0,1,2.862068965517241,10.56478732907852,0.3055555555555555,12.081526263332908
498905413,yzhan238,EvMine,"The source code used for paper ""Unsupervised Key Event Detection from Massive Text Corpora"", published in KDD 2022.",https://github.com/yzhan238/EvMine,20,22,22,0,2,5,9,5,10.333333333333334,0,0,0,0,0,38.77777777777778,781.876730047539,5.92659639965495,7389.808034681002
599800642,gpreviatti,store_python_clean_arch,Simple application using clean architecture and python,https://github.com/gpreviatti/store_python_clean_arch,16,0,0,0,0,1,7,5,0.8571428571428571,1,1,0,1,3,4.857142857142857,10.577014288186822,0.3999999999999999,15.83639143203298
908639767,JHoo0118,agent-server,Agent Server with Hexagonal Architecture,https://github.com/JHoo0118/agent-server,151,0,0,0,0,1,106,7,2.5660377358490565,1,1,0,1,3,2.349056603773585,3.635244916206711,0.1018867924528302,3.966841016254244
894240030,wallalves,ISMANES,INTEGRATED SERVICE-MICROSERVICE ARCHITECTURE FOR NETWORK EMBEDDED SYSTEMS,https://github.com/wallalves/ISMANES,54,0,0,0,0,1,21,5,1.761904761904762,0,0,0,0,0,7.619047619047619,28.47933481104512,0.9890977443609024,57.879543737475615
151880525,jinningli,dancinglines,"Source Code of ""DANCINGLINES: An Analytical Scheme to Depict Cross-Platform Event Popularity""",https://github.com/jinningli/dancinglines,30,1,1,0,0,0,12,5,0.8333333333333334,0,0,0,0,0,5.5,504.6373778683501,1.5241627929137251,3395.719301988223
74352912,nandoflorestan,kerno,"Framework for a Python application service layer, approximating Uncle Bob Martin's Clean Architecture.",https://github.com/nandoflorestan/kerno,239,52,52,4,0,2,35,5,3.857142857142857,0,0,0,0,0,18.285714285714285,72.81897102806404,1.2180431196868993,172.33711625043662
71019728,marioidival,todclean,Todo app based on clean architecture,https://github.com/marioidival/todclean,21,0,0,0,0,2,29,5,2.1379310344827585,1,1,1,1,4,3.5172413793103448,2.7341315519177734,0.1379310344827586,5.408676736933216
924782584,lcsvinhas,sistema-de-gestao-de-cursos,Sistema de gestão de cursos implementado com Domain-Driven Design (DDD).,https://github.com/lcsvinhas/sistema-de-gestao-de-cursos,7,1,1,0,0,1,4,5,3.5,1,0,0,0,1,8.0,23.044142417285443,0.6634615384615384,47.01225337834519
578180881,AshiishKarhade,Microservices-with-Kubernetes-and-Python,Microservice architecture to convert video to audio using Kubernetes and Python,https://github.com/AshiishKarhade/Microservices-with-Kubernetes-and-Python,10221,1,1,0,0,1,14,5,3.071428571428572,0,0,0,1,1,2.7142857142857144,15.138974074573635,0.7148962148962149,38.38830272659734
323366632,SakigamiYang,clean-architecture,A demo for clean-architecture that implemented by Python.,https://github.com/SakigamiYang/clean-architecture,118,0,0,0,0,1,16,5,1.5625,1,1,1,0,3,4.625,5.3057937133958655,0.265625,16.082833279102218
426318577,Mendes11,event-sourcing-study,Study of Events Sourcing utilizing Kafka,https://github.com/Mendes11/event-sourcing-study,13,0,0,0,0,1,17,5,3.588235294117647,1,0,1,0,2,6.235294117647059,17.176813726634617,0.7126050420168067,68.57466350168535
891164213,zyc,python_clean_arch,Projeto para aplicar os conceitos de Clean Architecture com Python,https://github.com/zyc/python_clean_arch,16,0,0,0,0,1,23,5,1.0,1,1,0,1,3,2.0434782608695654,3.745305611803204,0.1521739130434782,4.267044742237987
891958462,Akhil-Anupoju,Django_MicroServices_with_LLM,Built a powerful Python microservice from scratch. Created microservice architecture using Python Django and FastAPI also Integrated a large language model (LLM model) to create a really cool GitHub PR request checker project. ,https://github.com/Akhil-Anupoju/Django_MicroServices_with_LLM,90,0,0,0,0,1,26,5,2.1538461538461537,0,0,0,0,0,1.2692307692307692,4.461481017424317,0.1846153846153846,4.115038184922165
726430449,Maen22,CoffeeCorner,☕ Exploring microservices architecture through a coffee ordering platform 🚀,https://github.com/Maen22/CoffeeCorner,5,1,1,0,0,1,3,5,6.0,0,0,1,0,1,12.666666666666666,67.39111855469645,1.5666666666666669,277.17833667705685
656915092,davidjnevin,rent-o-matic_clean_architecture,Clean Architecture search app in python,https://github.com/davidjnevin/rent-o-matic_clean_architecture,43,0,0,0,0,1,58,5,1.7241379310344829,1,1,1,0,3,4.913793103448276,27.628110052208125,0.4758822511821012,36.64040362936447
475037847,GavriloviciEduard,fastapi-microservices,"Microservices Architecture with FastAPI, Docker and Nginx",https://github.com/GavriloviciEduard/fastapi-microservices,55,34,34,11,1,1,21,5,2.380952380952381,1,0,1,0,2,2.571428571428572,2.0287863099702395,0.0714285714285714,1.0143931549851195
419571377,zimo1412,event-recommendation-project,Data source: Kaggle,https://github.com/zimo1412/event-recommendation-project,21,1,1,0,0,1,10,5,0.1,0,0,0,0,0,0.8,12.737720526058409,0.475,60.50417249877743
142149317,sonnguyent1,clean_architecture,,https://github.com/sonnguyent1/clean_architecture,30,0,0,0,0,1,40,5,1.3,1,1,1,1,4,5.075,28.59354911686348,0.34625,31.1862002534028
344118672,Shchusia,orchestrator,orchestrator  for microservice architecture ,https://github.com/Shchusia/orchestrator,158,1,1,0,0,1,42,5,3.1904761904761907,0,0,0,0,0,14.214285714285714,31.56704420330989,0.442953342953343,92.1085429675362
811744276,KristianKjerstad,django-rest-api-template,"Template for a production ready django REST API, using clean architecture",https://github.com/KristianKjerstad/django-rest-api-template,103,0,0,0,0,1,20,5,2.1,0,0,0,0,0,2.55,4.933393219760545,0.375,6.484370720193239
850766394,tapokVozmezdia,Alloy,"server application + REST API, microservice architecture",https://github.com/tapokVozmezdia/Alloy,12,0,0,0,0,1,5,5,3.0,0,0,0,0,0,11.0,43.28954786346517,1.525,106.3319135048876
776218632,aws-samples,s3xz-caching-solution,Reference Architecture to automate the use of S3 Express One Zone as a caching layer for S3 Regional Buckets.,https://github.com/aws-samples/s3xz-caching-solution,472,12,12,2,0,1,9,5,4.666666666666667,0,0,0,0,0,6.111111111111111,76.25952804215055,1.651461510530138,284.3240482904414
243737417,jagoPG,py-ddd,A simple example of how to implement DDD under a hexagonal architecture.,https://github.com/jagoPG/py-ddd,48,11,11,2,1,1,25,5,1.6,1,1,0,1,3,12.2,13.3564450182151,0.52,26.1590001199982
566411600,sugar42,Systems-Design,Repo to learn along a freeCodeCamp.org tutorial how a microservice architecture is designed. ,https://github.com/sugar42/Systems-Design,4742,0,0,0,0,1,651,12,7.28110599078341,1,0,1,0,2,50.51729438893159,672.7455868344949,3.980910149303869,7098.678345724584
937226947,Luferov,fast-clean,FastAPI clean architecture implementation ,https://github.com/Luferov/fast-clean,253,5,5,4,0,2,96,5,5.114583333333333,0,1,0,1,2,12.229166666666666,57.91335533756674,1.129311358119166,254.87337048405936
941138653,Jacob1384,Health_Monitor,"The Health Monitoring System is a Big Data project designed to oversee the health of microservices within a distributed architecture. It employs the Lambda architecture, integrating batch and real-time processing to monitor system resources such as CPU usage, RAM, and disk space",https://github.com/Jacob1384/Health_Monitor,658,0,0,0,0,1,9,5,2.888888888888889,0,0,0,0,0,16.444444444444443,911.8090074873688,4.103490425387588,7462.573929219047
498706227,jorgemorgado,event_queue,"Collect events from different sources and process them in sequence using the ""q"" language",https://github.com/jorgemorgado/event_queue,644,0,0,0,0,2,21,5,2.0,0,0,0,0,0,11.38095238095238,111.31742037245856,1.4283909245209554,449.7987216265021
778763202,Luferov,fastapi-boilerplate,FastAPI Clean Architecture boilerplate,https://github.com/Luferov/fastapi-boilerplate,304,28,28,11,0,2,64,5,3.484375,1,1,0,1,3,5.109375,16.10833367226777,0.4778226114163614,37.9935683310794
29524384,weso,a4aiDom,A4AI domain model using DDD and Hexagonal Architecture,https://github.com/weso/a4aiDom,103,1,1,0,1,5,37,5,1.837837837837838,1,1,0,1,3,14.783783783783784,47.5133155261911,0.7875157114127701,223.2122028440904
919105500,benjaminegger,nexus-agents,"A distributed multi-modal agent orchestration framework implementing advanced natural language processing, computer vision, and audio processing capabilities through a microservices architecture.",https://github.com/benjaminegger/nexus-agents,65,78,78,20,0,17,30,5,6.6,0,0,0,0,0,20.966666666666665,103.45158254738789,2.1296678074967548,427.0465221548385
881451685,mikefaceby,project,"In this school project, we implemented a proof of concept for a microservice-based application using data decomposition strategies, creating independent microservices with CRUD functionality, integrating Function-as-a-Service principles, and documenting the trade-offs and practical aspects of microservice architecture.",https://github.com/mikefaceby/project,6433,0,0,0,0,1,11,5,2.1818181818181817,0,1,0,1,2,13.909090909090908,17.871634094449316,0.4090909090909091,17.223240344154295
491806008,fortiss-cce,banking-system,Clean Code - Architecture 3 - Coding Example,https://github.com/fortiss-cce/banking-system,25,0,0,15,3,1,1,5,3.0,0,0,0,0,0,0.0,38.03910001730775,2.0,76.0782000346155
773689433,shaliamekh,clean-architecture-fastapi,"Medium article ""Clean Architecture with Python""",https://github.com/shaliamekh/clean-architecture-fastapi,26,58,58,11,0,1,36,5,2.7222222222222223,1,1,1,1,4,3.2777777777777777,5.942603322655888,0.2191358024691357,6.672914292956128
181091164,NdS-Research-Facilities,QRupdatePassword,small script to export and reimport log source definitions for Microsoft Windows Security Event Log over MSRPC log sources,https://github.com/NdS-Research-Facilities/QRupdatePassword,7,0,0,0,0,1,1,5,0.0,0,0,0,0,0,0.0,0.0,0.0,0.0
710503934,Harshvardhan1609,HacktoberfestSINJGI2023,Hacktoberfest is an annual month-long celebration of open source software. It is a great opportunity to learn how to work with different MNCs right from your home and also get awesome goodies from the Hacktoberfest community. The event will cover the following topics:,https://github.com/Harshvardhan1609/HacktoberfestSINJGI2023,1,0,0,0,0,1,5,5,0.0,0,0,0,0,0,0.4,1.901955000865388,0.2,0.9509775004326938
430239416,MKGAURAB,Event-Sourcing-Python,,https://github.com/MKGAURAB/Event-Sourcing-Python,7,0,0,0,1,1,18,5,2.833333333333333,1,0,0,1,2,5.944444444444445,16.056538820291966,0.2742165242165242,19.098115137136475
10701677,openhatch,oh-osctc-guide,Open Source Comes to Campus: guide for organizing an event,https://github.com/openhatch/oh-osctc-guide,120,0,0,0,0,2,2,5,1.0,0,0,0,0,0,0.0,0.0,0.0,0.0
841630043,ocansey11,bet_tips_validation_web_app,"This web application automates the process of scraping match prediction from various sources, cleaning it, and feeding it into predictive models. These models are trained to analyze patterns and trends, providing users with optimized betting tips for future events. ",https://github.com/ocansey11/bet_tips_validation_web_app,224,0,0,1,0,1,25,5,3.44,0,0,1,0,1,4.16,27.01946222318064,0.5126470588235295,101.23538420477064
592741179,coding-kitties,cookiecutter-flask-simple-clean-architecture,Cookiecutter Flask template for jumpstarting production-ready Flask projects quickly,https://github.com/coding-kitties/cookiecutter-flask-simple-clean-architecture,931,1,1,1,0,0,47,5,2.0,1,1,1,1,4,3.872340425531915,13.045759872306157,0.3323551962475617,46.67221641162372
343474537,luccasPh,clean-python-api,"API em Python usando, TDD, Clean Architecture, Design Patterns e SOLID principle",https://github.com/luccasPh/clean-python-api,473,1,1,0,0,2,213,5,2.507042253521127,1,1,1,1,4,3.9624413145539914,9.447694284719269,0.2113053187923462,9.311264156654255
959012239,Gm-shuvo,fastapi-clean-architecture-template,,https://github.com/Gm-shuvo/fastapi-clean-architecture-template,14,0,0,0,0,1,30,5,4.133333333333334,1,0,0,0,1,6.4,30.46530978836324,0.6826012876012876,71.20691362422029
347595483,runemalm,ddd-for-python,A domain-driven design framework for Python.,https://github.com/runemalm/ddd-for-python,3853,91,91,12,0,6,172,9,1.8430232558139532,1,1,0,1,3,6.982558139534884,22.24309746126618,0.5234142433381793,77.5622115227383
507586084,antonioccdomingues,BIBLIFY--MicroServices-WebApp-using-FastApi-and-Kubernetes,Minimal WebApp with some Services using a MicroServices architecture Deployed in a Kubernetes Cluster,https://github.com/antonioccdomingues/BIBLIFY--MicroServices-WebApp-using-FastApi-and-Kubernetes,5961,1,1,0,0,1,17,9,4.529411764705882,0,0,1,0,1,6.0588235294117645,43.60133176660587,0.3964194373401534,168.93699888449717
962066042,fuadmuhe12,Python_Clean_Architecture,,https://github.com/fuadmuhe12/Python_Clean_Architecture,24,0,0,0,0,1,26,5,4.961538461538462,1,1,1,1,4,8.615384615384615,34.76421614628585,0.6187739463601533,79.29855674455938
961501963,francisbrero,mk-news-copilot,B2B sales intelligence application that aggregates and provides access to relevant news events from various sources,https://github.com/francisbrero/mk-news-copilot,67,0,0,0,0,1,16,5,4.1875,1,0,0,0,1,20.875,186.8965807662684,1.7524313038793105,732.7337864309565
570360688,cjgalvisc96,DDD-CQRS-BDD-Python,,https://github.com/cjgalvisc96/DDD-CQRS-BDD-Python,1045,1,1,0,0,1,77,7,2.844155844155844,1,1,1,1,4,3.25974025974026,6.520090827435626,0.196055796055796,6.810310874072053
814754954,cherowl,adapty_demo,Test for backend position in Adapty. Domain-Driven Design (DDD) components,https://github.com/cherowl/adapty_demo,25,0,0,0,0,1,44,5,1.4090909090909092,1,0,0,1,2,1.1136363636363635,0.3696514206020547,0.0454545454545454,0.1848257103010273
163900100,felipeagarcia,deepConvLSTM,This project implements an architecture of an CNN network as feature extractor followed by LSTM layers to deal with temporal dependencies. ,https://github.com/felipeagarcia/deepConvLSTM,4,4,4,1,2,0,3,5,3.333333333333333,0,0,0,0,0,3.6666666666666665,3.1699250014423126,0.3333333333333333,1.5849625007211563
839622210,Tarunkumar-2005,NeuralNetwork_project,Developing  a neural network model utilizing the MNIST Fashion dataset by employing a sequential Keras model. Include 2 to 3 intermediate hidden layers in the model architecture.,https://github.com/Tarunkumar-2005/NeuralNetwork_project,2,0,0,0,0,1,1,5,7.0,0,0,0,0,0,4.0,38.03910001730775,1.1428571428571428,43.47325716263743
257543499,jalotra,CleanNonSimpleHTR,Implementing Handwriting recognition with tf-1.5.0 and a custom architecture. ,https://github.com/jalotra/CleanNonSimpleHTR,14603,0,0,0,6,1,11,5,6.636363636363637,0,0,0,0,0,16.181818181818183,377.0986124703905,4.301768011861299,2353.6386762945804
903542950,headrobot790,python-clean-architecture-template,Python template for development applications following Uncle Bob's Clean Architecture principles.,https://github.com/headrobot790/python-clean-architecture-template,75,0,0,0,0,0,38,5,1.2105263157894737,1,1,0,1,3,1.236842105263158,1.9306000639132403,0.0394736842105263,0.9653000319566202
